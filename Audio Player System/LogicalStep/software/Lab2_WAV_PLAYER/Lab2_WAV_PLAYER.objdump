
Lab2_WAV_PLAYER.elf:     file format elf32-littlenios2
Lab2_WAV_PLAYER.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001d214 memsz 0x0001d214 flags r-x
    LOAD off    0x0001e234 vaddr 0x0081d234 paddr 0x0081ef80 align 2**12
         filesz 0x00001d4c memsz 0x00001d4c flags rw-
    LOAD off    0x00020ccc vaddr 0x00820ccc paddr 0x00820ccc align 2**12
         filesz 0x00000000 memsz 0x00000eb8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c244  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dac  0081c488  0081c488  0001d488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d4c  0081d234  0081ef80  0001e234  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000eb8  00820ccc  00820ccc  00020ccc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  00821b84  00821b84  0001ff80  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001ff80  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000012b8  00000000  00000000  0001ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003223b  00000000  00000000  00021260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c2bb  00000000  00000000  0005349b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000fddf  00000000  00000000  0005f756  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003840  00000000  00000000  0006f538  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004b5c  00000000  00000000  00072d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018294  00000000  00000000  000778d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0008fb68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019f0  00000000  00000000  0008fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00096093  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00096096  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000960a2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000960a3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000960a4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000960a8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000960ac  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000960b0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000960bb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000960c6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  000960d1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002e  00000000  00000000  000960d4  2**0
                  CONTENTS, READONLY
 29 .jdi          00003c54  00000000  00000000  00096102  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fff9  00000000  00000000  00099d56  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0081c488 l    d  .rodata	00000000 .rodata
0081d234 l    d  .rwdata	00000000 .rwdata
00820ccc l    d  .bss	00000000 .bss
00821b84 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2_WAV_PLAYER_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 fatfs.c
00000000 l    df *ABS*	00000000 fatfs_diskio.c
0081ef24 l     O .rwdata	00000001 Stat
00820ccc l     O .bss	00000001 CardType
00820cce l     O .bss	00000002 Timer1
00820cd0 l     O .bss	00000002 Timer2
00820cd2 l     O .bss	00000001 XMITDummy
00820cd4 l     O .bss	00000004 Control1
008002b4 l     F .text	0000004c SetLowSpeed
00800300 l     F .text	0000006c SetHighSpeed
0080036c l     F .text	00000044 InitDiskIOHardware
008003b0 l     F .text	0000003c Set8BitTransfer
008003ec l     F .text	00000038 Set32BitTransfer
00800424 l     F .text	00000050 ReceiveU8
00800474 l     F .text	0000012c ReceiveDatablock
008005a0 l     F .text	00000188 TransmitDatablock
0080074c l     F .text	00000054 WaitReady
00800728 l     F .text	00000024 GetCDWP
008007a0 l     F .text	00000044 ReleaseBus
008007e4 l     F .text	00000250 SendCMD
00820cd8 l     O .bss	00000004 pvm.1830
00000000 l    df *ABS*	00000000 fatfs_nios2_de0_nano_spi.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_pio.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_spi.c
00000000 l    df *ABS*	00000000 ff.c
00820cdc l     O .bss	00000004 FatFs
00820ce0 l     O .bss	00000002 Fsid
00801548 l     F .text	0000006c mem_cpy
008015b4 l     F .text	00000058 mem_set
0080160c l     F .text	0000008c mem_cmp
00801698 l     F .text	0000007c chk_chr
00801714 l     F .text	0000015c move_window
00801870 l     F .text	0000021c sync
008020ec l     F .text	00000114 remove_chain
00802200 l     F .text	000001e4 create_chain
008023e4 l     F .text	000001ec dir_sdi
008025d0 l     F .text	000002e8 dir_next
008028b8 l     F .text	000000f4 dir_find
008029ac l     F .text	000000fc dir_read
00802aa8 l     F .text	00000120 dir_register
00802bc8 l     F .text	00000098 dir_remove
00802c60 l     F .text	000002ec create_name
0081c4cc l     O .rodata	00000080 excvt.1856
00802f4c l     F .text	00000230 get_fileinfo
0080317c l     F .text	000001d0 follow_path
0080334c l     F .text	00000174 check_fs
008034c0 l     F .text	0000093c chk_mounted
00803dfc l     F .text	00000090 validate
0081c54c l     O .rodata	00000016 vst.2095
0081c562 l     O .rodata	00000016 cst.2096
00000000 l    df *ABS*	00000000 hello_world.c
00820d48 l     O .bss	00000018 alarm
00820ce4 l     O .bss	00000004 Systick
00820ce8 l     O .bss	00000002 Timer
00807ff4 l     F .text	00000068 TimerFunction
00820d00 l     O .bss	00000002 wTimer10ms.3507
0080805c l     F .text	00000050 IoInit
008080ac l     F .text	00000140 scan_files
008081ec l     F .text	000000a4 put_rc
00808290 l     F .text	00000030 display_help
008099f0 l     F .text	000001ac timer_ISR
00809b9c l     F .text	00000054 button_ISR
00809cd0 l     F .text	0000016c TestLCD
0081ef34 l     O .rwdata	00000004 ft.3583
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 uart_nios2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080a864 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080ad28 l     F .text	00000008 __fp_lock
0080ad30 l     F .text	00000008 __fp_unlock
0080ad44 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0081d234 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0080cacc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081ccb6 l     O .rodata	00000010 zeroes.4255
0080ef70 l     F .text	000000bc __sbprintf
0081ccc6 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0080f230 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0081da80 l     O .rwdata	00000020 lc_ctype_charset
0081da60 l     O .rwdata	00000020 lc_message_charset
0081daa0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0081ccf4 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00812db8 l     F .text	000000fc __sprint_r.part.0
0081ce28 l     O .rodata	00000010 blanks.4199
0081ce18 l     O .rodata	00000010 zeroes.4200
008141c0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00817aec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00817c0c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00817c38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00817ee8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00817fdc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008180c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0081829c l     F .text	00000050 alt_get_errno
008182ec l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0081877c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081ef6c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00818b74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00818cbc l     F .text	00000038 alt_dev_reg
0081dc80 l     O .rwdata	00001060 jtag_uart_0
0081ece0 l     O .rwdata	00000120 lcd_display
0081ee00 l     O .rwdata	000000c4 uart
0081eec4 l     O .rwdata	00000030 audio_i2c_config
0081eef4 l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00818ff4 l     F .text	00000208 altera_avalon_jtag_uart_irq
008191fc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081ef78 l     O .rwdata	00000004 colstart
0081981c l     F .text	000000b4 lcd_write_command
008198d0 l     F .text	000000d4 lcd_write_data
008199a4 l     F .text	000000cc lcd_clear_screen
00819a70 l     F .text	000001e8 lcd_repaint_screen
00819c58 l     F .text	000000c8 lcd_scroll_up
00819d20 l     F .text	000002a0 lcd_handle_escape
0081a4a8 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081a6ec l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0081a994 l     F .text	0000009c altera_avalon_uart_irq
0081aa30 l     F .text	000000e0 altera_avalon_uart_rxirq
0081ab10 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0081aca8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0081aed4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081b8a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081bcdc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081d0b1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00820d44 g     O .bss	00000004 alt_instruction_exception_handler
0080c9f8 g     F .text	00000018 putchar
0081ef28 g     O .rwdata	00000004 stopped
008123f8 g     F .text	00000074 _mprec_log10
008124e4 g     F .text	0000008c __any_on
008110c4 g     F .text	00000054 _isatty_r
0081cd00 g     O .rodata	00000028 __mprec_tinytens
008077c8 g     F .text	000000d0 f_gets
008181e4 g     F .text	00000078 alt_main
0080ced4 g     F .text	00000090 strcpy
00820cec g     O .bss	00000004 paused
0080ca10 g     F .text	000000a8 _puts_r
0081ef30 g     O .rwdata	00000004 names_index
00820d88 g     O .bss	00000230 Fatfs
00821a84 g     O .bss	00000100 alt_irq
008111f8 g     F .text	0000005c _lseek_r
00801af8 g     F .text	00000284 get_fat
0081ef80 g       *ABS*	00000000 __flash_rwdata_start
00810b58 g     F .text	000000ac __sflags
00816514 g     F .text	00000084 .hidden __eqdf2
0081b368 g     F .text	00000060 alt_up_audio_read_fifo_avail
00821b84 g       *ABS*	00000000 __alt_heap_start
0080a7d4 g     F .text	00000038 uart0_put
0080c9b4 g     F .text	0000003c printf
008079a4 g     F .text	00000650 f_printf
0081b3c8 g     F .text	00000068 alt_up_audio_record_r
00814674 g     F .text	0000009c _wcrtomb_r
0080ce70 g     F .text	0000005c __sseek
0080b078 g     F .text	00000010 __sinit
0081427c g     F .text	00000138 __swbuf_r
00811118 g     F .text	0000007c _setlocale_r
0080aee0 g     F .text	00000068 __sfmoreglue
0081827c g     F .text	00000020 __malloc_unlock
00820fb8 g     O .bss	00000224 File1
0081b2d8 g     F .text	00000090 alt_up_audio_reset_audio_core
00811474 g     F .text	0000015c memmove
0080b060 g     F .text	00000018 _cleanup
008115d0 g     F .text	000000a8 _Balloc
00816598 g     F .text	000000e0 .hidden __gtdf2
0081be44 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
008211dc g     O .bss	00000118 names
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080bac4 g     F .text	00000058 _fstat_r
00820d10 g     O .bss	00000004 errno
0080cd30 g     F .text	00000014 __srget
0080cdec g     F .text	00000008 __seofread
00800f08 g     F .text	0000016c ffs_DiskIOWrite
0081b298 g     F .text	00000040 alt_up_audio_write_interrupt_pending
00820d34 g     O .bss	00000004 alt_argv
00826f24 g       *ABS*	00000000 _gp
0081be14 g     F .text	00000030 usleep
0081db00 g     O .rwdata	00000180 alt_fd_list
008212f4 g     O .bss	00000018 Finfo
0080bdb0 g     F .text	00000070 _getc_r
0080be20 g     F .text	00000088 getc
0080c9f0 g     F .text	00000008 _putchar_r
00801074 g     F .text	000004a8 ffs_DiskIOIoctl
0081ba54 g     F .text	00000090 alt_find_dev
0081133c g     F .text	00000138 memcpy
0080ad38 g     F .text	0000000c _cleanup_r
008177d4 g     F .text	000000d0 .hidden __floatsidf
0081bd9c g     F .text	00000078 alt_io_redirect
00816678 g     F .text	000000e0 .hidden __ltdf2
0081c488 g       *ABS*	00000000 __DTOR_END__
0080cab8 g     F .text	00000014 puts
0081c048 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00812ca0 g     F .text	00000074 __fpclassifyd
00812354 g     F .text	000000a4 __ratio
0081419c g     F .text	00000024 __vfiprintf_internal
008065f8 g     F .text	00000314 f_rename
0081b7b0 g     F .text	00000050 alt_up_audio_read_fifo_head
008193f8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080c988 g     F .text	0000002c _printf_r
0080a980 g     F .text	00000008 .hidden __udivsi3
00817f38 g     F .text	000000a4 isatty
0081cd50 g     O .rodata	000000c8 __mprec_tens
00820d04 g     O .bss	00000002 acc_dirs
00811194 g     F .text	0000000c __locale_charset
0080a178 g     F .text	000001b8 xitoa
0081bfbc g     F .text	0000008c alt_icache_flush
00820d1c g     O .bss	00000004 __malloc_top_pad
00805ba0 g     F .text	000001e8 f_truncate
00809e3c g     F .text	00000284 xatoi
00809bf0 g     F .text	000000e0 isWav
0081ef48 g     O .rwdata	00000004 __mb_cur_max
008111c4 g     F .text	0000000c _localeconv_r
0082130c g     O .bss	00000038 sizes
008119dc g     F .text	0000003c __i2b
00810c04 g     F .text	000004c0 __sfvwrite_r
0080cd44 g     F .text	00000054 _sbrk_r
0080a5dc g     F .text	0000011c put_dump
008126dc g     F .text	0000005c _read_r
0081ef60 g     O .rwdata	00000004 alt_max_fd
0081b800 g     F .text	00000064 alt_up_audio_write_fifo_head
0080a990 g     F .text	000000f0 _fclose_r
00820d06 g     O .bss	00000002 acc_files
0080acf8 g     F .text	00000030 fflush
00820d18 g     O .bss	00000004 __malloc_max_sbrked_mem
00817d38 g     F .text	000001b0 alt_irq_register
008153ac g     F .text	0000089c .hidden __adddf3
008120fc g     F .text	0000011c __b2d
00814e1c g     F .text	00000590 .hidden __umoddi3
00818110 g     F .text	000000d4 lseek
0081ef38 g     O .rwdata	00000004 _global_impure_ptr
00812738 g     F .text	00000568 _realloc_r
00821b84 g       *ABS*	00000000 __bss_end
00818a70 g     F .text	00000104 alt_tick
0081485c g     F .text	000005c0 .hidden __udivdi3
00814494 g     F .text	00000184 _fputwc_r
0081cd28 g     O .rodata	00000028 __mprec_bigtens
008117c0 g     F .text	00000104 __s2b
008178a4 g     F .text	000000a4 .hidden __floatunsidf
00811ea4 g     F .text	00000060 __mcmp
0081a8f4 g     F .text	000000a0 altera_avalon_uart_init
0081b0d0 g     F .text	00000040 alt_up_audio_open_dev
00820cf8 g     O .bss	00000004 button
0080b098 g     F .text	00000018 __fp_lock_all
00805d88 g     F .text	00000218 f_unlink
0081ef2c g     O .rwdata	00000004 state
0081b4f8 g     F .text	00000068 alt_up_audio_play_r
008189d8 g     F .text	00000098 alt_alarm_stop
0080a330 g     F .text	000002ac xprintf
00820d2c g     O .bss	00000004 alt_irq_active
0080b65c g     F .text	00000444 _fseeko_r
0080a6f8 g     F .text	000000bc get_line
008000fc g     F .exceptions	000000d4 alt_irq_handler
0081dad8 g     O .rwdata	00000028 alt_dev_null
00807898 g     F .text	00000074 f_putc
0080790c g     F .text	00000098 f_puts
0081b864 g     F .text	00000044 alt_dcache_flush_all
008118c4 g     F .text	00000068 __hi0bits
0081774c g     F .text	00000088 .hidden __fixdfsi
0081ef80 g       *ABS*	00000000 __ram_rwdata_end
0081ef58 g     O .rwdata	00000008 alt_dev_list
00818bc4 g     F .text	000000f8 write
00812570 g     F .text	000000a0 _putc_r
0081d234 g       *ABS*	00000000 __ram_rodata_end
00817c88 g     F .text	000000b0 fstat
0080b1fc g     F .text	00000024 fprintf
00816678 g     F .text	000000e0 .hidden __ledf2
00811c14 g     F .text	00000140 __pow5mult
00812ecc g     F .text	000012d0 ___vfiprintf_internal_r
00820d28 g     O .bss	00000004 __nlocale_changed
0080a988 g     F .text	00000008 .hidden __umodsi3
00821b84 g       *ABS*	00000000 end
00819fc0 g     F .text	000004e8 altera_avalon_lcd_16207_write
0080baa0 g     F .text	00000024 fseeko
0081af24 g     F .text	000001ac altera_avalon_uart_write
0080b638 g     F .text	00000024 fseek
00818f3c g     F .text	000000b8 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0081c488 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081a764 g     F .text	00000080 alt_avalon_timer_sc_init
0081a844 g     F .text	00000060 altera_avalon_uart_write_fd
00817948 g     F .text	00000064 .hidden __clzsi2
0081a8a4 g     F .text	00000050 altera_avalon_uart_close_fd
00819604 g     F .text	00000218 altera_avalon_jtag_uart_write
0080b088 g     F .text	00000004 __sfp_lock_acquire
00811254 g     F .text	000000e8 memchr
0080cffc g     F .text	00001f50 ___vfprintf_internal_r
00820d08 g     O .bss	00000004 xx
0080b344 g     F .text	000002f0 _free_r
00818510 g     F .text	00000228 alt_printf
008111a0 g     F .text	00000010 __locale_mb_cur_max
0080a110 g     F .text	00000068 xputs
00820cf4 g     O .bss	00000004 count_released
0081c2c0 g     F .text	00000194 __call_exitprocs
0080ccbc g     F .text	00000074 __srget_r
0080a7b4 g     F .text	00000020 uart0_init
00821344 g     O .bss	00000400 Buff
00820d24 g     O .bss	00000004 __mlocale_changed
0080508c g     F .text	00000048 f_close
0081ef40 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00820d3c g     O .bss	00000004 _alt_tick_rate
0081b6a8 g     F .text	00000108 alt_up_audio_write_fifo
00811d54 g     F .text	00000150 __lshift
00820d40 g     O .bss	00000004 _alt_nticks
008187cc g     F .text	000000fc read
00818d28 g     F .text	000000b0 alt_sys_init
0081b5c8 g     F .text	000000e0 alt_up_audio_read_fifo
0080c92c g     F .text	0000005c _open_r
0081c1ac g     F .text	00000114 __register_exitproc
008043a4 g     F .text	000004e4 f_read
0081b204 g     F .text	00000054 alt_up_audio_disable_write_interrupt
00811a18 g     F .text	000001fc __multiply
00805730 g     F .text	000000e4 f_readdir
008192a4 g     F .text	00000068 altera_avalon_jtag_uart_close
0081d234 g       *ABS*	00000000 __ram_rwdata_start
00800dec g     F .text	0000011c ffs_DiskIORead
0081c488 g       *ABS*	00000000 __ram_rodata_start
00820d60 g     O .bss	00000028 __malloc_current_mallinfo
00812218 g     F .text	0000013c __d2b
008063e0 g     F .text	00000104 f_chmod
00821744 g     O .bss	00000224 File2
00818dd8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081bbf8 g     F .text	000000b4 alt_get_fd
00800a60 g     F .text	00000108 ffs_DiskIOTimerproc
0081be64 g     F .text	00000158 alt_busy_sleep
0080f1dc g     F .text	00000054 _close_r
0081b1b4 g     F .text	00000050 alt_up_audio_enable_write_interrupt
00800b68 g     F .text	0000025c ffs_DiskIOInitialize
0081c130 g     F .text	0000007c memcmp
00818e98 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00821b84 g       *ABS*	00000000 __alt_stack_base
00818ee8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080bca4 g     F .text	000000cc _fwrite_r
0080f088 g     F .text	00000154 __swsetup_r
00821968 g     O .bss	0000001c Dir
00815c48 g     F .text	000008cc .hidden __divdf3
0081b160 g     F .text	00000054 alt_up_audio_disable_read_interrupt
0080af48 g     F .text	00000118 __sfp
0081246c g     F .text	00000078 __copybits
0081d658 g     O .rwdata	00000408 __malloc_av_
0080b094 g     F .text	00000004 __sinit_lock_release
00816758 g     F .text	00000724 .hidden __muldf3
0080cd98 g     F .text	00000054 __sread
00820d0c g     O .bss	00000004 acc_size
0080151c g     F .text	0000002c get_fattime
0081bae4 g     F .text	00000114 alt_find_file
0081b8f8 g     F .text	000000a4 alt_dev_llist_insert
0081825c g     F .text	00000020 __malloc_lock
0080b1d4 g     F .text	00000028 _fprintf_r
00818928 g     F .text	000000b0 sbrk
0080ac9c g     F .text	0000005c _fflush_r
008143d0 g     F .text	000000c4 _calloc_r
0080b1b8 g     F .text	0000001c fopen
00820ccc g       *ABS*	00000000 __bss_start
00820cfc g     O .bss	00000004 done_playing
0080c808 g     F .text	00000124 memset
008082c0 g     F .text	00001730 main
0081b498 g     F .text	00000060 alt_up_audio_write_fifo_space
00820d38 g     O .bss	00000004 alt_envp
00820d14 g     O .bss	00000004 __malloc_max_total_mem
00818e38 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008143b4 g     F .text	0000001c __swbuf
00804e04 g     F .text	00000288 f_sync
0081a554 g     F .text	00000138 altera_avalon_lcd_16207_init
0080cecc g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080aa80 g     F .text	00000014 fclose
00820cf0 g     O .bss	00000004 track_changed
0080f430 g     F .text	00001728 _dtoa_r
0080c060 g     F .text	000007a8 _malloc_r
008147d0 g     F .text	00000030 __ascii_wctomb
00821984 g     O .bss	00000100 Line
0080690c g     F .text	00000ebc f_mkfs
0081ef64 g     O .rwdata	00000004 alt_errno
00803e8c g     F .text	00000094 f_mount
0080bb1c g     F .text	000000c4 _fwalk
008055c0 g     F .text	00000170 f_opendir
00812610 g     F .text	000000cc putc
0080a8d0 g     F .text	00000054 .hidden __divsi3
0080b220 g     F .text	00000124 _malloc_trim_r
0081c488 g       *ABS*	00000000 __CTOR_END__
00812d14 g     F .text	000000a4 strcmp
0081c488 g       *ABS*	00000000 __flash_rodata_start
0081c488 g       *ABS*	00000000 __DTOR_LIST__
00801d7c g     F .text	00000370 put_fat
0080a0c0 g     F .text	00000050 xputc
00816514 g     F .text	00000084 .hidden __nedf2
00818cf4 g     F .text	00000034 alt_irq_init
008188c8 g     F .text	00000060 alt_release_fd
008050d4 g     F .text	000004ec f_lseek
0081ce38 g     O .rodata	00000100 .hidden __clz_tab
00820d20 g     O .bss	00000004 _PathLocale
0081c0e4 g     F .text	00000014 atexit
0080f02c g     F .text	0000005c _write_r
008111d0 g     F .text	0000001c setlocale
0081ef3c g     O .rwdata	00000004 _impure_ptr
00820d30 g     O .bss	00000004 alt_argc
0080aa94 g     F .text	00000208 __sflush_r
0081b9f8 g     F .text	0000005c _do_dtors
008111bc g     F .text	00000008 __locale_cjk_lang
0080b634 g     F .text	00000004 _fseek_r
0080cae8 g     F .text	000001d4 __srefill_r
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00800dc4 g     F .text	00000028 ffs_DiskIOStatus
0081209c g     F .text	00000060 __ulp
00805814 g     F .text	000000a0 f_stat
0080b0b0 g     F .text	00000018 __fp_unlock_all
0081a68c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0081ef50 g     O .rwdata	00000008 alt_fs_list
0081b430 g     F .text	00000068 alt_up_audio_record_l
00800020 g       *ABS*	00000000 __ram_exceptions_start
008111ec g     F .text	0000000c localeconv
00801a8c g     F .text	0000006c clust2sect
0080bd70 g     F .text	00000040 fwrite
0081ef80 g       *ABS*	00000000 _edata
008064e4 g     F .text	00000114 f_utime
0081a7e4 g     F .text	00000060 altera_avalon_uart_read_fd
00821b84 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00804888 g     F .text	0000057c f_write
0081930c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0081b560 g     F .text	00000068 alt_up_audio_play_l
0080cdf4 g     F .text	0000007c __swrite
0081ef44 g     O .rwdata	00000004 __malloc_trim_threshold
00803f20 g     F .text	00000484 f_open
008111b0 g     F .text	0000000c __locale_msgcharset
0081c0f8 g     F .text	00000038 exit
0080bbe0 g     F .text	000000c4 _fwalk_reent
00811f04 g     F .text	00000198 __mdiff
0080a924 g     F .text	0000005c .hidden __modsi3
0081ef7c g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080b08c g     F .text	00000004 __sfp_lock_release
0081cfb0 g     O .rodata	00000101 _ctype_
0080a80c g     F .text	00000058 uart0_get
00805fa0 g     F .text	00000440 f_mkdir
0081ac54 g     F .text	00000054 altera_avalon_uart_close
0080b0c8 g     F .text	000000f0 _fopen_r
0081c454 g     F .text	00000034 _exit
00800290 g     F .text	00000024 ffs_Init
008179ac g     F .text	00000140 alt_alarm_start
0080bea8 g     F .text	000001b8 __smakebuf_r
0080cf64 g     F .text	00000098 strlen
008183b8 g     F .text	00000158 open
00816598 g     F .text	000000e0 .hidden __gedf2
00818738 g     F .text	00000044 alt_putchar
0081ef4c g     O .rwdata	00000004 __wctomb
00812eb4 g     F .text	00000018 __sprint_r
0081bcac g     F .text	00000030 alt_icache_flush_all
008058b4 g     F .text	000002ec f_getfree
0081ef68 g     O .rwdata	00000004 alt_priority_mask
0080ef4c g     F .text	00000024 __vfprintf_internal
0081acf8 g     F .text	000001dc altera_avalon_uart_read
00814800 g     F .text	0000005c _wctomb_r
00816e7c g     F .text	000008d0 .hidden __subdf3
00800a34 g     F .text	0000002c ffs_DiskIOInit
0081192c g     F .text	000000b0 __lo0bits
0081ef70 g     O .rwdata	00000008 alt_alarm_list
0081b99c g     F .text	0000005c _do_ctors
00814710 g     F .text	000000c0 wcrtomb
00817b3c g     F .text	000000d0 close
00818040 g     F .text	00000080 alt_load
0081b110 g     F .text	00000050 alt_up_audio_enable_read_interrupt
00814618 g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
0080b090 g     F .text	00000004 __sinit_lock_acquire
008116a0 g     F .text	00000120 __multadd
00811678 g     F .text	00000028 _Bfree
0081b258 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	008020b4 	movhi	r2,130
  800140:	1086a104 	addi	r2,r2,6788
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	1086a104 	addi	r2,r2,6788
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	21000104 	addi	r4,r4,4
  800168:	1105883a 	add	r2,r2,r4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	e17ffd17 	ldw	r5,-12(fp)
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a78817 	ldw	r2,-25056(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a78817 	ldw	r2,-25056(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	1809883a 	mov	r4,r3
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	e1bffe17 	ldw	r6,-8(fp)
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d69bc914 	ori	gp,gp,28452
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	008020b4 	movhi	r2,130
    ori r2, r2, %lo(__bss_start)
  800268:	10833314 	ori	r2,r2,3276

    movhi r3, %hi(__bss_end)
  80026c:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  800270:	18c6e114 	ori	r3,r3,7044

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08180400 	call	818040 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08181e40 	call	8181e4 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <ffs_Init>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: error cause                                                    */
/***************************************************************************/
FFS_RESULT ffs_Init(void)
{
  800290:	defffe04 	addi	sp,sp,-8
  800294:	df000115 	stw	fp,4(sp)
  800298:	df000104 	addi	fp,sp,4
   FFS_RESULT Error = FFS_OK;
  80029c:	e03fff0d 	sth	zero,-4(fp)
   
   return (Error);
  8002a0:	e0bfff0b 	ldhu	r2,-4(fp)
} /* ffs_Init */
  8002a4:	e037883a 	mov	sp,fp
  8002a8:	df000017 	ldw	fp,0(sp)
  8002ac:	dec00104 	addi	sp,sp,4
  8002b0:	f800283a 	ret

008002b4 <SetLowSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetLowSpeed(void)
{
  8002b4:	deffff04 	addi	sp,sp,-4
  8002b8:	df000015 	stw	fp,0(sp)
  8002bc:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
  8002c0:	d0e76c17 	ldw	r3,-25168(gp)
  8002c4:	00bffff4 	movhi	r2,65535
  8002c8:	10803fc4 	addi	r2,r2,255
  8002cc:	1884703a 	and	r2,r3,r2
  8002d0:	d0a76c15 	stw	r2,-25168(gp)
   Control1 |= (249 << 8);
  8002d4:	d0a76c17 	ldw	r2,-25168(gp)
  8002d8:	10be4014 	ori	r2,r2,63744
  8002dc:	d0a76c15 	stw	r2,-25168(gp)
   SPI_CTRL  = Control1;
  8002e0:	00a04034 	movhi	r2,33024
  8002e4:	10841204 	addi	r2,r2,4168
  8002e8:	d0e76c17 	ldw	r3,-25168(gp)
  8002ec:	10c00015 	stw	r3,0(r2)
} /* SetLowSpeed */
  8002f0:	e037883a 	mov	sp,fp
  8002f4:	df000017 	ldw	fp,0(sp)
  8002f8:	dec00104 	addi	sp,sp,4
  8002fc:	f800283a 	ret

00800300 <SetHighSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetHighSpeed(void)
{
  800300:	deffff04 	addi	sp,sp,-4
  800304:	df000015 	stw	fp,0(sp)
  800308:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
  80030c:	d0e76c17 	ldw	r3,-25168(gp)
  800310:	00bffff4 	movhi	r2,65535
  800314:	10803fc4 	addi	r2,r2,255
  800318:	1884703a 	and	r2,r3,r2
  80031c:	d0a76c15 	stw	r2,-25168(gp)

   if (0 == (CardType & 0x01))
  800320:	d0a76a03 	ldbu	r2,-25176(gp)
  800324:	10803fcc 	andi	r2,r2,255
  800328:	1080004c 	andi	r2,r2,1
  80032c:	1000041e 	bne	r2,zero,800340 <SetHighSpeed+0x40>
   {
      /* SD card 25 MHz */
      Control1 |= (1 << 8);
  800330:	d0a76c17 	ldw	r2,-25168(gp)
  800334:	10804014 	ori	r2,r2,256
  800338:	d0a76c15 	stw	r2,-25168(gp)
  80033c:	00000306 	br	80034c <SetHighSpeed+0x4c>
   }
   else
   {
      /* MMC card 16 MHz */
      Control1 |= (2 << 8);
  800340:	d0a76c17 	ldw	r2,-25168(gp)
  800344:	10808014 	ori	r2,r2,512
  800348:	d0a76c15 	stw	r2,-25168(gp)
   }
   SPI_CTRL  = Control1;
  80034c:	00a04034 	movhi	r2,33024
  800350:	10841204 	addi	r2,r2,4168
  800354:	d0e76c17 	ldw	r3,-25168(gp)
  800358:	10c00015 	stw	r3,0(r2)
} /* SetHighSpeed */
  80035c:	e037883a 	mov	sp,fp
  800360:	df000017 	ldw	fp,0(sp)
  800364:	dec00104 	addi	sp,sp,4
  800368:	f800283a 	ret

0080036c <InitDiskIOHardware>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void InitDiskIOHardware(void)
{
  80036c:	defffe04 	addi	sp,sp,-8
  800370:	dfc00115 	stw	ra,4(sp)
  800374:	df000015 	stw	fp,0(sp)
  800378:	d839883a 	mov	fp,sp
   /*
    * Deselct before to prevent glitch
    */
   DESELECT();
  80037c:	d0a76c17 	ldw	r2,-25168(gp)
  800380:	10800054 	ori	r2,r2,1
  800384:	d0a76c15 	stw	r2,-25168(gp)
  800388:	00a04034 	movhi	r2,33024
  80038c:	10841204 	addi	r2,r2,4168
  800390:	d0e76c17 	ldw	r3,-25168(gp)
  800394:	10c00015 	stw	r3,0(r2)

   /* Slow during init */
   SetLowSpeed();
  800398:	08002b40 	call	8002b4 <SetLowSpeed>
   
} /* InitDiskIOHardware */
  80039c:	e037883a 	mov	sp,fp
  8003a0:	dfc00117 	ldw	ra,4(sp)
  8003a4:	df000017 	ldw	fp,0(sp)
  8003a8:	dec00204 	addi	sp,sp,8
  8003ac:	f800283a 	ret

008003b0 <Set8BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set8BitTransfer(void)
{
  8003b0:	deffff04 	addi	sp,sp,-4
  8003b4:	df000015 	stw	fp,0(sp)
  8003b8:	d839883a 	mov	fp,sp
   Control1 &= ~CTRL_BIT32;
  8003bc:	d0e76c17 	ldw	r3,-25168(gp)
  8003c0:	00bfff44 	movi	r2,-3
  8003c4:	1884703a 	and	r2,r3,r2
  8003c8:	d0a76c15 	stw	r2,-25168(gp)
   SPI_CTRL  = Control1;
  8003cc:	00a04034 	movhi	r2,33024
  8003d0:	10841204 	addi	r2,r2,4168
  8003d4:	d0e76c17 	ldw	r3,-25168(gp)
  8003d8:	10c00015 	stw	r3,0(r2)
} /* Set8BitTransfer */
  8003dc:	e037883a 	mov	sp,fp
  8003e0:	df000017 	ldw	fp,0(sp)
  8003e4:	dec00104 	addi	sp,sp,4
  8003e8:	f800283a 	ret

008003ec <Set32BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set32BitTransfer(void)
{
  8003ec:	deffff04 	addi	sp,sp,-4
  8003f0:	df000015 	stw	fp,0(sp)
  8003f4:	d839883a 	mov	fp,sp
   Control1 |= CTRL_BIT32;
  8003f8:	d0a76c17 	ldw	r2,-25168(gp)
  8003fc:	10800094 	ori	r2,r2,2
  800400:	d0a76c15 	stw	r2,-25168(gp)
   SPI_CTRL  = Control1;
  800404:	00a04034 	movhi	r2,33024
  800408:	10841204 	addi	r2,r2,4168
  80040c:	d0e76c17 	ldw	r3,-25168(gp)
  800410:	10c00015 	stw	r3,0(r2)
} /* Set32BitTransfer */
  800414:	e037883a 	mov	sp,fp
  800418:	df000017 	ldw	fp,0(sp)
  80041c:	dec00104 	addi	sp,sp,4
  800420:	f800283a 	ret

00800424 <ReceiveU8>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U8 ReceiveU8 (void)
{
  800424:	deffff04 	addi	sp,sp,-4
  800428:	df000015 	stw	fp,0(sp)
  80042c:	d839883a 	mov	fp,sp
   SPI_TXR = (uint32_t) 0xff;
  800430:	00a04034 	movhi	r2,33024
  800434:	10841004 	addi	r2,r2,4160
  800438:	00c03fc4 	movi	r3,255
  80043c:	10c00015 	stw	r3,0(r2)

   /* wait for char */
   while (!(SPI_SR & SPI_SR_DONE)) ;
  800440:	0001883a 	nop
  800444:	00a04034 	movhi	r2,33024
  800448:	10841304 	addi	r2,r2,4172
  80044c:	10800017 	ldw	r2,0(r2)
  800450:	1080004c 	andi	r2,r2,1
  800454:	103ffb26 	beq	r2,zero,800444 <__alt_data_end+0xff800444>

   return(SPI_RXR);
  800458:	00a04034 	movhi	r2,33024
  80045c:	10841104 	addi	r2,r2,4164
  800460:	10800017 	ldw	r2,0(r2)
} /* ReceiveU8 */
  800464:	e037883a 	mov	sp,fp
  800468:	df000017 	ldw	fp,0(sp)
  80046c:	dec00104 	addi	sp,sp,4
  800470:	f800283a 	ret

00800474 <ReceiveDatablock>:
/*  In    : buff, btr                                                      */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int ReceiveDatablock(FFS_U8 * buff, uint32_t btr)
{
  800474:	defff904 	addi	sp,sp,-28
  800478:	dfc00615 	stw	ra,24(sp)
  80047c:	df000515 	stw	fp,20(sp)
  800480:	df000504 	addi	fp,sp,20
  800484:	e13ffe15 	stw	r4,-8(fp)
  800488:	e17fff15 	stw	r5,-4(fp)
   FFS_U8 token, cnt;
   FFS_U32 *buff32 = (FFS_U32*)buff;
  80048c:	e0bffe17 	ldw	r2,-8(fp)
  800490:	e0bffc15 	stw	r2,-16(fp)

   Timer1 = 10;
  800494:	00800284 	movi	r2,10
  800498:	d0a76a8d 	sth	r2,-25174(gp)
   do /* Wait for data packet in timeout of 100ms */
   {
      token = ReceiveU8();
  80049c:	08004240 	call	800424 <ReceiveU8>
  8004a0:	e0bffd05 	stb	r2,-12(fp)
   }
   while ((token == 0xFF) && Timer1);
  8004a4:	e0bffd03 	ldbu	r2,-12(fp)
  8004a8:	10803fd8 	cmpnei	r2,r2,255
  8004ac:	1000031e 	bne	r2,zero,8004bc <ReceiveDatablock+0x48>
  8004b0:	d0a76a8b 	ldhu	r2,-25174(gp)
  8004b4:	10bfffcc 	andi	r2,r2,65535
  8004b8:	103ff81e 	bne	r2,zero,80049c <__alt_data_end+0xff80049c>

   if (token != 0xFE)
  8004bc:	e0bffd03 	ldbu	r2,-12(fp)
  8004c0:	10803fa0 	cmpeqi	r2,r2,254
  8004c4:	1000021e 	bne	r2,zero,8004d0 <ReceiveDatablock+0x5c>
      return(FFS_FALSE);  /* If not valid data token, return with error */
  8004c8:	0005883a 	mov	r2,zero
  8004cc:	00002f06 	br	80058c <ReceiveDatablock+0x118>
      
   /* Receive the data block into buffer */
   Set32BitTransfer();
  8004d0:	08003ec0 	call	8003ec <Set32BitTransfer>
   
   /* Divide by 8 */
   cnt = btr >> 3;
  8004d4:	e0bfff17 	ldw	r2,-4(fp)
  8004d8:	1004d0fa 	srli	r2,r2,3
  8004dc:	e0bffb05 	stb	r2,-20(fp)

   do /* Receive the data block into buffer */
   {
      RECEIVE_FAST(buff32);
  8004e0:	00a04034 	movhi	r2,33024
  8004e4:	10841004 	addi	r2,r2,4160
  8004e8:	00ffffc4 	movi	r3,-1
  8004ec:	10c00015 	stw	r3,0(r2)
  8004f0:	0001883a 	nop
  8004f4:	00a04034 	movhi	r2,33024
  8004f8:	10841304 	addi	r2,r2,4172
  8004fc:	10800017 	ldw	r2,0(r2)
  800500:	1080004c 	andi	r2,r2,1
  800504:	103ffb26 	beq	r2,zero,8004f4 <__alt_data_end+0xff8004f4>
  800508:	e0fffc17 	ldw	r3,-16(fp)
  80050c:	18800104 	addi	r2,r3,4
  800510:	e0bffc15 	stw	r2,-16(fp)
  800514:	00a04034 	movhi	r2,33024
  800518:	10841104 	addi	r2,r2,4164
  80051c:	10800017 	ldw	r2,0(r2)
  800520:	18800015 	stw	r2,0(r3)
      RECEIVE_FAST(buff32);
  800524:	00a04034 	movhi	r2,33024
  800528:	10841004 	addi	r2,r2,4160
  80052c:	00ffffc4 	movi	r3,-1
  800530:	10c00015 	stw	r3,0(r2)
  800534:	0001883a 	nop
  800538:	00a04034 	movhi	r2,33024
  80053c:	10841304 	addi	r2,r2,4172
  800540:	10800017 	ldw	r2,0(r2)
  800544:	1080004c 	andi	r2,r2,1
  800548:	103ffb26 	beq	r2,zero,800538 <__alt_data_end+0xff800538>
  80054c:	e0fffc17 	ldw	r3,-16(fp)
  800550:	18800104 	addi	r2,r3,4
  800554:	e0bffc15 	stw	r2,-16(fp)
  800558:	00a04034 	movhi	r2,33024
  80055c:	10841104 	addi	r2,r2,4164
  800560:	10800017 	ldw	r2,0(r2)
  800564:	18800015 	stw	r2,0(r3)
   }
   while (--cnt);
  800568:	e0bffb03 	ldbu	r2,-20(fp)
  80056c:	10bfffc4 	addi	r2,r2,-1
  800570:	e0bffb05 	stb	r2,-20(fp)
  800574:	e0bffb03 	ldbu	r2,-20(fp)
  800578:	103fd91e 	bne	r2,zero,8004e0 <__alt_data_end+0xff8004e0>
   
   Set8BitTransfer();   
  80057c:	08003b00 	call	8003b0 <Set8BitTransfer>
   ReceiveU8();   /* Discard CRC */
  800580:	08004240 	call	800424 <ReceiveU8>
   ReceiveU8();   /* Discard CRC */
  800584:	08004240 	call	800424 <ReceiveU8>

   return(FFS_TRUE);  /* Return with success */
  800588:	00800044 	movi	r2,1
} /* ReceiveDatablock */
  80058c:	e037883a 	mov	sp,fp
  800590:	dfc00117 	ldw	ra,4(sp)
  800594:	df000017 	ldw	fp,0(sp)
  800598:	dec00204 	addi	sp,sp,8
  80059c:	f800283a 	ret

008005a0 <TransmitDatablock>:
/*  In    : buff, token (Data/Stop token)                                  */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int TransmitDatablock(const FFS_U8 * buff, FFS_U8 token)
{
  8005a0:	defff904 	addi	sp,sp,-28
  8005a4:	dfc00615 	stw	ra,24(sp)
  8005a8:	df000515 	stw	fp,20(sp)
  8005ac:	df000504 	addi	fp,sp,20
  8005b0:	e13ffe15 	stw	r4,-8(fp)
  8005b4:	2805883a 	mov	r2,r5
  8005b8:	e0bfff05 	stb	r2,-4(fp)
   FFS_U8 resp, cnt = 0;
  8005bc:	e03ffb05 	stb	zero,-20(fp)
   FFS_U32 *buff32 = (FFS_U32*)buff;
  8005c0:	e0bffe17 	ldw	r2,-8(fp)
  8005c4:	e0bffc15 	stw	r2,-16(fp)

   if (WaitReady() != 0xFF)
  8005c8:	080074c0 	call	80074c <WaitReady>
  8005cc:	10803fcc 	andi	r2,r2,255
  8005d0:	10803fe0 	cmpeqi	r2,r2,255
  8005d4:	1000021e 	bne	r2,zero,8005e0 <TransmitDatablock+0x40>
      return(FFS_FALSE);
  8005d8:	0005883a 	mov	r2,zero
  8005dc:	00004d06 	br	800714 <TransmitDatablock+0x174>

   TRANSMIT_U8(token);  /* Xmit data token */
  8005e0:	00a04034 	movhi	r2,33024
  8005e4:	10841004 	addi	r2,r2,4160
  8005e8:	e0ffff03 	ldbu	r3,-4(fp)
  8005ec:	10c00015 	stw	r3,0(r2)
  8005f0:	0001883a 	nop
  8005f4:	00a04034 	movhi	r2,33024
  8005f8:	10841304 	addi	r2,r2,4172
  8005fc:	10800017 	ldw	r2,0(r2)
  800600:	1080004c 	andi	r2,r2,1
  800604:	103ffb26 	beq	r2,zero,8005f4 <__alt_data_end+0xff8005f4>
   if (token != 0xFD)   /* Is data token */
  800608:	e0bfff03 	ldbu	r2,-4(fp)
  80060c:	10803f60 	cmpeqi	r2,r2,253
  800610:	10003f1e 	bne	r2,zero,800710 <TransmitDatablock+0x170>
   {
   
      cnt = 512 / 8;
  800614:	00801004 	movi	r2,64
  800618:	e0bffb05 	stb	r2,-20(fp)
   
      /* Send the 512 byte data block */
      Set32BitTransfer();
  80061c:	08003ec0 	call	8003ec <Set32BitTransfer>
      do /* Send the 512 byte data block */
      {
         TRANSMIT_FAST(*buff32++);
  800620:	00a04034 	movhi	r2,33024
  800624:	10841004 	addi	r2,r2,4160
  800628:	e0fffc17 	ldw	r3,-16(fp)
  80062c:	19000104 	addi	r4,r3,4
  800630:	e13ffc15 	stw	r4,-16(fp)
  800634:	18c00017 	ldw	r3,0(r3)
  800638:	10c00015 	stw	r3,0(r2)
  80063c:	0001883a 	nop
  800640:	00a04034 	movhi	r2,33024
  800644:	10841304 	addi	r2,r2,4172
  800648:	10800017 	ldw	r2,0(r2)
  80064c:	1080004c 	andi	r2,r2,1
  800650:	103ffb26 	beq	r2,zero,800640 <__alt_data_end+0xff800640>
         TRANSMIT_FAST(*buff32++);
  800654:	00a04034 	movhi	r2,33024
  800658:	10841004 	addi	r2,r2,4160
  80065c:	e0fffc17 	ldw	r3,-16(fp)
  800660:	19000104 	addi	r4,r3,4
  800664:	e13ffc15 	stw	r4,-16(fp)
  800668:	18c00017 	ldw	r3,0(r3)
  80066c:	10c00015 	stw	r3,0(r2)
  800670:	0001883a 	nop
  800674:	00a04034 	movhi	r2,33024
  800678:	10841304 	addi	r2,r2,4172
  80067c:	10800017 	ldw	r2,0(r2)
  800680:	1080004c 	andi	r2,r2,1
  800684:	103ffb26 	beq	r2,zero,800674 <__alt_data_end+0xff800674>
      }
      while (--cnt);
  800688:	e0bffb03 	ldbu	r2,-20(fp)
  80068c:	10bfffc4 	addi	r2,r2,-1
  800690:	e0bffb05 	stb	r2,-20(fp)
  800694:	e0bffb03 	ldbu	r2,-20(fp)
  800698:	103fe11e 	bne	r2,zero,800620 <__alt_data_end+0xff800620>

      Set8BitTransfer();
  80069c:	08003b00 	call	8003b0 <Set8BitTransfer>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
  8006a0:	00a04034 	movhi	r2,33024
  8006a4:	10841004 	addi	r2,r2,4160
  8006a8:	00c03fc4 	movi	r3,255
  8006ac:	10c00015 	stw	r3,0(r2)
  8006b0:	0001883a 	nop
  8006b4:	00a04034 	movhi	r2,33024
  8006b8:	10841304 	addi	r2,r2,4172
  8006bc:	10800017 	ldw	r2,0(r2)
  8006c0:	1080004c 	andi	r2,r2,1
  8006c4:	103ffb26 	beq	r2,zero,8006b4 <__alt_data_end+0xff8006b4>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
  8006c8:	00a04034 	movhi	r2,33024
  8006cc:	10841004 	addi	r2,r2,4160
  8006d0:	00c03fc4 	movi	r3,255
  8006d4:	10c00015 	stw	r3,0(r2)
  8006d8:	0001883a 	nop
  8006dc:	00a04034 	movhi	r2,33024
  8006e0:	10841304 	addi	r2,r2,4172
  8006e4:	10800017 	ldw	r2,0(r2)
  8006e8:	1080004c 	andi	r2,r2,1
  8006ec:	103ffb26 	beq	r2,zero,8006dc <__alt_data_end+0xff8006dc>

      resp = ReceiveU8();  /* Reveive data response */
  8006f0:	08004240 	call	800424 <ReceiveU8>
  8006f4:	e0bffd05 	stb	r2,-12(fp)
      if ((resp & 0x1F) != 0x05) /* If not accepted, return with error */
  8006f8:	e0bffd03 	ldbu	r2,-12(fp)
  8006fc:	108007cc 	andi	r2,r2,31
  800700:	10800160 	cmpeqi	r2,r2,5
  800704:	1000021e 	bne	r2,zero,800710 <TransmitDatablock+0x170>
      {
         return(FFS_FALSE);
  800708:	0005883a 	mov	r2,zero
  80070c:	00000106 	br	800714 <TransmitDatablock+0x174>
      }
   }

   return(FFS_TRUE);  /* Return with success */
  800710:	00800044 	movi	r2,1
} /* TransmitDatablock */
  800714:	e037883a 	mov	sp,fp
  800718:	dfc00117 	ldw	ra,4(sp)
  80071c:	df000017 	ldw	fp,0(sp)
  800720:	dec00204 	addi	sp,sp,8
  800724:	f800283a 	ret

00800728 <GetCDWP>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U32 GetCDWP(void)
{
  800728:	defffe04 	addi	sp,sp,-8
  80072c:	df000115 	stw	fp,4(sp)
  800730:	df000104 	addi	fp,sp,4
   FFS_U32 value = 0;
  800734:	e03fff15 	stw	zero,-4(fp)
   
   /*
    * CD and WP is not supported by the Altera DE1 board.
    */

   return(value);
  800738:	e0bfff17 	ldw	r2,-4(fp)
} /* GetCDWP */
  80073c:	e037883a 	mov	sp,fp
  800740:	df000017 	ldw	fp,0(sp)
  800744:	dec00104 	addi	sp,sp,4
  800748:	f800283a 	ret

0080074c <WaitReady>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static FFS_U8 WaitReady (void)
{
  80074c:	defffd04 	addi	sp,sp,-12
  800750:	dfc00215 	stw	ra,8(sp)
  800754:	df000115 	stw	fp,4(sp)
  800758:	df000104 	addi	fp,sp,4
   FFS_U8 res;
   
#if (FFS_USE_REAL_TIME_OS == 0)
   Timer2 = (WAIT_READY_TIME_MAX_MS / 10);
  80075c:	00800c84 	movi	r2,50
  800760:	d0a76b0d 	sth	r2,-25172(gp)
   ReceiveU8();
  800764:	08004240 	call	800424 <ReceiveU8>
   do
   {
      res = ReceiveU8();
  800768:	08004240 	call	800424 <ReceiveU8>
  80076c:	e0bfff05 	stb	r2,-4(fp)
   }
   while ((res != 0xFF) && Timer2);
  800770:	e0bfff03 	ldbu	r2,-4(fp)
  800774:	10803fe0 	cmpeqi	r2,r2,255
  800778:	1000031e 	bne	r2,zero,800788 <WaitReady+0x3c>
  80077c:	d0a76b0b 	ldhu	r2,-25172(gp)
  800780:	10bfffcc 	andi	r2,r2,65535
  800784:	103ff81e 	bne	r2,zero,800768 <__alt_data_end+0xff800768>
      ff_wait_ms(WAIT_READY_TIME_RTOS_MS);
   }
   while ((res != 0xFF) && (cnt < WAIT_READY_TIME_CNT_RTOS));
#endif   

   return(res);
  800788:	e0bfff03 	ldbu	r2,-4(fp)
} /* WaitReady */
  80078c:	e037883a 	mov	sp,fp
  800790:	dfc00117 	ldw	ra,4(sp)
  800794:	df000017 	ldw	fp,0(sp)
  800798:	dec00204 	addi	sp,sp,8
  80079c:	f800283a 	ret

008007a0 <ReleaseBus>:

/*-----------------------------------------------------------------------*/
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/
static void ReleaseBus (void)
{
  8007a0:	defffe04 	addi	sp,sp,-8
  8007a4:	dfc00115 	stw	ra,4(sp)
  8007a8:	df000015 	stw	fp,0(sp)
  8007ac:	d839883a 	mov	fp,sp
    * master device must send a byte after deasserted CS signal.   
    *
    * More information can be found here:
    * http://elm-chan.org/docs/mmc/mmc_e.html
    */
   DESELECT();
  8007b0:	d0a76c17 	ldw	r2,-25168(gp)
  8007b4:	10800054 	ori	r2,r2,1
  8007b8:	d0a76c15 	stw	r2,-25168(gp)
  8007bc:	00a04034 	movhi	r2,33024
  8007c0:	10841204 	addi	r2,r2,4168
  8007c4:	d0e76c17 	ldw	r3,-25168(gp)
  8007c8:	10c00015 	stw	r3,0(r2)
   ReceiveU8();
  8007cc:	08004240 	call	800424 <ReceiveU8>
} /* ReleaseBus */
  8007d0:	e037883a 	mov	sp,fp
  8007d4:	dfc00117 	ldw	ra,4(sp)
  8007d8:	df000017 	ldw	fp,0(sp)
  8007dc:	dec00204 	addi	sp,sp,8
  8007e0:	f800283a 	ret

008007e4 <SendCMD>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/
static FFS_U8 SendCMD (FFS_U8 cmd,   /* Command byte */
                       FFS_U32 arg)  /* Argument */
{
  8007e4:	defffb04 	addi	sp,sp,-20
  8007e8:	dfc00415 	stw	ra,16(sp)
  8007ec:	df000315 	stw	fp,12(sp)
  8007f0:	df000304 	addi	fp,sp,12
  8007f4:	2005883a 	mov	r2,r4
  8007f8:	e17fff15 	stw	r5,-4(fp)
  8007fc:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, res;

   if (cmd & 0x80)   /* ACMD<n> is the command sequense of CMD55-CMD<n> */
  800800:	e0bffe03 	ldbu	r2,-8(fp)
  800804:	10803fcc 	andi	r2,r2,255
  800808:	1080201c 	xori	r2,r2,128
  80080c:	10bfe004 	addi	r2,r2,-128
  800810:	10000c0e 	bge	r2,zero,800844 <SendCMD+0x60>
   {
      cmd &= 0x7F;
  800814:	e0bffe03 	ldbu	r2,-8(fp)
  800818:	10801fcc 	andi	r2,r2,127
  80081c:	e0bffe05 	stb	r2,-8(fp)
      res = SendCMD(CMD55, 0);
  800820:	01001dc4 	movi	r4,119
  800824:	000b883a 	mov	r5,zero
  800828:	08007e40 	call	8007e4 <SendCMD>
  80082c:	e0bffd45 	stb	r2,-11(fp)
      if (res > 1)
  800830:	e0bffd43 	ldbu	r2,-11(fp)
  800834:	108000b0 	cmpltui	r2,r2,2
  800838:	1000021e 	bne	r2,zero,800844 <SendCMD+0x60>
         return res;
  80083c:	e0bffd43 	ldbu	r2,-11(fp)
  800840:	00007706 	br	800a20 <SendCMD+0x23c>
   }

   /* Select the card and wait for ready */
   DESELECT();
  800844:	d0a76c17 	ldw	r2,-25168(gp)
  800848:	10800054 	ori	r2,r2,1
  80084c:	d0a76c15 	stw	r2,-25168(gp)
  800850:	00a04034 	movhi	r2,33024
  800854:	10841204 	addi	r2,r2,4168
  800858:	d0e76c17 	ldw	r3,-25168(gp)
  80085c:	10c00015 	stw	r3,0(r2)
   SELECT();
  800860:	d0e76c17 	ldw	r3,-25168(gp)
  800864:	00bfff84 	movi	r2,-2
  800868:	1884703a 	and	r2,r3,r2
  80086c:	d0a76c15 	stw	r2,-25168(gp)
  800870:	00a04034 	movhi	r2,33024
  800874:	10841204 	addi	r2,r2,4168
  800878:	d0e76c17 	ldw	r3,-25168(gp)
  80087c:	10c00015 	stw	r3,0(r2)

   if (WaitReady() != 0xFF)
  800880:	080074c0 	call	80074c <WaitReady>
  800884:	10803fcc 	andi	r2,r2,255
  800888:	10803fe0 	cmpeqi	r2,r2,255
  80088c:	1000021e 	bne	r2,zero,800898 <SendCMD+0xb4>
      return 0xFF;
  800890:	00bfffc4 	movi	r2,-1
  800894:	00006206 	br	800a20 <SendCMD+0x23c>

   /* Send command packet */
   TRANSMIT_U8(cmd); /* Start + Command index */
  800898:	00a04034 	movhi	r2,33024
  80089c:	10841004 	addi	r2,r2,4160
  8008a0:	e0fffe03 	ldbu	r3,-8(fp)
  8008a4:	10c00015 	stw	r3,0(r2)
  8008a8:	0001883a 	nop
  8008ac:	00a04034 	movhi	r2,33024
  8008b0:	10841304 	addi	r2,r2,4172
  8008b4:	10800017 	ldw	r2,0(r2)
  8008b8:	1080004c 	andi	r2,r2,1
  8008bc:	103ffb26 	beq	r2,zero,8008ac <__alt_data_end+0xff8008ac>
   TRANSMIT_U8((FFS_U8) (arg >> 24));  /* Argument[31..24] */
  8008c0:	00a04034 	movhi	r2,33024
  8008c4:	10841004 	addi	r2,r2,4160
  8008c8:	e0ffff17 	ldw	r3,-4(fp)
  8008cc:	1806d63a 	srli	r3,r3,24
  8008d0:	18c03fcc 	andi	r3,r3,255
  8008d4:	10c00015 	stw	r3,0(r2)
  8008d8:	0001883a 	nop
  8008dc:	00a04034 	movhi	r2,33024
  8008e0:	10841304 	addi	r2,r2,4172
  8008e4:	10800017 	ldw	r2,0(r2)
  8008e8:	1080004c 	andi	r2,r2,1
  8008ec:	103ffb26 	beq	r2,zero,8008dc <__alt_data_end+0xff8008dc>
   TRANSMIT_U8((FFS_U8) (arg >> 16));  /* Argument[23..16] */
  8008f0:	00a04034 	movhi	r2,33024
  8008f4:	10841004 	addi	r2,r2,4160
  8008f8:	e0ffff17 	ldw	r3,-4(fp)
  8008fc:	1806d43a 	srli	r3,r3,16
  800900:	18c03fcc 	andi	r3,r3,255
  800904:	10c00015 	stw	r3,0(r2)
  800908:	0001883a 	nop
  80090c:	00a04034 	movhi	r2,33024
  800910:	10841304 	addi	r2,r2,4172
  800914:	10800017 	ldw	r2,0(r2)
  800918:	1080004c 	andi	r2,r2,1
  80091c:	103ffb26 	beq	r2,zero,80090c <__alt_data_end+0xff80090c>
   TRANSMIT_U8((FFS_U8) (arg >> 8));   /* Argument[15..8] */
  800920:	00a04034 	movhi	r2,33024
  800924:	10841004 	addi	r2,r2,4160
  800928:	e0ffff17 	ldw	r3,-4(fp)
  80092c:	1806d23a 	srli	r3,r3,8
  800930:	18c03fcc 	andi	r3,r3,255
  800934:	10c00015 	stw	r3,0(r2)
  800938:	0001883a 	nop
  80093c:	00a04034 	movhi	r2,33024
  800940:	10841304 	addi	r2,r2,4172
  800944:	10800017 	ldw	r2,0(r2)
  800948:	1080004c 	andi	r2,r2,1
  80094c:	103ffb26 	beq	r2,zero,80093c <__alt_data_end+0xff80093c>
   TRANSMIT_U8((FFS_U8) arg); /* Argument[7..0] */
  800950:	00a04034 	movhi	r2,33024
  800954:	10841004 	addi	r2,r2,4160
  800958:	e0ffff17 	ldw	r3,-4(fp)
  80095c:	18c03fcc 	andi	r3,r3,255
  800960:	10c00015 	stw	r3,0(r2)
  800964:	0001883a 	nop
  800968:	00a04034 	movhi	r2,33024
  80096c:	10841304 	addi	r2,r2,4172
  800970:	10800017 	ldw	r2,0(r2)
  800974:	1080004c 	andi	r2,r2,1
  800978:	103ffb26 	beq	r2,zero,800968 <__alt_data_end+0xff800968>

   n = 0x01;   /* Dummy CRC + Stop */
  80097c:	00800044 	movi	r2,1
  800980:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD0)
  800984:	e0bffe03 	ldbu	r2,-8(fp)
  800988:	10801018 	cmpnei	r2,r2,64
  80098c:	1000021e 	bne	r2,zero,800998 <SendCMD+0x1b4>
      n = 0x95;   /* Valid CRC for CMD0(0) */
  800990:	00bfe544 	movi	r2,-107
  800994:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD8)
  800998:	e0bffe03 	ldbu	r2,-8(fp)
  80099c:	10801218 	cmpnei	r2,r2,72
  8009a0:	1000021e 	bne	r2,zero,8009ac <SendCMD+0x1c8>
      n = 0x87;   /* Valid CRC for CMD8(0x1AA) */
  8009a4:	00bfe1c4 	movi	r2,-121
  8009a8:	e0bffd05 	stb	r2,-12(fp)
   TRANSMIT_U8(n);
  8009ac:	00a04034 	movhi	r2,33024
  8009b0:	10841004 	addi	r2,r2,4160
  8009b4:	e0fffd03 	ldbu	r3,-12(fp)
  8009b8:	10c00015 	stw	r3,0(r2)
  8009bc:	0001883a 	nop
  8009c0:	00a04034 	movhi	r2,33024
  8009c4:	10841304 	addi	r2,r2,4172
  8009c8:	10800017 	ldw	r2,0(r2)
  8009cc:	1080004c 	andi	r2,r2,1
  8009d0:	103ffb26 	beq	r2,zero,8009c0 <__alt_data_end+0xff8009c0>

   /* Receive command response */
   if (cmd == CMD12)
  8009d4:	e0bffe03 	ldbu	r2,-8(fp)
  8009d8:	10801318 	cmpnei	r2,r2,76
  8009dc:	1000011e 	bne	r2,zero,8009e4 <SendCMD+0x200>
      ReceiveU8();   /* Skip a stuff byte when stop reading */
  8009e0:	08004240 	call	800424 <ReceiveU8>

   n = 10;  /* Wait for a valid response in timeout of 10 attempts */
  8009e4:	00800284 	movi	r2,10
  8009e8:	e0bffd05 	stb	r2,-12(fp)
   do
   {
      res = ReceiveU8();
  8009ec:	08004240 	call	800424 <ReceiveU8>
  8009f0:	e0bffd45 	stb	r2,-11(fp)
   }
   while ((res & 0x80) && --n);
  8009f4:	e0bffd43 	ldbu	r2,-11(fp)
  8009f8:	10803fcc 	andi	r2,r2,255
  8009fc:	1080201c 	xori	r2,r2,128
  800a00:	10bfe004 	addi	r2,r2,-128
  800a04:	1000050e 	bge	r2,zero,800a1c <SendCMD+0x238>
  800a08:	e0bffd03 	ldbu	r2,-12(fp)
  800a0c:	10bfffc4 	addi	r2,r2,-1
  800a10:	e0bffd05 	stb	r2,-12(fp)
  800a14:	e0bffd03 	ldbu	r2,-12(fp)
  800a18:	103ff41e 	bne	r2,zero,8009ec <__alt_data_end+0xff8009ec>

   return(res); /* Return with the response value */
  800a1c:	e0bffd43 	ldbu	r2,-11(fp)
} /* SendCMD */
  800a20:	e037883a 	mov	sp,fp
  800a24:	dfc00117 	ldw	ra,4(sp)
  800a28:	df000017 	ldw	fp,0(sp)
  800a2c:	dec00204 	addi	sp,sp,8
  800a30:	f800283a 	ret

00800a34 <ffs_DiskIOInit>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: FFS_OK                                                         */
/***************************************************************************/
FFS_RESULT ffs_DiskIOInit (void)
{
  800a34:	defffe04 	addi	sp,sp,-8
  800a38:	dfc00115 	stw	ra,4(sp)
  800a3c:	df000015 	stw	fp,0(sp)
  800a40:	d839883a 	mov	fp,sp
   (void)XMITDummy;

   InitDiskIOHardware();
  800a44:	080036c0 	call	80036c <InitDiskIOHardware>

   return(FFS_OK);
  800a48:	0005883a 	mov	r2,zero
} /* ffs_DiskIOInit */
  800a4c:	e037883a 	mov	sp,fp
  800a50:	dfc00117 	ldw	ra,4(sp)
  800a54:	df000017 	ldw	fp,0(sp)
  800a58:	dec00204 	addi	sp,sp,8
  800a5c:	f800283a 	ret

00800a60 <ffs_DiskIOTimerproc>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void ffs_DiskIOTimerproc (void)
{
  800a60:	defffc04 	addi	sp,sp,-16
  800a64:	dfc00315 	stw	ra,12(sp)
  800a68:	df000215 	stw	fp,8(sp)
  800a6c:	df000204 	addi	fp,sp,8
   static FFS_U32 pvm;
   FFS_U32 n;
   DSTATUS s;

   /* 100Hz decrement timer */
   n = Timer1;
  800a70:	d0a76a8b 	ldhu	r2,-25174(gp)
  800a74:	10bfffcc 	andi	r2,r2,65535
  800a78:	e0bfff15 	stw	r2,-4(fp)
   if (n)
  800a7c:	e0bfff17 	ldw	r2,-4(fp)
  800a80:	10000526 	beq	r2,zero,800a98 <ffs_DiskIOTimerproc+0x38>
      Timer1 = (FFS_U16)-- n;
  800a84:	e0bfff17 	ldw	r2,-4(fp)
  800a88:	10bfffc4 	addi	r2,r2,-1
  800a8c:	e0bfff15 	stw	r2,-4(fp)
  800a90:	e0bfff17 	ldw	r2,-4(fp)
  800a94:	d0a76a8d 	sth	r2,-25174(gp)
   n = Timer2;
  800a98:	d0a76b0b 	ldhu	r2,-25172(gp)
  800a9c:	10bfffcc 	andi	r2,r2,65535
  800aa0:	e0bfff15 	stw	r2,-4(fp)
   if (n)
  800aa4:	e0bfff17 	ldw	r2,-4(fp)
  800aa8:	10000526 	beq	r2,zero,800ac0 <ffs_DiskIOTimerproc+0x60>
      Timer2 = (FFS_U16)-- n;
  800aac:	e0bfff17 	ldw	r2,-4(fp)
  800ab0:	10bfffc4 	addi	r2,r2,-1
  800ab4:	e0bfff15 	stw	r2,-4(fp)
  800ab8:	e0bfff17 	ldw	r2,-4(fp)
  800abc:	d0a76b0d 	sth	r2,-25172(gp)

   n = pvm;
  800ac0:	d0a76d17 	ldw	r2,-25164(gp)
  800ac4:	e0bfff15 	stw	r2,-4(fp)

   /* Sample socket switch */
   pvm = GetCDWP();
  800ac8:	08007280 	call	800728 <GetCDWP>
  800acc:	d0a76d15 	stw	r2,-25164(gp)

   /* Have contacts stabled? */
   if (n == pvm)
  800ad0:	d0a76d17 	ldw	r2,-25164(gp)
  800ad4:	e0ffff17 	ldw	r3,-4(fp)
  800ad8:	18801e1e 	bne	r3,r2,800b54 <ffs_DiskIOTimerproc+0xf4>
   {
      s = Stat;
  800adc:	d0a00003 	ldbu	r2,-32768(gp)
  800ae0:	e0bffe05 	stb	r2,-8(fp)

      /* Check write protect */
      if (pvm & SOCK_WP_ACTIVE)
  800ae4:	d0a76d17 	ldw	r2,-25164(gp)
  800ae8:	1080008c 	andi	r2,r2,2
  800aec:	10000426 	beq	r2,zero,800b00 <ffs_DiskIOTimerproc+0xa0>
         s |= STA_PROTECT;
  800af0:	e0bffe03 	ldbu	r2,-8(fp)
  800af4:	10800114 	ori	r2,r2,4
  800af8:	e0bffe05 	stb	r2,-8(fp)
  800afc:	00000406 	br	800b10 <ffs_DiskIOTimerproc+0xb0>
      else
         s &= ~STA_PROTECT;
  800b00:	e0fffe03 	ldbu	r3,-8(fp)
  800b04:	00bffec4 	movi	r2,-5
  800b08:	1884703a 	and	r2,r3,r2
  800b0c:	e0bffe05 	stb	r2,-8(fp)

      /* Check socket empty */
      if (pvm & SOCK_CD_EMPTY)
  800b10:	d0a76d17 	ldw	r2,-25164(gp)
  800b14:	1080004c 	andi	r2,r2,1
  800b18:	10000426 	beq	r2,zero,800b2c <ffs_DiskIOTimerproc+0xcc>
         s |= (STA_NODISK | STA_NOINIT);
  800b1c:	e0bffe03 	ldbu	r2,-8(fp)
  800b20:	108000d4 	ori	r2,r2,3
  800b24:	e0bffe05 	stb	r2,-8(fp)
  800b28:	00000406 	br	800b3c <ffs_DiskIOTimerproc+0xdc>
      else
         s &= ~STA_NODISK;
  800b2c:	e0fffe03 	ldbu	r3,-8(fp)
  800b30:	00bfff44 	movi	r2,-3
  800b34:	1884703a 	and	r2,r3,r2
  800b38:	e0bffe05 	stb	r2,-8(fp)

#if (FFS_SUPPORT_HW_WP == 0)
      /* Ignore the write protect */
      s &= ~STA_PROTECT;
  800b3c:	e0fffe03 	ldbu	r3,-8(fp)
  800b40:	00bffec4 	movi	r2,-5
  800b44:	1884703a 	and	r2,r3,r2
  800b48:	e0bffe05 	stb	r2,-8(fp)
#endif

      Stat = s;
  800b4c:	e0bffe03 	ldbu	r2,-8(fp)
  800b50:	d0a00005 	stb	r2,-32768(gp)
   }
} /* ffs_DiskIOTimerproc */
  800b54:	e037883a 	mov	sp,fp
  800b58:	dfc00117 	ldw	ra,4(sp)
  800b5c:	df000017 	ldw	fp,0(sp)
  800b60:	dec00204 	addi	sp,sp,8
  800b64:	f800283a 	ret

00800b68 <ffs_DiskIOInitialize>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOInitialize (FFS_U8 drv)
{
  800b68:	defffa04 	addi	sp,sp,-24
  800b6c:	dfc00515 	stw	ra,20(sp)
  800b70:	df000415 	stw	fp,16(sp)
  800b74:	dc000315 	stw	r16,12(sp)
  800b78:	df000404 	addi	fp,sp,16
  800b7c:	2005883a 	mov	r2,r4
  800b80:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, ty, cmd, ocr[4];

   (void)drv;

   if (Stat & STA_NODISK)  /* No card in the socket */
  800b84:	d0a00003 	ldbu	r2,-32768(gp)
  800b88:	10803fcc 	andi	r2,r2,255
  800b8c:	1080008c 	andi	r2,r2,2
  800b90:	10000226 	beq	r2,zero,800b9c <ffs_DiskIOInitialize+0x34>
      return Stat;
  800b94:	d0a00003 	ldbu	r2,-32768(gp)
  800b98:	00008406 	br	800dac <ffs_DiskIOInitialize+0x244>

   /* low speed during init */
   SetLowSpeed();
  800b9c:	08002b40 	call	8002b4 <SetLowSpeed>

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
  800ba0:	00800284 	movi	r2,10
  800ba4:	e0bffc05 	stb	r2,-16(fp)
  800ba8:	00000406 	br	800bbc <ffs_DiskIOInitialize+0x54>
      ReceiveU8();   /* 80 dummy clocks */
  800bac:	08004240 	call	800424 <ReceiveU8>

   /* low speed during init */
   SetLowSpeed();

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
  800bb0:	e0bffc03 	ldbu	r2,-16(fp)
  800bb4:	10bfffc4 	addi	r2,r2,-1
  800bb8:	e0bffc05 	stb	r2,-16(fp)
  800bbc:	e0bffc03 	ldbu	r2,-16(fp)
  800bc0:	103ffa1e 	bne	r2,zero,800bac <__alt_data_end+0xff800bac>
      ReceiveU8();   /* 80 dummy clocks */

   ty = 0;
  800bc4:	e03ffc45 	stb	zero,-15(fp)
   if (SendCMD(CMD0, 0) == 1)
  800bc8:	01001004 	movi	r4,64
  800bcc:	000b883a 	mov	r5,zero
  800bd0:	08007e40 	call	8007e4 <SendCMD>
  800bd4:	10803fcc 	andi	r2,r2,255
  800bd8:	10800058 	cmpnei	r2,r2,1
  800bdc:	1000681e 	bne	r2,zero,800d80 <ffs_DiskIOInitialize+0x218>
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
  800be0:	00801904 	movi	r2,100
  800be4:	d0a76a8d 	sth	r2,-25174(gp)
      if (SendCMD(CMD8, 0x1AA) == 1)
  800be8:	01001204 	movi	r4,72
  800bec:	01406a84 	movi	r5,426
  800bf0:	08007e40 	call	8007e4 <SendCMD>
  800bf4:	10803fcc 	andi	r2,r2,255
  800bf8:	10800058 	cmpnei	r2,r2,1
  800bfc:	10003e1e 	bne	r2,zero,800cf8 <ffs_DiskIOInitialize+0x190>
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
  800c00:	e03ffc05 	stb	zero,-16(fp)
  800c04:	00000906 	br	800c2c <ffs_DiskIOInitialize+0xc4>
            ocr[n] = ReceiveU8();
  800c08:	e43ffc03 	ldbu	r16,-16(fp)
  800c0c:	08004240 	call	800424 <ReceiveU8>
  800c10:	1007883a 	mov	r3,r2
  800c14:	e0bffcc4 	addi	r2,fp,-13
  800c18:	1405883a 	add	r2,r2,r16
  800c1c:	10c00005 	stb	r3,0(r2)
   if (SendCMD(CMD0, 0) == 1)
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
      if (SendCMD(CMD8, 0x1AA) == 1)
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
  800c20:	e0bffc03 	ldbu	r2,-16(fp)
  800c24:	10800044 	addi	r2,r2,1
  800c28:	e0bffc05 	stb	r2,-16(fp)
  800c2c:	e0bffc03 	ldbu	r2,-16(fp)
  800c30:	10800130 	cmpltui	r2,r2,4
  800c34:	103ff41e 	bne	r2,zero,800c08 <__alt_data_end+0xff800c08>
            ocr[n] = ReceiveU8();
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
  800c38:	e0bffd43 	ldbu	r2,-11(fp)
  800c3c:	10803fcc 	andi	r2,r2,255
  800c40:	10800058 	cmpnei	r2,r2,1
  800c44:	10004e1e 	bne	r2,zero,800d80 <ffs_DiskIOInitialize+0x218>
  800c48:	e0bffd83 	ldbu	r2,-10(fp)
  800c4c:	10803fcc 	andi	r2,r2,255
  800c50:	10802a98 	cmpnei	r2,r2,170
  800c54:	10004a1e 	bne	r2,zero,800d80 <ffs_DiskIOInitialize+0x218>
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
  800c58:	0001883a 	nop
  800c5c:	d0a76a8b 	ldhu	r2,-25174(gp)
  800c60:	10bfffcc 	andi	r2,r2,65535
  800c64:	10000526 	beq	r2,zero,800c7c <ffs_DiskIOInitialize+0x114>
  800c68:	01003a44 	movi	r4,233
  800c6c:	01500034 	movhi	r5,16384
  800c70:	08007e40 	call	8007e4 <SendCMD>
  800c74:	10803fcc 	andi	r2,r2,255
  800c78:	103ff81e 	bne	r2,zero,800c5c <__alt_data_end+0xff800c5c>
            if (Timer1 && SendCMD(CMD58, 0) == 0)
  800c7c:	d0a76a8b 	ldhu	r2,-25174(gp)
  800c80:	10bfffcc 	andi	r2,r2,65535
  800c84:	10003e26 	beq	r2,zero,800d80 <ffs_DiskIOInitialize+0x218>
  800c88:	01001e84 	movi	r4,122
  800c8c:	000b883a 	mov	r5,zero
  800c90:	08007e40 	call	8007e4 <SendCMD>
  800c94:	10803fcc 	andi	r2,r2,255
  800c98:	1000391e 	bne	r2,zero,800d80 <ffs_DiskIOInitialize+0x218>
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
  800c9c:	e03ffc05 	stb	zero,-16(fp)
  800ca0:	00000906 	br	800cc8 <ffs_DiskIOInitialize+0x160>
                  ocr[n] = ReceiveU8();
  800ca4:	e43ffc03 	ldbu	r16,-16(fp)
  800ca8:	08004240 	call	800424 <ReceiveU8>
  800cac:	1007883a 	mov	r3,r2
  800cb0:	e0bffcc4 	addi	r2,fp,-13
  800cb4:	1405883a 	add	r2,r2,r16
  800cb8:	10c00005 	stb	r3,0(r2)
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
            if (Timer1 && SendCMD(CMD58, 0) == 0)
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
  800cbc:	e0bffc03 	ldbu	r2,-16(fp)
  800cc0:	10800044 	addi	r2,r2,1
  800cc4:	e0bffc05 	stb	r2,-16(fp)
  800cc8:	e0bffc03 	ldbu	r2,-16(fp)
  800ccc:	10800130 	cmpltui	r2,r2,4
  800cd0:	103ff41e 	bne	r2,zero,800ca4 <__alt_data_end+0xff800ca4>
                  ocr[n] = ReceiveU8();
               ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
  800cd4:	e0bffcc3 	ldbu	r2,-13(fp)
  800cd8:	10803fcc 	andi	r2,r2,255
  800cdc:	1080100c 	andi	r2,r2,64
  800ce0:	10000226 	beq	r2,zero,800cec <ffs_DiskIOInitialize+0x184>
  800ce4:	00800304 	movi	r2,12
  800ce8:	00000106 	br	800cf0 <ffs_DiskIOInitialize+0x188>
  800cec:	00800104 	movi	r2,4
  800cf0:	e0bffc45 	stb	r2,-15(fp)
  800cf4:	00002206 	br	800d80 <ffs_DiskIOInitialize+0x218>
            }
         }
      }
      else
      {  /* SDC ver 1.XX or MMC */
         if (SendCMD(ACMD41, 0) <= 1)
  800cf8:	01003a44 	movi	r4,233
  800cfc:	000b883a 	mov	r5,zero
  800d00:	08007e40 	call	8007e4 <SendCMD>
  800d04:	10803fcc 	andi	r2,r2,255
  800d08:	108000a8 	cmpgeui	r2,r2,2
  800d0c:	1000051e 	bne	r2,zero,800d24 <ffs_DiskIOInitialize+0x1bc>
         {
            ty  = CT_SD1;
  800d10:	00800084 	movi	r2,2
  800d14:	e0bffc45 	stb	r2,-15(fp)
            cmd = ACMD41;  /* SDC ver 1.XX */
  800d18:	00bffa44 	movi	r2,-23
  800d1c:	e0bffc85 	stb	r2,-14(fp)
  800d20:	00000406 	br	800d34 <ffs_DiskIOInitialize+0x1cc>
         }
         else
         {
            ty  = CT_MMC;
  800d24:	00800044 	movi	r2,1
  800d28:	e0bffc45 	stb	r2,-15(fp)
            cmd = CMD1; /* MMC */
  800d2c:	00801044 	movi	r2,65
  800d30:	e0bffc85 	stb	r2,-14(fp)
         }
         while (Timer1 && SendCMD(cmd, 0)) ; /* Wait for leaving idle state */
  800d34:	0001883a 	nop
  800d38:	d0a76a8b 	ldhu	r2,-25174(gp)
  800d3c:	10bfffcc 	andi	r2,r2,65535
  800d40:	10000626 	beq	r2,zero,800d5c <ffs_DiskIOInitialize+0x1f4>
  800d44:	e0bffc83 	ldbu	r2,-14(fp)
  800d48:	1009883a 	mov	r4,r2
  800d4c:	000b883a 	mov	r5,zero
  800d50:	08007e40 	call	8007e4 <SendCMD>
  800d54:	10803fcc 	andi	r2,r2,255
  800d58:	103ff71e 	bne	r2,zero,800d38 <__alt_data_end+0xff800d38>
         if (!Timer1 || SendCMD(CMD16, 512) != 0)  /* Select R/W block length */
  800d5c:	d0a76a8b 	ldhu	r2,-25174(gp)
  800d60:	10bfffcc 	andi	r2,r2,65535
  800d64:	10000526 	beq	r2,zero,800d7c <ffs_DiskIOInitialize+0x214>
  800d68:	01001404 	movi	r4,80
  800d6c:	01408004 	movi	r5,512
  800d70:	08007e40 	call	8007e4 <SendCMD>
  800d74:	10803fcc 	andi	r2,r2,255
  800d78:	10000126 	beq	r2,zero,800d80 <ffs_DiskIOInitialize+0x218>
            ty = 0;
  800d7c:	e03ffc45 	stb	zero,-15(fp)
      }
   }
   CardType = ty;
  800d80:	e0bffc43 	ldbu	r2,-15(fp)
  800d84:	d0a76a05 	stb	r2,-25176(gp)
   ReleaseBus();
  800d88:	08007a00 	call	8007a0 <ReleaseBus>

   if (ty)
  800d8c:	e0bffc43 	ldbu	r2,-15(fp)
  800d90:	10000526 	beq	r2,zero,800da8 <ffs_DiskIOInitialize+0x240>
   {  /* Initialization succeded */
      Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
  800d94:	d0e00003 	ldbu	r3,-32768(gp)
  800d98:	00bfff84 	movi	r2,-2
  800d9c:	1884703a 	and	r2,r3,r2
  800da0:	d0a00005 	stb	r2,-32768(gp)

      SetHighSpeed();
  800da4:	08003000 	call	800300 <SetHighSpeed>
   else
   {  /* Initialization failed */
      POWER_OFF();
   }

   return(Stat);
  800da8:	d0a00003 	ldbu	r2,-32768(gp)
} /* ffs_DiskIOInitialize */
  800dac:	e6ffff04 	addi	sp,fp,-4
  800db0:	dfc00217 	ldw	ra,8(sp)
  800db4:	df000117 	ldw	fp,4(sp)
  800db8:	dc000017 	ldw	r16,0(sp)
  800dbc:	dec00304 	addi	sp,sp,12
  800dc0:	f800283a 	ret

00800dc4 <ffs_DiskIOStatus>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOStatus (FFS_U8 drv)
{
  800dc4:	defffe04 	addi	sp,sp,-8
  800dc8:	df000115 	stw	fp,4(sp)
  800dcc:	df000104 	addi	fp,sp,4
  800dd0:	2005883a 	mov	r2,r4
  800dd4:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   return(Stat);
  800dd8:	d0a00003 	ldbu	r2,-32768(gp)
} /* ffs_DiskIOStatus */
  800ddc:	e037883a 	mov	sp,fp
  800de0:	df000017 	ldw	fp,0(sp)
  800de4:	dec00104 	addi	sp,sp,4
  800de8:	f800283a 	ret

00800dec <ffs_DiskIORead>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIORead (FFS_U8 drv, FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
  800dec:	defffa04 	addi	sp,sp,-24
  800df0:	dfc00515 	stw	ra,20(sp)
  800df4:	df000415 	stw	fp,16(sp)
  800df8:	df000404 	addi	fp,sp,16
  800dfc:	2007883a 	mov	r3,r4
  800e00:	e17ffd15 	stw	r5,-12(fp)
  800e04:	e1bffe15 	stw	r6,-8(fp)
  800e08:	3805883a 	mov	r2,r7
  800e0c:	e0fffc05 	stb	r3,-16(fp)
  800e10:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
  800e14:	e0bfff03 	ldbu	r2,-4(fp)
  800e18:	1000021e 	bne	r2,zero,800e24 <ffs_DiskIORead+0x38>
      return RES_PARERR;
  800e1c:	00800104 	movi	r2,4
  800e20:	00003406 	br	800ef4 <ffs_DiskIORead+0x108>
   if (Stat & STA_NOINIT)
  800e24:	d0a00003 	ldbu	r2,-32768(gp)
  800e28:	10803fcc 	andi	r2,r2,255
  800e2c:	1080004c 	andi	r2,r2,1
  800e30:	10000226 	beq	r2,zero,800e3c <ffs_DiskIORead+0x50>
      return RES_NOTRDY;
  800e34:	008000c4 	movi	r2,3
  800e38:	00002e06 	br	800ef4 <ffs_DiskIORead+0x108>

   if (!(CardType & CT_BLOCK))
  800e3c:	d0a76a03 	ldbu	r2,-25176(gp)
  800e40:	10803fcc 	andi	r2,r2,255
  800e44:	1080020c 	andi	r2,r2,8
  800e48:	1000031e 	bne	r2,zero,800e58 <ffs_DiskIORead+0x6c>
      sector *= 512; /* Convert LBA to byte address if needed */
  800e4c:	e0bffe17 	ldw	r2,-8(fp)
  800e50:	1004927a 	slli	r2,r2,9
  800e54:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
  800e58:	e0bfff03 	ldbu	r2,-4(fp)
  800e5c:	10800058 	cmpnei	r2,r2,1
  800e60:	10000b1e 	bne	r2,zero,800e90 <ffs_DiskIORead+0xa4>
   {  /* Single block read */
      if ((SendCMD(CMD17, sector) == 0)   /* READ_SINGLE_BLOCK */
  800e64:	01001444 	movi	r4,81
  800e68:	e17ffe17 	ldw	r5,-8(fp)
  800e6c:	08007e40 	call	8007e4 <SendCMD>
  800e70:	10803fcc 	andi	r2,r2,255
  800e74:	10001b1e 	bne	r2,zero,800ee4 <ffs_DiskIORead+0xf8>
          && ReceiveDatablock(buff, 512))
  800e78:	e13ffd17 	ldw	r4,-12(fp)
  800e7c:	01408004 	movi	r5,512
  800e80:	08004740 	call	800474 <ReceiveDatablock>
  800e84:	10001726 	beq	r2,zero,800ee4 <ffs_DiskIORead+0xf8>
         count = 0;
  800e88:	e03fff05 	stb	zero,-4(fp)
  800e8c:	00001506 	br	800ee4 <ffs_DiskIORead+0xf8>
   }
   else
   {  /* Multiple block read */
      if (SendCMD(CMD18, sector) == 0)
  800e90:	01001484 	movi	r4,82
  800e94:	e17ffe17 	ldw	r5,-8(fp)
  800e98:	08007e40 	call	8007e4 <SendCMD>
  800e9c:	10803fcc 	andi	r2,r2,255
  800ea0:	1000101e 	bne	r2,zero,800ee4 <ffs_DiskIORead+0xf8>
      {  /* READ_MULTIPLE_BLOCK */
         do
         {
            if (!ReceiveDatablock(buff, 512))
  800ea4:	e13ffd17 	ldw	r4,-12(fp)
  800ea8:	01408004 	movi	r5,512
  800eac:	08004740 	call	800474 <ReceiveDatablock>
  800eb0:	1000011e 	bne	r2,zero,800eb8 <ffs_DiskIORead+0xcc>
               break;
  800eb4:	00000806 	br	800ed8 <ffs_DiskIORead+0xec>
            buff += 512;
  800eb8:	e0bffd17 	ldw	r2,-12(fp)
  800ebc:	10808004 	addi	r2,r2,512
  800ec0:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
  800ec4:	e0bfff03 	ldbu	r2,-4(fp)
  800ec8:	10bfffc4 	addi	r2,r2,-1
  800ecc:	e0bfff05 	stb	r2,-4(fp)
  800ed0:	e0bfff03 	ldbu	r2,-4(fp)
  800ed4:	103ff31e 	bne	r2,zero,800ea4 <__alt_data_end+0xff800ea4>
         SendCMD(CMD12, 0);   /* STOP_TRANSMISSION */
  800ed8:	01001304 	movi	r4,76
  800edc:	000b883a 	mov	r5,zero
  800ee0:	08007e40 	call	8007e4 <SendCMD>
      }
   }
   ReleaseBus();
  800ee4:	08007a00 	call	8007a0 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
  800ee8:	e0bfff03 	ldbu	r2,-4(fp)
  800eec:	1004c03a 	cmpne	r2,r2,zero
  800ef0:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIORead */
  800ef4:	e037883a 	mov	sp,fp
  800ef8:	dfc00117 	ldw	ra,4(sp)
  800efc:	df000017 	ldw	fp,0(sp)
  800f00:	dec00204 	addi	sp,sp,8
  800f04:	f800283a 	ret

00800f08 <ffs_DiskIOWrite>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOWrite (FFS_U8 drv, const FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
  800f08:	defffa04 	addi	sp,sp,-24
  800f0c:	dfc00515 	stw	ra,20(sp)
  800f10:	df000415 	stw	fp,16(sp)
  800f14:	df000404 	addi	fp,sp,16
  800f18:	2007883a 	mov	r3,r4
  800f1c:	e17ffd15 	stw	r5,-12(fp)
  800f20:	e1bffe15 	stw	r6,-8(fp)
  800f24:	3805883a 	mov	r2,r7
  800f28:	e0fffc05 	stb	r3,-16(fp)
  800f2c:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
  800f30:	e0bfff03 	ldbu	r2,-4(fp)
  800f34:	1000021e 	bne	r2,zero,800f40 <ffs_DiskIOWrite+0x38>
      return RES_PARERR;
  800f38:	00800104 	movi	r2,4
  800f3c:	00004806 	br	801060 <ffs_DiskIOWrite+0x158>
   if (Stat & STA_NOINIT)
  800f40:	d0a00003 	ldbu	r2,-32768(gp)
  800f44:	10803fcc 	andi	r2,r2,255
  800f48:	1080004c 	andi	r2,r2,1
  800f4c:	10000226 	beq	r2,zero,800f58 <ffs_DiskIOWrite+0x50>
      return RES_NOTRDY;
  800f50:	008000c4 	movi	r2,3
  800f54:	00004206 	br	801060 <ffs_DiskIOWrite+0x158>
   if (Stat & STA_PROTECT)
  800f58:	d0a00003 	ldbu	r2,-32768(gp)
  800f5c:	10803fcc 	andi	r2,r2,255
  800f60:	1080010c 	andi	r2,r2,4
  800f64:	10000226 	beq	r2,zero,800f70 <ffs_DiskIOWrite+0x68>
      return RES_WRPRT;
  800f68:	00800084 	movi	r2,2
  800f6c:	00003c06 	br	801060 <ffs_DiskIOWrite+0x158>

   if (!(CardType & CT_BLOCK))
  800f70:	d0a76a03 	ldbu	r2,-25176(gp)
  800f74:	10803fcc 	andi	r2,r2,255
  800f78:	1080020c 	andi	r2,r2,8
  800f7c:	1000031e 	bne	r2,zero,800f8c <ffs_DiskIOWrite+0x84>
      sector *= 512; /* Convert LBA to byte address if needed */
  800f80:	e0bffe17 	ldw	r2,-8(fp)
  800f84:	1004927a 	slli	r2,r2,9
  800f88:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
  800f8c:	e0bfff03 	ldbu	r2,-4(fp)
  800f90:	10800058 	cmpnei	r2,r2,1
  800f94:	10000b1e 	bne	r2,zero,800fc4 <ffs_DiskIOWrite+0xbc>
   {  /* Single block write */
      if ((SendCMD(CMD24, sector) == 0)   /* WRITE_BLOCK */
  800f98:	01001604 	movi	r4,88
  800f9c:	e17ffe17 	ldw	r5,-8(fp)
  800fa0:	08007e40 	call	8007e4 <SendCMD>
  800fa4:	10803fcc 	andi	r2,r2,255
  800fa8:	1000291e 	bne	r2,zero,801050 <ffs_DiskIOWrite+0x148>
          && TransmitDatablock(buff, 0xFE))
  800fac:	e13ffd17 	ldw	r4,-12(fp)
  800fb0:	01403f84 	movi	r5,254
  800fb4:	08005a00 	call	8005a0 <TransmitDatablock>
  800fb8:	10002526 	beq	r2,zero,801050 <ffs_DiskIOWrite+0x148>
         count = 0;
  800fbc:	e03fff05 	stb	zero,-4(fp)
  800fc0:	00002306 	br	801050 <ffs_DiskIOWrite+0x148>
   }
   else
   {  /* Multiple block write */
      if (CardType & CT_SDC)
  800fc4:	d0a76a03 	ldbu	r2,-25176(gp)
  800fc8:	10803fcc 	andi	r2,r2,255
  800fcc:	1080018c 	andi	r2,r2,6
  800fd0:	10000726 	beq	r2,zero,800ff0 <ffs_DiskIOWrite+0xe8>
      {
         SendCMD(CMD55, 0);
  800fd4:	01001dc4 	movi	r4,119
  800fd8:	000b883a 	mov	r5,zero
  800fdc:	08007e40 	call	8007e4 <SendCMD>
         SendCMD(CMD23, count);  /* ACMD23 */
  800fe0:	e0bfff03 	ldbu	r2,-4(fp)
  800fe4:	010015c4 	movi	r4,87
  800fe8:	100b883a 	mov	r5,r2
  800fec:	08007e40 	call	8007e4 <SendCMD>
      }
      if (SendCMD(CMD25, sector) == 0)
  800ff0:	01001644 	movi	r4,89
  800ff4:	e17ffe17 	ldw	r5,-8(fp)
  800ff8:	08007e40 	call	8007e4 <SendCMD>
  800ffc:	10803fcc 	andi	r2,r2,255
  801000:	1000131e 	bne	r2,zero,801050 <ffs_DiskIOWrite+0x148>
      {  /* WRITE_MULTIPLE_BLOCK */
         do
         {
            if (!TransmitDatablock(buff, 0xFC))
  801004:	e13ffd17 	ldw	r4,-12(fp)
  801008:	01403f04 	movi	r5,252
  80100c:	08005a00 	call	8005a0 <TransmitDatablock>
  801010:	1000011e 	bne	r2,zero,801018 <ffs_DiskIOWrite+0x110>
               break;
  801014:	00000806 	br	801038 <ffs_DiskIOWrite+0x130>
            buff += 512;
  801018:	e0bffd17 	ldw	r2,-12(fp)
  80101c:	10808004 	addi	r2,r2,512
  801020:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
  801024:	e0bfff03 	ldbu	r2,-4(fp)
  801028:	10bfffc4 	addi	r2,r2,-1
  80102c:	e0bfff05 	stb	r2,-4(fp)
  801030:	e0bfff03 	ldbu	r2,-4(fp)
  801034:	103ff31e 	bne	r2,zero,801004 <__alt_data_end+0xff801004>
         if (!TransmitDatablock(0, 0xFD)) /* STOP_TRAN token */
  801038:	0009883a 	mov	r4,zero
  80103c:	01403f44 	movi	r5,253
  801040:	08005a00 	call	8005a0 <TransmitDatablock>
  801044:	1000021e 	bne	r2,zero,801050 <ffs_DiskIOWrite+0x148>
            count = 1;
  801048:	00800044 	movi	r2,1
  80104c:	e0bfff05 	stb	r2,-4(fp)
      }
   }
   ReleaseBus();
  801050:	08007a00 	call	8007a0 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
  801054:	e0bfff03 	ldbu	r2,-4(fp)
  801058:	1004c03a 	cmpne	r2,r2,zero
  80105c:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIOWrite */
  801060:	e037883a 	mov	sp,fp
  801064:	dfc00117 	ldw	ra,4(sp)
  801068:	df000017 	ldw	fp,0(sp)
  80106c:	dec00204 	addi	sp,sp,8
  801070:	f800283a 	ret

00801074 <ffs_DiskIOIoctl>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOIoctl (FFS_U8 drv, FFS_U8 ctrl, void *buff)
{
  801074:	defff204 	addi	sp,sp,-56
  801078:	dfc00d15 	stw	ra,52(sp)
  80107c:	df000c15 	stw	fp,48(sp)
  801080:	dc000b15 	stw	r16,44(sp)
  801084:	df000c04 	addi	fp,sp,48
  801088:	2007883a 	mov	r3,r4
  80108c:	2805883a 	mov	r2,r5
  801090:	e1bffe15 	stw	r6,-8(fp)
  801094:	e0fffc05 	stb	r3,-16(fp)
  801098:	e0bffd05 	stb	r2,-12(fp)
   DRESULT res;
   FFS_U8 n, csd[16], *ptr = buff;
  80109c:	e0bffe17 	ldw	r2,-8(fp)
  8010a0:	e0bff615 	stw	r2,-40(fp)
   FFS_U16 csize;

   (void)drv;

   if (Stat & STA_NOINIT)
  8010a4:	d0a00003 	ldbu	r2,-32768(gp)
  8010a8:	10803fcc 	andi	r2,r2,255
  8010ac:	1080004c 	andi	r2,r2,1
  8010b0:	10000226 	beq	r2,zero,8010bc <ffs_DiskIOIoctl+0x48>
      return RES_NOTRDY;
  8010b4:	008000c4 	movi	r2,3
  8010b8:	00011206 	br	801504 <ffs_DiskIOIoctl+0x490>

   res = RES_ERROR;
  8010bc:	00800044 	movi	r2,1
  8010c0:	e0bff415 	stw	r2,-48(fp)
   switch (ctrl)
  8010c4:	e0bffd03 	ldbu	r2,-12(fp)
  8010c8:	10c003e8 	cmpgeui	r3,r2,15
  8010cc:	1801091e 	bne	r3,zero,8014f4 <ffs_DiskIOIoctl+0x480>
  8010d0:	100690ba 	slli	r3,r2,2
  8010d4:	00802034 	movhi	r2,128
  8010d8:	10843a04 	addi	r2,r2,4328
  8010dc:	1885883a 	add	r2,r3,r2
  8010e0:	10800017 	ldw	r2,0(r2)
  8010e4:	1000683a 	jmp	r2
  8010e8:	00801124 	muli	r2,zero,68
  8010ec:	00801160 	cmpeqi	r2,zero,69
  8010f0:	00801274 	movhi	r2,73
  8010f4:	00801288 	cmpgei	r2,zero,74
  8010f8:	008014f4 	movhi	r2,83
  8010fc:	008014f4 	movhi	r2,83
  801100:	008014f4 	movhi	r2,83
  801104:	008014f4 	movhi	r2,83
  801108:	008014f4 	movhi	r2,83
  80110c:	008014f4 	movhi	r2,83
  801110:	008013f8 	rdprs	r2,zero,79
  801114:	0080140c 	andi	r2,zero,80
  801118:	0080143c 	xorhi	r2,zero,80
  80111c:	0080146c 	andhi	r2,zero,81
  801120:	008014c0 	call	8014c <__reset-0x77feb4>
   {
      case CTRL_SYNC:  /* Make sure that pending write process has been finished */
         SELECT();
  801124:	d0e76c17 	ldw	r3,-25168(gp)
  801128:	00bfff84 	movi	r2,-2
  80112c:	1884703a 	and	r2,r3,r2
  801130:	d0a76c15 	stw	r2,-25168(gp)
  801134:	00a04034 	movhi	r2,33024
  801138:	10841204 	addi	r2,r2,4168
  80113c:	d0e76c17 	ldw	r3,-25168(gp)
  801140:	10c00015 	stw	r3,0(r2)
         if (WaitReady() == 0xFF)
  801144:	080074c0 	call	80074c <WaitReady>
  801148:	10803fcc 	andi	r2,r2,255
  80114c:	10803fd8 	cmpnei	r2,r2,255
  801150:	1000021e 	bne	r2,zero,80115c <ffs_DiskIOIoctl+0xe8>
            res = RES_OK;
  801154:	e03ff415 	stw	zero,-48(fp)
         break;
  801158:	0000e806 	br	8014fc <ffs_DiskIOIoctl+0x488>
  80115c:	0000e706 	br	8014fc <ffs_DiskIOIoctl+0x488>

      case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
         if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
  801160:	01001244 	movi	r4,73
  801164:	000b883a 	mov	r5,zero
  801168:	08007e40 	call	8007e4 <SendCMD>
  80116c:	10803fcc 	andi	r2,r2,255
  801170:	10003f1e 	bne	r2,zero,801270 <ffs_DiskIOIoctl+0x1fc>
  801174:	e0bff784 	addi	r2,fp,-34
  801178:	1009883a 	mov	r4,r2
  80117c:	01400404 	movi	r5,16
  801180:	08004740 	call	800474 <ReceiveDatablock>
  801184:	10003a26 	beq	r2,zero,801270 <ffs_DiskIOIoctl+0x1fc>
         {
            if ((csd[0] >> 6) == 1)
  801188:	e0bff783 	ldbu	r2,-34(fp)
  80118c:	10803fcc 	andi	r2,r2,255
  801190:	1004d1ba 	srli	r2,r2,6
  801194:	10803fcc 	andi	r2,r2,255
  801198:	10800058 	cmpnei	r2,r2,1
  80119c:	10000d1e 	bne	r2,zero,8011d4 <ffs_DiskIOIoctl+0x160>
            {  /* SDC ver 2.00 */
               //@@MF csize = csd[9] + ((FFS_U16)csd[8] << 8) + 1;
               csize = (FFS_U16) ((FFS_U16) csd[9] | ((FFS_U16) csd[8] << 8)) + 1;
  8011a0:	e0bff9c3 	ldbu	r2,-25(fp)
  8011a4:	10803fcc 	andi	r2,r2,255
  8011a8:	e0fff983 	ldbu	r3,-26(fp)
  8011ac:	18c03fcc 	andi	r3,r3,255
  8011b0:	1806923a 	slli	r3,r3,8
  8011b4:	10c4b03a 	or	r2,r2,r3
  8011b8:	10800044 	addi	r2,r2,1
  8011bc:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << 10;
  8011c0:	e0bff70b 	ldhu	r2,-36(fp)
  8011c4:	100692ba 	slli	r3,r2,10
  8011c8:	e0bffe17 	ldw	r2,-8(fp)
  8011cc:	10c00015 	stw	r3,0(r2)
  8011d0:	00002506 	br	801268 <ffs_DiskIOIoctl+0x1f4>
            }
            else
            {  /* MMC or SDC ver 1.XX */
               n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
  8011d4:	e0bff8c3 	ldbu	r2,-29(fp)
  8011d8:	108003cc 	andi	r2,r2,15
  8011dc:	1007883a 	mov	r3,r2
  8011e0:	e0bffa03 	ldbu	r2,-24(fp)
  8011e4:	10803fcc 	andi	r2,r2,255
  8011e8:	1004d1fa 	srli	r2,r2,7
  8011ec:	1885883a 	add	r2,r3,r2
  8011f0:	1007883a 	mov	r3,r2
  8011f4:	e0bff9c3 	ldbu	r2,-25(fp)
  8011f8:	108000cc 	andi	r2,r2,3
  8011fc:	1085883a 	add	r2,r2,r2
  801200:	1885883a 	add	r2,r3,r2
  801204:	10800084 	addi	r2,r2,2
  801208:	e0bff505 	stb	r2,-44(fp)
               csize = (csd[8] >> 6) + ((FFS_U16) csd[7] << 2) + ((FFS_U16) (csd[6] & 3) << 10) + 1;
  80120c:	e0bff983 	ldbu	r2,-26(fp)
  801210:	10803fcc 	andi	r2,r2,255
  801214:	1004d1ba 	srli	r2,r2,6
  801218:	10c03fcc 	andi	r3,r2,255
  80121c:	e0bff943 	ldbu	r2,-27(fp)
  801220:	10803fcc 	andi	r2,r2,255
  801224:	1085883a 	add	r2,r2,r2
  801228:	1085883a 	add	r2,r2,r2
  80122c:	1885883a 	add	r2,r3,r2
  801230:	1007883a 	mov	r3,r2
  801234:	e0bff903 	ldbu	r2,-28(fp)
  801238:	10803fcc 	andi	r2,r2,255
  80123c:	108000cc 	andi	r2,r2,3
  801240:	100492ba 	slli	r2,r2,10
  801244:	1885883a 	add	r2,r3,r2
  801248:	10800044 	addi	r2,r2,1
  80124c:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << (n - 9);
  801250:	e0fff70b 	ldhu	r3,-36(fp)
  801254:	e0bff503 	ldbu	r2,-44(fp)
  801258:	10bffdc4 	addi	r2,r2,-9
  80125c:	1886983a 	sll	r3,r3,r2
  801260:	e0bffe17 	ldw	r2,-8(fp)
  801264:	10c00015 	stw	r3,0(r2)
            }
            res = RES_OK;
  801268:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  80126c:	0000a306 	br	8014fc <ffs_DiskIOIoctl+0x488>
  801270:	0000a206 	br	8014fc <ffs_DiskIOIoctl+0x488>

      case GET_SECTOR_SIZE:  /* Get sectors on the disk (WORD) */
         *(FFS_U16 *) buff = 512;
  801274:	e0bffe17 	ldw	r2,-8(fp)
  801278:	00c08004 	movi	r3,512
  80127c:	10c0000d 	sth	r3,0(r2)
         res = RES_OK;
  801280:	e03ff415 	stw	zero,-48(fp)
         break;
  801284:	00009d06 	br	8014fc <ffs_DiskIOIoctl+0x488>

      case GET_BLOCK_SIZE:   /* Get erase block size in unit of sectors (DWORD) */
         if (CardType & CT_SD2)
  801288:	d0a76a03 	ldbu	r2,-25176(gp)
  80128c:	10803fcc 	andi	r2,r2,255
  801290:	1080010c 	andi	r2,r2,4
  801294:	10001e26 	beq	r2,zero,801310 <ffs_DiskIOIoctl+0x29c>
         {  /* SDC ver 2.00 */
            if (SendCMD(ACMD13, 0) == 0)
  801298:	01003344 	movi	r4,205
  80129c:	000b883a 	mov	r5,zero
  8012a0:	08007e40 	call	8007e4 <SendCMD>
  8012a4:	10803fcc 	andi	r2,r2,255
  8012a8:	1000521e 	bne	r2,zero,8013f4 <ffs_DiskIOIoctl+0x380>
            {  /* Read SD status */
               ReceiveU8();
  8012ac:	08004240 	call	800424 <ReceiveU8>
               if (ReceiveDatablock(csd, 16))
  8012b0:	e0bff784 	addi	r2,fp,-34
  8012b4:	1009883a 	mov	r4,r2
  8012b8:	01400404 	movi	r5,16
  8012bc:	08004740 	call	800474 <ReceiveDatablock>
  8012c0:	10004c26 	beq	r2,zero,8013f4 <ffs_DiskIOIoctl+0x380>
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
  8012c4:	00800c04 	movi	r2,48
  8012c8:	e0bff505 	stb	r2,-44(fp)
  8012cc:	00000406 	br	8012e0 <ffs_DiskIOIoctl+0x26c>
                     ReceiveU8();   /* Purge trailing data */
  8012d0:	08004240 	call	800424 <ReceiveU8>
            if (SendCMD(ACMD13, 0) == 0)
            {  /* Read SD status */
               ReceiveU8();
               if (ReceiveDatablock(csd, 16))
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
  8012d4:	e0bff503 	ldbu	r2,-44(fp)
  8012d8:	10bfffc4 	addi	r2,r2,-1
  8012dc:	e0bff505 	stb	r2,-44(fp)
  8012e0:	e0bff503 	ldbu	r2,-44(fp)
  8012e4:	103ffa1e 	bne	r2,zero,8012d0 <__alt_data_end+0xff8012d0>
                     ReceiveU8();   /* Purge trailing data */
                  *(FFS_U32 *) buff = 16UL << (csd[10] >> 4);
  8012e8:	e0bffa03 	ldbu	r2,-24(fp)
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	1004d13a 	srli	r2,r2,4
  8012f4:	10803fcc 	andi	r2,r2,255
  8012f8:	00c00404 	movi	r3,16
  8012fc:	1886983a 	sll	r3,r3,r2
  801300:	e0bffe17 	ldw	r2,-8(fp)
  801304:	10c00015 	stw	r3,0(r2)
                  res = RES_OK;
  801308:	e03ff415 	stw	zero,-48(fp)
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
               }
               res = RES_OK;
            }
         }
         break;
  80130c:	00007b06 	br	8014fc <ffs_DiskIOIoctl+0x488>
               }
            }
         }
         else
         {  /* SDC ver 1.XX or MMC */
            if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
  801310:	01001244 	movi	r4,73
  801314:	000b883a 	mov	r5,zero
  801318:	08007e40 	call	8007e4 <SendCMD>
  80131c:	10803fcc 	andi	r2,r2,255
  801320:	1000341e 	bne	r2,zero,8013f4 <ffs_DiskIOIoctl+0x380>
  801324:	e0bff784 	addi	r2,fp,-34
  801328:	1009883a 	mov	r4,r2
  80132c:	01400404 	movi	r5,16
  801330:	08004740 	call	800474 <ReceiveDatablock>
  801334:	10002f26 	beq	r2,zero,8013f4 <ffs_DiskIOIoctl+0x380>
            {  /* Read CSD */
               if (CardType & CT_SD1)
  801338:	d0a76a03 	ldbu	r2,-25176(gp)
  80133c:	10803fcc 	andi	r2,r2,255
  801340:	1080008c 	andi	r2,r2,2
  801344:	10001526 	beq	r2,zero,80139c <ffs_DiskIOIoctl+0x328>
               {  /* SDC ver 1.XX */
                  *(FFS_U32 *) buff = (((csd[10] & 63) << 1) + ((FFS_U16) (csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
  801348:	e0bffa03 	ldbu	r2,-24(fp)
  80134c:	10803fcc 	andi	r2,r2,255
  801350:	10800fcc 	andi	r2,r2,63
  801354:	1085883a 	add	r2,r2,r2
  801358:	1007883a 	mov	r3,r2
  80135c:	e0bffa43 	ldbu	r2,-23(fp)
  801360:	10803fcc 	andi	r2,r2,255
  801364:	1004d1fa 	srli	r2,r2,7
  801368:	10803fcc 	andi	r2,r2,255
  80136c:	1885883a 	add	r2,r3,r2
  801370:	10c00044 	addi	r3,r2,1
  801374:	e0bffac3 	ldbu	r2,-21(fp)
  801378:	10803fcc 	andi	r2,r2,255
  80137c:	1004d1ba 	srli	r2,r2,6
  801380:	10803fcc 	andi	r2,r2,255
  801384:	10bfffc4 	addi	r2,r2,-1
  801388:	1884983a 	sll	r2,r3,r2
  80138c:	1007883a 	mov	r3,r2
  801390:	e0bffe17 	ldw	r2,-8(fp)
  801394:	10c00015 	stw	r3,0(r2)
  801398:	00001406 	br	8013ec <ffs_DiskIOIoctl+0x378>
               }
               else
               {  /* MMC */
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
  80139c:	e0bffa03 	ldbu	r2,-24(fp)
  8013a0:	10803fcc 	andi	r2,r2,255
  8013a4:	10801f0c 	andi	r2,r2,124
  8013a8:	1005d0ba 	srai	r2,r2,2
  8013ac:	10bfffcc 	andi	r2,r2,65535
  8013b0:	10c00044 	addi	r3,r2,1
  8013b4:	e0bffa43 	ldbu	r2,-23(fp)
  8013b8:	10803fcc 	andi	r2,r2,255
  8013bc:	108000cc 	andi	r2,r2,3
  8013c0:	100890fa 	slli	r4,r2,3
  8013c4:	e0bffa43 	ldbu	r2,-23(fp)
  8013c8:	10803fcc 	andi	r2,r2,255
  8013cc:	1004d17a 	srli	r2,r2,5
  8013d0:	10803fcc 	andi	r2,r2,255
  8013d4:	2085883a 	add	r2,r4,r2
  8013d8:	10800044 	addi	r2,r2,1
  8013dc:	1885383a 	mul	r2,r3,r2
  8013e0:	1007883a 	mov	r3,r2
  8013e4:	e0bffe17 	ldw	r2,-8(fp)
  8013e8:	10c00015 	stw	r3,0(r2)
               }
               res = RES_OK;
  8013ec:	e03ff415 	stw	zero,-48(fp)
            }
         }
         break;
  8013f0:	00004206 	br	8014fc <ffs_DiskIOIoctl+0x488>
  8013f4:	00004106 	br	8014fc <ffs_DiskIOIoctl+0x488>
         
      /* Following command are not used by FatFs module */
         
      case MMC_GET_TYPE:  /* Get MMC/SDC type (BYTE) */
         *ptr = CardType;
  8013f8:	d0e76a03 	ldbu	r3,-25176(gp)
  8013fc:	e0bff617 	ldw	r2,-40(fp)
  801400:	10c00005 	stb	r3,0(r2)
         res = RES_OK;
  801404:	e03ff415 	stw	zero,-48(fp)
         break;
  801408:	00003c06 	br	8014fc <ffs_DiskIOIoctl+0x488>

      case MMC_GET_CSD:   /* Receive CSD as a data block (16 bytes) */
         if (SendCMD(CMD9, 0) == 0  /* READ_CSD */
  80140c:	01001244 	movi	r4,73
  801410:	000b883a 	mov	r5,zero
  801414:	08007e40 	call	8007e4 <SendCMD>
  801418:	10803fcc 	andi	r2,r2,255
  80141c:	1000061e 	bne	r2,zero,801438 <ffs_DiskIOIoctl+0x3c4>
             && ReceiveDatablock(ptr, 16))
  801420:	e13ff617 	ldw	r4,-40(fp)
  801424:	01400404 	movi	r5,16
  801428:	08004740 	call	800474 <ReceiveDatablock>
  80142c:	10000226 	beq	r2,zero,801438 <ffs_DiskIOIoctl+0x3c4>
            res = RES_OK;
  801430:	e03ff415 	stw	zero,-48(fp)
         break;
  801434:	00003106 	br	8014fc <ffs_DiskIOIoctl+0x488>
  801438:	00003006 	br	8014fc <ffs_DiskIOIoctl+0x488>

      case MMC_GET_CID:   /* Receive CID as a data block (16 bytes) */
         if (SendCMD(CMD10, 0) == 0 /* READ_CID */
  80143c:	01001284 	movi	r4,74
  801440:	000b883a 	mov	r5,zero
  801444:	08007e40 	call	8007e4 <SendCMD>
  801448:	10803fcc 	andi	r2,r2,255
  80144c:	1000061e 	bne	r2,zero,801468 <ffs_DiskIOIoctl+0x3f4>
             && ReceiveDatablock(ptr, 16))
  801450:	e13ff617 	ldw	r4,-40(fp)
  801454:	01400404 	movi	r5,16
  801458:	08004740 	call	800474 <ReceiveDatablock>
  80145c:	10000226 	beq	r2,zero,801468 <ffs_DiskIOIoctl+0x3f4>
            res = RES_OK;
  801460:	e03ff415 	stw	zero,-48(fp)
         break;
  801464:	00002506 	br	8014fc <ffs_DiskIOIoctl+0x488>
  801468:	00002406 	br	8014fc <ffs_DiskIOIoctl+0x488>

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
  80146c:	01001e84 	movi	r4,122
  801470:	000b883a 	mov	r5,zero
  801474:	08007e40 	call	8007e4 <SendCMD>
  801478:	10803fcc 	andi	r2,r2,255
  80147c:	10000f1e 	bne	r2,zero,8014bc <ffs_DiskIOIoctl+0x448>
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
  801480:	e03ff505 	stb	zero,-44(fp)
  801484:	00000806 	br	8014a8 <ffs_DiskIOIoctl+0x434>
               *ptr++ = ReceiveU8();
  801488:	e43ff617 	ldw	r16,-40(fp)
  80148c:	80800044 	addi	r2,r16,1
  801490:	e0bff615 	stw	r2,-40(fp)
  801494:	08004240 	call	800424 <ReceiveU8>
  801498:	80800005 	stb	r2,0(r16)
         break;

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
  80149c:	e0bff503 	ldbu	r2,-44(fp)
  8014a0:	10800044 	addi	r2,r2,1
  8014a4:	e0bff505 	stb	r2,-44(fp)
  8014a8:	e0bff503 	ldbu	r2,-44(fp)
  8014ac:	10800130 	cmpltui	r2,r2,4
  8014b0:	103ff51e 	bne	r2,zero,801488 <__alt_data_end+0xff801488>
               *ptr++ = ReceiveU8();
            res = RES_OK;
  8014b4:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  8014b8:	00001006 	br	8014fc <ffs_DiskIOIoctl+0x488>
  8014bc:	00000f06 	br	8014fc <ffs_DiskIOIoctl+0x488>

      case MMC_GET_SDSTAT:   /* Receive SD statsu as a data block (64 bytes) */
         if (SendCMD(ACMD13, 0) == 0)
  8014c0:	01003344 	movi	r4,205
  8014c4:	000b883a 	mov	r5,zero
  8014c8:	08007e40 	call	8007e4 <SendCMD>
  8014cc:	10803fcc 	andi	r2,r2,255
  8014d0:	1000071e 	bne	r2,zero,8014f0 <ffs_DiskIOIoctl+0x47c>
         {  /* SD_STATUS */
            ReceiveU8();
  8014d4:	08004240 	call	800424 <ReceiveU8>
            if (ReceiveDatablock(ptr, 64))
  8014d8:	e13ff617 	ldw	r4,-40(fp)
  8014dc:	01401004 	movi	r5,64
  8014e0:	08004740 	call	800474 <ReceiveDatablock>
  8014e4:	10000226 	beq	r2,zero,8014f0 <ffs_DiskIOIoctl+0x47c>
               res = RES_OK;
  8014e8:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  8014ec:	00000306 	br	8014fc <ffs_DiskIOIoctl+0x488>
  8014f0:	00000206 	br	8014fc <ffs_DiskIOIoctl+0x488>

      default:
         res = RES_PARERR;
  8014f4:	00800104 	movi	r2,4
  8014f8:	e0bff415 	stw	r2,-48(fp)
   }

   ReleaseBus();
  8014fc:	08007a00 	call	8007a0 <ReleaseBus>

   return(res);
  801500:	e0bff417 	ldw	r2,-48(fp)
} /* ffs_DiskIOIoctl */
  801504:	e6ffff04 	addi	sp,fp,-4
  801508:	dfc00217 	ldw	ra,8(sp)
  80150c:	df000117 	ldw	fp,4(sp)
  801510:	dc000017 	ldw	r16,0(sp)
  801514:	dec00304 	addi	sp,sp,12
  801518:	f800283a 	ret

0080151c <get_fattime>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: time                                                           */
/***************************************************************************/
FFS_U32 get_fattime (void)
{
  80151c:	defffe04 	addi	sp,sp,-8
  801520:	df000115 	stw	fp,4(sp)
  801524:	df000104 	addi	fp,sp,4
   FFS_U32 dTime;

   dTime = ((FFS_U32)(2008 - 1980) << 25) |
  801528:	008e57f4 	movhi	r2,14687
  80152c:	10a87844 	addi	r2,r2,-24095
  801530:	e0bfff15 	stw	r2,-4(fp)
                     ((FFS_U32) 30 << 16) | 
                     ((FFS_U32) 20 << 11) | 
                     ((FFS_U32) 15 << 5)  | 
                     ((FFS_U32) 2 >> 1);

   return(dTime);
  801534:	e0bfff17 	ldw	r2,-4(fp)
} /* get_fattime */
  801538:	e037883a 	mov	sp,fp
  80153c:	df000017 	ldw	fp,0(sp)
  801540:	dec00104 	addi	sp,sp,4
  801544:	f800283a 	ret

00801548 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, uint32_t cnt) {
  801548:	defffa04 	addi	sp,sp,-24
  80154c:	df000515 	stw	fp,20(sp)
  801550:	df000504 	addi	fp,sp,20
  801554:	e13ffd15 	stw	r4,-12(fp)
  801558:	e17ffe15 	stw	r5,-8(fp)
  80155c:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
  801560:	e0bffd17 	ldw	r2,-12(fp)
  801564:	e0bffb15 	stw	r2,-20(fp)
   const uint8_t *s = (const uint8_t*)src;
  801568:	e0bffe17 	ldw	r2,-8(fp)
  80156c:	e0bffc15 	stw	r2,-16(fp)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
  801570:	00000806 	br	801594 <mem_cpy+0x4c>
      *d++ = *s++;
  801574:	e0bffb17 	ldw	r2,-20(fp)
  801578:	10c00044 	addi	r3,r2,1
  80157c:	e0fffb15 	stw	r3,-20(fp)
  801580:	e0fffc17 	ldw	r3,-16(fp)
  801584:	19000044 	addi	r4,r3,1
  801588:	e13ffc15 	stw	r4,-16(fp)
  80158c:	18c00003 	ldbu	r3,0(r3)
  801590:	10c00005 	stb	r3,0(r2)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
  801594:	e0bfff17 	ldw	r2,-4(fp)
  801598:	10ffffc4 	addi	r3,r2,-1
  80159c:	e0ffff15 	stw	r3,-4(fp)
  8015a0:	103ff41e 	bne	r2,zero,801574 <__alt_data_end+0xff801574>
      *d++ = *s++;
}
  8015a4:	e037883a 	mov	sp,fp
  8015a8:	df000017 	ldw	fp,0(sp)
  8015ac:	dec00104 	addi	sp,sp,4
  8015b0:	f800283a 	ret

008015b4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
  8015b4:	defffb04 	addi	sp,sp,-20
  8015b8:	df000415 	stw	fp,16(sp)
  8015bc:	df000404 	addi	fp,sp,16
  8015c0:	e13ffd15 	stw	r4,-12(fp)
  8015c4:	e17ffe15 	stw	r5,-8(fp)
  8015c8:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
  8015cc:	e0bffd17 	ldw	r2,-12(fp)
  8015d0:	e0bffc15 	stw	r2,-16(fp)

   while (cnt--)
  8015d4:	00000506 	br	8015ec <mem_set+0x38>
      *d++ = (uint8_t)val;
  8015d8:	e0bffc17 	ldw	r2,-16(fp)
  8015dc:	10c00044 	addi	r3,r2,1
  8015e0:	e0fffc15 	stw	r3,-16(fp)
  8015e4:	e0fffe17 	ldw	r3,-8(fp)
  8015e8:	10c00005 	stb	r3,0(r2)
/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
   uint8_t *d = (uint8_t*)dst;

   while (cnt--)
  8015ec:	e0bfff17 	ldw	r2,-4(fp)
  8015f0:	10ffffc4 	addi	r3,r2,-1
  8015f4:	e0ffff15 	stw	r3,-4(fp)
  8015f8:	103ff71e 	bne	r2,zero,8015d8 <__alt_data_end+0xff8015d8>
      *d++ = (uint8_t)val;
}
  8015fc:	e037883a 	mov	sp,fp
  801600:	df000017 	ldw	fp,0(sp)
  801604:	dec00104 	addi	sp,sp,4
  801608:	f800283a 	ret

0080160c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, uint32_t cnt) {
  80160c:	defff904 	addi	sp,sp,-28
  801610:	df000615 	stw	fp,24(sp)
  801614:	df000604 	addi	fp,sp,24
  801618:	e13ffd15 	stw	r4,-12(fp)
  80161c:	e17ffe15 	stw	r5,-8(fp)
  801620:	e1bfff15 	stw	r6,-4(fp)
   const uint8_t *d = (const uint8_t *)dst, *s = (const uint8_t *)src;
  801624:	e0bffd17 	ldw	r2,-12(fp)
  801628:	e0bffa15 	stw	r2,-24(fp)
  80162c:	e0bffe17 	ldw	r2,-8(fp)
  801630:	e0bffb15 	stw	r2,-20(fp)
   int r = 0;
  801634:	e03ffc15 	stw	zero,-16(fp)

   while (cnt-- && (r = *d++ - *s++) == 0) ;
  801638:	0001883a 	nop
  80163c:	e0bfff17 	ldw	r2,-4(fp)
  801640:	10ffffc4 	addi	r3,r2,-1
  801644:	e0ffff15 	stw	r3,-4(fp)
  801648:	10000e26 	beq	r2,zero,801684 <mem_cmp+0x78>
  80164c:	e0bffa17 	ldw	r2,-24(fp)
  801650:	10c00044 	addi	r3,r2,1
  801654:	e0fffa15 	stw	r3,-24(fp)
  801658:	10800003 	ldbu	r2,0(r2)
  80165c:	10c03fcc 	andi	r3,r2,255
  801660:	e0bffb17 	ldw	r2,-20(fp)
  801664:	11000044 	addi	r4,r2,1
  801668:	e13ffb15 	stw	r4,-20(fp)
  80166c:	10800003 	ldbu	r2,0(r2)
  801670:	10803fcc 	andi	r2,r2,255
  801674:	1885c83a 	sub	r2,r3,r2
  801678:	e0bffc15 	stw	r2,-16(fp)
  80167c:	e0bffc17 	ldw	r2,-16(fp)
  801680:	103fee26 	beq	r2,zero,80163c <__alt_data_end+0xff80163c>
   return r;
  801684:	e0bffc17 	ldw	r2,-16(fp)
}
  801688:	e037883a 	mov	sp,fp
  80168c:	df000017 	ldw	fp,0(sp)
  801690:	dec00104 	addi	sp,sp,4
  801694:	f800283a 	ret

00801698 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
  801698:	defffd04 	addi	sp,sp,-12
  80169c:	df000215 	stw	fp,8(sp)
  8016a0:	df000204 	addi	fp,sp,8
  8016a4:	e13ffe15 	stw	r4,-8(fp)
  8016a8:	e17fff15 	stw	r5,-4(fp)
   while (*str && *str != chr) str++;
  8016ac:	00000306 	br	8016bc <chk_chr+0x24>
  8016b0:	e0bffe17 	ldw	r2,-8(fp)
  8016b4:	10800044 	addi	r2,r2,1
  8016b8:	e0bffe15 	stw	r2,-8(fp)
  8016bc:	e0bffe17 	ldw	r2,-8(fp)
  8016c0:	10800003 	ldbu	r2,0(r2)
  8016c4:	10803fcc 	andi	r2,r2,255
  8016c8:	1080201c 	xori	r2,r2,128
  8016cc:	10bfe004 	addi	r2,r2,-128
  8016d0:	10000726 	beq	r2,zero,8016f0 <chk_chr+0x58>
  8016d4:	e0bffe17 	ldw	r2,-8(fp)
  8016d8:	10800003 	ldbu	r2,0(r2)
  8016dc:	10c03fcc 	andi	r3,r2,255
  8016e0:	18c0201c 	xori	r3,r3,128
  8016e4:	18ffe004 	addi	r3,r3,-128
  8016e8:	e0bfff17 	ldw	r2,-4(fp)
  8016ec:	18bff01e 	bne	r3,r2,8016b0 <__alt_data_end+0xff8016b0>
   return *str;
  8016f0:	e0bffe17 	ldw	r2,-8(fp)
  8016f4:	10800003 	ldbu	r2,0(r2)
  8016f8:	10803fcc 	andi	r2,r2,255
  8016fc:	1080201c 	xori	r2,r2,128
  801700:	10bfe004 	addi	r2,r2,-128
}
  801704:	e037883a 	mov	sp,fp
  801708:	df000017 	ldw	fp,0(sp)
  80170c:	dec00104 	addi	sp,sp,4
  801710:	f800283a 	ret

00801714 <move_window>:
static
FRESULT move_window (
   FATFS *fs,     /* File system object */
   uint32_t sector   /* Sector number to make appearance in the fs->win[] */
)              /* Move to zero only writes back dirty window */
{
  801714:	defffa04 	addi	sp,sp,-24
  801718:	dfc00515 	stw	ra,20(sp)
  80171c:	df000415 	stw	fp,16(sp)
  801720:	df000404 	addi	fp,sp,16
  801724:	e13ffe15 	stw	r4,-8(fp)
  801728:	e17fff15 	stw	r5,-4(fp)
   uint32_t wsect;


   wsect = fs->winsect;
  80172c:	e0bffe17 	ldw	r2,-8(fp)
  801730:	10800b17 	ldw	r2,44(r2)
  801734:	e0bffc15 	stw	r2,-16(fp)
   if (wsect != sector) {  /* Changed current window */
  801738:	e0fffc17 	ldw	r3,-16(fp)
  80173c:	e0bfff17 	ldw	r2,-4(fp)
  801740:	18804526 	beq	r3,r2,801858 <move_window+0x144>
#if !_FS_READONLY
      if (fs->wflag) {  /* Write back dirty window if needed */
  801744:	e0bffe17 	ldw	r2,-8(fp)
  801748:	10800103 	ldbu	r2,4(r2)
  80174c:	10803fcc 	andi	r2,r2,255
  801750:	10002f26 	beq	r2,zero,801810 <move_window+0xfc>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  801754:	e0bffe17 	ldw	r2,-8(fp)
  801758:	10800043 	ldbu	r2,1(r2)
  80175c:	10c03fcc 	andi	r3,r2,255
  801760:	e0bffe17 	ldw	r2,-8(fp)
  801764:	10800c04 	addi	r2,r2,48
  801768:	1809883a 	mov	r4,r3
  80176c:	100b883a 	mov	r5,r2
  801770:	e1bffc17 	ldw	r6,-16(fp)
  801774:	01c00044 	movi	r7,1
  801778:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  80177c:	10000226 	beq	r2,zero,801788 <move_window+0x74>
            return FR_DISK_ERR;
  801780:	00800044 	movi	r2,1
  801784:	00003506 	br	80185c <move_window+0x148>
         fs->wflag = 0;
  801788:	e0bffe17 	ldw	r2,-8(fp)
  80178c:	10000105 	stb	zero,4(r2)
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
  801790:	e0bffe17 	ldw	r2,-8(fp)
  801794:	10c00817 	ldw	r3,32(r2)
  801798:	e0bffe17 	ldw	r2,-8(fp)
  80179c:	10800717 	ldw	r2,28(r2)
  8017a0:	1885883a 	add	r2,r3,r2
  8017a4:	e0fffc17 	ldw	r3,-16(fp)
  8017a8:	1880192e 	bgeu	r3,r2,801810 <move_window+0xfc>
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
  8017ac:	e0bffe17 	ldw	r2,-8(fp)
  8017b0:	108000c3 	ldbu	r2,3(r2)
  8017b4:	e0bffd05 	stb	r2,-12(fp)
  8017b8:	00001206 	br	801804 <move_window+0xf0>
               wsect += fs->fsize;
  8017bc:	e0bffe17 	ldw	r2,-8(fp)
  8017c0:	10800717 	ldw	r2,28(r2)
  8017c4:	e0fffc17 	ldw	r3,-16(fp)
  8017c8:	1885883a 	add	r2,r3,r2
  8017cc:	e0bffc15 	stw	r2,-16(fp)
               disk_write(fs->drv, fs->win, wsect, 1);
  8017d0:	e0bffe17 	ldw	r2,-8(fp)
  8017d4:	10800043 	ldbu	r2,1(r2)
  8017d8:	10c03fcc 	andi	r3,r2,255
  8017dc:	e0bffe17 	ldw	r2,-8(fp)
  8017e0:	10800c04 	addi	r2,r2,48
  8017e4:	1809883a 	mov	r4,r3
  8017e8:	100b883a 	mov	r5,r2
  8017ec:	e1bffc17 	ldw	r6,-16(fp)
  8017f0:	01c00044 	movi	r7,1
  8017f4:	0800f080 	call	800f08 <ffs_DiskIOWrite>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
            return FR_DISK_ERR;
         fs->wflag = 0;
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
  8017f8:	e0bffd03 	ldbu	r2,-12(fp)
  8017fc:	10bfffc4 	addi	r2,r2,-1
  801800:	e0bffd05 	stb	r2,-12(fp)
  801804:	e0bffd03 	ldbu	r2,-12(fp)
  801808:	108000a8 	cmpgeui	r2,r2,2
  80180c:	103feb1e 	bne	r2,zero,8017bc <__alt_data_end+0xff8017bc>
               disk_write(fs->drv, fs->win, wsect, 1);
            }
         }
      }
#endif
      if (sector) {
  801810:	e0bfff17 	ldw	r2,-4(fp)
  801814:	10001026 	beq	r2,zero,801858 <move_window+0x144>
         if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  801818:	e0bffe17 	ldw	r2,-8(fp)
  80181c:	10800043 	ldbu	r2,1(r2)
  801820:	10c03fcc 	andi	r3,r2,255
  801824:	e0bffe17 	ldw	r2,-8(fp)
  801828:	10800c04 	addi	r2,r2,48
  80182c:	1809883a 	mov	r4,r3
  801830:	100b883a 	mov	r5,r2
  801834:	e1bfff17 	ldw	r6,-4(fp)
  801838:	01c00044 	movi	r7,1
  80183c:	0800dec0 	call	800dec <ffs_DiskIORead>
  801840:	10000226 	beq	r2,zero,80184c <move_window+0x138>
            return FR_DISK_ERR;
  801844:	00800044 	movi	r2,1
  801848:	00000406 	br	80185c <move_window+0x148>
         fs->winsect = sector;
  80184c:	e0bffe17 	ldw	r2,-8(fp)
  801850:	e0ffff17 	ldw	r3,-4(fp)
  801854:	10c00b15 	stw	r3,44(r2)
      }
   }

   return FR_OK;
  801858:	0005883a 	mov	r2,zero
}
  80185c:	e037883a 	mov	sp,fp
  801860:	dfc00117 	ldw	ra,4(sp)
  801864:	df000017 	ldw	fp,0(sp)
  801868:	dec00204 	addi	sp,sp,8
  80186c:	f800283a 	ret

00801870 <sync>:
#if !_FS_READONLY
static
FRESULT sync ( /* FR_OK: successful, FR_DISK_ERR: failed */
   FATFS *fs   /* File system object */
)
{
  801870:	defffc04 	addi	sp,sp,-16
  801874:	dfc00315 	stw	ra,12(sp)
  801878:	df000215 	stw	fp,8(sp)
  80187c:	df000204 	addi	fp,sp,8
  801880:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;


   res = move_window(fs, 0);
  801884:	e13fff17 	ldw	r4,-4(fp)
  801888:	000b883a 	mov	r5,zero
  80188c:	08017140 	call	801714 <move_window>
  801890:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
  801894:	e0bffe17 	ldw	r2,-8(fp)
  801898:	1000761e 	bne	r2,zero,801a74 <sync+0x204>
      /* Update FSInfo sector if needed */
      if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  80189c:	e0bfff17 	ldw	r2,-4(fp)
  8018a0:	10800003 	ldbu	r2,0(r2)
  8018a4:	10803fcc 	andi	r2,r2,255
  8018a8:	108000d8 	cmpnei	r2,r2,3
  8018ac:	1000671e 	bne	r2,zero,801a4c <sync+0x1dc>
  8018b0:	e0bfff17 	ldw	r2,-4(fp)
  8018b4:	10800143 	ldbu	r2,5(r2)
  8018b8:	10803fcc 	andi	r2,r2,255
  8018bc:	10006326 	beq	r2,zero,801a4c <sync+0x1dc>
         fs->winsect = 0;
  8018c0:	e0bfff17 	ldw	r2,-4(fp)
  8018c4:	10000b15 	stw	zero,44(r2)
         /* Create FSInfo structure */
         mem_set(fs->win, 0, 512);
  8018c8:	e0bfff17 	ldw	r2,-4(fp)
  8018cc:	10800c04 	addi	r2,r2,48
  8018d0:	1009883a 	mov	r4,r2
  8018d4:	000b883a 	mov	r5,zero
  8018d8:	01808004 	movi	r6,512
  8018dc:	08015b40 	call	8015b4 <mem_set>
         ST_WORD(fs->win+BS_55AA, 0xAA55);
  8018e0:	e0bfff17 	ldw	r2,-4(fp)
  8018e4:	00c01544 	movi	r3,85
  8018e8:	10c08b85 	stb	r3,558(r2)
  8018ec:	e0bfff17 	ldw	r2,-4(fp)
  8018f0:	00ffea84 	movi	r3,-86
  8018f4:	10c08bc5 	stb	r3,559(r2)
         ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  8018f8:	e0bfff17 	ldw	r2,-4(fp)
  8018fc:	00c01484 	movi	r3,82
  801900:	10c00c05 	stb	r3,48(r2)
  801904:	e0bfff17 	ldw	r2,-4(fp)
  801908:	00c01484 	movi	r3,82
  80190c:	10c00c45 	stb	r3,49(r2)
  801910:	e0bfff17 	ldw	r2,-4(fp)
  801914:	00c01844 	movi	r3,97
  801918:	10c00c85 	stb	r3,50(r2)
  80191c:	e0bfff17 	ldw	r2,-4(fp)
  801920:	00c01044 	movi	r3,65
  801924:	10c00cc5 	stb	r3,51(r2)
         ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  801928:	e0bfff17 	ldw	r2,-4(fp)
  80192c:	00c01c84 	movi	r3,114
  801930:	10c08505 	stb	r3,532(r2)
  801934:	e0bfff17 	ldw	r2,-4(fp)
  801938:	00c01c84 	movi	r3,114
  80193c:	10c08545 	stb	r3,533(r2)
  801940:	e0bfff17 	ldw	r2,-4(fp)
  801944:	00c01044 	movi	r3,65
  801948:	10c08585 	stb	r3,534(r2)
  80194c:	e0bfff17 	ldw	r2,-4(fp)
  801950:	00c01844 	movi	r3,97
  801954:	10c085c5 	stb	r3,535(r2)
         ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  801958:	e0bfff17 	ldw	r2,-4(fp)
  80195c:	10800417 	ldw	r2,16(r2)
  801960:	1007883a 	mov	r3,r2
  801964:	e0bfff17 	ldw	r2,-4(fp)
  801968:	10c08605 	stb	r3,536(r2)
  80196c:	e0bfff17 	ldw	r2,-4(fp)
  801970:	10800417 	ldw	r2,16(r2)
  801974:	10bfffcc 	andi	r2,r2,65535
  801978:	1004d23a 	srli	r2,r2,8
  80197c:	1007883a 	mov	r3,r2
  801980:	e0bfff17 	ldw	r2,-4(fp)
  801984:	10c08645 	stb	r3,537(r2)
  801988:	e0bfff17 	ldw	r2,-4(fp)
  80198c:	10800417 	ldw	r2,16(r2)
  801990:	1004d43a 	srli	r2,r2,16
  801994:	1007883a 	mov	r3,r2
  801998:	e0bfff17 	ldw	r2,-4(fp)
  80199c:	10c08685 	stb	r3,538(r2)
  8019a0:	e0bfff17 	ldw	r2,-4(fp)
  8019a4:	10800417 	ldw	r2,16(r2)
  8019a8:	1004d63a 	srli	r2,r2,24
  8019ac:	1007883a 	mov	r3,r2
  8019b0:	e0bfff17 	ldw	r2,-4(fp)
  8019b4:	10c086c5 	stb	r3,539(r2)
         ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  8019b8:	e0bfff17 	ldw	r2,-4(fp)
  8019bc:	10800317 	ldw	r2,12(r2)
  8019c0:	1007883a 	mov	r3,r2
  8019c4:	e0bfff17 	ldw	r2,-4(fp)
  8019c8:	10c08705 	stb	r3,540(r2)
  8019cc:	e0bfff17 	ldw	r2,-4(fp)
  8019d0:	10800317 	ldw	r2,12(r2)
  8019d4:	10bfffcc 	andi	r2,r2,65535
  8019d8:	1004d23a 	srli	r2,r2,8
  8019dc:	1007883a 	mov	r3,r2
  8019e0:	e0bfff17 	ldw	r2,-4(fp)
  8019e4:	10c08745 	stb	r3,541(r2)
  8019e8:	e0bfff17 	ldw	r2,-4(fp)
  8019ec:	10800317 	ldw	r2,12(r2)
  8019f0:	1004d43a 	srli	r2,r2,16
  8019f4:	1007883a 	mov	r3,r2
  8019f8:	e0bfff17 	ldw	r2,-4(fp)
  8019fc:	10c08785 	stb	r3,542(r2)
  801a00:	e0bfff17 	ldw	r2,-4(fp)
  801a04:	10800317 	ldw	r2,12(r2)
  801a08:	1004d63a 	srli	r2,r2,24
  801a0c:	1007883a 	mov	r3,r2
  801a10:	e0bfff17 	ldw	r2,-4(fp)
  801a14:	10c087c5 	stb	r3,543(r2)
         /* Write it into the FSInfo sector */
         disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  801a18:	e0bfff17 	ldw	r2,-4(fp)
  801a1c:	10800043 	ldbu	r2,1(r2)
  801a20:	11003fcc 	andi	r4,r2,255
  801a24:	e0bfff17 	ldw	r2,-4(fp)
  801a28:	10c00c04 	addi	r3,r2,48
  801a2c:	e0bfff17 	ldw	r2,-4(fp)
  801a30:	10800517 	ldw	r2,20(r2)
  801a34:	180b883a 	mov	r5,r3
  801a38:	100d883a 	mov	r6,r2
  801a3c:	01c00044 	movi	r7,1
  801a40:	0800f080 	call	800f08 <ffs_DiskIOWrite>
         fs->fsi_flag = 0;
  801a44:	e0bfff17 	ldw	r2,-4(fp)
  801a48:	10000145 	stb	zero,5(r2)
      }
      /* Make sure that no pending write process in the physical drive */
      if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  801a4c:	e0bfff17 	ldw	r2,-4(fp)
  801a50:	10800043 	ldbu	r2,1(r2)
  801a54:	10803fcc 	andi	r2,r2,255
  801a58:	1009883a 	mov	r4,r2
  801a5c:	000b883a 	mov	r5,zero
  801a60:	000d883a 	mov	r6,zero
  801a64:	08010740 	call	801074 <ffs_DiskIOIoctl>
  801a68:	10000226 	beq	r2,zero,801a74 <sync+0x204>
         res = FR_DISK_ERR;
  801a6c:	00800044 	movi	r2,1
  801a70:	e0bffe15 	stw	r2,-8(fp)
   }

   return res;
  801a74:	e0bffe17 	ldw	r2,-8(fp)
}
  801a78:	e037883a 	mov	sp,fp
  801a7c:	dfc00117 	ldw	ra,4(sp)
  801a80:	df000017 	ldw	fp,0(sp)
  801a84:	dec00204 	addi	sp,sp,8
  801a88:	f800283a 	ret

00801a8c <clust2sect>:

uint32_t clust2sect (   /* !=0: Sector number, 0: Failed - invalid cluster# */
   FATFS *fs,     /* File system object */
   uint32_t clst     /* Cluster# to be converted */
)
{
  801a8c:	defffd04 	addi	sp,sp,-12
  801a90:	df000215 	stw	fp,8(sp)
  801a94:	df000204 	addi	fp,sp,8
  801a98:	e13ffe15 	stw	r4,-8(fp)
  801a9c:	e17fff15 	stw	r5,-4(fp)
   clst -= 2;
  801aa0:	e0bfff17 	ldw	r2,-4(fp)
  801aa4:	10bfff84 	addi	r2,r2,-2
  801aa8:	e0bfff15 	stw	r2,-4(fp)
   if (clst >= (fs->n_fatent - 2)) return 0;    /* Invalid cluster# */
  801aac:	e0bffe17 	ldw	r2,-8(fp)
  801ab0:	10800617 	ldw	r2,24(r2)
  801ab4:	10bfff84 	addi	r2,r2,-2
  801ab8:	e0ffff17 	ldw	r3,-4(fp)
  801abc:	18800236 	bltu	r3,r2,801ac8 <clust2sect+0x3c>
  801ac0:	0005883a 	mov	r2,zero
  801ac4:	00000806 	br	801ae8 <clust2sect+0x5c>
   return clst * fs->csize + fs->database;
  801ac8:	e0bffe17 	ldw	r2,-8(fp)
  801acc:	10800083 	ldbu	r2,2(r2)
  801ad0:	10c03fcc 	andi	r3,r2,255
  801ad4:	e0bfff17 	ldw	r2,-4(fp)
  801ad8:	1887383a 	mul	r3,r3,r2
  801adc:	e0bffe17 	ldw	r2,-8(fp)
  801ae0:	10800a17 	ldw	r2,40(r2)
  801ae4:	1885883a 	add	r2,r3,r2
}
  801ae8:	e037883a 	mov	sp,fp
  801aec:	df000017 	ldw	fp,0(sp)
  801af0:	dec00104 	addi	sp,sp,4
  801af4:	f800283a 	ret

00801af8 <get_fat>:

uint32_t get_fat (   /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   FATFS *fs,  /* File system object */
   uint32_t clst  /* Cluster# to get the link information */
)
{
  801af8:	defff904 	addi	sp,sp,-28
  801afc:	dfc00615 	stw	ra,24(sp)
  801b00:	df000515 	stw	fp,20(sp)
  801b04:	df000504 	addi	fp,sp,20
  801b08:	e13ffe15 	stw	r4,-8(fp)
  801b0c:	e17fff15 	stw	r5,-4(fp)
   uint32_t wc, bc;
   uint8_t *p;


   if (clst < 2 || clst >= fs->n_fatent)  /* Chack range */
  801b10:	e0bfff17 	ldw	r2,-4(fp)
  801b14:	108000b0 	cmpltui	r2,r2,2
  801b18:	1000041e 	bne	r2,zero,801b2c <get_fat+0x34>
  801b1c:	e0bffe17 	ldw	r2,-8(fp)
  801b20:	10800617 	ldw	r2,24(r2)
  801b24:	e0ffff17 	ldw	r3,-4(fp)
  801b28:	18800236 	bltu	r3,r2,801b34 <get_fat+0x3c>
      return 1;
  801b2c:	00800044 	movi	r2,1
  801b30:	00008d06 	br	801d68 <get_fat+0x270>

   switch (fs->fs_type) {
  801b34:	e0bffe17 	ldw	r2,-8(fp)
  801b38:	10800003 	ldbu	r2,0(r2)
  801b3c:	10803fcc 	andi	r2,r2,255
  801b40:	10c000a0 	cmpeqi	r3,r2,2
  801b44:	18003f1e 	bne	r3,zero,801c44 <get_fat+0x14c>
  801b48:	10c000e0 	cmpeqi	r3,r2,3
  801b4c:	18005a1e 	bne	r3,zero,801cb8 <get_fat+0x1c0>
  801b50:	10800060 	cmpeqi	r2,r2,1
  801b54:	10008326 	beq	r2,zero,801d64 <get_fat+0x26c>
   case FS_FAT12 :
      bc = (uint32_t)clst; bc += bc / 2;
  801b58:	e0bfff17 	ldw	r2,-4(fp)
  801b5c:	e0bffb15 	stw	r2,-20(fp)
  801b60:	e0bffb17 	ldw	r2,-20(fp)
  801b64:	1004d07a 	srli	r2,r2,1
  801b68:	e0fffb17 	ldw	r3,-20(fp)
  801b6c:	1885883a 	add	r2,r3,r2
  801b70:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801b74:	e0bffe17 	ldw	r2,-8(fp)
  801b78:	10c00817 	ldw	r3,32(r2)
  801b7c:	e0bffb17 	ldw	r2,-20(fp)
  801b80:	1004d27a 	srli	r2,r2,9
  801b84:	1885883a 	add	r2,r3,r2
  801b88:	e13ffe17 	ldw	r4,-8(fp)
  801b8c:	100b883a 	mov	r5,r2
  801b90:	08017140 	call	801714 <move_window>
  801b94:	10000126 	beq	r2,zero,801b9c <get_fat+0xa4>
  801b98:	00007206 	br	801d64 <get_fat+0x26c>
      wc = fs->win[bc % SS(fs)]; bc++;
  801b9c:	e0bffb17 	ldw	r2,-20(fp)
  801ba0:	10807fcc 	andi	r2,r2,511
  801ba4:	e0fffe17 	ldw	r3,-8(fp)
  801ba8:	1885883a 	add	r2,r3,r2
  801bac:	10800c04 	addi	r2,r2,48
  801bb0:	10800003 	ldbu	r2,0(r2)
  801bb4:	10803fcc 	andi	r2,r2,255
  801bb8:	e0bffc15 	stw	r2,-16(fp)
  801bbc:	e0bffb17 	ldw	r2,-20(fp)
  801bc0:	10800044 	addi	r2,r2,1
  801bc4:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801bc8:	e0bffe17 	ldw	r2,-8(fp)
  801bcc:	10c00817 	ldw	r3,32(r2)
  801bd0:	e0bffb17 	ldw	r2,-20(fp)
  801bd4:	1004d27a 	srli	r2,r2,9
  801bd8:	1885883a 	add	r2,r3,r2
  801bdc:	e13ffe17 	ldw	r4,-8(fp)
  801be0:	100b883a 	mov	r5,r2
  801be4:	08017140 	call	801714 <move_window>
  801be8:	10000126 	beq	r2,zero,801bf0 <get_fat+0xf8>
  801bec:	00005d06 	br	801d64 <get_fat+0x26c>
      wc |= fs->win[bc % SS(fs)] << 8;
  801bf0:	e0bffb17 	ldw	r2,-20(fp)
  801bf4:	10807fcc 	andi	r2,r2,511
  801bf8:	e0fffe17 	ldw	r3,-8(fp)
  801bfc:	1885883a 	add	r2,r3,r2
  801c00:	10800c04 	addi	r2,r2,48
  801c04:	10800003 	ldbu	r2,0(r2)
  801c08:	10803fcc 	andi	r2,r2,255
  801c0c:	1004923a 	slli	r2,r2,8
  801c10:	1007883a 	mov	r3,r2
  801c14:	e0bffc17 	ldw	r2,-16(fp)
  801c18:	10c4b03a 	or	r2,r2,r3
  801c1c:	e0bffc15 	stw	r2,-16(fp)
      return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  801c20:	e0bfff17 	ldw	r2,-4(fp)
  801c24:	1080004c 	andi	r2,r2,1
  801c28:	10000326 	beq	r2,zero,801c38 <get_fat+0x140>
  801c2c:	e0bffc17 	ldw	r2,-16(fp)
  801c30:	1004d13a 	srli	r2,r2,4
  801c34:	00004c06 	br	801d68 <get_fat+0x270>
  801c38:	e0bffc17 	ldw	r2,-16(fp)
  801c3c:	1083ffcc 	andi	r2,r2,4095
  801c40:	00004906 	br	801d68 <get_fat+0x270>

   case FS_FAT16 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  801c44:	e0bffe17 	ldw	r2,-8(fp)
  801c48:	10c00817 	ldw	r3,32(r2)
  801c4c:	e0bfff17 	ldw	r2,-4(fp)
  801c50:	1004d23a 	srli	r2,r2,8
  801c54:	1885883a 	add	r2,r3,r2
  801c58:	e13ffe17 	ldw	r4,-8(fp)
  801c5c:	100b883a 	mov	r5,r2
  801c60:	08017140 	call	801714 <move_window>
  801c64:	10000126 	beq	r2,zero,801c6c <get_fat+0x174>
  801c68:	00003e06 	br	801d64 <get_fat+0x26c>
      p = &fs->win[clst * 2 % SS(fs)];
  801c6c:	e0bfff17 	ldw	r2,-4(fp)
  801c70:	1085883a 	add	r2,r2,r2
  801c74:	10807f8c 	andi	r2,r2,510
  801c78:	10800c04 	addi	r2,r2,48
  801c7c:	e0fffe17 	ldw	r3,-8(fp)
  801c80:	1885883a 	add	r2,r3,r2
  801c84:	e0bffd15 	stw	r2,-12(fp)
      return LD_WORD(p);
  801c88:	e0bffd17 	ldw	r2,-12(fp)
  801c8c:	10800044 	addi	r2,r2,1
  801c90:	10800003 	ldbu	r2,0(r2)
  801c94:	10803fcc 	andi	r2,r2,255
  801c98:	1004923a 	slli	r2,r2,8
  801c9c:	1007883a 	mov	r3,r2
  801ca0:	e0bffd17 	ldw	r2,-12(fp)
  801ca4:	10800003 	ldbu	r2,0(r2)
  801ca8:	10803fcc 	andi	r2,r2,255
  801cac:	1884b03a 	or	r2,r3,r2
  801cb0:	10bfffcc 	andi	r2,r2,65535
  801cb4:	00002c06 	br	801d68 <get_fat+0x270>

   case FS_FAT32 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  801cb8:	e0bffe17 	ldw	r2,-8(fp)
  801cbc:	10c00817 	ldw	r3,32(r2)
  801cc0:	e0bfff17 	ldw	r2,-4(fp)
  801cc4:	1004d1fa 	srli	r2,r2,7
  801cc8:	1885883a 	add	r2,r3,r2
  801ccc:	e13ffe17 	ldw	r4,-8(fp)
  801cd0:	100b883a 	mov	r5,r2
  801cd4:	08017140 	call	801714 <move_window>
  801cd8:	10000126 	beq	r2,zero,801ce0 <get_fat+0x1e8>
  801cdc:	00002106 	br	801d64 <get_fat+0x26c>
      p = &fs->win[clst * 4 % SS(fs)];
  801ce0:	e0bfff17 	ldw	r2,-4(fp)
  801ce4:	1085883a 	add	r2,r2,r2
  801ce8:	1085883a 	add	r2,r2,r2
  801cec:	10807f0c 	andi	r2,r2,508
  801cf0:	10800c04 	addi	r2,r2,48
  801cf4:	e0fffe17 	ldw	r3,-8(fp)
  801cf8:	1885883a 	add	r2,r3,r2
  801cfc:	e0bffd15 	stw	r2,-12(fp)
      return LD_DWORD(p) & 0x0FFFFFFF;
  801d00:	e0bffd17 	ldw	r2,-12(fp)
  801d04:	108000c4 	addi	r2,r2,3
  801d08:	10800003 	ldbu	r2,0(r2)
  801d0c:	10803fcc 	andi	r2,r2,255
  801d10:	1006963a 	slli	r3,r2,24
  801d14:	e0bffd17 	ldw	r2,-12(fp)
  801d18:	10800084 	addi	r2,r2,2
  801d1c:	10800003 	ldbu	r2,0(r2)
  801d20:	10803fcc 	andi	r2,r2,255
  801d24:	1004943a 	slli	r2,r2,16
  801d28:	1884b03a 	or	r2,r3,r2
  801d2c:	e0fffd17 	ldw	r3,-12(fp)
  801d30:	18c00044 	addi	r3,r3,1
  801d34:	18c00003 	ldbu	r3,0(r3)
  801d38:	18c03fcc 	andi	r3,r3,255
  801d3c:	1806923a 	slli	r3,r3,8
  801d40:	10c6b03a 	or	r3,r2,r3
  801d44:	e0bffd17 	ldw	r2,-12(fp)
  801d48:	10800003 	ldbu	r2,0(r2)
  801d4c:	10803fcc 	andi	r2,r2,255
  801d50:	1886b03a 	or	r3,r3,r2
  801d54:	00840034 	movhi	r2,4096
  801d58:	10bfffc4 	addi	r2,r2,-1
  801d5c:	1884703a 	and	r2,r3,r2
  801d60:	00000106 	br	801d68 <get_fat+0x270>
   }

   return 0xFFFFFFFF;   /* An error occurred at the disk I/O layer */
  801d64:	00bfffc4 	movi	r2,-1
}
  801d68:	e037883a 	mov	sp,fp
  801d6c:	dfc00117 	ldw	ra,4(sp)
  801d70:	df000017 	ldw	fp,0(sp)
  801d74:	dec00204 	addi	sp,sp,8
  801d78:	f800283a 	ret

00801d7c <put_fat>:
FRESULT put_fat (
   FATFS *fs,  /* File system object */
   uint32_t clst, /* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
   uint32_t val   /* New value to mark the cluster */
)
{
  801d7c:	defff804 	addi	sp,sp,-32
  801d80:	dfc00715 	stw	ra,28(sp)
  801d84:	df000615 	stw	fp,24(sp)
  801d88:	df000604 	addi	fp,sp,24
  801d8c:	e13ffd15 	stw	r4,-12(fp)
  801d90:	e17ffe15 	stw	r5,-8(fp)
  801d94:	e1bfff15 	stw	r6,-4(fp)
   uint32_t bc;
   uint8_t *p;
   FRESULT res;


   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
  801d98:	e0bffe17 	ldw	r2,-8(fp)
  801d9c:	108000b0 	cmpltui	r2,r2,2
  801da0:	1000041e 	bne	r2,zero,801db4 <put_fat+0x38>
  801da4:	e0bffd17 	ldw	r2,-12(fp)
  801da8:	10800617 	ldw	r2,24(r2)
  801dac:	e0fffe17 	ldw	r3,-8(fp)
  801db0:	18800336 	bltu	r3,r2,801dc0 <put_fat+0x44>
      res = FR_INT_ERR;
  801db4:	00800084 	movi	r2,2
  801db8:	e0bffa15 	stw	r2,-24(fp)
  801dbc:	0000c506 	br	8020d4 <put_fat+0x358>

   } else {
      switch (fs->fs_type) {
  801dc0:	e0bffd17 	ldw	r2,-12(fp)
  801dc4:	10800003 	ldbu	r2,0(r2)
  801dc8:	10803fcc 	andi	r2,r2,255
  801dcc:	10c000a0 	cmpeqi	r3,r2,2
  801dd0:	18005b1e 	bne	r3,zero,801f40 <put_fat+0x1c4>
  801dd4:	10c000e0 	cmpeqi	r3,r2,3
  801dd8:	1800771e 	bne	r3,zero,801fb8 <put_fat+0x23c>
  801ddc:	10800060 	cmpeqi	r2,r2,1
  801de0:	1000b726 	beq	r2,zero,8020c0 <put_fat+0x344>
      case FS_FAT12 :
         bc = clst; bc += bc / 2;
  801de4:	e0bffe17 	ldw	r2,-8(fp)
  801de8:	e0bffb15 	stw	r2,-20(fp)
  801dec:	e0bffb17 	ldw	r2,-20(fp)
  801df0:	1004d07a 	srli	r2,r2,1
  801df4:	e0fffb17 	ldw	r3,-20(fp)
  801df8:	1885883a 	add	r2,r3,r2
  801dfc:	e0bffb15 	stw	r2,-20(fp)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  801e00:	e0bffd17 	ldw	r2,-12(fp)
  801e04:	10c00817 	ldw	r3,32(r2)
  801e08:	e0bffb17 	ldw	r2,-20(fp)
  801e0c:	1004d27a 	srli	r2,r2,9
  801e10:	1885883a 	add	r2,r3,r2
  801e14:	e13ffd17 	ldw	r4,-12(fp)
  801e18:	100b883a 	mov	r5,r2
  801e1c:	08017140 	call	801714 <move_window>
  801e20:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801e24:	e0bffa17 	ldw	r2,-24(fp)
  801e28:	10000126 	beq	r2,zero,801e30 <put_fat+0xb4>
  801e2c:	0000a606 	br	8020c8 <put_fat+0x34c>
         p = &fs->win[bc % SS(fs)];
  801e30:	e0bffb17 	ldw	r2,-20(fp)
  801e34:	10807fcc 	andi	r2,r2,511
  801e38:	10800c04 	addi	r2,r2,48
  801e3c:	e0fffd17 	ldw	r3,-12(fp)
  801e40:	1885883a 	add	r2,r3,r2
  801e44:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? ((*p & 0x0F) | ((uint8_t)val << 4)) : (uint8_t)val;
  801e48:	e0bffe17 	ldw	r2,-8(fp)
  801e4c:	1080004c 	andi	r2,r2,1
  801e50:	10000a26 	beq	r2,zero,801e7c <put_fat+0x100>
  801e54:	e0bffc17 	ldw	r2,-16(fp)
  801e58:	10800003 	ldbu	r2,0(r2)
  801e5c:	108003cc 	andi	r2,r2,15
  801e60:	1007883a 	mov	r3,r2
  801e64:	e0bfff17 	ldw	r2,-4(fp)
  801e68:	10803fcc 	andi	r2,r2,255
  801e6c:	1004913a 	slli	r2,r2,4
  801e70:	1884b03a 	or	r2,r3,r2
  801e74:	1007883a 	mov	r3,r2
  801e78:	00000206 	br	801e84 <put_fat+0x108>
  801e7c:	e0bfff17 	ldw	r2,-4(fp)
  801e80:	1007883a 	mov	r3,r2
  801e84:	e0bffc17 	ldw	r2,-16(fp)
  801e88:	10c00005 	stb	r3,0(r2)
         bc++;
  801e8c:	e0bffb17 	ldw	r2,-20(fp)
  801e90:	10800044 	addi	r2,r2,1
  801e94:	e0bffb15 	stw	r2,-20(fp)
         fs->wflag = 1;
  801e98:	e0bffd17 	ldw	r2,-12(fp)
  801e9c:	00c00044 	movi	r3,1
  801ea0:	10c00105 	stb	r3,4(r2)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  801ea4:	e0bffd17 	ldw	r2,-12(fp)
  801ea8:	10c00817 	ldw	r3,32(r2)
  801eac:	e0bffb17 	ldw	r2,-20(fp)
  801eb0:	1004d27a 	srli	r2,r2,9
  801eb4:	1885883a 	add	r2,r3,r2
  801eb8:	e13ffd17 	ldw	r4,-12(fp)
  801ebc:	100b883a 	mov	r5,r2
  801ec0:	08017140 	call	801714 <move_window>
  801ec4:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801ec8:	e0bffa17 	ldw	r2,-24(fp)
  801ecc:	10000126 	beq	r2,zero,801ed4 <put_fat+0x158>
  801ed0:	00007d06 	br	8020c8 <put_fat+0x34c>
         p = &fs->win[bc % SS(fs)];
  801ed4:	e0bffb17 	ldw	r2,-20(fp)
  801ed8:	10807fcc 	andi	r2,r2,511
  801edc:	10800c04 	addi	r2,r2,48
  801ee0:	e0fffd17 	ldw	r3,-12(fp)
  801ee4:	1885883a 	add	r2,r3,r2
  801ee8:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? (uint8_t)(val >> 4) : ((*p & 0xF0) | ((uint8_t)(val >> 8) & 0x0F));
  801eec:	e0bffe17 	ldw	r2,-8(fp)
  801ef0:	1080004c 	andi	r2,r2,1
  801ef4:	10000426 	beq	r2,zero,801f08 <put_fat+0x18c>
  801ef8:	e0bfff17 	ldw	r2,-4(fp)
  801efc:	1004d13a 	srli	r2,r2,4
  801f00:	1007883a 	mov	r3,r2
  801f04:	00000b06 	br	801f34 <put_fat+0x1b8>
  801f08:	e0bffc17 	ldw	r2,-16(fp)
  801f0c:	10800003 	ldbu	r2,0(r2)
  801f10:	1007883a 	mov	r3,r2
  801f14:	00bffc04 	movi	r2,-16
  801f18:	1884703a 	and	r2,r3,r2
  801f1c:	1007883a 	mov	r3,r2
  801f20:	e0bfff17 	ldw	r2,-4(fp)
  801f24:	1004d23a 	srli	r2,r2,8
  801f28:	108003cc 	andi	r2,r2,15
  801f2c:	1884b03a 	or	r2,r3,r2
  801f30:	1007883a 	mov	r3,r2
  801f34:	e0bffc17 	ldw	r2,-16(fp)
  801f38:	10c00005 	stb	r3,0(r2)
         break;
  801f3c:	00006206 	br	8020c8 <put_fat+0x34c>

      case FS_FAT16 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  801f40:	e0bffd17 	ldw	r2,-12(fp)
  801f44:	10c00817 	ldw	r3,32(r2)
  801f48:	e0bffe17 	ldw	r2,-8(fp)
  801f4c:	1004d23a 	srli	r2,r2,8
  801f50:	1885883a 	add	r2,r3,r2
  801f54:	e13ffd17 	ldw	r4,-12(fp)
  801f58:	100b883a 	mov	r5,r2
  801f5c:	08017140 	call	801714 <move_window>
  801f60:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801f64:	e0bffa17 	ldw	r2,-24(fp)
  801f68:	10000126 	beq	r2,zero,801f70 <put_fat+0x1f4>
  801f6c:	00005606 	br	8020c8 <put_fat+0x34c>
         p = &fs->win[clst * 2 % SS(fs)];
  801f70:	e0bffe17 	ldw	r2,-8(fp)
  801f74:	1085883a 	add	r2,r2,r2
  801f78:	10807f8c 	andi	r2,r2,510
  801f7c:	10800c04 	addi	r2,r2,48
  801f80:	e0fffd17 	ldw	r3,-12(fp)
  801f84:	1885883a 	add	r2,r3,r2
  801f88:	e0bffc15 	stw	r2,-16(fp)
         ST_WORD(p, (uint16_t)val);
  801f8c:	e0bfff17 	ldw	r2,-4(fp)
  801f90:	1007883a 	mov	r3,r2
  801f94:	e0bffc17 	ldw	r2,-16(fp)
  801f98:	10c00005 	stb	r3,0(r2)
  801f9c:	e0bffc17 	ldw	r2,-16(fp)
  801fa0:	10800044 	addi	r2,r2,1
  801fa4:	e0ffff17 	ldw	r3,-4(fp)
  801fa8:	18ffffcc 	andi	r3,r3,65535
  801fac:	1806d23a 	srli	r3,r3,8
  801fb0:	10c00005 	stb	r3,0(r2)
         break;
  801fb4:	00004406 	br	8020c8 <put_fat+0x34c>

      case FS_FAT32 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  801fb8:	e0bffd17 	ldw	r2,-12(fp)
  801fbc:	10c00817 	ldw	r3,32(r2)
  801fc0:	e0bffe17 	ldw	r2,-8(fp)
  801fc4:	1004d1fa 	srli	r2,r2,7
  801fc8:	1885883a 	add	r2,r3,r2
  801fcc:	e13ffd17 	ldw	r4,-12(fp)
  801fd0:	100b883a 	mov	r5,r2
  801fd4:	08017140 	call	801714 <move_window>
  801fd8:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801fdc:	e0bffa17 	ldw	r2,-24(fp)
  801fe0:	10000126 	beq	r2,zero,801fe8 <put_fat+0x26c>
  801fe4:	00003806 	br	8020c8 <put_fat+0x34c>
         p = &fs->win[clst * 4 % SS(fs)];
  801fe8:	e0bffe17 	ldw	r2,-8(fp)
  801fec:	1085883a 	add	r2,r2,r2
  801ff0:	1085883a 	add	r2,r2,r2
  801ff4:	10807f0c 	andi	r2,r2,508
  801ff8:	10800c04 	addi	r2,r2,48
  801ffc:	e0fffd17 	ldw	r3,-12(fp)
  802000:	1885883a 	add	r2,r3,r2
  802004:	e0bffc15 	stw	r2,-16(fp)
         val |= LD_DWORD(p) & 0xF0000000;
  802008:	e0bffc17 	ldw	r2,-16(fp)
  80200c:	108000c4 	addi	r2,r2,3
  802010:	10800003 	ldbu	r2,0(r2)
  802014:	10803fcc 	andi	r2,r2,255
  802018:	1006963a 	slli	r3,r2,24
  80201c:	e0bffc17 	ldw	r2,-16(fp)
  802020:	10800084 	addi	r2,r2,2
  802024:	10800003 	ldbu	r2,0(r2)
  802028:	10803fcc 	andi	r2,r2,255
  80202c:	1004943a 	slli	r2,r2,16
  802030:	1884b03a 	or	r2,r3,r2
  802034:	e0fffc17 	ldw	r3,-16(fp)
  802038:	18c00044 	addi	r3,r3,1
  80203c:	18c00003 	ldbu	r3,0(r3)
  802040:	18c03fcc 	andi	r3,r3,255
  802044:	1806923a 	slli	r3,r3,8
  802048:	10c6b03a 	or	r3,r2,r3
  80204c:	e0bffc17 	ldw	r2,-16(fp)
  802050:	10800003 	ldbu	r2,0(r2)
  802054:	10803fcc 	andi	r2,r2,255
  802058:	1884b03a 	or	r2,r3,r2
  80205c:	10bc002c 	andhi	r2,r2,61440
  802060:	e0ffff17 	ldw	r3,-4(fp)
  802064:	1884b03a 	or	r2,r3,r2
  802068:	e0bfff15 	stw	r2,-4(fp)
         ST_DWORD(p, val);
  80206c:	e0bfff17 	ldw	r2,-4(fp)
  802070:	1007883a 	mov	r3,r2
  802074:	e0bffc17 	ldw	r2,-16(fp)
  802078:	10c00005 	stb	r3,0(r2)
  80207c:	e0bffc17 	ldw	r2,-16(fp)
  802080:	10800044 	addi	r2,r2,1
  802084:	e0ffff17 	ldw	r3,-4(fp)
  802088:	18ffffcc 	andi	r3,r3,65535
  80208c:	1806d23a 	srli	r3,r3,8
  802090:	10c00005 	stb	r3,0(r2)
  802094:	e0bffc17 	ldw	r2,-16(fp)
  802098:	10800084 	addi	r2,r2,2
  80209c:	e0ffff17 	ldw	r3,-4(fp)
  8020a0:	1806d43a 	srli	r3,r3,16
  8020a4:	10c00005 	stb	r3,0(r2)
  8020a8:	e0bffc17 	ldw	r2,-16(fp)
  8020ac:	108000c4 	addi	r2,r2,3
  8020b0:	e0ffff17 	ldw	r3,-4(fp)
  8020b4:	1806d63a 	srli	r3,r3,24
  8020b8:	10c00005 	stb	r3,0(r2)
         break;
  8020bc:	00000206 	br	8020c8 <put_fat+0x34c>

      default :
         res = FR_INT_ERR;
  8020c0:	00800084 	movi	r2,2
  8020c4:	e0bffa15 	stw	r2,-24(fp)
      }
      fs->wflag = 1;
  8020c8:	e0bffd17 	ldw	r2,-12(fp)
  8020cc:	00c00044 	movi	r3,1
  8020d0:	10c00105 	stb	r3,4(r2)
   }

   return res;
  8020d4:	e0bffa17 	ldw	r2,-24(fp)
}
  8020d8:	e037883a 	mov	sp,fp
  8020dc:	dfc00117 	ldw	ra,4(sp)
  8020e0:	df000017 	ldw	fp,0(sp)
  8020e4:	dec00204 	addi	sp,sp,8
  8020e8:	f800283a 	ret

008020ec <remove_chain>:
static
FRESULT remove_chain (
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to remove a chain from */
)
{
  8020ec:	defffa04 	addi	sp,sp,-24
  8020f0:	dfc00515 	stw	ra,20(sp)
  8020f4:	df000415 	stw	fp,16(sp)
  8020f8:	df000404 	addi	fp,sp,16
  8020fc:	e13ffe15 	stw	r4,-8(fp)
  802100:	e17fff15 	stw	r5,-4(fp)
   uint32_t nxt;
#if _USE_ERASE
   uint32_t scl = clst, ecl = clst, resion[2];
#endif

   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
  802104:	e0bfff17 	ldw	r2,-4(fp)
  802108:	108000b0 	cmpltui	r2,r2,2
  80210c:	1000041e 	bne	r2,zero,802120 <remove_chain+0x34>
  802110:	e0bffe17 	ldw	r2,-8(fp)
  802114:	10800617 	ldw	r2,24(r2)
  802118:	e0ffff17 	ldw	r3,-4(fp)
  80211c:	18800336 	bltu	r3,r2,80212c <remove_chain+0x40>
      res = FR_INT_ERR;
  802120:	00800084 	movi	r2,2
  802124:	e0bffc15 	stw	r2,-16(fp)
  802128:	00002f06 	br	8021e8 <remove_chain+0xfc>

   } else {
      res = FR_OK;
  80212c:	e03ffc15 	stw	zero,-16(fp)
      while (clst < fs->n_fatent) {       /* Not a last link? */
  802130:	00002906 	br	8021d8 <remove_chain+0xec>
         nxt = get_fat(fs, clst);         /* Get cluster status */
  802134:	e13ffe17 	ldw	r4,-8(fp)
  802138:	e17fff17 	ldw	r5,-4(fp)
  80213c:	0801af80 	call	801af8 <get_fat>
  802140:	e0bffd15 	stw	r2,-12(fp)
         if (nxt == 0) break;          /* Empty cluster? */
  802144:	e0bffd17 	ldw	r2,-12(fp)
  802148:	1000011e 	bne	r2,zero,802150 <remove_chain+0x64>
  80214c:	00002606 	br	8021e8 <remove_chain+0xfc>
         if (nxt == 1) { res = FR_INT_ERR; break; }   /* Internal error? */
  802150:	e0bffd17 	ldw	r2,-12(fp)
  802154:	10800058 	cmpnei	r2,r2,1
  802158:	1000031e 	bne	r2,zero,802168 <remove_chain+0x7c>
  80215c:	00800084 	movi	r2,2
  802160:	e0bffc15 	stw	r2,-16(fp)
  802164:	00002006 	br	8021e8 <remove_chain+0xfc>
         if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }  /* Disk error? */
  802168:	e0bffd17 	ldw	r2,-12(fp)
  80216c:	10bfffd8 	cmpnei	r2,r2,-1
  802170:	1000031e 	bne	r2,zero,802180 <remove_chain+0x94>
  802174:	00800044 	movi	r2,1
  802178:	e0bffc15 	stw	r2,-16(fp)
  80217c:	00001a06 	br	8021e8 <remove_chain+0xfc>
         res = put_fat(fs, clst, 0);         /* Mark the cluster "empty" */
  802180:	e13ffe17 	ldw	r4,-8(fp)
  802184:	e17fff17 	ldw	r5,-4(fp)
  802188:	000d883a 	mov	r6,zero
  80218c:	0801d7c0 	call	801d7c <put_fat>
  802190:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
  802194:	e0bffc17 	ldw	r2,-16(fp)
  802198:	10000126 	beq	r2,zero,8021a0 <remove_chain+0xb4>
  80219c:	00001206 	br	8021e8 <remove_chain+0xfc>
         if (fs->free_clust != 0xFFFFFFFF) { /* Update FSInfo */
  8021a0:	e0bffe17 	ldw	r2,-8(fp)
  8021a4:	10800417 	ldw	r2,16(r2)
  8021a8:	10bfffe0 	cmpeqi	r2,r2,-1
  8021ac:	1000081e 	bne	r2,zero,8021d0 <remove_chain+0xe4>
            fs->free_clust++;
  8021b0:	e0bffe17 	ldw	r2,-8(fp)
  8021b4:	10800417 	ldw	r2,16(r2)
  8021b8:	10c00044 	addi	r3,r2,1
  8021bc:	e0bffe17 	ldw	r2,-8(fp)
  8021c0:	10c00415 	stw	r3,16(r2)
            fs->fsi_flag = 1;
  8021c4:	e0bffe17 	ldw	r2,-8(fp)
  8021c8:	00c00044 	movi	r3,1
  8021cc:	10c00145 	stb	r3,5(r2)
            resion[1] = clust2sect(fs, ecl) + fs->csize - 1;   /* End sector */
            disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);    /* Erase the block */
            scl = ecl = nxt;
         }
#endif
         clst = nxt; /* Next cluster */
  8021d0:	e0bffd17 	ldw	r2,-12(fp)
  8021d4:	e0bfff15 	stw	r2,-4(fp)
   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
      res = FR_INT_ERR;

   } else {
      res = FR_OK;
      while (clst < fs->n_fatent) {       /* Not a last link? */
  8021d8:	e0bffe17 	ldw	r2,-8(fp)
  8021dc:	10800617 	ldw	r2,24(r2)
  8021e0:	e0ffff17 	ldw	r3,-4(fp)
  8021e4:	18bfd336 	bltu	r3,r2,802134 <__alt_data_end+0xff802134>
#endif
         clst = nxt; /* Next cluster */
      }
   }

   return res;
  8021e8:	e0bffc17 	ldw	r2,-16(fp)
}
  8021ec:	e037883a 	mov	sp,fp
  8021f0:	dfc00117 	ldw	ra,4(sp)
  8021f4:	df000017 	ldw	fp,0(sp)
  8021f8:	dec00204 	addi	sp,sp,8
  8021fc:	f800283a 	ret

00802200 <create_chain>:
static
uint32_t create_chain ( /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to stretch. 0 means create a new chain. */
)
{
  802200:	defff804 	addi	sp,sp,-32
  802204:	dfc00715 	stw	ra,28(sp)
  802208:	df000615 	stw	fp,24(sp)
  80220c:	df000604 	addi	fp,sp,24
  802210:	e13ffe15 	stw	r4,-8(fp)
  802214:	e17fff15 	stw	r5,-4(fp)
   uint32_t cs, ncl, scl;
   FRESULT res;


   if (clst == 0) {     /* Create a new chain */
  802218:	e0bfff17 	ldw	r2,-4(fp)
  80221c:	10000c1e 	bne	r2,zero,802250 <create_chain+0x50>
      scl = fs->last_clust;         /* Get suggested start point */
  802220:	e0bffe17 	ldw	r2,-8(fp)
  802224:	10800317 	ldw	r2,12(r2)
  802228:	e0bffb15 	stw	r2,-20(fp)
      if (!scl || scl >= fs->n_fatent) scl = 1;
  80222c:	e0bffb17 	ldw	r2,-20(fp)
  802230:	10000426 	beq	r2,zero,802244 <create_chain+0x44>
  802234:	e0bffe17 	ldw	r2,-8(fp)
  802238:	10800617 	ldw	r2,24(r2)
  80223c:	e0fffb17 	ldw	r3,-20(fp)
  802240:	18801436 	bltu	r3,r2,802294 <create_chain+0x94>
  802244:	00800044 	movi	r2,1
  802248:	e0bffb15 	stw	r2,-20(fp)
  80224c:	00001106 	br	802294 <create_chain+0x94>
   }
   else {               /* Stretch the current chain */
      cs = get_fat(fs, clst);       /* Check the cluster status */
  802250:	e13ffe17 	ldw	r4,-8(fp)
  802254:	e17fff17 	ldw	r5,-4(fp)
  802258:	0801af80 	call	801af8 <get_fat>
  80225c:	e0bffd15 	stw	r2,-12(fp)
      if (cs < 2) return 1;         /* It is an invalid cluster */
  802260:	e0bffd17 	ldw	r2,-12(fp)
  802264:	108000a8 	cmpgeui	r2,r2,2
  802268:	1000021e 	bne	r2,zero,802274 <create_chain+0x74>
  80226c:	00800044 	movi	r2,1
  802270:	00005706 	br	8023d0 <create_chain+0x1d0>
      if (cs < fs->n_fatent) return cs;   /* It is already followed by next cluster */
  802274:	e0bffe17 	ldw	r2,-8(fp)
  802278:	10800617 	ldw	r2,24(r2)
  80227c:	e0fffd17 	ldw	r3,-12(fp)
  802280:	1880022e 	bgeu	r3,r2,80228c <create_chain+0x8c>
  802284:	e0bffd17 	ldw	r2,-12(fp)
  802288:	00005106 	br	8023d0 <create_chain+0x1d0>
      scl = clst;
  80228c:	e0bfff17 	ldw	r2,-4(fp)
  802290:	e0bffb15 	stw	r2,-20(fp)
   }

   ncl = scl;           /* Start cluster */
  802294:	e0bffb17 	ldw	r2,-20(fp)
  802298:	e0bffa15 	stw	r2,-24(fp)
   for (;;) {
      ncl++;                     /* Next cluster */
  80229c:	e0bffa17 	ldw	r2,-24(fp)
  8022a0:	10800044 	addi	r2,r2,1
  8022a4:	e0bffa15 	stw	r2,-24(fp)
      if (ncl >= fs->n_fatent) {    /* Wrap around */
  8022a8:	e0bffe17 	ldw	r2,-8(fp)
  8022ac:	10800617 	ldw	r2,24(r2)
  8022b0:	e0fffa17 	ldw	r3,-24(fp)
  8022b4:	18800736 	bltu	r3,r2,8022d4 <create_chain+0xd4>
         ncl = 2;
  8022b8:	00800084 	movi	r2,2
  8022bc:	e0bffa15 	stw	r2,-24(fp)
         if (ncl > scl) return 0;   /* No free cluster */
  8022c0:	e0bffa17 	ldw	r2,-24(fp)
  8022c4:	e0fffb17 	ldw	r3,-20(fp)
  8022c8:	1880022e 	bgeu	r3,r2,8022d4 <create_chain+0xd4>
  8022cc:	0005883a 	mov	r2,zero
  8022d0:	00003f06 	br	8023d0 <create_chain+0x1d0>
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
  8022d4:	e13ffe17 	ldw	r4,-8(fp)
  8022d8:	e17ffa17 	ldw	r5,-24(fp)
  8022dc:	0801af80 	call	801af8 <get_fat>
  8022e0:	e0bffd15 	stw	r2,-12(fp)
      if (cs == 0) break;           /* Found a free cluster */
  8022e4:	e0bffd17 	ldw	r2,-12(fp)
  8022e8:	10000a1e 	bne	r2,zero,802314 <create_chain+0x114>
  8022ec:	0001883a 	nop
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
         return cs;
      if (ncl == scl) return 0;     /* No free cluster */
   }

   res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
  8022f0:	e13ffe17 	ldw	r4,-8(fp)
  8022f4:	e17ffa17 	ldw	r5,-24(fp)
  8022f8:	01840034 	movhi	r6,4096
  8022fc:	31bfffc4 	addi	r6,r6,-1
  802300:	0801d7c0 	call	801d7c <put_fat>
  802304:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK && clst != 0) {
  802308:	e0bffc17 	ldw	r2,-16(fp)
  80230c:	1000161e 	bne	r2,zero,802368 <create_chain+0x168>
  802310:	00000e06 	br	80234c <create_chain+0x14c>
         ncl = 2;
         if (ncl > scl) return 0;   /* No free cluster */
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
      if (cs == 0) break;           /* Found a free cluster */
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  802314:	e0bffd17 	ldw	r2,-12(fp)
  802318:	10bfffe0 	cmpeqi	r2,r2,-1
  80231c:	1000031e 	bne	r2,zero,80232c <create_chain+0x12c>
  802320:	e0bffd17 	ldw	r2,-12(fp)
  802324:	10800058 	cmpnei	r2,r2,1
  802328:	1000021e 	bne	r2,zero,802334 <create_chain+0x134>
         return cs;
  80232c:	e0bffd17 	ldw	r2,-12(fp)
  802330:	00002706 	br	8023d0 <create_chain+0x1d0>
      if (ncl == scl) return 0;     /* No free cluster */
  802334:	e0fffa17 	ldw	r3,-24(fp)
  802338:	e0bffb17 	ldw	r2,-20(fp)
  80233c:	1880021e 	bne	r3,r2,802348 <create_chain+0x148>
  802340:	0005883a 	mov	r2,zero
  802344:	00002206 	br	8023d0 <create_chain+0x1d0>
   }
  802348:	003fd406 	br	80229c <__alt_data_end+0xff80229c>

   res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
   if (res == FR_OK && clst != 0) {
  80234c:	e0bfff17 	ldw	r2,-4(fp)
  802350:	10000526 	beq	r2,zero,802368 <create_chain+0x168>
      res = put_fat(fs, clst, ncl); /* Link it to the previous one if needed */
  802354:	e13ffe17 	ldw	r4,-8(fp)
  802358:	e17fff17 	ldw	r5,-4(fp)
  80235c:	e1bffa17 	ldw	r6,-24(fp)
  802360:	0801d7c0 	call	801d7c <put_fat>
  802364:	e0bffc15 	stw	r2,-16(fp)
   }
   if (res == FR_OK) {
  802368:	e0bffc17 	ldw	r2,-16(fp)
  80236c:	1000101e 	bne	r2,zero,8023b0 <create_chain+0x1b0>
      fs->last_clust = ncl;         /* Update FSINFO */
  802370:	e0bffe17 	ldw	r2,-8(fp)
  802374:	e0fffa17 	ldw	r3,-24(fp)
  802378:	10c00315 	stw	r3,12(r2)
      if (fs->free_clust != 0xFFFFFFFF) {
  80237c:	e0bffe17 	ldw	r2,-8(fp)
  802380:	10800417 	ldw	r2,16(r2)
  802384:	10bfffe0 	cmpeqi	r2,r2,-1
  802388:	1000101e 	bne	r2,zero,8023cc <create_chain+0x1cc>
         fs->free_clust--;
  80238c:	e0bffe17 	ldw	r2,-8(fp)
  802390:	10800417 	ldw	r2,16(r2)
  802394:	10ffffc4 	addi	r3,r2,-1
  802398:	e0bffe17 	ldw	r2,-8(fp)
  80239c:	10c00415 	stw	r3,16(r2)
         fs->fsi_flag = 1;
  8023a0:	e0bffe17 	ldw	r2,-8(fp)
  8023a4:	00c00044 	movi	r3,1
  8023a8:	10c00145 	stb	r3,5(r2)
  8023ac:	00000706 	br	8023cc <create_chain+0x1cc>
      }
   } else {
      ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  8023b0:	e0bffc17 	ldw	r2,-16(fp)
  8023b4:	10800058 	cmpnei	r2,r2,1
  8023b8:	1000021e 	bne	r2,zero,8023c4 <create_chain+0x1c4>
  8023bc:	00bfffc4 	movi	r2,-1
  8023c0:	00000106 	br	8023c8 <create_chain+0x1c8>
  8023c4:	00800044 	movi	r2,1
  8023c8:	e0bffa15 	stw	r2,-24(fp)
   }

   return ncl;    /* Return new cluster number or error code */
  8023cc:	e0bffa17 	ldw	r2,-24(fp)
}
  8023d0:	e037883a 	mov	sp,fp
  8023d4:	dfc00117 	ldw	ra,4(sp)
  8023d8:	df000017 	ldw	fp,0(sp)
  8023dc:	dec00204 	addi	sp,sp,8
  8023e0:	f800283a 	ret

008023e4 <dir_sdi>:
static
FRESULT dir_sdi (
   DIR *dj,    /* Pointer to directory object */
   uint16_t idx    /* Directory index number */
)
{
  8023e4:	defffa04 	addi	sp,sp,-24
  8023e8:	dfc00515 	stw	ra,20(sp)
  8023ec:	df000415 	stw	fp,16(sp)
  8023f0:	df000404 	addi	fp,sp,16
  8023f4:	e13ffe15 	stw	r4,-8(fp)
  8023f8:	2805883a 	mov	r2,r5
  8023fc:	e0bfff0d 	sth	r2,-4(fp)
   uint32_t clst;
   uint16_t ic;


   dj->index = idx;
  802400:	e0bffe17 	ldw	r2,-8(fp)
  802404:	e0ffff0b 	ldhu	r3,-4(fp)
  802408:	10c0018d 	sth	r3,6(r2)
   clst = dj->sclust;
  80240c:	e0bffe17 	ldw	r2,-8(fp)
  802410:	10800217 	ldw	r2,8(r2)
  802414:	e0bffc15 	stw	r2,-16(fp)
   if (clst == 1 || clst >= dj->fs->n_fatent)   /* Check start cluster range */
  802418:	e0bffc17 	ldw	r2,-16(fp)
  80241c:	10800060 	cmpeqi	r2,r2,1
  802420:	1000051e 	bne	r2,zero,802438 <dir_sdi+0x54>
  802424:	e0bffe17 	ldw	r2,-8(fp)
  802428:	10800017 	ldw	r2,0(r2)
  80242c:	10800617 	ldw	r2,24(r2)
  802430:	e0fffc17 	ldw	r3,-16(fp)
  802434:	18800236 	bltu	r3,r2,802440 <dir_sdi+0x5c>
      return FR_INT_ERR;
  802438:	00800084 	movi	r2,2
  80243c:	00005f06 	br	8025bc <dir_sdi+0x1d8>
   if (!clst && dj->fs->fs_type == FS_FAT32) /* Replace cluster# 0 with root cluster# if in FAT32 */
  802440:	e0bffc17 	ldw	r2,-16(fp)
  802444:	10000a1e 	bne	r2,zero,802470 <dir_sdi+0x8c>
  802448:	e0bffe17 	ldw	r2,-8(fp)
  80244c:	10800017 	ldw	r2,0(r2)
  802450:	10800003 	ldbu	r2,0(r2)
  802454:	10803fcc 	andi	r2,r2,255
  802458:	108000d8 	cmpnei	r2,r2,3
  80245c:	1000041e 	bne	r2,zero,802470 <dir_sdi+0x8c>
      clst = dj->fs->dirbase;
  802460:	e0bffe17 	ldw	r2,-8(fp)
  802464:	10800017 	ldw	r2,0(r2)
  802468:	10800917 	ldw	r2,36(r2)
  80246c:	e0bffc15 	stw	r2,-16(fp)

   if (clst == 0) {  /* Static table (root-dir in FAT12/16) */
  802470:	e0bffc17 	ldw	r2,-16(fp)
  802474:	1000151e 	bne	r2,zero,8024cc <dir_sdi+0xe8>
      dj->clust = clst;
  802478:	e0bffe17 	ldw	r2,-8(fp)
  80247c:	e0fffc17 	ldw	r3,-16(fp)
  802480:	10c00315 	stw	r3,12(r2)
      if (idx >= dj->fs->n_rootdir)    /* Index is out of range */
  802484:	e0bffe17 	ldw	r2,-8(fp)
  802488:	10800017 	ldw	r2,0(r2)
  80248c:	1080020b 	ldhu	r2,8(r2)
  802490:	10bfffcc 	andi	r2,r2,65535
  802494:	e0ffff0b 	ldhu	r3,-4(fp)
  802498:	18800236 	bltu	r3,r2,8024a4 <dir_sdi+0xc0>
         return FR_INT_ERR;
  80249c:	00800084 	movi	r2,2
  8024a0:	00004606 	br	8025bc <dir_sdi+0x1d8>
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
  8024a4:	e0bffe17 	ldw	r2,-8(fp)
  8024a8:	10800017 	ldw	r2,0(r2)
  8024ac:	10c00917 	ldw	r3,36(r2)
  8024b0:	e0bfff0b 	ldhu	r2,-4(fp)
  8024b4:	1004d13a 	srli	r2,r2,4
  8024b8:	10bfffcc 	andi	r2,r2,65535
  8024bc:	1887883a 	add	r3,r3,r2
  8024c0:	e0bffe17 	ldw	r2,-8(fp)
  8024c4:	10c00415 	stw	r3,16(r2)
  8024c8:	00003206 	br	802594 <dir_sdi+0x1b0>
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
  8024cc:	e0bffe17 	ldw	r2,-8(fp)
  8024d0:	10800017 	ldw	r2,0(r2)
  8024d4:	10800083 	ldbu	r2,2(r2)
  8024d8:	10803fcc 	andi	r2,r2,255
  8024dc:	1004913a 	slli	r2,r2,4
  8024e0:	e0bffd0d 	sth	r2,-12(fp)
      while (idx >= ic) {  /* Follow cluster chain */
  8024e4:	00001906 	br	80254c <dir_sdi+0x168>
         clst = get_fat(dj->fs, clst);          /* Get next cluster */
  8024e8:	e0bffe17 	ldw	r2,-8(fp)
  8024ec:	10800017 	ldw	r2,0(r2)
  8024f0:	1009883a 	mov	r4,r2
  8024f4:	e17ffc17 	ldw	r5,-16(fp)
  8024f8:	0801af80 	call	801af8 <get_fat>
  8024fc:	e0bffc15 	stw	r2,-16(fp)
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
  802500:	e0bffc17 	ldw	r2,-16(fp)
  802504:	10bfffd8 	cmpnei	r2,r2,-1
  802508:	1000021e 	bne	r2,zero,802514 <dir_sdi+0x130>
  80250c:	00800044 	movi	r2,1
  802510:	00002a06 	br	8025bc <dir_sdi+0x1d8>
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
  802514:	e0bffc17 	ldw	r2,-16(fp)
  802518:	108000b0 	cmpltui	r2,r2,2
  80251c:	1000051e 	bne	r2,zero,802534 <dir_sdi+0x150>
  802520:	e0bffe17 	ldw	r2,-8(fp)
  802524:	10800017 	ldw	r2,0(r2)
  802528:	10800617 	ldw	r2,24(r2)
  80252c:	e0fffc17 	ldw	r3,-16(fp)
  802530:	18800236 	bltu	r3,r2,80253c <dir_sdi+0x158>
            return FR_INT_ERR;
  802534:	00800084 	movi	r2,2
  802538:	00002006 	br	8025bc <dir_sdi+0x1d8>
         idx -= ic;
  80253c:	e0ffff0b 	ldhu	r3,-4(fp)
  802540:	e0bffd0b 	ldhu	r2,-12(fp)
  802544:	1885c83a 	sub	r2,r3,r2
  802548:	e0bfff0d 	sth	r2,-4(fp)
         return FR_INT_ERR;
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
      while (idx >= ic) {  /* Follow cluster chain */
  80254c:	e0ffff0b 	ldhu	r3,-4(fp)
  802550:	e0bffd0b 	ldhu	r2,-12(fp)
  802554:	18bfe42e 	bgeu	r3,r2,8024e8 <__alt_data_end+0xff8024e8>
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
            return FR_INT_ERR;
         idx -= ic;
      }
      dj->clust = clst;
  802558:	e0bffe17 	ldw	r2,-8(fp)
  80255c:	e0fffc17 	ldw	r3,-16(fp)
  802560:	10c00315 	stw	r3,12(r2)
      dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
  802564:	e0bffe17 	ldw	r2,-8(fp)
  802568:	10800017 	ldw	r2,0(r2)
  80256c:	1009883a 	mov	r4,r2
  802570:	e17ffc17 	ldw	r5,-16(fp)
  802574:	0801a8c0 	call	801a8c <clust2sect>
  802578:	1007883a 	mov	r3,r2
  80257c:	e0bfff0b 	ldhu	r2,-4(fp)
  802580:	1004d13a 	srli	r2,r2,4
  802584:	10bfffcc 	andi	r2,r2,65535
  802588:	1887883a 	add	r3,r3,r2
  80258c:	e0bffe17 	ldw	r2,-8(fp)
  802590:	10c00415 	stw	r3,16(r2)
   }

   dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;   /* Ptr to the entry in the sector */
  802594:	e0bffe17 	ldw	r2,-8(fp)
  802598:	10c00017 	ldw	r3,0(r2)
  80259c:	e0bfff0b 	ldhu	r2,-4(fp)
  8025a0:	108003cc 	andi	r2,r2,15
  8025a4:	1004917a 	slli	r2,r2,5
  8025a8:	10800c04 	addi	r2,r2,48
  8025ac:	1887883a 	add	r3,r3,r2
  8025b0:	e0bffe17 	ldw	r2,-8(fp)
  8025b4:	10c00515 	stw	r3,20(r2)

   return FR_OK;  /* Seek succeeded */
  8025b8:	0005883a 	mov	r2,zero
}
  8025bc:	e037883a 	mov	sp,fp
  8025c0:	dfc00117 	ldw	ra,4(sp)
  8025c4:	df000017 	ldw	fp,0(sp)
  8025c8:	dec00204 	addi	sp,sp,8
  8025cc:	f800283a 	ret

008025d0 <dir_next>:
static
FRESULT dir_next (   /* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   DIR *dj,    /* Pointer to directory object */
   int stretch    /* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  8025d0:	defff904 	addi	sp,sp,-28
  8025d4:	dfc00615 	stw	ra,24(sp)
  8025d8:	df000515 	stw	fp,20(sp)
  8025dc:	dc000415 	stw	r16,16(sp)
  8025e0:	df000504 	addi	fp,sp,20
  8025e4:	e13ffd15 	stw	r4,-12(fp)
  8025e8:	e17ffe15 	stw	r5,-8(fp)
   uint16_t i;



   stretch = stretch;      /* To suppress warning on read-only cfg. */
   i = dj->index + 1;
  8025ec:	e0bffd17 	ldw	r2,-12(fp)
  8025f0:	1080018b 	ldhu	r2,6(r2)
  8025f4:	10800044 	addi	r2,r2,1
  8025f8:	e0bffc8d 	sth	r2,-14(fp)
   if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
  8025fc:	e0bffc8b 	ldhu	r2,-14(fp)
  802600:	10000326 	beq	r2,zero,802610 <dir_next+0x40>
  802604:	e0bffd17 	ldw	r2,-12(fp)
  802608:	10800417 	ldw	r2,16(r2)
  80260c:	1000021e 	bne	r2,zero,802618 <dir_next+0x48>
      return FR_NO_FILE;
  802610:	00800104 	movi	r2,4
  802614:	0000a206 	br	8028a0 <dir_next+0x2d0>

   if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
  802618:	e0bffc8b 	ldhu	r2,-14(fp)
  80261c:	108003cc 	andi	r2,r2,15
  802620:	10bfffcc 	andi	r2,r2,65535
  802624:	1000911e 	bne	r2,zero,80286c <dir_next+0x29c>
      dj->sect++;             /* Next sector */
  802628:	e0bffd17 	ldw	r2,-12(fp)
  80262c:	10800417 	ldw	r2,16(r2)
  802630:	10c00044 	addi	r3,r2,1
  802634:	e0bffd17 	ldw	r2,-12(fp)
  802638:	10c00415 	stw	r3,16(r2)

      if (dj->clust == 0) {   /* Static table */
  80263c:	e0bffd17 	ldw	r2,-12(fp)
  802640:	10800317 	ldw	r2,12(r2)
  802644:	1000081e 	bne	r2,zero,802668 <dir_next+0x98>
         if (i >= dj->fs->n_rootdir)   /* Report EOT when end of table */
  802648:	e0bffd17 	ldw	r2,-12(fp)
  80264c:	10800017 	ldw	r2,0(r2)
  802650:	1080020b 	ldhu	r2,8(r2)
  802654:	10bfffcc 	andi	r2,r2,65535
  802658:	e0fffc8b 	ldhu	r3,-14(fp)
  80265c:	18808336 	bltu	r3,r2,80286c <dir_next+0x29c>
            return FR_NO_FILE;
  802660:	00800104 	movi	r2,4
  802664:	00008e06 	br	8028a0 <dir_next+0x2d0>
      }
      else {               /* Dynamic table */
         if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {   /* Cluster changed? */
  802668:	e0bffc8b 	ldhu	r2,-14(fp)
  80266c:	1004d13a 	srli	r2,r2,4
  802670:	10bfffcc 	andi	r2,r2,65535
  802674:	e0fffd17 	ldw	r3,-12(fp)
  802678:	18c00017 	ldw	r3,0(r3)
  80267c:	18c00083 	ldbu	r3,2(r3)
  802680:	18c03fcc 	andi	r3,r3,255
  802684:	18ffffc4 	addi	r3,r3,-1
  802688:	10c4703a 	and	r2,r2,r3
  80268c:	1000771e 	bne	r2,zero,80286c <dir_next+0x29c>
            clst = get_fat(dj->fs, dj->clust);           /* Get next cluster */
  802690:	e0bffd17 	ldw	r2,-12(fp)
  802694:	10c00017 	ldw	r3,0(r2)
  802698:	e0bffd17 	ldw	r2,-12(fp)
  80269c:	10800317 	ldw	r2,12(r2)
  8026a0:	1809883a 	mov	r4,r3
  8026a4:	100b883a 	mov	r5,r2
  8026a8:	0801af80 	call	801af8 <get_fat>
  8026ac:	e0bffb15 	stw	r2,-20(fp)
            if (clst <= 1) return FR_INT_ERR;
  8026b0:	e0bffb17 	ldw	r2,-20(fp)
  8026b4:	108000a8 	cmpgeui	r2,r2,2
  8026b8:	1000021e 	bne	r2,zero,8026c4 <dir_next+0xf4>
  8026bc:	00800084 	movi	r2,2
  8026c0:	00007706 	br	8028a0 <dir_next+0x2d0>
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  8026c4:	e0bffb17 	ldw	r2,-20(fp)
  8026c8:	10bfffd8 	cmpnei	r2,r2,-1
  8026cc:	1000021e 	bne	r2,zero,8026d8 <dir_next+0x108>
  8026d0:	00800044 	movi	r2,1
  8026d4:	00007206 	br	8028a0 <dir_next+0x2d0>
            if (clst >= dj->fs->n_fatent) {              /* When it reached end of dynamic table */
  8026d8:	e0bffd17 	ldw	r2,-12(fp)
  8026dc:	10800017 	ldw	r2,0(r2)
  8026e0:	10800617 	ldw	r2,24(r2)
  8026e4:	e0fffb17 	ldw	r3,-20(fp)
  8026e8:	18805536 	bltu	r3,r2,802840 <dir_next+0x270>
#if !_FS_READONLY
               uint8_t c;
               if (!stretch) return FR_NO_FILE;       /* When do not stretch, report EOT */
  8026ec:	e0bffe17 	ldw	r2,-8(fp)
  8026f0:	1000021e 	bne	r2,zero,8026fc <dir_next+0x12c>
  8026f4:	00800104 	movi	r2,4
  8026f8:	00006906 	br	8028a0 <dir_next+0x2d0>
               clst = create_chain(dj->fs, dj->clust);      /* Stretch cluster chain */
  8026fc:	e0bffd17 	ldw	r2,-12(fp)
  802700:	10c00017 	ldw	r3,0(r2)
  802704:	e0bffd17 	ldw	r2,-12(fp)
  802708:	10800317 	ldw	r2,12(r2)
  80270c:	1809883a 	mov	r4,r3
  802710:	100b883a 	mov	r5,r2
  802714:	08022000 	call	802200 <create_chain>
  802718:	e0bffb15 	stw	r2,-20(fp)
               if (clst == 0) return FR_DENIED;       /* No free cluster */
  80271c:	e0bffb17 	ldw	r2,-20(fp)
  802720:	1000021e 	bne	r2,zero,80272c <dir_next+0x15c>
  802724:	008001c4 	movi	r2,7
  802728:	00005d06 	br	8028a0 <dir_next+0x2d0>
               if (clst == 1) return FR_INT_ERR;
  80272c:	e0bffb17 	ldw	r2,-20(fp)
  802730:	10800058 	cmpnei	r2,r2,1
  802734:	1000021e 	bne	r2,zero,802740 <dir_next+0x170>
  802738:	00800084 	movi	r2,2
  80273c:	00005806 	br	8028a0 <dir_next+0x2d0>
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  802740:	e0bffb17 	ldw	r2,-20(fp)
  802744:	10bfffd8 	cmpnei	r2,r2,-1
  802748:	1000021e 	bne	r2,zero,802754 <dir_next+0x184>
  80274c:	00800044 	movi	r2,1
  802750:	00005306 	br	8028a0 <dir_next+0x2d0>
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
  802754:	e0bffd17 	ldw	r2,-12(fp)
  802758:	10800017 	ldw	r2,0(r2)
  80275c:	1009883a 	mov	r4,r2
  802760:	000b883a 	mov	r5,zero
  802764:	08017140 	call	801714 <move_window>
  802768:	10000226 	beq	r2,zero,802774 <dir_next+0x1a4>
  80276c:	00800044 	movi	r2,1
  802770:	00004b06 	br	8028a0 <dir_next+0x2d0>
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
  802774:	e0bffd17 	ldw	r2,-12(fp)
  802778:	10800017 	ldw	r2,0(r2)
  80277c:	10800c04 	addi	r2,r2,48
  802780:	1009883a 	mov	r4,r2
  802784:	000b883a 	mov	r5,zero
  802788:	01808004 	movi	r6,512
  80278c:	08015b40 	call	8015b4 <mem_set>
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
  802790:	e0bffd17 	ldw	r2,-12(fp)
  802794:	14000017 	ldw	r16,0(r2)
  802798:	e0bffd17 	ldw	r2,-12(fp)
  80279c:	10800017 	ldw	r2,0(r2)
  8027a0:	1009883a 	mov	r4,r2
  8027a4:	e17ffb17 	ldw	r5,-20(fp)
  8027a8:	0801a8c0 	call	801a8c <clust2sect>
  8027ac:	80800b15 	stw	r2,44(r16)
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
  8027b0:	e03ffc05 	stb	zero,-16(fp)
  8027b4:	00001406 	br	802808 <dir_next+0x238>
                  dj->fs->wflag = 1;
  8027b8:	e0bffd17 	ldw	r2,-12(fp)
  8027bc:	10800017 	ldw	r2,0(r2)
  8027c0:	00c00044 	movi	r3,1
  8027c4:	10c00105 	stb	r3,4(r2)
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  8027c8:	e0bffd17 	ldw	r2,-12(fp)
  8027cc:	10800017 	ldw	r2,0(r2)
  8027d0:	1009883a 	mov	r4,r2
  8027d4:	000b883a 	mov	r5,zero
  8027d8:	08017140 	call	801714 <move_window>
  8027dc:	10000226 	beq	r2,zero,8027e8 <dir_next+0x218>
  8027e0:	00800044 	movi	r2,1
  8027e4:	00002e06 	br	8028a0 <dir_next+0x2d0>
                  dj->fs->winsect++;
  8027e8:	e0bffd17 	ldw	r2,-12(fp)
  8027ec:	10800017 	ldw	r2,0(r2)
  8027f0:	10c00b17 	ldw	r3,44(r2)
  8027f4:	18c00044 	addi	r3,r3,1
  8027f8:	10c00b15 	stw	r3,44(r2)
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
  8027fc:	e0bffc03 	ldbu	r2,-16(fp)
  802800:	10800044 	addi	r2,r2,1
  802804:	e0bffc05 	stb	r2,-16(fp)
  802808:	e0bffd17 	ldw	r2,-12(fp)
  80280c:	10800017 	ldw	r2,0(r2)
  802810:	10800083 	ldbu	r2,2(r2)
  802814:	10803fcc 	andi	r2,r2,255
  802818:	e0fffc03 	ldbu	r3,-16(fp)
  80281c:	18bfe636 	bltu	r3,r2,8027b8 <__alt_data_end+0xff8027b8>
                  dj->fs->wflag = 1;
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                  dj->fs->winsect++;
               }
               dj->fs->winsect -= c;                  /* Rewind window address */
  802820:	e0bffd17 	ldw	r2,-12(fp)
  802824:	10800017 	ldw	r2,0(r2)
  802828:	e0fffd17 	ldw	r3,-12(fp)
  80282c:	18c00017 	ldw	r3,0(r3)
  802830:	19000b17 	ldw	r4,44(r3)
  802834:	e0fffc03 	ldbu	r3,-16(fp)
  802838:	20c7c83a 	sub	r3,r4,r3
  80283c:	10c00b15 	stw	r3,44(r2)
#else
               return FR_NO_FILE;         /* Report EOT */
#endif
            }
            dj->clust = clst;          /* Initialize data for new cluster */
  802840:	e0bffd17 	ldw	r2,-12(fp)
  802844:	e0fffb17 	ldw	r3,-20(fp)
  802848:	10c00315 	stw	r3,12(r2)
            dj->sect = clust2sect(dj->fs, clst);
  80284c:	e0bffd17 	ldw	r2,-12(fp)
  802850:	10800017 	ldw	r2,0(r2)
  802854:	1009883a 	mov	r4,r2
  802858:	e17ffb17 	ldw	r5,-20(fp)
  80285c:	0801a8c0 	call	801a8c <clust2sect>
  802860:	1007883a 	mov	r3,r2
  802864:	e0bffd17 	ldw	r2,-12(fp)
  802868:	10c00415 	stw	r3,16(r2)
         }
      }
   }

   dj->index = i;
  80286c:	e0bffd17 	ldw	r2,-12(fp)
  802870:	e0fffc8b 	ldhu	r3,-14(fp)
  802874:	10c0018d 	sth	r3,6(r2)
   dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  802878:	e0bffd17 	ldw	r2,-12(fp)
  80287c:	10c00017 	ldw	r3,0(r2)
  802880:	e0bffc8b 	ldhu	r2,-14(fp)
  802884:	108003cc 	andi	r2,r2,15
  802888:	1004917a 	slli	r2,r2,5
  80288c:	10800c04 	addi	r2,r2,48
  802890:	1887883a 	add	r3,r3,r2
  802894:	e0bffd17 	ldw	r2,-12(fp)
  802898:	10c00515 	stw	r3,20(r2)

   return FR_OK;
  80289c:	0005883a 	mov	r2,zero
}
  8028a0:	e6ffff04 	addi	sp,fp,-4
  8028a4:	dfc00217 	ldw	ra,8(sp)
  8028a8:	df000117 	ldw	fp,4(sp)
  8028ac:	dc000017 	ldw	r16,0(sp)
  8028b0:	dec00304 	addi	sp,sp,12
  8028b4:	f800283a 	ret

008028b8 <dir_find>:

static
FRESULT dir_find (
   DIR *dj        /* Pointer to the directory object linked to the file name */
)
{
  8028b8:	defffa04 	addi	sp,sp,-24
  8028bc:	dfc00515 	stw	ra,20(sp)
  8028c0:	df000415 	stw	fp,16(sp)
  8028c4:	df000404 	addi	fp,sp,16
  8028c8:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord, sum;
#endif

   res = dir_sdi(dj, 0);         /* Rewind directory object */
  8028cc:	e13fff17 	ldw	r4,-4(fp)
  8028d0:	000b883a 	mov	r5,zero
  8028d4:	08023e40 	call	8023e4 <dir_sdi>
  8028d8:	e0bffc15 	stw	r2,-16(fp)
   if (res != FR_OK) return res;
  8028dc:	e0bffc17 	ldw	r2,-16(fp)
  8028e0:	10000226 	beq	r2,zero,8028ec <dir_find+0x34>
  8028e4:	e0bffc17 	ldw	r2,-16(fp)
  8028e8:	00002b06 	br	802998 <dir_find+0xe0>

#if _USE_LFN
   ord = sum = 0xFF;
#endif
   do {
      res = move_window(dj->fs, dj->sect);
  8028ec:	e0bfff17 	ldw	r2,-4(fp)
  8028f0:	10c00017 	ldw	r3,0(r2)
  8028f4:	e0bfff17 	ldw	r2,-4(fp)
  8028f8:	10800417 	ldw	r2,16(r2)
  8028fc:	1809883a 	mov	r4,r3
  802900:	100b883a 	mov	r5,r2
  802904:	08017140 	call	801714 <move_window>
  802908:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  80290c:	e0bffc17 	ldw	r2,-16(fp)
  802910:	10000126 	beq	r2,zero,802918 <dir_find+0x60>
  802914:	00001f06 	br	802994 <dir_find+0xdc>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
  802918:	e0bfff17 	ldw	r2,-4(fp)
  80291c:	10800517 	ldw	r2,20(r2)
  802920:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
  802924:	e0bffd17 	ldw	r2,-12(fp)
  802928:	10800003 	ldbu	r2,0(r2)
  80292c:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
  802930:	e0bffe03 	ldbu	r2,-8(fp)
  802934:	1000031e 	bne	r2,zero,802944 <dir_find+0x8c>
  802938:	00800104 	movi	r2,4
  80293c:	e0bffc15 	stw	r2,-16(fp)
  802940:	00001406 	br	802994 <dir_find+0xdc>
            ord = 0xFF; dj->lfn_idx = 0xFFFF;   /* Reset LFN sequence */
            if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;  /* SFN matched? */
         }
      }
#else    /* Non LFN configuration */
      if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
  802944:	e0bffd17 	ldw	r2,-12(fp)
  802948:	108002c4 	addi	r2,r2,11
  80294c:	10800003 	ldbu	r2,0(r2)
  802950:	10803fcc 	andi	r2,r2,255
  802954:	1080020c 	andi	r2,r2,8
  802958:	1000081e 	bne	r2,zero,80297c <dir_find+0xc4>
  80295c:	e0bfff17 	ldw	r2,-4(fp)
  802960:	10800617 	ldw	r2,24(r2)
  802964:	e13ffd17 	ldw	r4,-12(fp)
  802968:	100b883a 	mov	r5,r2
  80296c:	018002c4 	movi	r6,11
  802970:	080160c0 	call	80160c <mem_cmp>
  802974:	1000011e 	bne	r2,zero,80297c <dir_find+0xc4>
         break;
  802978:	00000606 	br	802994 <dir_find+0xdc>
#endif
      res = dir_next(dj, 0);     /* Next entry */
  80297c:	e13fff17 	ldw	r4,-4(fp)
  802980:	000b883a 	mov	r5,zero
  802984:	08025d00 	call	8025d0 <dir_next>
  802988:	e0bffc15 	stw	r2,-16(fp)
   } while (res == FR_OK);
  80298c:	e0bffc17 	ldw	r2,-16(fp)
  802990:	103fd626 	beq	r2,zero,8028ec <__alt_data_end+0xff8028ec>

   return res;
  802994:	e0bffc17 	ldw	r2,-16(fp)
}
  802998:	e037883a 	mov	sp,fp
  80299c:	dfc00117 	ldw	ra,4(sp)
  8029a0:	df000017 	ldw	fp,0(sp)
  8029a4:	dec00204 	addi	sp,sp,8
  8029a8:	f800283a 	ret

008029ac <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
   DIR *dj        /* Pointer to the directory object that pointing the entry to be read */
)
{
  8029ac:	defffa04 	addi	sp,sp,-24
  8029b0:	dfc00515 	stw	ra,20(sp)
  8029b4:	df000415 	stw	fp,16(sp)
  8029b8:	df000404 	addi	fp,sp,16
  8029bc:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
  8029c0:	00800104 	movi	r2,4
  8029c4:	e0bffc15 	stw	r2,-16(fp)
   while (dj->sect) {
  8029c8:	00002a06 	br	802a74 <dir_read+0xc8>
      res = move_window(dj->fs, dj->sect);
  8029cc:	e0bfff17 	ldw	r2,-4(fp)
  8029d0:	10c00017 	ldw	r3,0(r2)
  8029d4:	e0bfff17 	ldw	r2,-4(fp)
  8029d8:	10800417 	ldw	r2,16(r2)
  8029dc:	1809883a 	mov	r4,r3
  8029e0:	100b883a 	mov	r5,r2
  8029e4:	08017140 	call	801714 <move_window>
  8029e8:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  8029ec:	e0bffc17 	ldw	r2,-16(fp)
  8029f0:	10000126 	beq	r2,zero,8029f8 <dir_read+0x4c>
  8029f4:	00002206 	br	802a80 <dir_read+0xd4>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
  8029f8:	e0bfff17 	ldw	r2,-4(fp)
  8029fc:	10800517 	ldw	r2,20(r2)
  802a00:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
  802a04:	e0bffd17 	ldw	r2,-12(fp)
  802a08:	10800003 	ldbu	r2,0(r2)
  802a0c:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
  802a10:	e0bffe03 	ldbu	r2,-8(fp)
  802a14:	1000031e 	bne	r2,zero,802a24 <dir_read+0x78>
  802a18:	00800104 	movi	r2,4
  802a1c:	e0bffc15 	stw	r2,-16(fp)
  802a20:	00001706 	br	802a80 <dir_read+0xd4>
               dj->lfn_idx = 0xFFFF;      /* It has no LFN. */
            break;
         }
      }
#else    /* Non LFN configuration */
      if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))   /* Is it a valid entry? */
  802a24:	e0bffe03 	ldbu	r2,-8(fp)
  802a28:	10803960 	cmpeqi	r2,r2,229
  802a2c:	10000a1e 	bne	r2,zero,802a58 <dir_read+0xac>
  802a30:	e0bffe03 	ldbu	r2,-8(fp)
  802a34:	10800ba0 	cmpeqi	r2,r2,46
  802a38:	1000071e 	bne	r2,zero,802a58 <dir_read+0xac>
  802a3c:	e0bffd17 	ldw	r2,-12(fp)
  802a40:	108002c4 	addi	r2,r2,11
  802a44:	10800003 	ldbu	r2,0(r2)
  802a48:	10803fcc 	andi	r2,r2,255
  802a4c:	1080020c 	andi	r2,r2,8
  802a50:	1000011e 	bne	r2,zero,802a58 <dir_read+0xac>
         break;
  802a54:	00000a06 	br	802a80 <dir_read+0xd4>
#endif
      res = dir_next(dj, 0);           /* Next entry */
  802a58:	e13fff17 	ldw	r4,-4(fp)
  802a5c:	000b883a 	mov	r5,zero
  802a60:	08025d00 	call	8025d0 <dir_next>
  802a64:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  802a68:	e0bffc17 	ldw	r2,-16(fp)
  802a6c:	10000126 	beq	r2,zero,802a74 <dir_read+0xc8>
  802a70:	00000306 	br	802a80 <dir_read+0xd4>
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
   while (dj->sect) {
  802a74:	e0bfff17 	ldw	r2,-4(fp)
  802a78:	10800417 	ldw	r2,16(r2)
  802a7c:	103fd31e 	bne	r2,zero,8029cc <__alt_data_end+0xff8029cc>
#endif
      res = dir_next(dj, 0);           /* Next entry */
      if (res != FR_OK) break;
   }

   if (res != FR_OK) dj->sect = 0;
  802a80:	e0bffc17 	ldw	r2,-16(fp)
  802a84:	10000226 	beq	r2,zero,802a90 <dir_read+0xe4>
  802a88:	e0bfff17 	ldw	r2,-4(fp)
  802a8c:	10000415 	stw	zero,16(r2)

   return res;
  802a90:	e0bffc17 	ldw	r2,-16(fp)
}
  802a94:	e037883a 	mov	sp,fp
  802a98:	dfc00117 	ldw	ra,4(sp)
  802a9c:	df000017 	ldw	fp,0(sp)
  802aa0:	dec00204 	addi	sp,sp,8
  802aa4:	f800283a 	ret

00802aa8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (  /* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
   DIR *dj           /* Target directory with object name to be created */
)
{
  802aa8:	defffa04 	addi	sp,sp,-24
  802aac:	dfc00515 	stw	ra,20(sp)
  802ab0:	df000415 	stw	fp,16(sp)
  802ab4:	df000404 	addi	fp,sp,16
  802ab8:	e13fff15 	stw	r4,-4(fp)
         } while (res == FR_OK && --ne);
      }
   }

#else /* Non LFN configuration */
   res = dir_sdi(dj, 0);
  802abc:	e13fff17 	ldw	r4,-4(fp)
  802ac0:	000b883a 	mov	r5,zero
  802ac4:	08023e40 	call	8023e4 <dir_sdi>
  802ac8:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
  802acc:	e0bffc17 	ldw	r2,-16(fp)
  802ad0:	10001a1e 	bne	r2,zero,802b3c <dir_register+0x94>
      do {  /* Find a blank entry for the SFN */
         res = move_window(dj->fs, dj->sect);
  802ad4:	e0bfff17 	ldw	r2,-4(fp)
  802ad8:	10c00017 	ldw	r3,0(r2)
  802adc:	e0bfff17 	ldw	r2,-4(fp)
  802ae0:	10800417 	ldw	r2,16(r2)
  802ae4:	1809883a 	mov	r4,r3
  802ae8:	100b883a 	mov	r5,r2
  802aec:	08017140 	call	801714 <move_window>
  802af0:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
  802af4:	e0bffc17 	ldw	r2,-16(fp)
  802af8:	10000126 	beq	r2,zero,802b00 <dir_register+0x58>
  802afc:	00000f06 	br	802b3c <dir_register+0x94>
         c = *dj->dir;
  802b00:	e0bfff17 	ldw	r2,-4(fp)
  802b04:	10800517 	ldw	r2,20(r2)
  802b08:	10800003 	ldbu	r2,0(r2)
  802b0c:	e0bffd05 	stb	r2,-12(fp)
         if (c == DDE || c == 0) break;   /* Is it a blank entry? */
  802b10:	e0bffd03 	ldbu	r2,-12(fp)
  802b14:	10803960 	cmpeqi	r2,r2,229
  802b18:	1000081e 	bne	r2,zero,802b3c <dir_register+0x94>
  802b1c:	e0bffd03 	ldbu	r2,-12(fp)
  802b20:	10000626 	beq	r2,zero,802b3c <dir_register+0x94>
         res = dir_next(dj, 1);        /* Next entry with table stretch */
  802b24:	e13fff17 	ldw	r4,-4(fp)
  802b28:	01400044 	movi	r5,1
  802b2c:	08025d00 	call	8025d0 <dir_next>
  802b30:	e0bffc15 	stw	r2,-16(fp)
      } while (res == FR_OK);
  802b34:	e0bffc17 	ldw	r2,-16(fp)
  802b38:	103fe626 	beq	r2,zero,802ad4 <__alt_data_end+0xff802ad4>
   }
#endif

   if (res == FR_OK) {     /* Initialize the SFN entry */
  802b3c:	e0bffc17 	ldw	r2,-16(fp)
  802b40:	10001b1e 	bne	r2,zero,802bb0 <dir_register+0x108>
      res = move_window(dj->fs, dj->sect);
  802b44:	e0bfff17 	ldw	r2,-4(fp)
  802b48:	10c00017 	ldw	r3,0(r2)
  802b4c:	e0bfff17 	ldw	r2,-4(fp)
  802b50:	10800417 	ldw	r2,16(r2)
  802b54:	1809883a 	mov	r4,r3
  802b58:	100b883a 	mov	r5,r2
  802b5c:	08017140 	call	801714 <move_window>
  802b60:	e0bffc15 	stw	r2,-16(fp)
      if (res == FR_OK) {
  802b64:	e0bffc17 	ldw	r2,-16(fp)
  802b68:	1000111e 	bne	r2,zero,802bb0 <dir_register+0x108>
         dir = dj->dir;
  802b6c:	e0bfff17 	ldw	r2,-4(fp)
  802b70:	10800517 	ldw	r2,20(r2)
  802b74:	e0bffe15 	stw	r2,-8(fp)
         mem_set(dir, 0, SZ_DIR);   /* Clean the entry */
  802b78:	e13ffe17 	ldw	r4,-8(fp)
  802b7c:	000b883a 	mov	r5,zero
  802b80:	01800804 	movi	r6,32
  802b84:	08015b40 	call	8015b4 <mem_set>
         mem_cpy(dir, dj->fn, 11);  /* Put SFN */
  802b88:	e0bfff17 	ldw	r2,-4(fp)
  802b8c:	10800617 	ldw	r2,24(r2)
  802b90:	e13ffe17 	ldw	r4,-8(fp)
  802b94:	100b883a 	mov	r5,r2
  802b98:	018002c4 	movi	r6,11
  802b9c:	08015480 	call	801548 <mem_cpy>
#if _USE_LFN
         dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);   /* Put NT flag */
#endif
         dj->fs->wflag = 1;
  802ba0:	e0bfff17 	ldw	r2,-4(fp)
  802ba4:	10800017 	ldw	r2,0(r2)
  802ba8:	00c00044 	movi	r3,1
  802bac:	10c00105 	stb	r3,4(r2)
      }
   }

   return res;
  802bb0:	e0bffc17 	ldw	r2,-16(fp)
}
  802bb4:	e037883a 	mov	sp,fp
  802bb8:	dfc00117 	ldw	ra,4(sp)
  802bbc:	df000017 	ldw	fp,0(sp)
  802bc0:	dec00204 	addi	sp,sp,8
  802bc4:	f800283a 	ret

00802bc8 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove ( /* FR_OK: Successful, FR_DISK_ERR: A disk error */
   DIR *dj           /* Directory object pointing the entry to be removed */
)
{
  802bc8:	defffc04 	addi	sp,sp,-16
  802bcc:	dfc00315 	stw	ra,12(sp)
  802bd0:	df000215 	stw	fp,8(sp)
  802bd4:	df000204 	addi	fp,sp,8
  802bd8:	e13fff15 	stw	r4,-4(fp)
      } while (res == FR_OK);
      if (res == FR_NO_FILE) res = FR_INT_ERR;
   }

#else       /* Non LFN configuration */
   res = dir_sdi(dj, dj->index);
  802bdc:	e0bfff17 	ldw	r2,-4(fp)
  802be0:	1080018b 	ldhu	r2,6(r2)
  802be4:	10bfffcc 	andi	r2,r2,65535
  802be8:	e13fff17 	ldw	r4,-4(fp)
  802bec:	100b883a 	mov	r5,r2
  802bf0:	08023e40 	call	8023e4 <dir_sdi>
  802bf4:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
  802bf8:	e0bffe17 	ldw	r2,-8(fp)
  802bfc:	1000121e 	bne	r2,zero,802c48 <dir_remove+0x80>
      res = move_window(dj->fs, dj->sect);
  802c00:	e0bfff17 	ldw	r2,-4(fp)
  802c04:	10c00017 	ldw	r3,0(r2)
  802c08:	e0bfff17 	ldw	r2,-4(fp)
  802c0c:	10800417 	ldw	r2,16(r2)
  802c10:	1809883a 	mov	r4,r3
  802c14:	100b883a 	mov	r5,r2
  802c18:	08017140 	call	801714 <move_window>
  802c1c:	e0bffe15 	stw	r2,-8(fp)
      if (res == FR_OK) {
  802c20:	e0bffe17 	ldw	r2,-8(fp)
  802c24:	1000081e 	bne	r2,zero,802c48 <dir_remove+0x80>
         *dj->dir = DDE;         /* Mark the entry "deleted" */
  802c28:	e0bfff17 	ldw	r2,-4(fp)
  802c2c:	10800517 	ldw	r2,20(r2)
  802c30:	00fff944 	movi	r3,-27
  802c34:	10c00005 	stb	r3,0(r2)
         dj->fs->wflag = 1;
  802c38:	e0bfff17 	ldw	r2,-4(fp)
  802c3c:	10800017 	ldw	r2,0(r2)
  802c40:	00c00044 	movi	r3,1
  802c44:	10c00105 	stb	r3,4(r2)
      }
   }
#endif

   return res;
  802c48:	e0bffe17 	ldw	r2,-8(fp)
}
  802c4c:	e037883a 	mov	sp,fp
  802c50:	dfc00117 	ldw	ra,4(sp)
  802c54:	df000017 	ldw	fp,0(sp)
  802c58:	dec00204 	addi	sp,sp,8
  802c5c:	f800283a 	ret

00802c60 <create_name>:
static
FRESULT create_name (
   DIR *dj,       /* Pointer to the directory object */
   const TCHAR **path   /* Pointer to pointer to the segment in the path string */
)
{
  802c60:	defff604 	addi	sp,sp,-40
  802c64:	dfc00915 	stw	ra,36(sp)
  802c68:	df000815 	stw	fp,32(sp)
  802c6c:	df000804 	addi	fp,sp,32
  802c70:	e13ffe15 	stw	r4,-8(fp)
  802c74:	e17fff15 	stw	r5,-4(fp)
   uint8_t b, c, d, *sfn;
   uint32_t ni, si, i;
   const char *p;

   /* Create file name in directory form */
   for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
  802c78:	e0bfff17 	ldw	r2,-4(fp)
  802c7c:	10800017 	ldw	r2,0(r2)
  802c80:	e0bffc15 	stw	r2,-16(fp)
  802c84:	00000306 	br	802c94 <create_name+0x34>
  802c88:	e0bffc17 	ldw	r2,-16(fp)
  802c8c:	10800044 	addi	r2,r2,1
  802c90:	e0bffc15 	stw	r2,-16(fp)
  802c94:	e0bffc17 	ldw	r2,-16(fp)
  802c98:	10800003 	ldbu	r2,0(r2)
  802c9c:	10803fcc 	andi	r2,r2,255
  802ca0:	1080201c 	xori	r2,r2,128
  802ca4:	10bfe004 	addi	r2,r2,-128
  802ca8:	10800be0 	cmpeqi	r2,r2,47
  802cac:	103ff61e 	bne	r2,zero,802c88 <__alt_data_end+0xff802c88>
  802cb0:	e0bffc17 	ldw	r2,-16(fp)
  802cb4:	10800003 	ldbu	r2,0(r2)
  802cb8:	10803fcc 	andi	r2,r2,255
  802cbc:	1080201c 	xori	r2,r2,128
  802cc0:	10bfe004 	addi	r2,r2,-128
  802cc4:	10801720 	cmpeqi	r2,r2,92
  802cc8:	103fef1e 	bne	r2,zero,802c88 <__alt_data_end+0xff802c88>
   sfn = dj->fn;
  802ccc:	e0bffe17 	ldw	r2,-8(fp)
  802cd0:	10800617 	ldw	r2,24(r2)
  802cd4:	e0bffd15 	stw	r2,-12(fp)
   mem_set(sfn, ' ', 11);
  802cd8:	e13ffd17 	ldw	r4,-12(fp)
  802cdc:	01400804 	movi	r5,32
  802ce0:	018002c4 	movi	r6,11
  802ce4:	08015b40 	call	8015b4 <mem_set>
   si = i = b = 0; ni = 8;
  802ce8:	e03ff805 	stb	zero,-32(fp)
  802cec:	e03ffb15 	stw	zero,-20(fp)
  802cf0:	e0bffb17 	ldw	r2,-20(fp)
  802cf4:	e0bffa15 	stw	r2,-24(fp)
  802cf8:	00800204 	movi	r2,8
  802cfc:	e0bff915 	stw	r2,-28(fp)
      sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;  /* Set last segment flag if end of path */
      return FR_OK;
   }
#endif
   for (;;) {
      c = (uint8_t)p[si++];
  802d00:	e0bffa17 	ldw	r2,-24(fp)
  802d04:	10c00044 	addi	r3,r2,1
  802d08:	e0fffa15 	stw	r3,-24(fp)
  802d0c:	e0fffc17 	ldw	r3,-16(fp)
  802d10:	1885883a 	add	r2,r3,r2
  802d14:	10800003 	ldbu	r2,0(r2)
  802d18:	e0bff845 	stb	r2,-31(fp)
      if (c <= ' ' || c == '/' || c == '\\') break;   /* Break on end of segment */
  802d1c:	e0bff843 	ldbu	r2,-31(fp)
  802d20:	10800870 	cmpltui	r2,r2,33
  802d24:	1000521e 	bne	r2,zero,802e70 <create_name+0x210>
  802d28:	e0bff843 	ldbu	r2,-31(fp)
  802d2c:	10800be0 	cmpeqi	r2,r2,47
  802d30:	10004f1e 	bne	r2,zero,802e70 <create_name+0x210>
  802d34:	e0bff843 	ldbu	r2,-31(fp)
  802d38:	10801720 	cmpeqi	r2,r2,92
  802d3c:	10004c1e 	bne	r2,zero,802e70 <create_name+0x210>
      if (c == '.' || i >= ni) {
  802d40:	e0bff843 	ldbu	r2,-31(fp)
  802d44:	10800ba0 	cmpeqi	r2,r2,46
  802d48:	1000031e 	bne	r2,zero,802d58 <create_name+0xf8>
  802d4c:	e0fffb17 	ldw	r3,-20(fp)
  802d50:	e0bff917 	ldw	r2,-28(fp)
  802d54:	18801136 	bltu	r3,r2,802d9c <create_name+0x13c>
         if (ni != 8 || c != '.') return FR_INVALID_NAME;
  802d58:	e0bff917 	ldw	r2,-28(fp)
  802d5c:	10800218 	cmpnei	r2,r2,8
  802d60:	1000031e 	bne	r2,zero,802d70 <create_name+0x110>
  802d64:	e0bff843 	ldbu	r2,-31(fp)
  802d68:	10800ba0 	cmpeqi	r2,r2,46
  802d6c:	1000021e 	bne	r2,zero,802d78 <create_name+0x118>
  802d70:	00800184 	movi	r2,6
  802d74:	00007006 	br	802f38 <create_name+0x2d8>
         i = 8; ni = 11;
  802d78:	00800204 	movi	r2,8
  802d7c:	e0bffb15 	stw	r2,-20(fp)
  802d80:	008002c4 	movi	r2,11
  802d84:	e0bff915 	stw	r2,-28(fp)
         b <<= 2; continue;
  802d88:	e0bff803 	ldbu	r2,-32(fp)
  802d8c:	1085883a 	add	r2,r2,r2
  802d90:	1085883a 	add	r2,r2,r2
  802d94:	e0bff805 	stb	r2,-32(fp)
  802d98:	00003406 	br	802e6c <create_name+0x20c>
      }
      if (c >= 0x80) {           /* Extended char? */
  802d9c:	e0bff843 	ldbu	r2,-31(fp)
  802da0:	10803fcc 	andi	r2,r2,255
  802da4:	1080201c 	xori	r2,r2,128
  802da8:	10bfe004 	addi	r2,r2,-128
  802dac:	10000a0e 	bge	r2,zero,802dd8 <create_name+0x178>
         b |= 3;                 /* Eliminate NT flag */
  802db0:	e0bff803 	ldbu	r2,-32(fp)
  802db4:	108000d4 	ori	r2,r2,3
  802db8:	e0bff805 	stb	r2,-32(fp)
#ifdef _EXCVT
         c = excvt[c-0x80];         /* Upper conversion (SBCS) */
  802dbc:	e0bff843 	ldbu	r2,-31(fp)
  802dc0:	10ffe004 	addi	r3,r2,-128
  802dc4:	008020b4 	movhi	r2,130
  802dc8:	10b13304 	addi	r2,r2,-15156
  802dcc:	10c5883a 	add	r2,r2,r3
  802dd0:	10800003 	ldbu	r2,0(r2)
  802dd4:	e0bff845 	stb	r2,-31(fp)
         if (!IsDBCS2(d) || i >= ni - 1)  /* Reject invalid DBC */
            return FR_INVALID_NAME;
         sfn[i++] = c;
         sfn[i++] = d;
      } else {                /* Single byte code */
         if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) /* Reject illegal chrs for SFN */
  802dd8:	e0bff843 	ldbu	r2,-31(fp)
  802ddc:	010020b4 	movhi	r4,130
  802de0:	21312204 	addi	r4,r4,-15224
  802de4:	100b883a 	mov	r5,r2
  802de8:	08016980 	call	801698 <chk_chr>
  802dec:	10000226 	beq	r2,zero,802df8 <create_name+0x198>
            return FR_INVALID_NAME;
  802df0:	00800184 	movi	r2,6
  802df4:	00005006 	br	802f38 <create_name+0x2d8>
         if (IsUpper(c)) {       /* ASCII large capital? */
  802df8:	e0bff843 	ldbu	r2,-31(fp)
  802dfc:	10801070 	cmpltui	r2,r2,65
  802e00:	1000071e 	bne	r2,zero,802e20 <create_name+0x1c0>
  802e04:	e0bff843 	ldbu	r2,-31(fp)
  802e08:	108016e8 	cmpgeui	r2,r2,91
  802e0c:	1000041e 	bne	r2,zero,802e20 <create_name+0x1c0>
            b |= 2;
  802e10:	e0bff803 	ldbu	r2,-32(fp)
  802e14:	10800094 	ori	r2,r2,2
  802e18:	e0bff805 	stb	r2,-32(fp)
  802e1c:	00000c06 	br	802e50 <create_name+0x1f0>
         } else {
            if (IsLower(c)) {    /* ASCII small capital? */
  802e20:	e0bff843 	ldbu	r2,-31(fp)
  802e24:	10801870 	cmpltui	r2,r2,97
  802e28:	1000091e 	bne	r2,zero,802e50 <create_name+0x1f0>
  802e2c:	e0bff843 	ldbu	r2,-31(fp)
  802e30:	10801ee8 	cmpgeui	r2,r2,123
  802e34:	1000061e 	bne	r2,zero,802e50 <create_name+0x1f0>
               b |= 1; c -= 0x20;
  802e38:	e0bff803 	ldbu	r2,-32(fp)
  802e3c:	10800054 	ori	r2,r2,1
  802e40:	e0bff805 	stb	r2,-32(fp)
  802e44:	e0bff843 	ldbu	r2,-31(fp)
  802e48:	10bff804 	addi	r2,r2,-32
  802e4c:	e0bff845 	stb	r2,-31(fp)
            }
         }
         sfn[i++] = c;
  802e50:	e0bffb17 	ldw	r2,-20(fp)
  802e54:	10c00044 	addi	r3,r2,1
  802e58:	e0fffb15 	stw	r3,-20(fp)
  802e5c:	e0fffd17 	ldw	r3,-12(fp)
  802e60:	1885883a 	add	r2,r3,r2
  802e64:	e0fff843 	ldbu	r3,-31(fp)
  802e68:	10c00005 	stb	r3,0(r2)
      }
   }
  802e6c:	003fa406 	br	802d00 <__alt_data_end+0xff802d00>
   *path = &p[si];                  /* Return pointer to the next segment */
  802e70:	e0fffc17 	ldw	r3,-16(fp)
  802e74:	e0bffa17 	ldw	r2,-24(fp)
  802e78:	1887883a 	add	r3,r3,r2
  802e7c:	e0bfff17 	ldw	r2,-4(fp)
  802e80:	10c00015 	stw	r3,0(r2)
   c = (c <= ' ') ? NS_LAST : 0;    /* Set last segment flag if end of path */
  802e84:	e0bff843 	ldbu	r2,-31(fp)
  802e88:	10800868 	cmpgeui	r2,r2,33
  802e8c:	1000021e 	bne	r2,zero,802e98 <create_name+0x238>
  802e90:	00800104 	movi	r2,4
  802e94:	00000106 	br	802e9c <create_name+0x23c>
  802e98:	0005883a 	mov	r2,zero
  802e9c:	e0bff845 	stb	r2,-31(fp)

   if (!i) return FR_INVALID_NAME;     /* Reject nul string */
  802ea0:	e0bffb17 	ldw	r2,-20(fp)
  802ea4:	1000021e 	bne	r2,zero,802eb0 <create_name+0x250>
  802ea8:	00800184 	movi	r2,6
  802eac:	00002206 	br	802f38 <create_name+0x2d8>
   if (sfn[0] == DDE) sfn[0] = NDDE;   /* When first char collides with DDE, replace it with 0x05 */
  802eb0:	e0bffd17 	ldw	r2,-12(fp)
  802eb4:	10800003 	ldbu	r2,0(r2)
  802eb8:	10803fcc 	andi	r2,r2,255
  802ebc:	10803958 	cmpnei	r2,r2,229
  802ec0:	1000031e 	bne	r2,zero,802ed0 <create_name+0x270>
  802ec4:	e0bffd17 	ldw	r2,-12(fp)
  802ec8:	00c00144 	movi	r3,5
  802ecc:	10c00005 	stb	r3,0(r2)

   if (ni == 8) b <<= 2;
  802ed0:	e0bff917 	ldw	r2,-28(fp)
  802ed4:	10800218 	cmpnei	r2,r2,8
  802ed8:	1000041e 	bne	r2,zero,802eec <create_name+0x28c>
  802edc:	e0bff803 	ldbu	r2,-32(fp)
  802ee0:	1085883a 	add	r2,r2,r2
  802ee4:	1085883a 	add	r2,r2,r2
  802ee8:	e0bff805 	stb	r2,-32(fp)
   if ((b & 0x03) == 0x01) c |= NS_EXT;   /* NT flag (Name extension has only small capital) */
  802eec:	e0bff803 	ldbu	r2,-32(fp)
  802ef0:	108000cc 	andi	r2,r2,3
  802ef4:	10800058 	cmpnei	r2,r2,1
  802ef8:	1000031e 	bne	r2,zero,802f08 <create_name+0x2a8>
  802efc:	e0bff843 	ldbu	r2,-31(fp)
  802f00:	10800414 	ori	r2,r2,16
  802f04:	e0bff845 	stb	r2,-31(fp)
   if ((b & 0x0C) == 0x04) c |= NS_BODY;  /* NT flag (Name body has only small capital) */
  802f08:	e0bff803 	ldbu	r2,-32(fp)
  802f0c:	1080030c 	andi	r2,r2,12
  802f10:	10800118 	cmpnei	r2,r2,4
  802f14:	1000031e 	bne	r2,zero,802f24 <create_name+0x2c4>
  802f18:	e0bff843 	ldbu	r2,-31(fp)
  802f1c:	10800214 	ori	r2,r2,8
  802f20:	e0bff845 	stb	r2,-31(fp)

   sfn[NS] = c;      /* Store NT flag, File name is created */
  802f24:	e0bffd17 	ldw	r2,-12(fp)
  802f28:	108002c4 	addi	r2,r2,11
  802f2c:	e0fff843 	ldbu	r3,-31(fp)
  802f30:	10c00005 	stb	r3,0(r2)

   return FR_OK;
  802f34:	0005883a 	mov	r2,zero
#endif
}
  802f38:	e037883a 	mov	sp,fp
  802f3c:	dfc00117 	ldw	ra,4(sp)
  802f40:	df000017 	ldw	fp,0(sp)
  802f44:	dec00204 	addi	sp,sp,8
  802f48:	f800283a 	ret

00802f4c <get_fileinfo>:
static
void get_fileinfo (     /* No return code */
   DIR *dj,       /* Pointer to the directory object */
   FILINFO *fno      /* Pointer to the file information to be filled */
)
{
  802f4c:	defff804 	addi	sp,sp,-32
  802f50:	df000715 	stw	fp,28(sp)
  802f54:	df000704 	addi	fp,sp,28
  802f58:	e13ffe15 	stw	r4,-8(fp)
  802f5c:	e17fff15 	stw	r5,-4(fp)
   uint32_t i;
   uint8_t nt, *dir;
   TCHAR *p, c;


   p = fno->fname;
  802f60:	e0bfff17 	ldw	r2,-4(fp)
  802f64:	10800244 	addi	r2,r2,9
  802f68:	e0bffa15 	stw	r2,-24(fp)
   if (dj->sect) {
  802f6c:	e0bffe17 	ldw	r2,-8(fp)
  802f70:	10800417 	ldw	r2,16(r2)
  802f74:	10007b26 	beq	r2,zero,803164 <get_fileinfo+0x218>
      dir = dj->dir;
  802f78:	e0bffe17 	ldw	r2,-8(fp)
  802f7c:	10800517 	ldw	r2,20(r2)
  802f80:	e0bffc15 	stw	r2,-16(fp)
      nt = dir[DIR_NTres];    /* NT flag */
  802f84:	e0bffc17 	ldw	r2,-16(fp)
  802f88:	10800303 	ldbu	r2,12(r2)
  802f8c:	e0bffd05 	stb	r2,-12(fp)
      for (i = 0; i < 8; i++) {  /* Copy name body */
  802f90:	e03ff915 	stw	zero,-28(fp)
  802f94:	00001606 	br	802ff0 <get_fileinfo+0xa4>
         c = dir[i];
  802f98:	e0fffc17 	ldw	r3,-16(fp)
  802f9c:	e0bff917 	ldw	r2,-28(fp)
  802fa0:	1885883a 	add	r2,r3,r2
  802fa4:	10800003 	ldbu	r2,0(r2)
  802fa8:	e0bffb05 	stb	r2,-20(fp)
         if (c == ' ') break;
  802fac:	e0bffb07 	ldb	r2,-20(fp)
  802fb0:	10800818 	cmpnei	r2,r2,32
  802fb4:	1000011e 	bne	r2,zero,802fbc <get_fileinfo+0x70>
  802fb8:	00001006 	br	802ffc <get_fileinfo+0xb0>
         if (c == NDDE) c = (TCHAR)DDE;
  802fbc:	e0bffb07 	ldb	r2,-20(fp)
  802fc0:	10800158 	cmpnei	r2,r2,5
  802fc4:	1000021e 	bne	r2,zero,802fd0 <get_fileinfo+0x84>
  802fc8:	00bff944 	movi	r2,-27
  802fcc:	e0bffb05 	stb	r2,-20(fp)
         if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
            c = (c << 8) | dir[++i];
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
  802fd0:	e0bffa17 	ldw	r2,-24(fp)
  802fd4:	10c00044 	addi	r3,r2,1
  802fd8:	e0fffa15 	stw	r3,-24(fp)
  802fdc:	e0fffb03 	ldbu	r3,-20(fp)
  802fe0:	10c00005 	stb	r3,0(r2)

   p = fno->fname;
   if (dj->sect) {
      dir = dj->dir;
      nt = dir[DIR_NTres];    /* NT flag */
      for (i = 0; i < 8; i++) {  /* Copy name body */
  802fe4:	e0bff917 	ldw	r2,-28(fp)
  802fe8:	10800044 	addi	r2,r2,1
  802fec:	e0bff915 	stw	r2,-28(fp)
  802ff0:	e0bff917 	ldw	r2,-28(fp)
  802ff4:	10800230 	cmpltui	r2,r2,8
  802ff8:	103fe71e 	bne	r2,zero,802f98 <__alt_data_end+0xff802f98>
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
  802ffc:	e0bffc17 	ldw	r2,-16(fp)
  803000:	10800204 	addi	r2,r2,8
  803004:	10800003 	ldbu	r2,0(r2)
  803008:	10803fcc 	andi	r2,r2,255
  80300c:	10800820 	cmpeqi	r2,r2,32
  803010:	10001c1e 	bne	r2,zero,803084 <get_fileinfo+0x138>
         *p++ = '.';
  803014:	e0bffa17 	ldw	r2,-24(fp)
  803018:	10c00044 	addi	r3,r2,1
  80301c:	e0fffa15 	stw	r3,-24(fp)
  803020:	00c00b84 	movi	r3,46
  803024:	10c00005 	stb	r3,0(r2)
         for (i = 8; i < 11; i++) {
  803028:	00800204 	movi	r2,8
  80302c:	e0bff915 	stw	r2,-28(fp)
  803030:	00001106 	br	803078 <get_fileinfo+0x12c>
            c = dir[i];
  803034:	e0fffc17 	ldw	r3,-16(fp)
  803038:	e0bff917 	ldw	r2,-28(fp)
  80303c:	1885883a 	add	r2,r3,r2
  803040:	10800003 	ldbu	r2,0(r2)
  803044:	e0bffb05 	stb	r2,-20(fp)
            if (c == ' ') break;
  803048:	e0bffb07 	ldb	r2,-20(fp)
  80304c:	10800818 	cmpnei	r2,r2,32
  803050:	1000011e 	bne	r2,zero,803058 <get_fileinfo+0x10c>
  803054:	00000b06 	br	803084 <get_fileinfo+0x138>
            if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
               c = (c << 8) | dir[++i];
            c = ff_convert(c, 1);
            if (!c) c = '?';
#endif
            *p++ = c;
  803058:	e0bffa17 	ldw	r2,-24(fp)
  80305c:	10c00044 	addi	r3,r2,1
  803060:	e0fffa15 	stw	r3,-24(fp)
  803064:	e0fffb03 	ldbu	r3,-20(fp)
  803068:	10c00005 	stb	r3,0(r2)
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
         *p++ = '.';
         for (i = 8; i < 11; i++) {
  80306c:	e0bff917 	ldw	r2,-28(fp)
  803070:	10800044 	addi	r2,r2,1
  803074:	e0bff915 	stw	r2,-28(fp)
  803078:	e0bff917 	ldw	r2,-28(fp)
  80307c:	108002f0 	cmpltui	r2,r2,11
  803080:	103fec1e 	bne	r2,zero,803034 <__alt_data_end+0xff803034>
            if (!c) c = '?';
#endif
            *p++ = c;
         }
      }
      fno->fattrib = dir[DIR_Attr];          /* Attribute */
  803084:	e0bffc17 	ldw	r2,-16(fp)
  803088:	10c002c3 	ldbu	r3,11(r2)
  80308c:	e0bfff17 	ldw	r2,-4(fp)
  803090:	10c00205 	stb	r3,8(r2)
      fno->fsize = LD_DWORD(dir+DIR_FileSize);  /* Size */
  803094:	e0bffc17 	ldw	r2,-16(fp)
  803098:	108007c4 	addi	r2,r2,31
  80309c:	10800003 	ldbu	r2,0(r2)
  8030a0:	10803fcc 	andi	r2,r2,255
  8030a4:	1006963a 	slli	r3,r2,24
  8030a8:	e0bffc17 	ldw	r2,-16(fp)
  8030ac:	10800784 	addi	r2,r2,30
  8030b0:	10800003 	ldbu	r2,0(r2)
  8030b4:	10803fcc 	andi	r2,r2,255
  8030b8:	1004943a 	slli	r2,r2,16
  8030bc:	1884b03a 	or	r2,r3,r2
  8030c0:	e0fffc17 	ldw	r3,-16(fp)
  8030c4:	18c00744 	addi	r3,r3,29
  8030c8:	18c00003 	ldbu	r3,0(r3)
  8030cc:	18c03fcc 	andi	r3,r3,255
  8030d0:	1806923a 	slli	r3,r3,8
  8030d4:	10c6b03a 	or	r3,r2,r3
  8030d8:	e0bffc17 	ldw	r2,-16(fp)
  8030dc:	10800704 	addi	r2,r2,28
  8030e0:	10800003 	ldbu	r2,0(r2)
  8030e4:	10803fcc 	andi	r2,r2,255
  8030e8:	1886b03a 	or	r3,r3,r2
  8030ec:	e0bfff17 	ldw	r2,-4(fp)
  8030f0:	10c00015 	stw	r3,0(r2)
      fno->fdate = LD_WORD(dir+DIR_WrtDate);    /* Date */
  8030f4:	e0bffc17 	ldw	r2,-16(fp)
  8030f8:	10800644 	addi	r2,r2,25
  8030fc:	10800003 	ldbu	r2,0(r2)
  803100:	10803fcc 	andi	r2,r2,255
  803104:	1004923a 	slli	r2,r2,8
  803108:	1007883a 	mov	r3,r2
  80310c:	e0bffc17 	ldw	r2,-16(fp)
  803110:	10800604 	addi	r2,r2,24
  803114:	10800003 	ldbu	r2,0(r2)
  803118:	10803fcc 	andi	r2,r2,255
  80311c:	1884b03a 	or	r2,r3,r2
  803120:	1007883a 	mov	r3,r2
  803124:	e0bfff17 	ldw	r2,-4(fp)
  803128:	10c0010d 	sth	r3,4(r2)
      fno->ftime = LD_WORD(dir+DIR_WrtTime);    /* Time */
  80312c:	e0bffc17 	ldw	r2,-16(fp)
  803130:	108005c4 	addi	r2,r2,23
  803134:	10800003 	ldbu	r2,0(r2)
  803138:	10803fcc 	andi	r2,r2,255
  80313c:	1004923a 	slli	r2,r2,8
  803140:	1007883a 	mov	r3,r2
  803144:	e0bffc17 	ldw	r2,-16(fp)
  803148:	10800584 	addi	r2,r2,22
  80314c:	10800003 	ldbu	r2,0(r2)
  803150:	10803fcc 	andi	r2,r2,255
  803154:	1884b03a 	or	r2,r3,r2
  803158:	1007883a 	mov	r3,r2
  80315c:	e0bfff17 	ldw	r2,-4(fp)
  803160:	10c0018d 	sth	r3,6(r2)
   }
   *p = 0;     /* Terminate SFN str by a \0 */
  803164:	e0bffa17 	ldw	r2,-24(fp)
  803168:	10000005 	stb	zero,0(r2)
         }
      }
      tp[i] = 0;  /* Terminate the LFN str by a \0 */
   }
#endif
}
  80316c:	e037883a 	mov	sp,fp
  803170:	df000017 	ldw	fp,0(sp)
  803174:	dec00104 	addi	sp,sp,4
  803178:	f800283a 	ret

0080317c <follow_path>:
static
FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
   DIR *dj,       /* Directory object to return last directory and found object */
   const TCHAR *path /* Full-path string to find a file or directory */
)
{
  80317c:	defff904 	addi	sp,sp,-28
  803180:	dfc00615 	stw	ra,24(sp)
  803184:	df000515 	stw	fp,20(sp)
  803188:	df000504 	addi	fp,sp,20
  80318c:	e13ffe15 	stw	r4,-8(fp)
  803190:	e17fff15 	stw	r5,-4(fp)
      path++;  dj->sclust = 0;      /* Strip it and start from the root dir */
   } else {                   /* No heading separator */
      dj->sclust = dj->fs->cdir; /* Start from the current dir */
   }
#else
   if (*path == '/' || *path == '\\')  /* Strip heading separator if exist */
  803194:	e0bfff17 	ldw	r2,-4(fp)
  803198:	10800003 	ldbu	r2,0(r2)
  80319c:	10803fcc 	andi	r2,r2,255
  8031a0:	1080201c 	xori	r2,r2,128
  8031a4:	10bfe004 	addi	r2,r2,-128
  8031a8:	10800be0 	cmpeqi	r2,r2,47
  8031ac:	1000071e 	bne	r2,zero,8031cc <follow_path+0x50>
  8031b0:	e0bfff17 	ldw	r2,-4(fp)
  8031b4:	10800003 	ldbu	r2,0(r2)
  8031b8:	10803fcc 	andi	r2,r2,255
  8031bc:	1080201c 	xori	r2,r2,128
  8031c0:	10bfe004 	addi	r2,r2,-128
  8031c4:	10801718 	cmpnei	r2,r2,92
  8031c8:	1000031e 	bne	r2,zero,8031d8 <follow_path+0x5c>
      path++;
  8031cc:	e0bfff17 	ldw	r2,-4(fp)
  8031d0:	10800044 	addi	r2,r2,1
  8031d4:	e0bfff15 	stw	r2,-4(fp)
   dj->sclust = 0;                  /* Start from the root dir */
  8031d8:	e0bffe17 	ldw	r2,-8(fp)
  8031dc:	10000215 	stw	zero,8(r2)
#endif

   if ((uint32_t)*path < ' ') {         /* Nul path means the start directory itself */
  8031e0:	e0bfff17 	ldw	r2,-4(fp)
  8031e4:	10800003 	ldbu	r2,0(r2)
  8031e8:	10803fcc 	andi	r2,r2,255
  8031ec:	10800828 	cmpgeui	r2,r2,32
  8031f0:	1000071e 	bne	r2,zero,803210 <follow_path+0x94>
      res = dir_sdi(dj, 0);
  8031f4:	e13ffe17 	ldw	r4,-8(fp)
  8031f8:	000b883a 	mov	r5,zero
  8031fc:	08023e40 	call	8023e4 <dir_sdi>
  803200:	e0bffb15 	stw	r2,-20(fp)
      dj->dir = 0;
  803204:	e0bffe17 	ldw	r2,-8(fp)
  803208:	10000515 	stw	zero,20(r2)
  80320c:	00004906 	br	803334 <follow_path+0x1b8>

   } else {                   /* Follow path */
      for (;;) {
         res = create_name(dj, &path); /* Get a segment */
  803210:	e0bfff04 	addi	r2,fp,-4
  803214:	e13ffe17 	ldw	r4,-8(fp)
  803218:	100b883a 	mov	r5,r2
  80321c:	0802c600 	call	802c60 <create_name>
  803220:	e0bffb15 	stw	r2,-20(fp)
         if (res != FR_OK) break;
  803224:	e0bffb17 	ldw	r2,-20(fp)
  803228:	10000126 	beq	r2,zero,803230 <follow_path+0xb4>
  80322c:	00004106 	br	803334 <follow_path+0x1b8>
         res = dir_find(dj);           /* Find it */
  803230:	e13ffe17 	ldw	r4,-8(fp)
  803234:	08028b80 	call	8028b8 <dir_find>
  803238:	e0bffb15 	stw	r2,-20(fp)
         ns = *(dj->fn+NS);
  80323c:	e0bffe17 	ldw	r2,-8(fp)
  803240:	10800617 	ldw	r2,24(r2)
  803244:	108002c3 	ldbu	r2,11(r2)
  803248:	e0bffc05 	stb	r2,-16(fp)
         if (res != FR_OK) {           /* Failed to find the object */
  80324c:	e0bffb17 	ldw	r2,-20(fp)
  803250:	10000b26 	beq	r2,zero,803280 <follow_path+0x104>
            if (res != FR_NO_FILE) break; /* Abort if any hard error occured */
  803254:	e0bffb17 	ldw	r2,-20(fp)
  803258:	10800120 	cmpeqi	r2,r2,4
  80325c:	1000011e 	bne	r2,zero,803264 <follow_path+0xe8>
  803260:	00003406 	br	803334 <follow_path+0x1b8>
            if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
               dj->sclust = 0; dj->dir = 0;  /* It is the root dir */
               res = FR_OK;
               if (!(ns & NS_LAST)) continue;
            } else {                   /* Could not find the object */
               if (!(ns & NS_LAST)) res = FR_NO_PATH;
  803264:	e0bffc03 	ldbu	r2,-16(fp)
  803268:	1080010c 	andi	r2,r2,4
  80326c:	1000031e 	bne	r2,zero,80327c <follow_path+0x100>
  803270:	00800144 	movi	r2,5
  803274:	e0bffb15 	stw	r2,-20(fp)
            }
            break;
  803278:	00002e06 	br	803334 <follow_path+0x1b8>
  80327c:	00002d06 	br	803334 <follow_path+0x1b8>
         }
         if (ns & NS_LAST) break;         /* Last segment match. Function completed. */
  803280:	e0bffc03 	ldbu	r2,-16(fp)
  803284:	1080010c 	andi	r2,r2,4
  803288:	10000126 	beq	r2,zero,803290 <follow_path+0x114>
  80328c:	00002906 	br	803334 <follow_path+0x1b8>
         dir = dj->dir;                /* There is next segment. Follow the sub directory */
  803290:	e0bffe17 	ldw	r2,-8(fp)
  803294:	10800517 	ldw	r2,20(r2)
  803298:	e0bffd15 	stw	r2,-12(fp)
         if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
  80329c:	e0bffd17 	ldw	r2,-12(fp)
  8032a0:	108002c4 	addi	r2,r2,11
  8032a4:	10800003 	ldbu	r2,0(r2)
  8032a8:	10803fcc 	andi	r2,r2,255
  8032ac:	1080040c 	andi	r2,r2,16
  8032b0:	1000031e 	bne	r2,zero,8032c0 <follow_path+0x144>
            res = FR_NO_PATH; break;
  8032b4:	00800144 	movi	r2,5
  8032b8:	e0bffb15 	stw	r2,-20(fp)
  8032bc:	00001d06 	br	803334 <follow_path+0x1b8>
         }
         dj->sclust = LD_CLUST(dir);
  8032c0:	e0bffd17 	ldw	r2,-12(fp)
  8032c4:	10800544 	addi	r2,r2,21
  8032c8:	10800003 	ldbu	r2,0(r2)
  8032cc:	10803fcc 	andi	r2,r2,255
  8032d0:	1004923a 	slli	r2,r2,8
  8032d4:	1007883a 	mov	r3,r2
  8032d8:	e0bffd17 	ldw	r2,-12(fp)
  8032dc:	10800504 	addi	r2,r2,20
  8032e0:	10800003 	ldbu	r2,0(r2)
  8032e4:	10803fcc 	andi	r2,r2,255
  8032e8:	1884b03a 	or	r2,r3,r2
  8032ec:	10bfffcc 	andi	r2,r2,65535
  8032f0:	1006943a 	slli	r3,r2,16
  8032f4:	e0bffd17 	ldw	r2,-12(fp)
  8032f8:	108006c4 	addi	r2,r2,27
  8032fc:	10800003 	ldbu	r2,0(r2)
  803300:	10803fcc 	andi	r2,r2,255
  803304:	1004923a 	slli	r2,r2,8
  803308:	1009883a 	mov	r4,r2
  80330c:	e0bffd17 	ldw	r2,-12(fp)
  803310:	10800684 	addi	r2,r2,26
  803314:	10800003 	ldbu	r2,0(r2)
  803318:	10803fcc 	andi	r2,r2,255
  80331c:	2084b03a 	or	r2,r4,r2
  803320:	10bfffcc 	andi	r2,r2,65535
  803324:	1886b03a 	or	r3,r3,r2
  803328:	e0bffe17 	ldw	r2,-8(fp)
  80332c:	10c00215 	stw	r3,8(r2)
      }
  803330:	003fb706 	br	803210 <__alt_data_end+0xff803210>
   }

   return res;
  803334:	e0bffb17 	ldw	r2,-20(fp)
}
  803338:	e037883a 	mov	sp,fp
  80333c:	dfc00117 	ldw	ra,4(sp)
  803340:	df000017 	ldw	fp,0(sp)
  803344:	dec00204 	addi	sp,sp,8
  803348:	f800283a 	ret

0080334c <check_fs>:
static
uint8_t check_fs (   /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
   FATFS *fs,  /* File system object */
   uint32_t sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  80334c:	defffc04 	addi	sp,sp,-16
  803350:	dfc00315 	stw	ra,12(sp)
  803354:	df000215 	stw	fp,8(sp)
  803358:	df000204 	addi	fp,sp,8
  80335c:	e13ffe15 	stw	r4,-8(fp)
  803360:	e17fff15 	stw	r5,-4(fp)
   if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)   /* Load boot record */
  803364:	e0bffe17 	ldw	r2,-8(fp)
  803368:	10800043 	ldbu	r2,1(r2)
  80336c:	10c03fcc 	andi	r3,r2,255
  803370:	e0bffe17 	ldw	r2,-8(fp)
  803374:	10800c04 	addi	r2,r2,48
  803378:	1809883a 	mov	r4,r3
  80337c:	100b883a 	mov	r5,r2
  803380:	e1bfff17 	ldw	r6,-4(fp)
  803384:	01c00044 	movi	r7,1
  803388:	0800dec0 	call	800dec <ffs_DiskIORead>
  80338c:	10000226 	beq	r2,zero,803398 <check_fs+0x4c>
      return 3;
  803390:	008000c4 	movi	r2,3
  803394:	00004506 	br	8034ac <check_fs+0x160>
   if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)    /* Check record signature (always placed at offset 510 even if the sector size is >512) */
  803398:	e0bffe17 	ldw	r2,-8(fp)
  80339c:	10808bc3 	ldbu	r2,559(r2)
  8033a0:	10803fcc 	andi	r2,r2,255
  8033a4:	1004923a 	slli	r2,r2,8
  8033a8:	1007883a 	mov	r3,r2
  8033ac:	e0bffe17 	ldw	r2,-8(fp)
  8033b0:	10808b83 	ldbu	r2,558(r2)
  8033b4:	10803fcc 	andi	r2,r2,255
  8033b8:	1884b03a 	or	r2,r3,r2
  8033bc:	10bfffcc 	andi	r2,r2,65535
  8033c0:	10a0001c 	xori	r2,r2,32768
  8033c4:	10a00004 	addi	r2,r2,-32768
  8033c8:	10aa9560 	cmpeqi	r2,r2,-21931
  8033cc:	1000021e 	bne	r2,zero,8033d8 <check_fs+0x8c>
      return 2;
  8033d0:	00800084 	movi	r2,2
  8033d4:	00003506 	br	8034ac <check_fs+0x160>

   if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)   /* Check "FAT" string */
  8033d8:	e0bffe17 	ldw	r2,-8(fp)
  8033dc:	10801a43 	ldbu	r2,105(r2)
  8033e0:	10803fcc 	andi	r2,r2,255
  8033e4:	1006963a 	slli	r3,r2,24
  8033e8:	e0bffe17 	ldw	r2,-8(fp)
  8033ec:	10801a03 	ldbu	r2,104(r2)
  8033f0:	10803fcc 	andi	r2,r2,255
  8033f4:	1004943a 	slli	r2,r2,16
  8033f8:	1884b03a 	or	r2,r3,r2
  8033fc:	e0fffe17 	ldw	r3,-8(fp)
  803400:	18c019c3 	ldbu	r3,103(r3)
  803404:	18c03fcc 	andi	r3,r3,255
  803408:	1806923a 	slli	r3,r3,8
  80340c:	10c6b03a 	or	r3,r2,r3
  803410:	e0bffe17 	ldw	r2,-8(fp)
  803414:	10801983 	ldbu	r2,102(r2)
  803418:	10803fcc 	andi	r2,r2,255
  80341c:	1886b03a 	or	r3,r3,r2
  803420:	00804034 	movhi	r2,256
  803424:	10bfffc4 	addi	r2,r2,-1
  803428:	1886703a 	and	r3,r3,r2
  80342c:	00801534 	movhi	r2,84
  803430:	10905184 	addi	r2,r2,16710
  803434:	1880021e 	bne	r3,r2,803440 <check_fs+0xf4>
      return 0;
  803438:	0005883a 	mov	r2,zero
  80343c:	00001b06 	br	8034ac <check_fs+0x160>
   if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  803440:	e0bffe17 	ldw	r2,-8(fp)
  803444:	10802143 	ldbu	r2,133(r2)
  803448:	10803fcc 	andi	r2,r2,255
  80344c:	1006963a 	slli	r3,r2,24
  803450:	e0bffe17 	ldw	r2,-8(fp)
  803454:	10802103 	ldbu	r2,132(r2)
  803458:	10803fcc 	andi	r2,r2,255
  80345c:	1004943a 	slli	r2,r2,16
  803460:	1884b03a 	or	r2,r3,r2
  803464:	e0fffe17 	ldw	r3,-8(fp)
  803468:	18c020c3 	ldbu	r3,131(r3)
  80346c:	18c03fcc 	andi	r3,r3,255
  803470:	1806923a 	slli	r3,r3,8
  803474:	10c6b03a 	or	r3,r2,r3
  803478:	e0bffe17 	ldw	r2,-8(fp)
  80347c:	10802083 	ldbu	r2,130(r2)
  803480:	10803fcc 	andi	r2,r2,255
  803484:	1886b03a 	or	r3,r3,r2
  803488:	00804034 	movhi	r2,256
  80348c:	10bfffc4 	addi	r2,r2,-1
  803490:	1886703a 	and	r3,r3,r2
  803494:	00801534 	movhi	r2,84
  803498:	10905184 	addi	r2,r2,16710
  80349c:	1880021e 	bne	r3,r2,8034a8 <check_fs+0x15c>
      return 0;
  8034a0:	0005883a 	mov	r2,zero
  8034a4:	00000106 	br	8034ac <check_fs+0x160>

   return 1;
  8034a8:	00800044 	movi	r2,1
}
  8034ac:	e037883a 	mov	sp,fp
  8034b0:	dfc00117 	ldw	ra,4(sp)
  8034b4:	df000017 	ldw	fp,0(sp)
  8034b8:	dec00204 	addi	sp,sp,8
  8034bc:	f800283a 	ret

008034c0 <chk_mounted>:
FRESULT chk_mounted (   /* FR_OK(0): successful, !=0: any error occurred */
   const TCHAR **path,  /* Pointer to pointer to the path name (drive number) */
   FATFS **rfs,      /* Pointer to pointer to the found file system object */
   uint8_t chk_wp       /* !=0: Check media write protection for write access */
)
{
  8034c0:	deffee04 	addi	sp,sp,-72
  8034c4:	dfc01115 	stw	ra,68(sp)
  8034c8:	df001015 	stw	fp,64(sp)
  8034cc:	df001004 	addi	fp,sp,64
  8034d0:	e13ffd15 	stw	r4,-12(fp)
  8034d4:	e17ffe15 	stw	r5,-8(fp)
  8034d8:	3005883a 	mov	r2,r6
  8034dc:	e0bfff05 	stb	r2,-4(fp)
   uint8_t fmt, b, pi, *tbl;
   uint32_t vol;
   DSTATUS stat;
   uint32_t bsect, fasize, tsect, sysect, nclst, szbfat;
   uint16_t nrsv;
   const TCHAR *p = *path;
  8034e0:	e0bffd17 	ldw	r2,-12(fp)
  8034e4:	10800017 	ldw	r2,0(r2)
  8034e8:	e0bff615 	stw	r2,-40(fp)
   FATFS *fs;

   /* Get logical drive number from the path name */
   vol = p[0] - '0';             /* Is there a drive number? */
  8034ec:	e0bff617 	ldw	r2,-40(fp)
  8034f0:	10800003 	ldbu	r2,0(r2)
  8034f4:	10803fcc 	andi	r2,r2,255
  8034f8:	1080201c 	xori	r2,r2,128
  8034fc:	10bfe004 	addi	r2,r2,-128
  803500:	10bff404 	addi	r2,r2,-48
  803504:	e0bff115 	stw	r2,-60(fp)
   if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
  803508:	e0bff117 	ldw	r2,-60(fp)
  80350c:	108002a8 	cmpgeui	r2,r2,10
  803510:	10000f1e 	bne	r2,zero,803550 <chk_mounted+0x90>
  803514:	e0bff617 	ldw	r2,-40(fp)
  803518:	10800044 	addi	r2,r2,1
  80351c:	10800003 	ldbu	r2,0(r2)
  803520:	10803fcc 	andi	r2,r2,255
  803524:	1080201c 	xori	r2,r2,128
  803528:	10bfe004 	addi	r2,r2,-128
  80352c:	10800e98 	cmpnei	r2,r2,58
  803530:	1000071e 	bne	r2,zero,803550 <chk_mounted+0x90>
      p += 2; *path = p;            /* Return pointer to the path name */
  803534:	e0bff617 	ldw	r2,-40(fp)
  803538:	10800084 	addi	r2,r2,2
  80353c:	e0bff615 	stw	r2,-40(fp)
  803540:	e0bffd17 	ldw	r2,-12(fp)
  803544:	e0fff617 	ldw	r3,-40(fp)
  803548:	10c00015 	stw	r3,0(r2)
  80354c:	00000106 	br	803554 <chk_mounted+0x94>
   } else {                   /* No drive number is given */
#if _FS_RPATH
      vol = CurrVol;             /* Use current drive */
#else
      vol = 0;                /* Use drive 0 */
  803550:	e03ff115 	stw	zero,-60(fp)
#endif
   }

   /* Check if the file system object is valid or not */
   if (vol >= _VOLUMES)             /* Is the drive number valid? */
  803554:	e0bff117 	ldw	r2,-60(fp)
  803558:	10000226 	beq	r2,zero,803564 <chk_mounted+0xa4>
      return FR_INVALID_DRIVE;
  80355c:	008002c4 	movi	r2,11
  803560:	00022106 	br	803de8 <chk_mounted+0x928>
   *rfs = fs = FatFs[vol];          /* Return pointer to the corresponding file system object */
  803564:	e0bff117 	ldw	r2,-60(fp)
  803568:	1085883a 	add	r2,r2,r2
  80356c:	1087883a 	add	r3,r2,r2
  803570:	d0a76e04 	addi	r2,gp,-25160
  803574:	1885883a 	add	r2,r3,r2
  803578:	10800017 	ldw	r2,0(r2)
  80357c:	e0bff715 	stw	r2,-36(fp)
  803580:	e0bffe17 	ldw	r2,-8(fp)
  803584:	e0fff717 	ldw	r3,-36(fp)
  803588:	10c00015 	stw	r3,0(r2)
   if (!fs) return FR_NOT_ENABLED;     /* Is the file system object available? */
  80358c:	e0bff717 	ldw	r2,-36(fp)
  803590:	1000021e 	bne	r2,zero,80359c <chk_mounted+0xdc>
  803594:	00800304 	movi	r2,12
  803598:	00021306 	br	803de8 <chk_mounted+0x928>

   ENTER_FF(fs);                 /* Lock file system */

   if (fs->fs_type) {               /* If the logical drive has been mounted */
  80359c:	e0bff717 	ldw	r2,-36(fp)
  8035a0:	10800003 	ldbu	r2,0(r2)
  8035a4:	10803fcc 	andi	r2,r2,255
  8035a8:	10001226 	beq	r2,zero,8035f4 <chk_mounted+0x134>
      stat = disk_status(fs->drv);
  8035ac:	e0bff717 	ldw	r2,-36(fp)
  8035b0:	10800043 	ldbu	r2,1(r2)
  8035b4:	10803fcc 	andi	r2,r2,255
  8035b8:	1009883a 	mov	r4,r2
  8035bc:	0800dc40 	call	800dc4 <ffs_DiskIOStatus>
  8035c0:	e0bff805 	stb	r2,-32(fp)
      if (!(stat & STA_NOINIT)) {      /* and the physical drive is kept initialized (has not been changed), */
  8035c4:	e0bff803 	ldbu	r2,-32(fp)
  8035c8:	1080004c 	andi	r2,r2,1
  8035cc:	1000091e 	bne	r2,zero,8035f4 <chk_mounted+0x134>
         if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check write protection if needed */
  8035d0:	e0bfff03 	ldbu	r2,-4(fp)
  8035d4:	10000526 	beq	r2,zero,8035ec <chk_mounted+0x12c>
  8035d8:	e0bff803 	ldbu	r2,-32(fp)
  8035dc:	1080010c 	andi	r2,r2,4
  8035e0:	10000226 	beq	r2,zero,8035ec <chk_mounted+0x12c>
            return FR_WRITE_PROTECTED;
  8035e4:	00800284 	movi	r2,10
  8035e8:	0001ff06 	br	803de8 <chk_mounted+0x928>
         return FR_OK;           /* The file system object is valid */
  8035ec:	0005883a 	mov	r2,zero
  8035f0:	0001fd06 	br	803de8 <chk_mounted+0x928>
   }

   /* The file system object is not valid. */
   /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

   fs->fs_type = 0;              /* Clear the file system object */
  8035f4:	e0bff717 	ldw	r2,-36(fp)
  8035f8:	10000005 	stb	zero,0(r2)
   fs->drv = LD2PD(vol);            /* Bind the logical drive and a physical drive */
  8035fc:	e0bff117 	ldw	r2,-60(fp)
  803600:	1007883a 	mov	r3,r2
  803604:	e0bff717 	ldw	r2,-36(fp)
  803608:	10c00045 	stb	r3,1(r2)
   stat = disk_initialize(fs->drv); /* Initialize low level disk I/O layer */
  80360c:	e0bff717 	ldw	r2,-36(fp)
  803610:	10800043 	ldbu	r2,1(r2)
  803614:	10803fcc 	andi	r2,r2,255
  803618:	1009883a 	mov	r4,r2
  80361c:	0800b680 	call	800b68 <ffs_DiskIOInitialize>
  803620:	e0bff805 	stb	r2,-32(fp)
   if (stat & STA_NOINIT)           /* Check if the initialization succeeded */
  803624:	e0bff803 	ldbu	r2,-32(fp)
  803628:	1080004c 	andi	r2,r2,1
  80362c:	10000226 	beq	r2,zero,803638 <chk_mounted+0x178>
      return FR_NOT_READY;       /* Failed to initialize due to no media or hard error */
  803630:	008000c4 	movi	r2,3
  803634:	0001ec06 	br	803de8 <chk_mounted+0x928>
   if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check disk write protection if needed */
  803638:	e0bfff03 	ldbu	r2,-4(fp)
  80363c:	10000526 	beq	r2,zero,803654 <chk_mounted+0x194>
  803640:	e0bff803 	ldbu	r2,-32(fp)
  803644:	1080010c 	andi	r2,r2,4
  803648:	10000226 	beq	r2,zero,803654 <chk_mounted+0x194>
      return FR_WRITE_PROTECTED;
  80364c:	00800284 	movi	r2,10
  803650:	0001e506 	br	803de8 <chk_mounted+0x928>
#if _MAX_SS != 512                  /* Get disk sector size (variable sector size cfg only) */
   if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
      return FR_DISK_ERR;
#endif
   /* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
   fmt = check_fs(fs, bsect = 0);      /* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  803654:	e03ff215 	stw	zero,-56(fp)
  803658:	e13ff717 	ldw	r4,-36(fp)
  80365c:	e17ff217 	ldw	r5,-56(fp)
  803660:	080334c0 	call	80334c <check_fs>
  803664:	e0bff005 	stb	r2,-64(fp)
   if (LD2PT(vol) && !fmt) fmt = 1; /* Force non-SFD if the volume is forced partition */
   if (fmt == 1) {                  /* Not an FAT-VBR, the physical drive can be partitioned */
  803668:	e0bff003 	ldbu	r2,-64(fp)
  80366c:	10800058 	cmpnei	r2,r2,1
  803670:	10002d1e 	bne	r2,zero,803728 <chk_mounted+0x268>
      /* Check the partition listed in the partition table */
      pi = LD2PT(vol);
  803674:	e03ff045 	stb	zero,-63(fp)
      if (pi) pi--;
  803678:	e0bff043 	ldbu	r2,-63(fp)
  80367c:	10000326 	beq	r2,zero,80368c <chk_mounted+0x1cc>
  803680:	e0bff043 	ldbu	r2,-63(fp)
  803684:	10bfffc4 	addi	r2,r2,-1
  803688:	e0bff045 	stb	r2,-63(fp)
      tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
  80368c:	e0bff043 	ldbu	r2,-63(fp)
  803690:	1004913a 	slli	r2,r2,4
  803694:	10806f84 	addi	r2,r2,446
  803698:	10800c04 	addi	r2,r2,48
  80369c:	e0fff717 	ldw	r3,-36(fp)
  8036a0:	1885883a 	add	r2,r3,r2
  8036a4:	e0bff915 	stw	r2,-28(fp)
      if (tbl[4]) {                 /* Is the partition existing? */
  8036a8:	e0bff917 	ldw	r2,-28(fp)
  8036ac:	10800104 	addi	r2,r2,4
  8036b0:	10800003 	ldbu	r2,0(r2)
  8036b4:	10803fcc 	andi	r2,r2,255
  8036b8:	10001b26 	beq	r2,zero,803728 <chk_mounted+0x268>
         bsect = LD_DWORD(&tbl[8]);    /* Partition offset in LBA */
  8036bc:	e0bff917 	ldw	r2,-28(fp)
  8036c0:	108002c4 	addi	r2,r2,11
  8036c4:	10800003 	ldbu	r2,0(r2)
  8036c8:	10803fcc 	andi	r2,r2,255
  8036cc:	1006963a 	slli	r3,r2,24
  8036d0:	e0bff917 	ldw	r2,-28(fp)
  8036d4:	10800284 	addi	r2,r2,10
  8036d8:	10800003 	ldbu	r2,0(r2)
  8036dc:	10803fcc 	andi	r2,r2,255
  8036e0:	1004943a 	slli	r2,r2,16
  8036e4:	1884b03a 	or	r2,r3,r2
  8036e8:	e0fff917 	ldw	r3,-28(fp)
  8036ec:	18c00244 	addi	r3,r3,9
  8036f0:	18c00003 	ldbu	r3,0(r3)
  8036f4:	18c03fcc 	andi	r3,r3,255
  8036f8:	1806923a 	slli	r3,r3,8
  8036fc:	10c6b03a 	or	r3,r2,r3
  803700:	e0bff917 	ldw	r2,-28(fp)
  803704:	10800204 	addi	r2,r2,8
  803708:	10800003 	ldbu	r2,0(r2)
  80370c:	10803fcc 	andi	r2,r2,255
  803710:	1884b03a 	or	r2,r3,r2
  803714:	e0bff215 	stw	r2,-56(fp)
         fmt = check_fs(fs, bsect);    /* Check the partition */
  803718:	e13ff717 	ldw	r4,-36(fp)
  80371c:	e17ff217 	ldw	r5,-56(fp)
  803720:	080334c0 	call	80334c <check_fs>
  803724:	e0bff005 	stb	r2,-64(fp)
      }
   }
   if (fmt == 3) return FR_DISK_ERR;
  803728:	e0bff003 	ldbu	r2,-64(fp)
  80372c:	108000d8 	cmpnei	r2,r2,3
  803730:	1000021e 	bne	r2,zero,80373c <chk_mounted+0x27c>
  803734:	00800044 	movi	r2,1
  803738:	0001ab06 	br	803de8 <chk_mounted+0x928>
   if (fmt) return FR_NO_FILESYSTEM;      /* No FAT volume is found */
  80373c:	e0bff003 	ldbu	r2,-64(fp)
  803740:	10000226 	beq	r2,zero,80374c <chk_mounted+0x28c>
  803744:	00800344 	movi	r2,13
  803748:	0001a706 	br	803de8 <chk_mounted+0x928>

   /* An FAT volume is found. Following code initializes the file system object */

   if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))     /* (BPB_BytsPerSec must be equal to the physical sector size) */
  80374c:	e0bff717 	ldw	r2,-36(fp)
  803750:	10800f03 	ldbu	r2,60(r2)
  803754:	10803fcc 	andi	r2,r2,255
  803758:	1004923a 	slli	r2,r2,8
  80375c:	1007883a 	mov	r3,r2
  803760:	e0bff717 	ldw	r2,-36(fp)
  803764:	10800ec3 	ldbu	r2,59(r2)
  803768:	10803fcc 	andi	r2,r2,255
  80376c:	1884b03a 	or	r2,r3,r2
  803770:	10bfffcc 	andi	r2,r2,65535
  803774:	10a0001c 	xori	r2,r2,32768
  803778:	10a00004 	addi	r2,r2,-32768
  80377c:	10808020 	cmpeqi	r2,r2,512
  803780:	1000021e 	bne	r2,zero,80378c <chk_mounted+0x2cc>
      return FR_NO_FILESYSTEM;
  803784:	00800344 	movi	r2,13
  803788:	00019706 	br	803de8 <chk_mounted+0x928>

   fasize = LD_WORD(fs->win+BPB_FATSz16);          /* Number of sectors per FAT */
  80378c:	e0bff717 	ldw	r2,-36(fp)
  803790:	108011c3 	ldbu	r2,71(r2)
  803794:	10803fcc 	andi	r2,r2,255
  803798:	1004923a 	slli	r2,r2,8
  80379c:	1007883a 	mov	r3,r2
  8037a0:	e0bff717 	ldw	r2,-36(fp)
  8037a4:	10801183 	ldbu	r2,70(r2)
  8037a8:	10803fcc 	andi	r2,r2,255
  8037ac:	1884b03a 	or	r2,r3,r2
  8037b0:	10bfffcc 	andi	r2,r2,65535
  8037b4:	e0bff315 	stw	r2,-52(fp)
   if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  8037b8:	e0bff317 	ldw	r2,-52(fp)
  8037bc:	1000131e 	bne	r2,zero,80380c <chk_mounted+0x34c>
  8037c0:	e0bff717 	ldw	r2,-36(fp)
  8037c4:	108015c3 	ldbu	r2,87(r2)
  8037c8:	10803fcc 	andi	r2,r2,255
  8037cc:	1006963a 	slli	r3,r2,24
  8037d0:	e0bff717 	ldw	r2,-36(fp)
  8037d4:	10801583 	ldbu	r2,86(r2)
  8037d8:	10803fcc 	andi	r2,r2,255
  8037dc:	1004943a 	slli	r2,r2,16
  8037e0:	1884b03a 	or	r2,r3,r2
  8037e4:	e0fff717 	ldw	r3,-36(fp)
  8037e8:	18c01543 	ldbu	r3,85(r3)
  8037ec:	18c03fcc 	andi	r3,r3,255
  8037f0:	1806923a 	slli	r3,r3,8
  8037f4:	10c6b03a 	or	r3,r2,r3
  8037f8:	e0bff717 	ldw	r2,-36(fp)
  8037fc:	10801503 	ldbu	r2,84(r2)
  803800:	10803fcc 	andi	r2,r2,255
  803804:	1884b03a 	or	r2,r3,r2
  803808:	e0bff315 	stw	r2,-52(fp)
   fs->fsize = fasize;
  80380c:	e0bff717 	ldw	r2,-36(fp)
  803810:	e0fff317 	ldw	r3,-52(fp)
  803814:	10c00715 	stw	r3,28(r2)

   fs->n_fats = b = fs->win[BPB_NumFATs];          /* Number of FAT copies */
  803818:	e0bff717 	ldw	r2,-36(fp)
  80381c:	10801003 	ldbu	r2,64(r2)
  803820:	e0bffa05 	stb	r2,-24(fp)
  803824:	e0bff717 	ldw	r2,-36(fp)
  803828:	e0fffa03 	ldbu	r3,-24(fp)
  80382c:	10c000c5 	stb	r3,3(r2)
   if (b != 1 && b != 2) return FR_NO_FILESYSTEM;     /* (Must be 1 or 2) */
  803830:	e0bffa03 	ldbu	r2,-24(fp)
  803834:	10800060 	cmpeqi	r2,r2,1
  803838:	1000051e 	bne	r2,zero,803850 <chk_mounted+0x390>
  80383c:	e0bffa03 	ldbu	r2,-24(fp)
  803840:	108000a0 	cmpeqi	r2,r2,2
  803844:	1000021e 	bne	r2,zero,803850 <chk_mounted+0x390>
  803848:	00800344 	movi	r2,13
  80384c:	00016606 	br	803de8 <chk_mounted+0x928>
   fasize *= b;                              /* Number of sectors for FAT area */
  803850:	e0bffa03 	ldbu	r2,-24(fp)
  803854:	e0fff317 	ldw	r3,-52(fp)
  803858:	1885383a 	mul	r2,r3,r2
  80385c:	e0bff315 	stw	r2,-52(fp)

   fs->csize = b = fs->win[BPB_SecPerClus];        /* Number of sectors per cluster */
  803860:	e0bff717 	ldw	r2,-36(fp)
  803864:	10800f43 	ldbu	r2,61(r2)
  803868:	e0bffa05 	stb	r2,-24(fp)
  80386c:	e0bff717 	ldw	r2,-36(fp)
  803870:	e0fffa03 	ldbu	r3,-24(fp)
  803874:	10c00085 	stb	r3,2(r2)
   if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;  /* (Must be power of 2) */
  803878:	e0bffa03 	ldbu	r2,-24(fp)
  80387c:	10000526 	beq	r2,zero,803894 <chk_mounted+0x3d4>
  803880:	e0fffa03 	ldbu	r3,-24(fp)
  803884:	e0bffa03 	ldbu	r2,-24(fp)
  803888:	10bfffc4 	addi	r2,r2,-1
  80388c:	1884703a 	and	r2,r3,r2
  803890:	10000226 	beq	r2,zero,80389c <chk_mounted+0x3dc>
  803894:	00800344 	movi	r2,13
  803898:	00015306 	br	803de8 <chk_mounted+0x928>

   fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);   /* Number of root directory entries */
  80389c:	e0bff717 	ldw	r2,-36(fp)
  8038a0:	10801083 	ldbu	r2,66(r2)
  8038a4:	10803fcc 	andi	r2,r2,255
  8038a8:	1004923a 	slli	r2,r2,8
  8038ac:	1007883a 	mov	r3,r2
  8038b0:	e0bff717 	ldw	r2,-36(fp)
  8038b4:	10801043 	ldbu	r2,65(r2)
  8038b8:	10803fcc 	andi	r2,r2,255
  8038bc:	1884b03a 	or	r2,r3,r2
  8038c0:	1007883a 	mov	r3,r2
  8038c4:	e0bff717 	ldw	r2,-36(fp)
  8038c8:	10c0020d 	sth	r3,8(r2)
   if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must be sector aligned) */
  8038cc:	e0bff717 	ldw	r2,-36(fp)
  8038d0:	1080020b 	ldhu	r2,8(r2)
  8038d4:	108003cc 	andi	r2,r2,15
  8038d8:	10bfffcc 	andi	r2,r2,65535
  8038dc:	10000226 	beq	r2,zero,8038e8 <chk_mounted+0x428>
  8038e0:	00800344 	movi	r2,13
  8038e4:	00014006 	br	803de8 <chk_mounted+0x928>

   tsect = LD_WORD(fs->win+BPB_TotSec16);          /* Number of sectors on the volume */
  8038e8:	e0bff717 	ldw	r2,-36(fp)
  8038ec:	10801103 	ldbu	r2,68(r2)
  8038f0:	10803fcc 	andi	r2,r2,255
  8038f4:	1004923a 	slli	r2,r2,8
  8038f8:	1007883a 	mov	r3,r2
  8038fc:	e0bff717 	ldw	r2,-36(fp)
  803900:	108010c3 	ldbu	r2,67(r2)
  803904:	10803fcc 	andi	r2,r2,255
  803908:	1884b03a 	or	r2,r3,r2
  80390c:	10bfffcc 	andi	r2,r2,65535
  803910:	e0bff415 	stw	r2,-48(fp)
   if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  803914:	e0bff417 	ldw	r2,-48(fp)
  803918:	1000131e 	bne	r2,zero,803968 <chk_mounted+0x4a8>
  80391c:	e0bff717 	ldw	r2,-36(fp)
  803920:	108014c3 	ldbu	r2,83(r2)
  803924:	10803fcc 	andi	r2,r2,255
  803928:	1006963a 	slli	r3,r2,24
  80392c:	e0bff717 	ldw	r2,-36(fp)
  803930:	10801483 	ldbu	r2,82(r2)
  803934:	10803fcc 	andi	r2,r2,255
  803938:	1004943a 	slli	r2,r2,16
  80393c:	1884b03a 	or	r2,r3,r2
  803940:	e0fff717 	ldw	r3,-36(fp)
  803944:	18c01443 	ldbu	r3,81(r3)
  803948:	18c03fcc 	andi	r3,r3,255
  80394c:	1806923a 	slli	r3,r3,8
  803950:	10c6b03a 	or	r3,r2,r3
  803954:	e0bff717 	ldw	r2,-36(fp)
  803958:	10801403 	ldbu	r2,80(r2)
  80395c:	10803fcc 	andi	r2,r2,255
  803960:	1884b03a 	or	r2,r3,r2
  803964:	e0bff415 	stw	r2,-48(fp)

   nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);            /* Number of reserved sectors */
  803968:	e0bff717 	ldw	r2,-36(fp)
  80396c:	10800fc3 	ldbu	r2,63(r2)
  803970:	10803fcc 	andi	r2,r2,255
  803974:	1004923a 	slli	r2,r2,8
  803978:	1007883a 	mov	r3,r2
  80397c:	e0bff717 	ldw	r2,-36(fp)
  803980:	10800f83 	ldbu	r2,62(r2)
  803984:	10803fcc 	andi	r2,r2,255
  803988:	1884b03a 	or	r2,r3,r2
  80398c:	e0bffa8d 	sth	r2,-22(fp)
   if (!nrsv) return FR_NO_FILESYSTEM;             /* (BPB_RsvdSecCnt must not be 0) */
  803990:	e0bffa8b 	ldhu	r2,-22(fp)
  803994:	1000021e 	bne	r2,zero,8039a0 <chk_mounted+0x4e0>
  803998:	00800344 	movi	r2,13
  80399c:	00011206 	br	803de8 <chk_mounted+0x928>

   /* Determine the FAT sub type */
   sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR); /* RSV+FAT+DIR */
  8039a0:	e0fffa8b 	ldhu	r3,-22(fp)
  8039a4:	e0bff317 	ldw	r2,-52(fp)
  8039a8:	1887883a 	add	r3,r3,r2
  8039ac:	e0bff717 	ldw	r2,-36(fp)
  8039b0:	1080020b 	ldhu	r2,8(r2)
  8039b4:	10bfffcc 	andi	r2,r2,65535
  8039b8:	1004d13a 	srli	r2,r2,4
  8039bc:	10bfffcc 	andi	r2,r2,65535
  8039c0:	1885883a 	add	r2,r3,r2
  8039c4:	e0bffb15 	stw	r2,-20(fp)
   if (tsect < sysect) return FR_NO_FILESYSTEM;    /* (Invalid volume size) */
  8039c8:	e0fff417 	ldw	r3,-48(fp)
  8039cc:	e0bffb17 	ldw	r2,-20(fp)
  8039d0:	1880022e 	bgeu	r3,r2,8039dc <chk_mounted+0x51c>
  8039d4:	00800344 	movi	r2,13
  8039d8:	00010306 	br	803de8 <chk_mounted+0x928>
   nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
  8039dc:	e0fff417 	ldw	r3,-48(fp)
  8039e0:	e0bffb17 	ldw	r2,-20(fp)
  8039e4:	1887c83a 	sub	r3,r3,r2
  8039e8:	e0bff717 	ldw	r2,-36(fp)
  8039ec:	10800083 	ldbu	r2,2(r2)
  8039f0:	10803fcc 	andi	r2,r2,255
  8039f4:	1809883a 	mov	r4,r3
  8039f8:	100b883a 	mov	r5,r2
  8039fc:	080a9800 	call	80a980 <__udivsi3>
  803a00:	e0bffc15 	stw	r2,-16(fp)
   if (!nclst) return FR_NO_FILESYSTEM;            /* (Invalid volume size) */
  803a04:	e0bffc17 	ldw	r2,-16(fp)
  803a08:	1000021e 	bne	r2,zero,803a14 <chk_mounted+0x554>
  803a0c:	00800344 	movi	r2,13
  803a10:	0000f506 	br	803de8 <chk_mounted+0x928>
   fmt = FS_FAT12;
  803a14:	00800044 	movi	r2,1
  803a18:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  803a1c:	e0bffc17 	ldw	r2,-16(fp)
  803a20:	1083fdb0 	cmpltui	r2,r2,4086
  803a24:	1000021e 	bne	r2,zero,803a30 <chk_mounted+0x570>
  803a28:	00800084 	movi	r2,2
  803a2c:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  803a30:	e0bffc17 	ldw	r2,-16(fp)
  803a34:	10bffdb0 	cmpltui	r2,r2,65526
  803a38:	1000021e 	bne	r2,zero,803a44 <chk_mounted+0x584>
  803a3c:	008000c4 	movi	r2,3
  803a40:	e0bff005 	stb	r2,-64(fp)

   /* Boundaries and Limits */
   fs->n_fatent = nclst + 2;                    /* Number of FAT entries */
  803a44:	e0bffc17 	ldw	r2,-16(fp)
  803a48:	10c00084 	addi	r3,r2,2
  803a4c:	e0bff717 	ldw	r2,-36(fp)
  803a50:	10c00615 	stw	r3,24(r2)
   fs->database = bsect + sysect;                  /* Data start sector */
  803a54:	e0fff217 	ldw	r3,-56(fp)
  803a58:	e0bffb17 	ldw	r2,-20(fp)
  803a5c:	1887883a 	add	r3,r3,r2
  803a60:	e0bff717 	ldw	r2,-36(fp)
  803a64:	10c00a15 	stw	r3,40(r2)
   fs->fatbase = bsect + nrsv;                  /* FAT start sector */
  803a68:	e0fffa8b 	ldhu	r3,-22(fp)
  803a6c:	e0bff217 	ldw	r2,-56(fp)
  803a70:	1887883a 	add	r3,r3,r2
  803a74:	e0bff717 	ldw	r2,-36(fp)
  803a78:	10c00815 	stw	r3,32(r2)
   if (fmt == FS_FAT32) {
  803a7c:	e0bff003 	ldbu	r2,-64(fp)
  803a80:	108000d8 	cmpnei	r2,r2,3
  803a84:	1000201e 	bne	r2,zero,803b08 <chk_mounted+0x648>
      if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
  803a88:	e0bff717 	ldw	r2,-36(fp)
  803a8c:	1080020b 	ldhu	r2,8(r2)
  803a90:	10bfffcc 	andi	r2,r2,65535
  803a94:	10000226 	beq	r2,zero,803aa0 <chk_mounted+0x5e0>
  803a98:	00800344 	movi	r2,13
  803a9c:	0000d206 	br	803de8 <chk_mounted+0x928>
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
  803aa0:	e0bff717 	ldw	r2,-36(fp)
  803aa4:	108017c3 	ldbu	r2,95(r2)
  803aa8:	10803fcc 	andi	r2,r2,255
  803aac:	1006963a 	slli	r3,r2,24
  803ab0:	e0bff717 	ldw	r2,-36(fp)
  803ab4:	10801783 	ldbu	r2,94(r2)
  803ab8:	10803fcc 	andi	r2,r2,255
  803abc:	1004943a 	slli	r2,r2,16
  803ac0:	1884b03a 	or	r2,r3,r2
  803ac4:	e0fff717 	ldw	r3,-36(fp)
  803ac8:	18c01743 	ldbu	r3,93(r3)
  803acc:	18c03fcc 	andi	r3,r3,255
  803ad0:	1806923a 	slli	r3,r3,8
  803ad4:	10c6b03a 	or	r3,r2,r3
  803ad8:	e0bff717 	ldw	r2,-36(fp)
  803adc:	10801703 	ldbu	r2,92(r2)
  803ae0:	10803fcc 	andi	r2,r2,255
  803ae4:	1886b03a 	or	r3,r3,r2
  803ae8:	e0bff717 	ldw	r2,-36(fp)
  803aec:	10c00915 	stw	r3,36(r2)
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
  803af0:	e0bff717 	ldw	r2,-36(fp)
  803af4:	10800617 	ldw	r2,24(r2)
  803af8:	1085883a 	add	r2,r2,r2
  803afc:	1085883a 	add	r2,r2,r2
  803b00:	e0bff515 	stw	r2,-44(fp)
  803b04:	00001e06 	br	803b80 <chk_mounted+0x6c0>
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
  803b08:	e0bff717 	ldw	r2,-36(fp)
  803b0c:	1080020b 	ldhu	r2,8(r2)
  803b10:	10bfffcc 	andi	r2,r2,65535
  803b14:	1000021e 	bne	r2,zero,803b20 <chk_mounted+0x660>
  803b18:	00800344 	movi	r2,13
  803b1c:	0000b206 	br	803de8 <chk_mounted+0x928>
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
  803b20:	e0bff717 	ldw	r2,-36(fp)
  803b24:	10c00817 	ldw	r3,32(r2)
  803b28:	e0bff317 	ldw	r2,-52(fp)
  803b2c:	1887883a 	add	r3,r3,r2
  803b30:	e0bff717 	ldw	r2,-36(fp)
  803b34:	10c00915 	stw	r3,36(r2)
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  803b38:	e0bff003 	ldbu	r2,-64(fp)
  803b3c:	10800098 	cmpnei	r2,r2,2
  803b40:	1000041e 	bne	r2,zero,803b54 <chk_mounted+0x694>
  803b44:	e0bff717 	ldw	r2,-36(fp)
  803b48:	10800617 	ldw	r2,24(r2)
  803b4c:	1085883a 	add	r2,r2,r2
  803b50:	00000a06 	br	803b7c <chk_mounted+0x6bc>
  803b54:	e0bff717 	ldw	r2,-36(fp)
  803b58:	10c00617 	ldw	r3,24(r2)
  803b5c:	1805883a 	mov	r2,r3
  803b60:	1085883a 	add	r2,r2,r2
  803b64:	10c5883a 	add	r2,r2,r3
  803b68:	1006d07a 	srli	r3,r2,1
  803b6c:	e0bff717 	ldw	r2,-36(fp)
  803b70:	10800617 	ldw	r2,24(r2)
  803b74:	1080004c 	andi	r2,r2,1
  803b78:	1885883a 	add	r2,r3,r2
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
  803b7c:	e0bff515 	stw	r2,-44(fp)
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   }
   if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))  /* (BPB_FATSz must not be less than required) */
  803b80:	e0bff717 	ldw	r2,-36(fp)
  803b84:	10c00717 	ldw	r3,28(r2)
  803b88:	e0bff517 	ldw	r2,-44(fp)
  803b8c:	10807fc4 	addi	r2,r2,511
  803b90:	1004d27a 	srli	r2,r2,9
  803b94:	1880022e 	bgeu	r3,r2,803ba0 <chk_mounted+0x6e0>
      return FR_NO_FILESYSTEM;
  803b98:	00800344 	movi	r2,13
  803b9c:	00009206 	br	803de8 <chk_mounted+0x928>

#if !_FS_READONLY
   /* Initialize cluster allocation information */
   fs->free_clust = 0xFFFFFFFF;
  803ba0:	e0bff717 	ldw	r2,-36(fp)
  803ba4:	00ffffc4 	movi	r3,-1
  803ba8:	10c00415 	stw	r3,16(r2)
   fs->last_clust = 0;
  803bac:	e0bff717 	ldw	r2,-36(fp)
  803bb0:	10000315 	stw	zero,12(r2)

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
  803bb4:	e0bff003 	ldbu	r2,-64(fp)
  803bb8:	108000d8 	cmpnei	r2,r2,3
  803bbc:	10007c1e 	bne	r2,zero,803db0 <chk_mounted+0x8f0>
      fs->fsi_flag = 0;
  803bc0:	e0bff717 	ldw	r2,-36(fp)
  803bc4:	10000145 	stb	zero,5(r2)
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  803bc8:	e0bff717 	ldw	r2,-36(fp)
  803bcc:	10801843 	ldbu	r2,97(r2)
  803bd0:	10803fcc 	andi	r2,r2,255
  803bd4:	1004923a 	slli	r2,r2,8
  803bd8:	1007883a 	mov	r3,r2
  803bdc:	e0bff717 	ldw	r2,-36(fp)
  803be0:	10801803 	ldbu	r2,96(r2)
  803be4:	10803fcc 	andi	r2,r2,255
  803be8:	1884b03a 	or	r2,r3,r2
  803bec:	10ffffcc 	andi	r3,r2,65535
  803bf0:	e0bff217 	ldw	r2,-56(fp)
  803bf4:	1887883a 	add	r3,r3,r2
  803bf8:	e0bff717 	ldw	r2,-36(fp)
  803bfc:	10c00515 	stw	r3,20(r2)
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  803c00:	e0bff717 	ldw	r2,-36(fp)
  803c04:	10800043 	ldbu	r2,1(r2)
  803c08:	11003fcc 	andi	r4,r2,255
  803c0c:	e0bff717 	ldw	r2,-36(fp)
  803c10:	10c00c04 	addi	r3,r2,48
  803c14:	e0bff717 	ldw	r2,-36(fp)
  803c18:	10800517 	ldw	r2,20(r2)
  803c1c:	180b883a 	mov	r5,r3
  803c20:	100d883a 	mov	r6,r2
  803c24:	01c00044 	movi	r7,1
  803c28:	0800dec0 	call	800dec <ffs_DiskIORead>
  803c2c:	1000601e 	bne	r2,zero,803db0 <chk_mounted+0x8f0>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  803c30:	e0bff717 	ldw	r2,-36(fp)
  803c34:	10808bc3 	ldbu	r2,559(r2)
  803c38:	10803fcc 	andi	r2,r2,255
  803c3c:	1004923a 	slli	r2,r2,8
  803c40:	1007883a 	mov	r3,r2
  803c44:	e0bff717 	ldw	r2,-36(fp)
  803c48:	10808b83 	ldbu	r2,558(r2)
  803c4c:	10803fcc 	andi	r2,r2,255
  803c50:	1884b03a 	or	r2,r3,r2

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  803c54:	10bfffcc 	andi	r2,r2,65535
  803c58:	10a0001c 	xori	r2,r2,32768
  803c5c:	10a00004 	addi	r2,r2,-32768
  803c60:	10aa9558 	cmpnei	r2,r2,-21931
  803c64:	1000521e 	bne	r2,zero,803db0 <chk_mounted+0x8f0>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  803c68:	e0bff717 	ldw	r2,-36(fp)
  803c6c:	10800cc3 	ldbu	r2,51(r2)
  803c70:	10803fcc 	andi	r2,r2,255
  803c74:	1006963a 	slli	r3,r2,24
  803c78:	e0bff717 	ldw	r2,-36(fp)
  803c7c:	10800c83 	ldbu	r2,50(r2)
  803c80:	10803fcc 	andi	r2,r2,255
  803c84:	1004943a 	slli	r2,r2,16
  803c88:	1884b03a 	or	r2,r3,r2
  803c8c:	e0fff717 	ldw	r3,-36(fp)
  803c90:	18c00c43 	ldbu	r3,49(r3)
  803c94:	18c03fcc 	andi	r3,r3,255
  803c98:	1806923a 	slli	r3,r3,8
  803c9c:	10c6b03a 	or	r3,r2,r3
  803ca0:	e0bff717 	ldw	r2,-36(fp)
  803ca4:	10800c03 	ldbu	r2,48(r2)
  803ca8:	10803fcc 	andi	r2,r2,255
  803cac:	1886b03a 	or	r3,r3,r2
   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  803cb0:	00905874 	movhi	r2,16737
  803cb4:	10949484 	addi	r2,r2,21074
  803cb8:	18803d1e 	bne	r3,r2,803db0 <chk_mounted+0x8f0>
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  803cbc:	e0bff717 	ldw	r2,-36(fp)
  803cc0:	108085c3 	ldbu	r2,535(r2)
  803cc4:	10803fcc 	andi	r2,r2,255
  803cc8:	1006963a 	slli	r3,r2,24
  803ccc:	e0bff717 	ldw	r2,-36(fp)
  803cd0:	10808583 	ldbu	r2,534(r2)
  803cd4:	10803fcc 	andi	r2,r2,255
  803cd8:	1004943a 	slli	r2,r2,16
  803cdc:	1884b03a 	or	r2,r3,r2
  803ce0:	e0fff717 	ldw	r3,-36(fp)
  803ce4:	18c08543 	ldbu	r3,533(r3)
  803ce8:	18c03fcc 	andi	r3,r3,255
  803cec:	1806923a 	slli	r3,r3,8
  803cf0:	10c6b03a 	or	r3,r2,r3
  803cf4:	e0bff717 	ldw	r2,-36(fp)
  803cf8:	10808503 	ldbu	r2,532(r2)
  803cfc:	10803fcc 	andi	r2,r2,255
  803d00:	1886b03a 	or	r3,r3,r2
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  803d04:	00985074 	movhi	r2,24897
  803d08:	109c9c84 	addi	r2,r2,29298
  803d0c:	1880281e 	bne	r3,r2,803db0 <chk_mounted+0x8f0>
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
            fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  803d10:	e0bff717 	ldw	r2,-36(fp)
  803d14:	108087c3 	ldbu	r2,543(r2)
  803d18:	10803fcc 	andi	r2,r2,255
  803d1c:	1006963a 	slli	r3,r2,24
  803d20:	e0bff717 	ldw	r2,-36(fp)
  803d24:	10808783 	ldbu	r2,542(r2)
  803d28:	10803fcc 	andi	r2,r2,255
  803d2c:	1004943a 	slli	r2,r2,16
  803d30:	1884b03a 	or	r2,r3,r2
  803d34:	e0fff717 	ldw	r3,-36(fp)
  803d38:	18c08743 	ldbu	r3,541(r3)
  803d3c:	18c03fcc 	andi	r3,r3,255
  803d40:	1806923a 	slli	r3,r3,8
  803d44:	10c6b03a 	or	r3,r2,r3
  803d48:	e0bff717 	ldw	r2,-36(fp)
  803d4c:	10808703 	ldbu	r2,540(r2)
  803d50:	10803fcc 	andi	r2,r2,255
  803d54:	1886b03a 	or	r3,r3,r2
  803d58:	e0bff717 	ldw	r2,-36(fp)
  803d5c:	10c00315 	stw	r3,12(r2)
            fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  803d60:	e0bff717 	ldw	r2,-36(fp)
  803d64:	108086c3 	ldbu	r2,539(r2)
  803d68:	10803fcc 	andi	r2,r2,255
  803d6c:	1006963a 	slli	r3,r2,24
  803d70:	e0bff717 	ldw	r2,-36(fp)
  803d74:	10808683 	ldbu	r2,538(r2)
  803d78:	10803fcc 	andi	r2,r2,255
  803d7c:	1004943a 	slli	r2,r2,16
  803d80:	1884b03a 	or	r2,r3,r2
  803d84:	e0fff717 	ldw	r3,-36(fp)
  803d88:	18c08643 	ldbu	r3,537(r3)
  803d8c:	18c03fcc 	andi	r3,r3,255
  803d90:	1806923a 	slli	r3,r3,8
  803d94:	10c6b03a 	or	r3,r2,r3
  803d98:	e0bff717 	ldw	r2,-36(fp)
  803d9c:	10808603 	ldbu	r2,536(r2)
  803da0:	10803fcc 	andi	r2,r2,255
  803da4:	1886b03a 	or	r3,r3,r2
  803da8:	e0bff717 	ldw	r2,-36(fp)
  803dac:	10c00415 	stw	r3,16(r2)
      }
   }
#endif
   fs->fs_type = fmt;      /* FAT sub-type */
  803db0:	e0bff717 	ldw	r2,-36(fp)
  803db4:	e0fff003 	ldbu	r3,-64(fp)
  803db8:	10c00005 	stb	r3,0(r2)
   fs->id = ++Fsid;     /* File system mount ID */
  803dbc:	d0a76f0b 	ldhu	r2,-25156(gp)
  803dc0:	10800044 	addi	r2,r2,1
  803dc4:	d0a76f0d 	sth	r2,-25156(gp)
  803dc8:	d0e76f0b 	ldhu	r3,-25156(gp)
  803dcc:	e0bff717 	ldw	r2,-36(fp)
  803dd0:	10c0018d 	sth	r3,6(r2)
   fs->winsect = 0;     /* Invalidate sector cache */
  803dd4:	e0bff717 	ldw	r2,-36(fp)
  803dd8:	10000b15 	stw	zero,44(r2)
   fs->wflag = 0;
  803ddc:	e0bff717 	ldw	r2,-36(fp)
  803de0:	10000105 	stb	zero,4(r2)
#endif
#if _FS_SHARE           /* Clear file lock semaphores */
   clear_lock(fs);
#endif

   return FR_OK;
  803de4:	0005883a 	mov	r2,zero
}
  803de8:	e037883a 	mov	sp,fp
  803dec:	dfc00117 	ldw	ra,4(sp)
  803df0:	df000017 	ldw	fp,0(sp)
  803df4:	dec00204 	addi	sp,sp,8
  803df8:	f800283a 	ret

00803dfc <validate>:
static
FRESULT validate (   /* FR_OK(0): The object is valid, !=0: Invalid */
   FATFS *fs,     /* Pointer to the file system object */
   uint16_t id        /* Member id of the target object to be checked */
)
{
  803dfc:	defffc04 	addi	sp,sp,-16
  803e00:	dfc00315 	stw	ra,12(sp)
  803e04:	df000215 	stw	fp,8(sp)
  803e08:	df000204 	addi	fp,sp,8
  803e0c:	e13ffe15 	stw	r4,-8(fp)
  803e10:	2805883a 	mov	r2,r5
  803e14:	e0bfff0d 	sth	r2,-4(fp)
   if (!fs || !fs->fs_type || fs->id != id)
  803e18:	e0bffe17 	ldw	r2,-8(fp)
  803e1c:	10000926 	beq	r2,zero,803e44 <validate+0x48>
  803e20:	e0bffe17 	ldw	r2,-8(fp)
  803e24:	10800003 	ldbu	r2,0(r2)
  803e28:	10803fcc 	andi	r2,r2,255
  803e2c:	10000526 	beq	r2,zero,803e44 <validate+0x48>
  803e30:	e0bffe17 	ldw	r2,-8(fp)
  803e34:	1080018b 	ldhu	r2,6(r2)
  803e38:	10ffffcc 	andi	r3,r2,65535
  803e3c:	e0bfff0b 	ldhu	r2,-4(fp)
  803e40:	18800226 	beq	r3,r2,803e4c <validate+0x50>
      return FR_INVALID_OBJECT;
  803e44:	00800244 	movi	r2,9
  803e48:	00000b06 	br	803e78 <validate+0x7c>

   ENTER_FF(fs);     /* Lock file system */

   if (disk_status(fs->drv) & STA_NOINIT)
  803e4c:	e0bffe17 	ldw	r2,-8(fp)
  803e50:	10800043 	ldbu	r2,1(r2)
  803e54:	10803fcc 	andi	r2,r2,255
  803e58:	1009883a 	mov	r4,r2
  803e5c:	0800dc40 	call	800dc4 <ffs_DiskIOStatus>
  803e60:	10803fcc 	andi	r2,r2,255
  803e64:	1080004c 	andi	r2,r2,1
  803e68:	10000226 	beq	r2,zero,803e74 <validate+0x78>
      return FR_NOT_READY;
  803e6c:	008000c4 	movi	r2,3
  803e70:	00000106 	br	803e78 <validate+0x7c>

   return FR_OK;
  803e74:	0005883a 	mov	r2,zero
}
  803e78:	e037883a 	mov	sp,fp
  803e7c:	dfc00117 	ldw	ra,4(sp)
  803e80:	df000017 	ldw	fp,0(sp)
  803e84:	dec00204 	addi	sp,sp,8
  803e88:	f800283a 	ret

00803e8c <f_mount>:

FRESULT f_mount (
   uint8_t vol,      /* Logical drive number to be mounted/unmounted */
   FATFS *fs      /* Pointer to new file system object (NULL for unmount)*/
)
{
  803e8c:	defffc04 	addi	sp,sp,-16
  803e90:	df000315 	stw	fp,12(sp)
  803e94:	df000304 	addi	fp,sp,12
  803e98:	2005883a 	mov	r2,r4
  803e9c:	e17fff15 	stw	r5,-4(fp)
  803ea0:	e0bffe05 	stb	r2,-8(fp)
   FATFS *rfs;


   if (vol >= _VOLUMES)    /* Check if the drive number is valid */
  803ea4:	e0bffe03 	ldbu	r2,-8(fp)
  803ea8:	10000226 	beq	r2,zero,803eb4 <f_mount+0x28>
      return FR_INVALID_DRIVE;
  803eac:	008002c4 	movi	r2,11
  803eb0:	00001706 	br	803f10 <f_mount+0x84>
   rfs = FatFs[vol];       /* Get current fs object */
  803eb4:	e0bffe03 	ldbu	r2,-8(fp)
  803eb8:	1085883a 	add	r2,r2,r2
  803ebc:	1087883a 	add	r3,r2,r2
  803ec0:	d0a76e04 	addi	r2,gp,-25160
  803ec4:	1885883a 	add	r2,r3,r2
  803ec8:	10800017 	ldw	r2,0(r2)
  803ecc:	e0bffd15 	stw	r2,-12(fp)

   if (rfs) {
  803ed0:	e0bffd17 	ldw	r2,-12(fp)
  803ed4:	10000226 	beq	r2,zero,803ee0 <f_mount+0x54>
      clear_lock(rfs);
#endif
#if _FS_REENTRANT          /* Discard sync object of the current volume */
      if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
      rfs->fs_type = 0;    /* Clear old fs object */
  803ed8:	e0bffd17 	ldw	r2,-12(fp)
  803edc:	10000005 	stb	zero,0(r2)
   }

   if (fs) {
  803ee0:	e0bfff17 	ldw	r2,-4(fp)
  803ee4:	10000226 	beq	r2,zero,803ef0 <f_mount+0x64>
      fs->fs_type = 0;     /* Clear new fs object */
  803ee8:	e0bfff17 	ldw	r2,-4(fp)
  803eec:	10000005 	stb	zero,0(r2)
#if _FS_REENTRANT          /* Create sync object for the new volume */
      if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
   }
   FatFs[vol] = fs;        /* Register new fs object */
  803ef0:	e0bffe03 	ldbu	r2,-8(fp)
  803ef4:	1085883a 	add	r2,r2,r2
  803ef8:	1087883a 	add	r3,r2,r2
  803efc:	d0a76e04 	addi	r2,gp,-25160
  803f00:	1885883a 	add	r2,r3,r2
  803f04:	e0ffff17 	ldw	r3,-4(fp)
  803f08:	10c00015 	stw	r3,0(r2)

   return FR_OK;
  803f0c:	0005883a 	mov	r2,zero
}
  803f10:	e037883a 	mov	sp,fp
  803f14:	df000017 	ldw	fp,0(sp)
  803f18:	dec00104 	addi	sp,sp,4
  803f1c:	f800283a 	ret

00803f20 <f_open>:
FRESULT f_open (
   FIL *fp,       /* Pointer to the blank file object */
   const TCHAR *path,   /* Pointer to the file name */
   uint8_t mode         /* Access mode and file open mode flags */
)
{
  803f20:	deffed04 	addi	sp,sp,-76
  803f24:	dfc01215 	stw	ra,72(sp)
  803f28:	df001115 	stw	fp,68(sp)
  803f2c:	df001104 	addi	fp,sp,68
  803f30:	e13ffd15 	stw	r4,-12(fp)
  803f34:	e17ffe15 	stw	r5,-8(fp)
  803f38:	3005883a 	mov	r2,r6
  803f3c:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   fp->fs = 0;       /* Clear file object */
  803f40:	e0bffd17 	ldw	r2,-12(fp)
  803f44:	10000015 	stw	zero,0(r2)

#if !_FS_READONLY
   mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  803f48:	e0bfff03 	ldbu	r2,-4(fp)
  803f4c:	108007cc 	andi	r2,r2,31
  803f50:	e0bfff05 	stb	r2,-4(fp)
   res = chk_mounted(&path, &dj.fs, (uint8_t)(mode & ~FA_READ));
  803f54:	e0bfff03 	ldbu	r2,-4(fp)
  803f58:	10803f8c 	andi	r2,r2,254
  803f5c:	e13ffe04 	addi	r4,fp,-8
  803f60:	e0fff304 	addi	r3,fp,-52
  803f64:	180b883a 	mov	r5,r3
  803f68:	100d883a 	mov	r6,r2
  803f6c:	08034c00 	call	8034c0 <chk_mounted>
  803f70:	e0bfef15 	stw	r2,-68(fp)
#else
   mode &= FA_READ;
   res = chk_mounted(&path, &dj.fs, 0);
#endif
   INIT_BUF(dj);
  803f74:	e0bffa04 	addi	r2,fp,-24
  803f78:	e0bff915 	stw	r2,-28(fp)
   if (res == FR_OK)
  803f7c:	e0bfef17 	ldw	r2,-68(fp)
  803f80:	1000061e 	bne	r2,zero,803f9c <f_open+0x7c>
      res = follow_path(&dj, path); /* Follow the file path */
  803f84:	e0bffe17 	ldw	r2,-8(fp)
  803f88:	e0fff304 	addi	r3,fp,-52
  803f8c:	1809883a 	mov	r4,r3
  803f90:	100b883a 	mov	r5,r2
  803f94:	080317c0 	call	80317c <follow_path>
  803f98:	e0bfef15 	stw	r2,-68(fp)
   dir = dj.dir;
  803f9c:	e0bff817 	ldw	r2,-32(fp)
  803fa0:	e0bff015 	stw	r2,-64(fp)

#if !_FS_READONLY /* R/W configuration */
   if (res == FR_OK) {
  803fa4:	e0bfef17 	ldw	r2,-68(fp)
  803fa8:	1000041e 	bne	r2,zero,803fbc <f_open+0x9c>
      if (!dir)   /* Current dir itself */
  803fac:	e0bff017 	ldw	r2,-64(fp)
  803fb0:	1000021e 	bne	r2,zero,803fbc <f_open+0x9c>
         res = FR_INVALID_NAME;
  803fb4:	00800184 	movi	r2,6
  803fb8:	e0bfef15 	stw	r2,-68(fp)
      else
         res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
   }
   /* Create or Open a file */
   if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  803fbc:	e0bfff03 	ldbu	r2,-4(fp)
  803fc0:	1080070c 	andi	r2,r2,28
  803fc4:	10008826 	beq	r2,zero,8041e8 <f_open+0x2c8>
      uint32_t dw, cl;

      if (res != FR_OK) {              /* No file, create new */
  803fc8:	e0bfef17 	ldw	r2,-68(fp)
  803fcc:	10000d26 	beq	r2,zero,804004 <f_open+0xe4>
         if (res == FR_NO_FILE)        /* There is no file to open, create a new entry */
  803fd0:	e0bfef17 	ldw	r2,-68(fp)
  803fd4:	10800118 	cmpnei	r2,r2,4
  803fd8:	1000041e 	bne	r2,zero,803fec <f_open+0xcc>
#if _FS_SHARE
            res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
            res = dir_register(&dj);
  803fdc:	e0bff304 	addi	r2,fp,-52
  803fe0:	1009883a 	mov	r4,r2
  803fe4:	0802aa80 	call	802aa8 <dir_register>
  803fe8:	e0bfef15 	stw	r2,-68(fp)
#endif
         mode |= FA_CREATE_ALWAYS;     /* File is created */
  803fec:	e0bfff03 	ldbu	r2,-4(fp)
  803ff0:	10800214 	ori	r2,r2,8
  803ff4:	e0bfff05 	stb	r2,-4(fp)
         dir = dj.dir;              /* New entry */
  803ff8:	e0bff817 	ldw	r2,-32(fp)
  803ffc:	e0bff015 	stw	r2,-64(fp)
  804000:	00000e06 	br	80403c <f_open+0x11c>
      }
      else {                        /* Any object is already existing */
         if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {  /* Cannot overwrite it (R/O or DIR) */
  804004:	e0bff017 	ldw	r2,-64(fp)
  804008:	108002c4 	addi	r2,r2,11
  80400c:	10800003 	ldbu	r2,0(r2)
  804010:	10803fcc 	andi	r2,r2,255
  804014:	1080044c 	andi	r2,r2,17
  804018:	10000326 	beq	r2,zero,804028 <f_open+0x108>
            res = FR_DENIED;
  80401c:	008001c4 	movi	r2,7
  804020:	e0bfef15 	stw	r2,-68(fp)
  804024:	00000506 	br	80403c <f_open+0x11c>
         } else {
            if (mode & FA_CREATE_NEW)  /* Cannot create as new file */
  804028:	e0bfff03 	ldbu	r2,-4(fp)
  80402c:	1080010c 	andi	r2,r2,4
  804030:	10000226 	beq	r2,zero,80403c <f_open+0x11c>
               res = FR_EXIST;
  804034:	00800204 	movi	r2,8
  804038:	e0bfef15 	stw	r2,-68(fp)
         }
      }
      if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {   /* Truncate it if overwrite mode */
  80403c:	e0bfef17 	ldw	r2,-68(fp)
  804040:	1000681e 	bne	r2,zero,8041e4 <f_open+0x2c4>
  804044:	e0bfff03 	ldbu	r2,-4(fp)
  804048:	1080020c 	andi	r2,r2,8
  80404c:	10006526 	beq	r2,zero,8041e4 <f_open+0x2c4>
         dw = get_fattime();              /* Created time */
  804050:	080151c0 	call	80151c <get_fattime>
  804054:	e0bff115 	stw	r2,-60(fp)
         ST_DWORD(dir+DIR_CrtTime, dw);
  804058:	e0bff017 	ldw	r2,-64(fp)
  80405c:	10800384 	addi	r2,r2,14
  804060:	e0fff117 	ldw	r3,-60(fp)
  804064:	10c00005 	stb	r3,0(r2)
  804068:	e0bff017 	ldw	r2,-64(fp)
  80406c:	108003c4 	addi	r2,r2,15
  804070:	e0fff117 	ldw	r3,-60(fp)
  804074:	18ffffcc 	andi	r3,r3,65535
  804078:	1806d23a 	srli	r3,r3,8
  80407c:	10c00005 	stb	r3,0(r2)
  804080:	e0bff017 	ldw	r2,-64(fp)
  804084:	10800404 	addi	r2,r2,16
  804088:	e0fff117 	ldw	r3,-60(fp)
  80408c:	1806d43a 	srli	r3,r3,16
  804090:	10c00005 	stb	r3,0(r2)
  804094:	e0bff017 	ldw	r2,-64(fp)
  804098:	10800444 	addi	r2,r2,17
  80409c:	e0fff117 	ldw	r3,-60(fp)
  8040a0:	1806d63a 	srli	r3,r3,24
  8040a4:	10c00005 	stb	r3,0(r2)
         dir[DIR_Attr] = 0;               /* Reset attribute */
  8040a8:	e0bff017 	ldw	r2,-64(fp)
  8040ac:	108002c4 	addi	r2,r2,11
  8040b0:	10000005 	stb	zero,0(r2)
         ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
  8040b4:	e0bff017 	ldw	r2,-64(fp)
  8040b8:	10800704 	addi	r2,r2,28
  8040bc:	10000005 	stb	zero,0(r2)
  8040c0:	e0bff017 	ldw	r2,-64(fp)
  8040c4:	10800744 	addi	r2,r2,29
  8040c8:	10000005 	stb	zero,0(r2)
  8040cc:	e0bff017 	ldw	r2,-64(fp)
  8040d0:	10800784 	addi	r2,r2,30
  8040d4:	10000005 	stb	zero,0(r2)
  8040d8:	e0bff017 	ldw	r2,-64(fp)
  8040dc:	108007c4 	addi	r2,r2,31
  8040e0:	10000005 	stb	zero,0(r2)
         cl = LD_CLUST(dir);              /* Get start cluster */
  8040e4:	e0bff017 	ldw	r2,-64(fp)
  8040e8:	10800544 	addi	r2,r2,21
  8040ec:	10800003 	ldbu	r2,0(r2)
  8040f0:	10803fcc 	andi	r2,r2,255
  8040f4:	1004923a 	slli	r2,r2,8
  8040f8:	1007883a 	mov	r3,r2
  8040fc:	e0bff017 	ldw	r2,-64(fp)
  804100:	10800504 	addi	r2,r2,20
  804104:	10800003 	ldbu	r2,0(r2)
  804108:	10803fcc 	andi	r2,r2,255
  80410c:	1884b03a 	or	r2,r3,r2
  804110:	10bfffcc 	andi	r2,r2,65535
  804114:	1006943a 	slli	r3,r2,16
  804118:	e0bff017 	ldw	r2,-64(fp)
  80411c:	108006c4 	addi	r2,r2,27
  804120:	10800003 	ldbu	r2,0(r2)
  804124:	10803fcc 	andi	r2,r2,255
  804128:	1004923a 	slli	r2,r2,8
  80412c:	1009883a 	mov	r4,r2
  804130:	e0bff017 	ldw	r2,-64(fp)
  804134:	10800684 	addi	r2,r2,26
  804138:	10800003 	ldbu	r2,0(r2)
  80413c:	10803fcc 	andi	r2,r2,255
  804140:	2084b03a 	or	r2,r4,r2
  804144:	10bfffcc 	andi	r2,r2,65535
  804148:	1884b03a 	or	r2,r3,r2
  80414c:	e0bff215 	stw	r2,-56(fp)
         ST_CLUST(dir, 0);             /* cluster = 0 */
  804150:	e0bff017 	ldw	r2,-64(fp)
  804154:	10800684 	addi	r2,r2,26
  804158:	10000005 	stb	zero,0(r2)
  80415c:	e0bff017 	ldw	r2,-64(fp)
  804160:	108006c4 	addi	r2,r2,27
  804164:	10000005 	stb	zero,0(r2)
  804168:	e0bff017 	ldw	r2,-64(fp)
  80416c:	10800504 	addi	r2,r2,20
  804170:	10000005 	stb	zero,0(r2)
  804174:	e0bff017 	ldw	r2,-64(fp)
  804178:	10800544 	addi	r2,r2,21
  80417c:	10000005 	stb	zero,0(r2)
         dj.fs->wflag = 1;
  804180:	e0bff317 	ldw	r2,-52(fp)
  804184:	00c00044 	movi	r3,1
  804188:	10c00105 	stb	r3,4(r2)
         if (cl) {                     /* Remove the cluster chain if exist */
  80418c:	e0bff217 	ldw	r2,-56(fp)
  804190:	10001426 	beq	r2,zero,8041e4 <f_open+0x2c4>
            dw = dj.fs->winsect;
  804194:	e0bff317 	ldw	r2,-52(fp)
  804198:	10800b17 	ldw	r2,44(r2)
  80419c:	e0bff115 	stw	r2,-60(fp)
            res = remove_chain(dj.fs, cl);
  8041a0:	e0bff317 	ldw	r2,-52(fp)
  8041a4:	1009883a 	mov	r4,r2
  8041a8:	e17ff217 	ldw	r5,-56(fp)
  8041ac:	08020ec0 	call	8020ec <remove_chain>
  8041b0:	e0bfef15 	stw	r2,-68(fp)
            if (res == FR_OK) {
  8041b4:	e0bfef17 	ldw	r2,-68(fp)
  8041b8:	10000a1e 	bne	r2,zero,8041e4 <f_open+0x2c4>
               dj.fs->last_clust = cl - 1;   /* Reuse the cluster hole */
  8041bc:	e0bff317 	ldw	r2,-52(fp)
  8041c0:	e0fff217 	ldw	r3,-56(fp)
  8041c4:	18ffffc4 	addi	r3,r3,-1
  8041c8:	10c00315 	stw	r3,12(r2)
               res = move_window(dj.fs, dw);
  8041cc:	e0bff317 	ldw	r2,-52(fp)
  8041d0:	1009883a 	mov	r4,r2
  8041d4:	e17ff117 	ldw	r5,-60(fp)
  8041d8:	08017140 	call	801714 <move_window>
  8041dc:	e0bfef15 	stw	r2,-68(fp)
  8041e0:	00001706 	br	804240 <f_open+0x320>
  8041e4:	00001606 	br	804240 <f_open+0x320>
            }
         }
      }
   }
   else {   /* Open an existing file */
      if (res == FR_OK) {                 /* Follow succeeded */
  8041e8:	e0bfef17 	ldw	r2,-68(fp)
  8041ec:	1000141e 	bne	r2,zero,804240 <f_open+0x320>
         if (dir[DIR_Attr] & AM_DIR) {    /* It is a directory */
  8041f0:	e0bff017 	ldw	r2,-64(fp)
  8041f4:	108002c4 	addi	r2,r2,11
  8041f8:	10800003 	ldbu	r2,0(r2)
  8041fc:	10803fcc 	andi	r2,r2,255
  804200:	1080040c 	andi	r2,r2,16
  804204:	10000326 	beq	r2,zero,804214 <f_open+0x2f4>
            res = FR_NO_FILE;
  804208:	00800104 	movi	r2,4
  80420c:	e0bfef15 	stw	r2,-68(fp)
  804210:	00000b06 	br	804240 <f_open+0x320>
         } else {
            if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  804214:	e0bfff03 	ldbu	r2,-4(fp)
  804218:	1080008c 	andi	r2,r2,2
  80421c:	10000826 	beq	r2,zero,804240 <f_open+0x320>
  804220:	e0bff017 	ldw	r2,-64(fp)
  804224:	108002c4 	addi	r2,r2,11
  804228:	10800003 	ldbu	r2,0(r2)
  80422c:	10803fcc 	andi	r2,r2,255
  804230:	1080004c 	andi	r2,r2,1
  804234:	10000226 	beq	r2,zero,804240 <f_open+0x320>
               res = FR_DENIED;
  804238:	008001c4 	movi	r2,7
  80423c:	e0bfef15 	stw	r2,-68(fp)
         }
      }
   }
   if (res == FR_OK) {
  804240:	e0bfef17 	ldw	r2,-68(fp)
  804244:	10000d1e 	bne	r2,zero,80427c <f_open+0x35c>
      if (mode & FA_CREATE_ALWAYS)        /* Set file change flag if created or overwritten */
  804248:	e0bfff03 	ldbu	r2,-4(fp)
  80424c:	1080020c 	andi	r2,r2,8
  804250:	10000326 	beq	r2,zero,804260 <f_open+0x340>
         mode |= FA__WRITTEN;
  804254:	e0bfff03 	ldbu	r2,-4(fp)
  804258:	10800814 	ori	r2,r2,32
  80425c:	e0bfff05 	stb	r2,-4(fp)
      fp->dir_sect = dj.fs->winsect;         /* Pointer to the directory entry */
  804260:	e0bff317 	ldw	r2,-52(fp)
  804264:	10c00b17 	ldw	r3,44(r2)
  804268:	e0bffd17 	ldw	r2,-12(fp)
  80426c:	10c00715 	stw	r3,28(r2)
      fp->dir_ptr = dir;
  804270:	e0bffd17 	ldw	r2,-12(fp)
  804274:	e0fff017 	ldw	r3,-64(fp)
  804278:	10c00815 	stw	r3,32(r2)
      }
   }
#endif
   FREE_BUF();

   if (res == FR_OK) {
  80427c:	e0bfef17 	ldw	r2,-68(fp)
  804280:	1000421e 	bne	r2,zero,80438c <f_open+0x46c>
      fp->flag = mode;              /* File access mode */
  804284:	e0bffd17 	ldw	r2,-12(fp)
  804288:	e0ffff03 	ldbu	r3,-4(fp)
  80428c:	10c00185 	stb	r3,6(r2)
      fp->sclust = LD_CLUST(dir);         /* File start cluster */
  804290:	e0bff017 	ldw	r2,-64(fp)
  804294:	10800544 	addi	r2,r2,21
  804298:	10800003 	ldbu	r2,0(r2)
  80429c:	10803fcc 	andi	r2,r2,255
  8042a0:	1004923a 	slli	r2,r2,8
  8042a4:	1007883a 	mov	r3,r2
  8042a8:	e0bff017 	ldw	r2,-64(fp)
  8042ac:	10800504 	addi	r2,r2,20
  8042b0:	10800003 	ldbu	r2,0(r2)
  8042b4:	10803fcc 	andi	r2,r2,255
  8042b8:	1884b03a 	or	r2,r3,r2
  8042bc:	10bfffcc 	andi	r2,r2,65535
  8042c0:	1006943a 	slli	r3,r2,16
  8042c4:	e0bff017 	ldw	r2,-64(fp)
  8042c8:	108006c4 	addi	r2,r2,27
  8042cc:	10800003 	ldbu	r2,0(r2)
  8042d0:	10803fcc 	andi	r2,r2,255
  8042d4:	1004923a 	slli	r2,r2,8
  8042d8:	1009883a 	mov	r4,r2
  8042dc:	e0bff017 	ldw	r2,-64(fp)
  8042e0:	10800684 	addi	r2,r2,26
  8042e4:	10800003 	ldbu	r2,0(r2)
  8042e8:	10803fcc 	andi	r2,r2,255
  8042ec:	2084b03a 	or	r2,r4,r2
  8042f0:	10bfffcc 	andi	r2,r2,65535
  8042f4:	1886b03a 	or	r3,r3,r2
  8042f8:	e0bffd17 	ldw	r2,-12(fp)
  8042fc:	10c00415 	stw	r3,16(r2)
      fp->fsize = LD_DWORD(dir+DIR_FileSize);   /* File size */
  804300:	e0bff017 	ldw	r2,-64(fp)
  804304:	108007c4 	addi	r2,r2,31
  804308:	10800003 	ldbu	r2,0(r2)
  80430c:	10803fcc 	andi	r2,r2,255
  804310:	1006963a 	slli	r3,r2,24
  804314:	e0bff017 	ldw	r2,-64(fp)
  804318:	10800784 	addi	r2,r2,30
  80431c:	10800003 	ldbu	r2,0(r2)
  804320:	10803fcc 	andi	r2,r2,255
  804324:	1004943a 	slli	r2,r2,16
  804328:	1884b03a 	or	r2,r3,r2
  80432c:	e0fff017 	ldw	r3,-64(fp)
  804330:	18c00744 	addi	r3,r3,29
  804334:	18c00003 	ldbu	r3,0(r3)
  804338:	18c03fcc 	andi	r3,r3,255
  80433c:	1806923a 	slli	r3,r3,8
  804340:	10c6b03a 	or	r3,r2,r3
  804344:	e0bff017 	ldw	r2,-64(fp)
  804348:	10800704 	addi	r2,r2,28
  80434c:	10800003 	ldbu	r2,0(r2)
  804350:	10803fcc 	andi	r2,r2,255
  804354:	1886b03a 	or	r3,r3,r2
  804358:	e0bffd17 	ldw	r2,-12(fp)
  80435c:	10c00315 	stw	r3,12(r2)
      fp->fptr = 0;                 /* File pointer */
  804360:	e0bffd17 	ldw	r2,-12(fp)
  804364:	10000215 	stw	zero,8(r2)
      fp->dsect = 0;
  804368:	e0bffd17 	ldw	r2,-12(fp)
  80436c:	10000615 	stw	zero,24(r2)
#if _USE_FASTSEEK
      fp->cltbl = 0;                /* Normal seek mode */
#endif
      fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
  804370:	e0fff317 	ldw	r3,-52(fp)
  804374:	e0bffd17 	ldw	r2,-12(fp)
  804378:	10c00015 	stw	r3,0(r2)
  80437c:	e0bff317 	ldw	r2,-52(fp)
  804380:	10c0018b 	ldhu	r3,6(r2)
  804384:	e0bffd17 	ldw	r2,-12(fp)
  804388:	10c0010d 	sth	r3,4(r2)
   }

   LEAVE_FF(dj.fs, res);
  80438c:	e0bfef17 	ldw	r2,-68(fp)
}
  804390:	e037883a 	mov	sp,fp
  804394:	dfc00117 	ldw	ra,4(sp)
  804398:	df000017 	ldw	fp,0(sp)
  80439c:	dec00204 	addi	sp,sp,8
  8043a0:	f800283a 	ret

008043a4 <f_read>:
   FIL *fp,       /* Pointer to the file object */
   void *buff,    /* Pointer to data buffer */
   uint32_t btr,      /* Number of bytes to read */
   uint32_t *br    /* Pointer to number of bytes read */
)
{
  8043a4:	defff204 	addi	sp,sp,-56
  8043a8:	dfc00d15 	stw	ra,52(sp)
  8043ac:	df000c15 	stw	fp,48(sp)
  8043b0:	df000c04 	addi	fp,sp,48
  8043b4:	e13ffc15 	stw	r4,-16(fp)
  8043b8:	e17ffd15 	stw	r5,-12(fp)
  8043bc:	e1bffe15 	stw	r6,-8(fp)
  8043c0:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect, remain;
   uint32_t rcnt, cc;
   uint8_t csect, *rbuff = buff;
  8043c4:	e0bffd17 	ldw	r2,-12(fp)
  8043c8:	e0bff715 	stw	r2,-36(fp)


   *br = 0; /* Initialize byte counter */
  8043cc:	e0bfff17 	ldw	r2,-4(fp)
  8043d0:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);           /* Check validity */
  8043d4:	e0bffc17 	ldw	r2,-16(fp)
  8043d8:	10c00017 	ldw	r3,0(r2)
  8043dc:	e0bffc17 	ldw	r2,-16(fp)
  8043e0:	1080010b 	ldhu	r2,4(r2)
  8043e4:	10bfffcc 	andi	r2,r2,65535
  8043e8:	1809883a 	mov	r4,r3
  8043ec:	100b883a 	mov	r5,r2
  8043f0:	0803dfc0 	call	803dfc <validate>
  8043f4:	e0bff815 	stw	r2,-32(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  8043f8:	e0bff817 	ldw	r2,-32(fp)
  8043fc:	10000226 	beq	r2,zero,804408 <f_read+0x64>
  804400:	e0bff817 	ldw	r2,-32(fp)
  804404:	00011b06 	br	804874 <f_read+0x4d0>
   if (fp->flag & FA__ERROR)              /* Aborted file? */
  804408:	e0bffc17 	ldw	r2,-16(fp)
  80440c:	10800183 	ldbu	r2,6(r2)
  804410:	10803fcc 	andi	r2,r2,255
  804414:	1080201c 	xori	r2,r2,128
  804418:	10bfe004 	addi	r2,r2,-128
  80441c:	1000020e 	bge	r2,zero,804428 <f_read+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  804420:	00800084 	movi	r2,2
  804424:	00011306 	br	804874 <f_read+0x4d0>
   if (!(fp->flag & FA_READ))                /* Check access mode */
  804428:	e0bffc17 	ldw	r2,-16(fp)
  80442c:	10800183 	ldbu	r2,6(r2)
  804430:	10803fcc 	andi	r2,r2,255
  804434:	1080004c 	andi	r2,r2,1
  804438:	1000021e 	bne	r2,zero,804444 <f_read+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
  80443c:	008001c4 	movi	r2,7
  804440:	00010c06 	br	804874 <f_read+0x4d0>
   remain = fp->fsize - fp->fptr;
  804444:	e0bffc17 	ldw	r2,-16(fp)
  804448:	10c00317 	ldw	r3,12(r2)
  80444c:	e0bffc17 	ldw	r2,-16(fp)
  804450:	10800217 	ldw	r2,8(r2)
  804454:	1885c83a 	sub	r2,r3,r2
  804458:	e0bff915 	stw	r2,-28(fp)
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */
  80445c:	e0bffe17 	ldw	r2,-8(fp)
  804460:	e0fff917 	ldw	r3,-28(fp)
  804464:	1880022e 	bgeu	r3,r2,804470 <f_read+0xcc>
  804468:	e0bff917 	ldw	r2,-28(fp)
  80446c:	e0bffe15 	stw	r2,-8(fp)

   for ( ;  btr;                       /* Repeat until all data read */
  804470:	0000fd06 	br	804868 <f_read+0x4c4>
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) {    /* On the sector boundary? */
  804474:	e0bffc17 	ldw	r2,-16(fp)
  804478:	10800217 	ldw	r2,8(r2)
  80447c:	10807fcc 	andi	r2,r2,511
  804480:	1000d01e 	bne	r2,zero,8047c4 <f_read+0x420>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
  804484:	e0bffc17 	ldw	r2,-16(fp)
  804488:	10800217 	ldw	r2,8(r2)
  80448c:	1004d27a 	srli	r2,r2,9
  804490:	1007883a 	mov	r3,r2
  804494:	e0bffc17 	ldw	r2,-16(fp)
  804498:	10800017 	ldw	r2,0(r2)
  80449c:	10800083 	ldbu	r2,2(r2)
  8044a0:	10bfffc4 	addi	r2,r2,-1
  8044a4:	1884703a 	and	r2,r3,r2
  8044a8:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {                 /* On the cluster boundary? */
  8044ac:	e0bffa03 	ldbu	r2,-24(fp)
  8044b0:	10002a1e 	bne	r2,zero,80455c <f_read+0x1b8>
            if (fp->fptr == 0) {       /* On the top of the file? */
  8044b4:	e0bffc17 	ldw	r2,-16(fp)
  8044b8:	10800217 	ldw	r2,8(r2)
  8044bc:	1000041e 	bne	r2,zero,8044d0 <f_read+0x12c>
               clst = fp->sclust;         /* Follow from the origin */
  8044c0:	e0bffc17 	ldw	r2,-16(fp)
  8044c4:	10800417 	ldw	r2,16(r2)
  8044c8:	e0bff415 	stw	r2,-48(fp)
  8044cc:	00000806 	br	8044f0 <f_read+0x14c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = get_fat(fp->fs, fp->clust);  /* Follow cluster chain on the FAT */
  8044d0:	e0bffc17 	ldw	r2,-16(fp)
  8044d4:	10c00017 	ldw	r3,0(r2)
  8044d8:	e0bffc17 	ldw	r2,-16(fp)
  8044dc:	10800517 	ldw	r2,20(r2)
  8044e0:	1809883a 	mov	r4,r3
  8044e4:	100b883a 	mov	r5,r2
  8044e8:	0801af80 	call	801af8 <get_fat>
  8044ec:	e0bff415 	stw	r2,-48(fp)
            }
            if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  8044f0:	e0bff417 	ldw	r2,-48(fp)
  8044f4:	108000a8 	cmpgeui	r2,r2,2
  8044f8:	1000091e 	bne	r2,zero,804520 <f_read+0x17c>
  8044fc:	e0bffc17 	ldw	r2,-16(fp)
  804500:	10c00183 	ldbu	r3,6(r2)
  804504:	00bfe004 	movi	r2,-128
  804508:	1884b03a 	or	r2,r3,r2
  80450c:	1007883a 	mov	r3,r2
  804510:	e0bffc17 	ldw	r2,-16(fp)
  804514:	10c00185 	stb	r3,6(r2)
  804518:	00800084 	movi	r2,2
  80451c:	0000d506 	br	804874 <f_read+0x4d0>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  804520:	e0bff417 	ldw	r2,-48(fp)
  804524:	10bfffd8 	cmpnei	r2,r2,-1
  804528:	1000091e 	bne	r2,zero,804550 <f_read+0x1ac>
  80452c:	e0bffc17 	ldw	r2,-16(fp)
  804530:	10c00183 	ldbu	r3,6(r2)
  804534:	00bfe004 	movi	r2,-128
  804538:	1884b03a 	or	r2,r3,r2
  80453c:	1007883a 	mov	r3,r2
  804540:	e0bffc17 	ldw	r2,-16(fp)
  804544:	10c00185 	stb	r3,6(r2)
  804548:	00800044 	movi	r2,1
  80454c:	0000c906 	br	804874 <f_read+0x4d0>
            fp->clust = clst;          /* Update current cluster */
  804550:	e0bffc17 	ldw	r2,-16(fp)
  804554:	e0fff417 	ldw	r3,-48(fp)
  804558:	10c00515 	stw	r3,20(r2)
         }
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
  80455c:	e0bffc17 	ldw	r2,-16(fp)
  804560:	10c00017 	ldw	r3,0(r2)
  804564:	e0bffc17 	ldw	r2,-16(fp)
  804568:	10800517 	ldw	r2,20(r2)
  80456c:	1809883a 	mov	r4,r3
  804570:	100b883a 	mov	r5,r2
  804574:	0801a8c0 	call	801a8c <clust2sect>
  804578:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
  80457c:	e0bffb17 	ldw	r2,-20(fp)
  804580:	1000091e 	bne	r2,zero,8045a8 <f_read+0x204>
  804584:	e0bffc17 	ldw	r2,-16(fp)
  804588:	10c00183 	ldbu	r3,6(r2)
  80458c:	00bfe004 	movi	r2,-128
  804590:	1884b03a 	or	r2,r3,r2
  804594:	1007883a 	mov	r3,r2
  804598:	e0bffc17 	ldw	r2,-16(fp)
  80459c:	10c00185 	stb	r3,6(r2)
  8045a0:	00800084 	movi	r2,2
  8045a4:	0000b306 	br	804874 <f_read+0x4d0>
         sect += csect;
  8045a8:	e0bffa03 	ldbu	r2,-24(fp)
  8045ac:	e0fffb17 	ldw	r3,-20(fp)
  8045b0:	1885883a 	add	r2,r3,r2
  8045b4:	e0bffb15 	stw	r2,-20(fp)
         cc = btr / SS(fp->fs);           /* When remaining bytes >= sector size, */
  8045b8:	e0bffe17 	ldw	r2,-8(fp)
  8045bc:	1004d27a 	srli	r2,r2,9
  8045c0:	e0bff615 	stw	r2,-40(fp)
         if (cc) {                     /* Read maximum contiguous sectors directly */
  8045c4:	e0bff617 	ldw	r2,-40(fp)
  8045c8:	10004026 	beq	r2,zero,8046cc <f_read+0x328>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
  8045cc:	e0fffa03 	ldbu	r3,-24(fp)
  8045d0:	e0bff617 	ldw	r2,-40(fp)
  8045d4:	1885883a 	add	r2,r3,r2
  8045d8:	e0fffc17 	ldw	r3,-16(fp)
  8045dc:	18c00017 	ldw	r3,0(r3)
  8045e0:	18c00083 	ldbu	r3,2(r3)
  8045e4:	18c03fcc 	andi	r3,r3,255
  8045e8:	1880072e 	bgeu	r3,r2,804608 <f_read+0x264>
               cc = fp->fs->csize - csect;
  8045ec:	e0bffc17 	ldw	r2,-16(fp)
  8045f0:	10800017 	ldw	r2,0(r2)
  8045f4:	10800083 	ldbu	r2,2(r2)
  8045f8:	10c03fcc 	andi	r3,r2,255
  8045fc:	e0bffa03 	ldbu	r2,-24(fp)
  804600:	1885c83a 	sub	r2,r3,r2
  804604:	e0bff615 	stw	r2,-40(fp)
            if (disk_read(fp->fs->drv, rbuff, sect, (uint8_t)cc) != RES_OK)
  804608:	e0bffc17 	ldw	r2,-16(fp)
  80460c:	10800017 	ldw	r2,0(r2)
  804610:	10800043 	ldbu	r2,1(r2)
  804614:	10c03fcc 	andi	r3,r2,255
  804618:	e0bff617 	ldw	r2,-40(fp)
  80461c:	10803fcc 	andi	r2,r2,255
  804620:	1809883a 	mov	r4,r3
  804624:	e17ff717 	ldw	r5,-36(fp)
  804628:	e1bffb17 	ldw	r6,-20(fp)
  80462c:	100f883a 	mov	r7,r2
  804630:	0800dec0 	call	800dec <ffs_DiskIORead>
  804634:	10000926 	beq	r2,zero,80465c <f_read+0x2b8>
               ABORT(fp->fs, FR_DISK_ERR);
  804638:	e0bffc17 	ldw	r2,-16(fp)
  80463c:	10c00183 	ldbu	r3,6(r2)
  804640:	00bfe004 	movi	r2,-128
  804644:	1884b03a 	or	r2,r3,r2
  804648:	1007883a 	mov	r3,r2
  80464c:	e0bffc17 	ldw	r2,-16(fp)
  804650:	10c00185 	stb	r3,6(r2)
  804654:	00800044 	movi	r2,1
  804658:	00008606 	br	804874 <f_read+0x4d0>
#if !_FS_READONLY && _FS_MINIMIZE <= 2       /* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
            if (fp->fs->wflag && fp->fs->winsect - sect < cc)
               mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
            if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
  80465c:	e0bffc17 	ldw	r2,-16(fp)
  804660:	10800183 	ldbu	r2,6(r2)
  804664:	10803fcc 	andi	r2,r2,255
  804668:	1080100c 	andi	r2,r2,64
  80466c:	10001326 	beq	r2,zero,8046bc <f_read+0x318>
  804670:	e0bffc17 	ldw	r2,-16(fp)
  804674:	10c00617 	ldw	r3,24(r2)
  804678:	e0bffb17 	ldw	r2,-20(fp)
  80467c:	1887c83a 	sub	r3,r3,r2
  804680:	e0bff617 	ldw	r2,-40(fp)
  804684:	18800d2e 	bgeu	r3,r2,8046bc <f_read+0x318>
               mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
  804688:	e0bffc17 	ldw	r2,-16(fp)
  80468c:	10c00617 	ldw	r3,24(r2)
  804690:	e0bffb17 	ldw	r2,-20(fp)
  804694:	1885c83a 	sub	r2,r3,r2
  804698:	1004927a 	slli	r2,r2,9
  80469c:	e0fff717 	ldw	r3,-36(fp)
  8046a0:	1887883a 	add	r3,r3,r2
  8046a4:	e0bffc17 	ldw	r2,-16(fp)
  8046a8:	10800904 	addi	r2,r2,36
  8046ac:	1809883a 	mov	r4,r3
  8046b0:	100b883a 	mov	r5,r2
  8046b4:	01808004 	movi	r6,512
  8046b8:	08015480 	call	801548 <mem_cpy>
#endif
#endif
            rcnt = SS(fp->fs) * cc;       /* Number of bytes transferred */
  8046bc:	e0bff617 	ldw	r2,-40(fp)
  8046c0:	1004927a 	slli	r2,r2,9
  8046c4:	e0bff515 	stw	r2,-44(fp)
            continue;
  8046c8:	00005306 	br	804818 <f_read+0x474>
         }
#if !_FS_TINY
         if (fp->dsect != sect) {         /* Load data sector if not in cache */
  8046cc:	e0bffc17 	ldw	r2,-16(fp)
  8046d0:	10c00617 	ldw	r3,24(r2)
  8046d4:	e0bffb17 	ldw	r2,-20(fp)
  8046d8:	18803726 	beq	r3,r2,8047b8 <f_read+0x414>
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {      /* Write-back dirty sector cache */
  8046dc:	e0bffc17 	ldw	r2,-16(fp)
  8046e0:	10800183 	ldbu	r2,6(r2)
  8046e4:	10803fcc 	andi	r2,r2,255
  8046e8:	1080100c 	andi	r2,r2,64
  8046ec:	10001d26 	beq	r2,zero,804764 <f_read+0x3c0>
               if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  8046f0:	e0bffc17 	ldw	r2,-16(fp)
  8046f4:	10800017 	ldw	r2,0(r2)
  8046f8:	10800043 	ldbu	r2,1(r2)
  8046fc:	11003fcc 	andi	r4,r2,255
  804700:	e0bffc17 	ldw	r2,-16(fp)
  804704:	10c00904 	addi	r3,r2,36
  804708:	e0bffc17 	ldw	r2,-16(fp)
  80470c:	10800617 	ldw	r2,24(r2)
  804710:	180b883a 	mov	r5,r3
  804714:	100d883a 	mov	r6,r2
  804718:	01c00044 	movi	r7,1
  80471c:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  804720:	10000926 	beq	r2,zero,804748 <f_read+0x3a4>
                  ABORT(fp->fs, FR_DISK_ERR);
  804724:	e0bffc17 	ldw	r2,-16(fp)
  804728:	10c00183 	ldbu	r3,6(r2)
  80472c:	00bfe004 	movi	r2,-128
  804730:	1884b03a 	or	r2,r3,r2
  804734:	1007883a 	mov	r3,r2
  804738:	e0bffc17 	ldw	r2,-16(fp)
  80473c:	10c00185 	stb	r3,6(r2)
  804740:	00800044 	movi	r2,1
  804744:	00004b06 	br	804874 <f_read+0x4d0>
               fp->flag &= ~FA__DIRTY;
  804748:	e0bffc17 	ldw	r2,-16(fp)
  80474c:	10c00183 	ldbu	r3,6(r2)
  804750:	00bfefc4 	movi	r2,-65
  804754:	1884703a 	and	r2,r3,r2
  804758:	1007883a 	mov	r3,r2
  80475c:	e0bffc17 	ldw	r2,-16(fp)
  804760:	10c00185 	stb	r3,6(r2)
            }
#endif
            if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)  /* Fill sector cache */
  804764:	e0bffc17 	ldw	r2,-16(fp)
  804768:	10800017 	ldw	r2,0(r2)
  80476c:	10800043 	ldbu	r2,1(r2)
  804770:	10c03fcc 	andi	r3,r2,255
  804774:	e0bffc17 	ldw	r2,-16(fp)
  804778:	10800904 	addi	r2,r2,36
  80477c:	1809883a 	mov	r4,r3
  804780:	100b883a 	mov	r5,r2
  804784:	e1bffb17 	ldw	r6,-20(fp)
  804788:	01c00044 	movi	r7,1
  80478c:	0800dec0 	call	800dec <ffs_DiskIORead>
  804790:	10000926 	beq	r2,zero,8047b8 <f_read+0x414>
               ABORT(fp->fs, FR_DISK_ERR);
  804794:	e0bffc17 	ldw	r2,-16(fp)
  804798:	10c00183 	ldbu	r3,6(r2)
  80479c:	00bfe004 	movi	r2,-128
  8047a0:	1884b03a 	or	r2,r3,r2
  8047a4:	1007883a 	mov	r3,r2
  8047a8:	e0bffc17 	ldw	r2,-16(fp)
  8047ac:	10c00185 	stb	r3,6(r2)
  8047b0:	00800044 	movi	r2,1
  8047b4:	00002f06 	br	804874 <f_read+0x4d0>
         }
#endif
         fp->dsect = sect;
  8047b8:	e0bffc17 	ldw	r2,-16(fp)
  8047bc:	e0fffb17 	ldw	r3,-20(fp)
  8047c0:	10c00615 	stw	r3,24(r2)
      }
      rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs)); /* Get partial sector data from sector buffer */
  8047c4:	e0bffc17 	ldw	r2,-16(fp)
  8047c8:	10800217 	ldw	r2,8(r2)
  8047cc:	10807fcc 	andi	r2,r2,511
  8047d0:	00c08004 	movi	r3,512
  8047d4:	1885c83a 	sub	r2,r3,r2
  8047d8:	e0bff515 	stw	r2,-44(fp)
      if (rcnt > btr) rcnt = btr;
  8047dc:	e0bff517 	ldw	r2,-44(fp)
  8047e0:	e0fffe17 	ldw	r3,-8(fp)
  8047e4:	1880022e 	bgeu	r3,r2,8047f0 <f_read+0x44c>
  8047e8:	e0bffe17 	ldw	r2,-8(fp)
  8047ec:	e0bff515 	stw	r2,-44(fp)
#if _FS_TINY
      if (move_window(fp->fs, fp->dsect))    /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);  /* Pick partial sector */
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
  8047f0:	e0bffc17 	ldw	r2,-16(fp)
  8047f4:	10800217 	ldw	r2,8(r2)
  8047f8:	10807fcc 	andi	r2,r2,511
  8047fc:	10800904 	addi	r2,r2,36
  804800:	e0fffc17 	ldw	r3,-16(fp)
  804804:	1885883a 	add	r2,r3,r2
  804808:	e13ff717 	ldw	r4,-36(fp)
  80480c:	100b883a 	mov	r5,r2
  804810:	e1bff517 	ldw	r6,-44(fp)
  804814:	08015480 	call	801548 <mem_cpy>
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  804818:	e0fff717 	ldw	r3,-36(fp)
  80481c:	e0bff517 	ldw	r2,-44(fp)
  804820:	1885883a 	add	r2,r3,r2
  804824:	e0bff715 	stw	r2,-36(fp)
  804828:	e0bffc17 	ldw	r2,-16(fp)
  80482c:	10c00217 	ldw	r3,8(r2)
  804830:	e0bff517 	ldw	r2,-44(fp)
  804834:	1887883a 	add	r3,r3,r2
  804838:	e0bffc17 	ldw	r2,-16(fp)
  80483c:	10c00215 	stw	r3,8(r2)
  804840:	e0bfff17 	ldw	r2,-4(fp)
  804844:	10c00017 	ldw	r3,0(r2)
  804848:	e0bff517 	ldw	r2,-44(fp)
  80484c:	1887883a 	add	r3,r3,r2
  804850:	e0bfff17 	ldw	r2,-4(fp)
  804854:	10c00015 	stw	r3,0(r2)
  804858:	e0fffe17 	ldw	r3,-8(fp)
  80485c:	e0bff517 	ldw	r2,-44(fp)
  804860:	1885c83a 	sub	r2,r3,r2
  804864:	e0bffe15 	stw	r2,-8(fp)
   if (!(fp->flag & FA_READ))                /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
  804868:	e0bffe17 	ldw	r2,-8(fp)
  80486c:	103f011e 	bne	r2,zero,804474 <__alt_data_end+0xff804474>
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
#endif
   }

   LEAVE_FF(fp->fs, FR_OK);
  804870:	0005883a 	mov	r2,zero
}
  804874:	e037883a 	mov	sp,fp
  804878:	dfc00117 	ldw	ra,4(sp)
  80487c:	df000017 	ldw	fp,0(sp)
  804880:	dec00204 	addi	sp,sp,8
  804884:	f800283a 	ret

00804888 <f_write>:
   FIL *fp,       /* Pointer to the file object */
   const void *buff, /* Pointer to the data to be written */
   uint32_t btw,         /* Number of bytes to write */
   uint32_t *bw       /* Pointer to number of bytes written */
)
{
  804888:	defff304 	addi	sp,sp,-52
  80488c:	dfc00c15 	stw	ra,48(sp)
  804890:	df000b15 	stw	fp,44(sp)
  804894:	df000b04 	addi	fp,sp,44
  804898:	e13ffc15 	stw	r4,-16(fp)
  80489c:	e17ffd15 	stw	r5,-12(fp)
  8048a0:	e1bffe15 	stw	r6,-8(fp)
  8048a4:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect;
   uint32_t wcnt, cc;
   const uint8_t *wbuff = buff;
  8048a8:	e0bffd17 	ldw	r2,-12(fp)
  8048ac:	e0bff815 	stw	r2,-32(fp)
   uint8_t csect;


   *bw = 0; /* Initialize byte counter */
  8048b0:	e0bfff17 	ldw	r2,-4(fp)
  8048b4:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);        /* Check validity */
  8048b8:	e0bffc17 	ldw	r2,-16(fp)
  8048bc:	10c00017 	ldw	r3,0(r2)
  8048c0:	e0bffc17 	ldw	r2,-16(fp)
  8048c4:	1080010b 	ldhu	r2,4(r2)
  8048c8:	10bfffcc 	andi	r2,r2,65535
  8048cc:	1809883a 	mov	r4,r3
  8048d0:	100b883a 	mov	r5,r2
  8048d4:	0803dfc0 	call	803dfc <validate>
  8048d8:	e0bff915 	stw	r2,-28(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  8048dc:	e0bff917 	ldw	r2,-28(fp)
  8048e0:	10000226 	beq	r2,zero,8048ec <f_write+0x64>
  8048e4:	e0bff917 	ldw	r2,-28(fp)
  8048e8:	00014106 	br	804df0 <f_write+0x568>
   if (fp->flag & FA__ERROR)           /* Aborted file? */
  8048ec:	e0bffc17 	ldw	r2,-16(fp)
  8048f0:	10800183 	ldbu	r2,6(r2)
  8048f4:	10803fcc 	andi	r2,r2,255
  8048f8:	1080201c 	xori	r2,r2,128
  8048fc:	10bfe004 	addi	r2,r2,-128
  804900:	1000020e 	bge	r2,zero,80490c <f_write+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  804904:	00800084 	movi	r2,2
  804908:	00013906 	br	804df0 <f_write+0x568>
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
  80490c:	e0bffc17 	ldw	r2,-16(fp)
  804910:	10800183 	ldbu	r2,6(r2)
  804914:	10803fcc 	andi	r2,r2,255
  804918:	1080008c 	andi	r2,r2,2
  80491c:	1000021e 	bne	r2,zero,804928 <f_write+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
  804920:	008001c4 	movi	r2,7
  804924:	00013206 	br	804df0 <f_write+0x568>
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */
  804928:	e0bffc17 	ldw	r2,-16(fp)
  80492c:	10c00317 	ldw	r3,12(r2)
  804930:	e0bffe17 	ldw	r2,-8(fp)
  804934:	1887883a 	add	r3,r3,r2
  804938:	e0bffc17 	ldw	r2,-16(fp)
  80493c:	10800317 	ldw	r2,12(r2)
  804940:	1880012e 	bgeu	r3,r2,804948 <f_write+0xc0>
  804944:	e03ffe15 	stw	zero,-8(fp)

   for ( ;  btw;                    /* Repeat until all data written */
  804948:	00011706 	br	804da8 <f_write+0x520>
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) { /* On the sector boundary? */
  80494c:	e0bffc17 	ldw	r2,-16(fp)
  804950:	10800217 	ldw	r2,8(r2)
  804954:	10807fcc 	andi	r2,r2,511
  804958:	1000e41e 	bne	r2,zero,804cec <f_write+0x464>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
  80495c:	e0bffc17 	ldw	r2,-16(fp)
  804960:	10800217 	ldw	r2,8(r2)
  804964:	1004d27a 	srli	r2,r2,9
  804968:	1007883a 	mov	r3,r2
  80496c:	e0bffc17 	ldw	r2,-16(fp)
  804970:	10800017 	ldw	r2,0(r2)
  804974:	10800083 	ldbu	r2,2(r2)
  804978:	10bfffc4 	addi	r2,r2,-1
  80497c:	1884703a 	and	r2,r3,r2
  804980:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {              /* On the cluster boundary? */
  804984:	e0bffa03 	ldbu	r2,-24(fp)
  804988:	1000381e 	bne	r2,zero,804a6c <f_write+0x1e4>
            if (fp->fptr == 0) {    /* On the top of the file? */
  80498c:	e0bffc17 	ldw	r2,-16(fp)
  804990:	10800217 	ldw	r2,8(r2)
  804994:	10000f1e 	bne	r2,zero,8049d4 <f_write+0x14c>
               clst = fp->sclust;      /* Follow from the origin */
  804998:	e0bffc17 	ldw	r2,-16(fp)
  80499c:	10800417 	ldw	r2,16(r2)
  8049a0:	e0bff515 	stw	r2,-44(fp)
               if (clst == 0)       /* When no cluster is allocated, */
  8049a4:	e0bff517 	ldw	r2,-44(fp)
  8049a8:	1000121e 	bne	r2,zero,8049f4 <f_write+0x16c>
                  fp->sclust = clst = create_chain(fp->fs, 0); /* Create a new cluster chain */
  8049ac:	e0bffc17 	ldw	r2,-16(fp)
  8049b0:	10800017 	ldw	r2,0(r2)
  8049b4:	1009883a 	mov	r4,r2
  8049b8:	000b883a 	mov	r5,zero
  8049bc:	08022000 	call	802200 <create_chain>
  8049c0:	e0bff515 	stw	r2,-44(fp)
  8049c4:	e0bffc17 	ldw	r2,-16(fp)
  8049c8:	e0fff517 	ldw	r3,-44(fp)
  8049cc:	10c00415 	stw	r3,16(r2)
  8049d0:	00000806 	br	8049f4 <f_write+0x16c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = create_chain(fp->fs, fp->clust);   /* Follow or stretch cluster chain on the FAT */
  8049d4:	e0bffc17 	ldw	r2,-16(fp)
  8049d8:	10c00017 	ldw	r3,0(r2)
  8049dc:	e0bffc17 	ldw	r2,-16(fp)
  8049e0:	10800517 	ldw	r2,20(r2)
  8049e4:	1809883a 	mov	r4,r3
  8049e8:	100b883a 	mov	r5,r2
  8049ec:	08022000 	call	802200 <create_chain>
  8049f0:	e0bff515 	stw	r2,-44(fp)
            }
            if (clst == 0) break;      /* Could not allocate a new cluster (disk full) */
  8049f4:	e0bff517 	ldw	r2,-44(fp)
  8049f8:	1000011e 	bne	r2,zero,804a00 <f_write+0x178>
  8049fc:	0000ec06 	br	804db0 <f_write+0x528>
            if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  804a00:	e0bff517 	ldw	r2,-44(fp)
  804a04:	10800058 	cmpnei	r2,r2,1
  804a08:	1000091e 	bne	r2,zero,804a30 <f_write+0x1a8>
  804a0c:	e0bffc17 	ldw	r2,-16(fp)
  804a10:	10c00183 	ldbu	r3,6(r2)
  804a14:	00bfe004 	movi	r2,-128
  804a18:	1884b03a 	or	r2,r3,r2
  804a1c:	1007883a 	mov	r3,r2
  804a20:	e0bffc17 	ldw	r2,-16(fp)
  804a24:	10c00185 	stb	r3,6(r2)
  804a28:	00800084 	movi	r2,2
  804a2c:	0000f006 	br	804df0 <f_write+0x568>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  804a30:	e0bff517 	ldw	r2,-44(fp)
  804a34:	10bfffd8 	cmpnei	r2,r2,-1
  804a38:	1000091e 	bne	r2,zero,804a60 <f_write+0x1d8>
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10c00183 	ldbu	r3,6(r2)
  804a44:	00bfe004 	movi	r2,-128
  804a48:	1884b03a 	or	r2,r3,r2
  804a4c:	1007883a 	mov	r3,r2
  804a50:	e0bffc17 	ldw	r2,-16(fp)
  804a54:	10c00185 	stb	r3,6(r2)
  804a58:	00800044 	movi	r2,1
  804a5c:	0000e406 	br	804df0 <f_write+0x568>
            fp->clust = clst;       /* Update current cluster */
  804a60:	e0bffc17 	ldw	r2,-16(fp)
  804a64:	e0fff517 	ldw	r3,-44(fp)
  804a68:	10c00515 	stw	r3,20(r2)
         }
#if _FS_TINY
         if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0)) /* Write-back sector cache */
            ABORT(fp->fs, FR_DISK_ERR);
#else
         if (fp->flag & FA__DIRTY) {      /* Write-back sector cache */
  804a6c:	e0bffc17 	ldw	r2,-16(fp)
  804a70:	10800183 	ldbu	r2,6(r2)
  804a74:	10803fcc 	andi	r2,r2,255
  804a78:	1080100c 	andi	r2,r2,64
  804a7c:	10001d26 	beq	r2,zero,804af4 <f_write+0x26c>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  804a80:	e0bffc17 	ldw	r2,-16(fp)
  804a84:	10800017 	ldw	r2,0(r2)
  804a88:	10800043 	ldbu	r2,1(r2)
  804a8c:	11003fcc 	andi	r4,r2,255
  804a90:	e0bffc17 	ldw	r2,-16(fp)
  804a94:	10c00904 	addi	r3,r2,36
  804a98:	e0bffc17 	ldw	r2,-16(fp)
  804a9c:	10800617 	ldw	r2,24(r2)
  804aa0:	180b883a 	mov	r5,r3
  804aa4:	100d883a 	mov	r6,r2
  804aa8:	01c00044 	movi	r7,1
  804aac:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  804ab0:	10000926 	beq	r2,zero,804ad8 <f_write+0x250>
               ABORT(fp->fs, FR_DISK_ERR);
  804ab4:	e0bffc17 	ldw	r2,-16(fp)
  804ab8:	10c00183 	ldbu	r3,6(r2)
  804abc:	00bfe004 	movi	r2,-128
  804ac0:	1884b03a 	or	r2,r3,r2
  804ac4:	1007883a 	mov	r3,r2
  804ac8:	e0bffc17 	ldw	r2,-16(fp)
  804acc:	10c00185 	stb	r3,6(r2)
  804ad0:	00800044 	movi	r2,1
  804ad4:	0000c606 	br	804df0 <f_write+0x568>
            fp->flag &= ~FA__DIRTY;
  804ad8:	e0bffc17 	ldw	r2,-16(fp)
  804adc:	10c00183 	ldbu	r3,6(r2)
  804ae0:	00bfefc4 	movi	r2,-65
  804ae4:	1884703a 	and	r2,r3,r2
  804ae8:	1007883a 	mov	r3,r2
  804aec:	e0bffc17 	ldw	r2,-16(fp)
  804af0:	10c00185 	stb	r3,6(r2)
         }
#endif
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
  804af4:	e0bffc17 	ldw	r2,-16(fp)
  804af8:	10c00017 	ldw	r3,0(r2)
  804afc:	e0bffc17 	ldw	r2,-16(fp)
  804b00:	10800517 	ldw	r2,20(r2)
  804b04:	1809883a 	mov	r4,r3
  804b08:	100b883a 	mov	r5,r2
  804b0c:	0801a8c0 	call	801a8c <clust2sect>
  804b10:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
  804b14:	e0bffb17 	ldw	r2,-20(fp)
  804b18:	1000091e 	bne	r2,zero,804b40 <f_write+0x2b8>
  804b1c:	e0bffc17 	ldw	r2,-16(fp)
  804b20:	10c00183 	ldbu	r3,6(r2)
  804b24:	00bfe004 	movi	r2,-128
  804b28:	1884b03a 	or	r2,r3,r2
  804b2c:	1007883a 	mov	r3,r2
  804b30:	e0bffc17 	ldw	r2,-16(fp)
  804b34:	10c00185 	stb	r3,6(r2)
  804b38:	00800084 	movi	r2,2
  804b3c:	0000ac06 	br	804df0 <f_write+0x568>
         sect += csect;
  804b40:	e0bffa03 	ldbu	r2,-24(fp)
  804b44:	e0fffb17 	ldw	r3,-20(fp)
  804b48:	1885883a 	add	r2,r3,r2
  804b4c:	e0bffb15 	stw	r2,-20(fp)
         cc = btw / SS(fp->fs);        /* When remaining bytes >= sector size, */
  804b50:	e0bffe17 	ldw	r2,-8(fp)
  804b54:	1004d27a 	srli	r2,r2,9
  804b58:	e0bff715 	stw	r2,-36(fp)
         if (cc) {                  /* Write maximum contiguous sectors directly */
  804b5c:	e0bff717 	ldw	r2,-36(fp)
  804b60:	10004126 	beq	r2,zero,804c68 <f_write+0x3e0>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
  804b64:	e0fffa03 	ldbu	r3,-24(fp)
  804b68:	e0bff717 	ldw	r2,-36(fp)
  804b6c:	1885883a 	add	r2,r3,r2
  804b70:	e0fffc17 	ldw	r3,-16(fp)
  804b74:	18c00017 	ldw	r3,0(r3)
  804b78:	18c00083 	ldbu	r3,2(r3)
  804b7c:	18c03fcc 	andi	r3,r3,255
  804b80:	1880072e 	bgeu	r3,r2,804ba0 <f_write+0x318>
               cc = fp->fs->csize - csect;
  804b84:	e0bffc17 	ldw	r2,-16(fp)
  804b88:	10800017 	ldw	r2,0(r2)
  804b8c:	10800083 	ldbu	r2,2(r2)
  804b90:	10c03fcc 	andi	r3,r2,255
  804b94:	e0bffa03 	ldbu	r2,-24(fp)
  804b98:	1885c83a 	sub	r2,r3,r2
  804b9c:	e0bff715 	stw	r2,-36(fp)
            if (disk_write(fp->fs->drv, wbuff, sect, (uint8_t)cc) != RES_OK)
  804ba0:	e0bffc17 	ldw	r2,-16(fp)
  804ba4:	10800017 	ldw	r2,0(r2)
  804ba8:	10800043 	ldbu	r2,1(r2)
  804bac:	10c03fcc 	andi	r3,r2,255
  804bb0:	e0bff717 	ldw	r2,-36(fp)
  804bb4:	10803fcc 	andi	r2,r2,255
  804bb8:	1809883a 	mov	r4,r3
  804bbc:	e17ff817 	ldw	r5,-32(fp)
  804bc0:	e1bffb17 	ldw	r6,-20(fp)
  804bc4:	100f883a 	mov	r7,r2
  804bc8:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  804bcc:	10000926 	beq	r2,zero,804bf4 <f_write+0x36c>
               ABORT(fp->fs, FR_DISK_ERR);
  804bd0:	e0bffc17 	ldw	r2,-16(fp)
  804bd4:	10c00183 	ldbu	r3,6(r2)
  804bd8:	00bfe004 	movi	r2,-128
  804bdc:	1884b03a 	or	r2,r3,r2
  804be0:	1007883a 	mov	r3,r2
  804be4:	e0bffc17 	ldw	r2,-16(fp)
  804be8:	10c00185 	stb	r3,6(r2)
  804bec:	00800044 	movi	r2,1
  804bf0:	00007f06 	br	804df0 <f_write+0x568>
            if (fp->fs->winsect - sect < cc) {  /* Refill sector cache if it gets invalidated by the direct write */
               mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
               fp->fs->wflag = 0;
            }
#else
            if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  804bf4:	e0bffc17 	ldw	r2,-16(fp)
  804bf8:	10c00617 	ldw	r3,24(r2)
  804bfc:	e0bffb17 	ldw	r2,-20(fp)
  804c00:	1887c83a 	sub	r3,r3,r2
  804c04:	e0bff717 	ldw	r2,-36(fp)
  804c08:	1880132e 	bgeu	r3,r2,804c58 <f_write+0x3d0>
               mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  804c0c:	e0bffc17 	ldw	r2,-16(fp)
  804c10:	11000904 	addi	r4,r2,36
  804c14:	e0bffc17 	ldw	r2,-16(fp)
  804c18:	10c00617 	ldw	r3,24(r2)
  804c1c:	e0bffb17 	ldw	r2,-20(fp)
  804c20:	1885c83a 	sub	r2,r3,r2
  804c24:	1004927a 	slli	r2,r2,9
  804c28:	e0fff817 	ldw	r3,-32(fp)
  804c2c:	1885883a 	add	r2,r3,r2
  804c30:	100b883a 	mov	r5,r2
  804c34:	01808004 	movi	r6,512
  804c38:	08015480 	call	801548 <mem_cpy>
               fp->flag &= ~FA__DIRTY;
  804c3c:	e0bffc17 	ldw	r2,-16(fp)
  804c40:	10c00183 	ldbu	r3,6(r2)
  804c44:	00bfefc4 	movi	r2,-65
  804c48:	1884703a 	and	r2,r3,r2
  804c4c:	1007883a 	mov	r3,r2
  804c50:	e0bffc17 	ldw	r2,-16(fp)
  804c54:	10c00185 	stb	r3,6(r2)
            }
#endif
            wcnt = SS(fp->fs) * cc;    /* Number of bytes transferred */
  804c58:	e0bff717 	ldw	r2,-36(fp)
  804c5c:	1004927a 	slli	r2,r2,9
  804c60:	e0bff615 	stw	r2,-40(fp)
            continue;
  804c64:	00003c06 	br	804d58 <f_write+0x4d0>
         if (fp->fptr >= fp->fsize) {  /* Avoid silly cache filling at growing edge */
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
  804c68:	e0bffc17 	ldw	r2,-16(fp)
  804c6c:	10c00617 	ldw	r3,24(r2)
  804c70:	e0bffb17 	ldw	r2,-20(fp)
  804c74:	18801a26 	beq	r3,r2,804ce0 <f_write+0x458>
            if (fp->fptr < fp->fsize &&
  804c78:	e0bffc17 	ldw	r2,-16(fp)
  804c7c:	10c00217 	ldw	r3,8(r2)
  804c80:	e0bffc17 	ldw	r2,-16(fp)
  804c84:	10800317 	ldw	r2,12(r2)
  804c88:	1880152e 	bgeu	r3,r2,804ce0 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  804c8c:	e0bffc17 	ldw	r2,-16(fp)
  804c90:	10800017 	ldw	r2,0(r2)
  804c94:	10800043 	ldbu	r2,1(r2)
  804c98:	10c03fcc 	andi	r3,r2,255
  804c9c:	e0bffc17 	ldw	r2,-16(fp)
  804ca0:	10800904 	addi	r2,r2,36
  804ca4:	1809883a 	mov	r4,r3
  804ca8:	100b883a 	mov	r5,r2
  804cac:	e1bffb17 	ldw	r6,-20(fp)
  804cb0:	01c00044 	movi	r7,1
  804cb4:	0800dec0 	call	800dec <ffs_DiskIORead>
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
            if (fp->fptr < fp->fsize &&
  804cb8:	10000926 	beq	r2,zero,804ce0 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
                  ABORT(fp->fs, FR_DISK_ERR);
  804cbc:	e0bffc17 	ldw	r2,-16(fp)
  804cc0:	10c00183 	ldbu	r3,6(r2)
  804cc4:	00bfe004 	movi	r2,-128
  804cc8:	1884b03a 	or	r2,r3,r2
  804ccc:	1007883a 	mov	r3,r2
  804cd0:	e0bffc17 	ldw	r2,-16(fp)
  804cd4:	10c00185 	stb	r3,6(r2)
  804cd8:	00800044 	movi	r2,1
  804cdc:	00004406 	br	804df0 <f_write+0x568>
         }
#endif
         fp->dsect = sect;
  804ce0:	e0bffc17 	ldw	r2,-16(fp)
  804ce4:	e0fffb17 	ldw	r3,-20(fp)
  804ce8:	10c00615 	stw	r3,24(r2)
      }
      wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  804cec:	e0bffc17 	ldw	r2,-16(fp)
  804cf0:	10800217 	ldw	r2,8(r2)
  804cf4:	10807fcc 	andi	r2,r2,511
  804cf8:	00c08004 	movi	r3,512
  804cfc:	1885c83a 	sub	r2,r3,r2
  804d00:	e0bff615 	stw	r2,-40(fp)
      if (wcnt > btw) wcnt = btw;
  804d04:	e0bff617 	ldw	r2,-40(fp)
  804d08:	e0fffe17 	ldw	r3,-8(fp)
  804d0c:	1880022e 	bgeu	r3,r2,804d18 <f_write+0x490>
  804d10:	e0bffe17 	ldw	r2,-8(fp)
  804d14:	e0bff615 	stw	r2,-40(fp)
      if (move_window(fp->fs, fp->dsect)) /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
      fp->fs->wflag = 1;
#else
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
  804d18:	e0bffc17 	ldw	r2,-16(fp)
  804d1c:	10800217 	ldw	r2,8(r2)
  804d20:	10807fcc 	andi	r2,r2,511
  804d24:	10800904 	addi	r2,r2,36
  804d28:	e0fffc17 	ldw	r3,-16(fp)
  804d2c:	1885883a 	add	r2,r3,r2
  804d30:	1009883a 	mov	r4,r2
  804d34:	e17ff817 	ldw	r5,-32(fp)
  804d38:	e1bff617 	ldw	r6,-40(fp)
  804d3c:	08015480 	call	801548 <mem_cpy>
      fp->flag |= FA__DIRTY;
  804d40:	e0bffc17 	ldw	r2,-16(fp)
  804d44:	10800183 	ldbu	r2,6(r2)
  804d48:	10801014 	ori	r2,r2,64
  804d4c:	1007883a 	mov	r3,r2
  804d50:	e0bffc17 	ldw	r2,-16(fp)
  804d54:	10c00185 	stb	r3,6(r2)
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  804d58:	e0fff817 	ldw	r3,-32(fp)
  804d5c:	e0bff617 	ldw	r2,-40(fp)
  804d60:	1885883a 	add	r2,r3,r2
  804d64:	e0bff815 	stw	r2,-32(fp)
  804d68:	e0bffc17 	ldw	r2,-16(fp)
  804d6c:	10c00217 	ldw	r3,8(r2)
  804d70:	e0bff617 	ldw	r2,-40(fp)
  804d74:	1887883a 	add	r3,r3,r2
  804d78:	e0bffc17 	ldw	r2,-16(fp)
  804d7c:	10c00215 	stw	r3,8(r2)
  804d80:	e0bfff17 	ldw	r2,-4(fp)
  804d84:	10c00017 	ldw	r3,0(r2)
  804d88:	e0bff617 	ldw	r2,-40(fp)
  804d8c:	1887883a 	add	r3,r3,r2
  804d90:	e0bfff17 	ldw	r2,-4(fp)
  804d94:	10c00015 	stw	r3,0(r2)
  804d98:	e0fffe17 	ldw	r3,-8(fp)
  804d9c:	e0bff617 	ldw	r2,-40(fp)
  804da0:	1885c83a 	sub	r2,r3,r2
  804da4:	e0bffe15 	stw	r2,-8(fp)
      LEAVE_FF(fp->fs, FR_INT_ERR);
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
  804da8:	e0bffe17 	ldw	r2,-8(fp)
  804dac:	103ee71e 	bne	r2,zero,80494c <__alt_data_end+0xff80494c>
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
      fp->flag |= FA__DIRTY;
#endif
   }

   if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
  804db0:	e0bffc17 	ldw	r2,-16(fp)
  804db4:	10800217 	ldw	r2,8(r2)
  804db8:	e0fffc17 	ldw	r3,-16(fp)
  804dbc:	18c00317 	ldw	r3,12(r3)
  804dc0:	1880042e 	bgeu	r3,r2,804dd4 <f_write+0x54c>
  804dc4:	e0bffc17 	ldw	r2,-16(fp)
  804dc8:	10c00217 	ldw	r3,8(r2)
  804dcc:	e0bffc17 	ldw	r2,-16(fp)
  804dd0:	10c00315 	stw	r3,12(r2)
   fp->flag |= FA__WRITTEN;                  /* Set file change flag */
  804dd4:	e0bffc17 	ldw	r2,-16(fp)
  804dd8:	10800183 	ldbu	r2,6(r2)
  804ddc:	10800814 	ori	r2,r2,32
  804de0:	1007883a 	mov	r3,r2
  804de4:	e0bffc17 	ldw	r2,-16(fp)
  804de8:	10c00185 	stb	r3,6(r2)

   LEAVE_FF(fp->fs, FR_OK);
  804dec:	0005883a 	mov	r2,zero
}
  804df0:	e037883a 	mov	sp,fp
  804df4:	dfc00117 	ldw	ra,4(sp)
  804df8:	df000017 	ldw	fp,0(sp)
  804dfc:	dec00204 	addi	sp,sp,8
  804e00:	f800283a 	ret

00804e04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
   FIL *fp     /* Pointer to the file object */
)
{
  804e04:	defffa04 	addi	sp,sp,-24
  804e08:	dfc00515 	stw	ra,20(sp)
  804e0c:	df000415 	stw	fp,16(sp)
  804e10:	df000404 	addi	fp,sp,16
  804e14:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t tim;
   uint8_t *dir;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  804e18:	e0bfff17 	ldw	r2,-4(fp)
  804e1c:	10c00017 	ldw	r3,0(r2)
  804e20:	e0bfff17 	ldw	r2,-4(fp)
  804e24:	1080010b 	ldhu	r2,4(r2)
  804e28:	10bfffcc 	andi	r2,r2,65535
  804e2c:	1809883a 	mov	r4,r3
  804e30:	100b883a 	mov	r5,r2
  804e34:	0803dfc0 	call	803dfc <validate>
  804e38:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
  804e3c:	e0bffc17 	ldw	r2,-16(fp)
  804e40:	10008c1e 	bne	r2,zero,805074 <f_sync+0x270>
      if (fp->flag & FA__WRITTEN) { /* Has the file been written? */
  804e44:	e0bfff17 	ldw	r2,-4(fp)
  804e48:	10800183 	ldbu	r2,6(r2)
  804e4c:	10803fcc 	andi	r2,r2,255
  804e50:	1080080c 	andi	r2,r2,32
  804e54:	10008726 	beq	r2,zero,805074 <f_sync+0x270>
#if !_FS_TINY  /* Write-back dirty buffer */
         if (fp->flag & FA__DIRTY) {
  804e58:	e0bfff17 	ldw	r2,-4(fp)
  804e5c:	10800183 	ldbu	r2,6(r2)
  804e60:	10803fcc 	andi	r2,r2,255
  804e64:	1080100c 	andi	r2,r2,64
  804e68:	10001626 	beq	r2,zero,804ec4 <f_sync+0xc0>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  804e6c:	e0bfff17 	ldw	r2,-4(fp)
  804e70:	10800017 	ldw	r2,0(r2)
  804e74:	10800043 	ldbu	r2,1(r2)
  804e78:	11003fcc 	andi	r4,r2,255
  804e7c:	e0bfff17 	ldw	r2,-4(fp)
  804e80:	10c00904 	addi	r3,r2,36
  804e84:	e0bfff17 	ldw	r2,-4(fp)
  804e88:	10800617 	ldw	r2,24(r2)
  804e8c:	180b883a 	mov	r5,r3
  804e90:	100d883a 	mov	r6,r2
  804e94:	01c00044 	movi	r7,1
  804e98:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  804e9c:	10000226 	beq	r2,zero,804ea8 <f_sync+0xa4>
               LEAVE_FF(fp->fs, FR_DISK_ERR);
  804ea0:	00800044 	movi	r2,1
  804ea4:	00007406 	br	805078 <f_sync+0x274>
            fp->flag &= ~FA__DIRTY;
  804ea8:	e0bfff17 	ldw	r2,-4(fp)
  804eac:	10c00183 	ldbu	r3,6(r2)
  804eb0:	00bfefc4 	movi	r2,-65
  804eb4:	1884703a 	and	r2,r3,r2
  804eb8:	1007883a 	mov	r3,r2
  804ebc:	e0bfff17 	ldw	r2,-4(fp)
  804ec0:	10c00185 	stb	r3,6(r2)
         }
#endif
         /* Update the directory entry */
         res = move_window(fp->fs, fp->dir_sect);
  804ec4:	e0bfff17 	ldw	r2,-4(fp)
  804ec8:	10c00017 	ldw	r3,0(r2)
  804ecc:	e0bfff17 	ldw	r2,-4(fp)
  804ed0:	10800717 	ldw	r2,28(r2)
  804ed4:	1809883a 	mov	r4,r3
  804ed8:	100b883a 	mov	r5,r2
  804edc:	08017140 	call	801714 <move_window>
  804ee0:	e0bffc15 	stw	r2,-16(fp)
         if (res == FR_OK) {
  804ee4:	e0bffc17 	ldw	r2,-16(fp)
  804ee8:	1000621e 	bne	r2,zero,805074 <f_sync+0x270>
            dir = fp->dir_ptr;
  804eec:	e0bfff17 	ldw	r2,-4(fp)
  804ef0:	10800817 	ldw	r2,32(r2)
  804ef4:	e0bffd15 	stw	r2,-12(fp)
            dir[DIR_Attr] |= AM_ARC;               /* Set archive bit */
  804ef8:	e0bffd17 	ldw	r2,-12(fp)
  804efc:	108002c4 	addi	r2,r2,11
  804f00:	e0fffd17 	ldw	r3,-12(fp)
  804f04:	18c002c4 	addi	r3,r3,11
  804f08:	18c00003 	ldbu	r3,0(r3)
  804f0c:	18c00814 	ori	r3,r3,32
  804f10:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_FileSize, fp->fsize);    /* Update file size */
  804f14:	e0bffd17 	ldw	r2,-12(fp)
  804f18:	10800704 	addi	r2,r2,28
  804f1c:	e0ffff17 	ldw	r3,-4(fp)
  804f20:	18c00317 	ldw	r3,12(r3)
  804f24:	10c00005 	stb	r3,0(r2)
  804f28:	e0bffd17 	ldw	r2,-12(fp)
  804f2c:	10800744 	addi	r2,r2,29
  804f30:	e0ffff17 	ldw	r3,-4(fp)
  804f34:	18c00317 	ldw	r3,12(r3)
  804f38:	18ffffcc 	andi	r3,r3,65535
  804f3c:	1806d23a 	srli	r3,r3,8
  804f40:	10c00005 	stb	r3,0(r2)
  804f44:	e0bffd17 	ldw	r2,-12(fp)
  804f48:	10800784 	addi	r2,r2,30
  804f4c:	e0ffff17 	ldw	r3,-4(fp)
  804f50:	18c00317 	ldw	r3,12(r3)
  804f54:	1806d43a 	srli	r3,r3,16
  804f58:	10c00005 	stb	r3,0(r2)
  804f5c:	e0bffd17 	ldw	r2,-12(fp)
  804f60:	108007c4 	addi	r2,r2,31
  804f64:	e0ffff17 	ldw	r3,-4(fp)
  804f68:	18c00317 	ldw	r3,12(r3)
  804f6c:	1806d63a 	srli	r3,r3,24
  804f70:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, fp->sclust);             /* Update start cluster */
  804f74:	e0bffd17 	ldw	r2,-12(fp)
  804f78:	10800684 	addi	r2,r2,26
  804f7c:	e0ffff17 	ldw	r3,-4(fp)
  804f80:	18c00417 	ldw	r3,16(r3)
  804f84:	10c00005 	stb	r3,0(r2)
  804f88:	e0bffd17 	ldw	r2,-12(fp)
  804f8c:	108006c4 	addi	r2,r2,27
  804f90:	e0ffff17 	ldw	r3,-4(fp)
  804f94:	18c00417 	ldw	r3,16(r3)
  804f98:	18ffffcc 	andi	r3,r3,65535
  804f9c:	1806d23a 	srli	r3,r3,8
  804fa0:	10c00005 	stb	r3,0(r2)
  804fa4:	e0bffd17 	ldw	r2,-12(fp)
  804fa8:	10800504 	addi	r2,r2,20
  804fac:	e0ffff17 	ldw	r3,-4(fp)
  804fb0:	18c00417 	ldw	r3,16(r3)
  804fb4:	1806d43a 	srli	r3,r3,16
  804fb8:	10c00005 	stb	r3,0(r2)
  804fbc:	e0bffd17 	ldw	r2,-12(fp)
  804fc0:	10800544 	addi	r2,r2,21
  804fc4:	e0ffff17 	ldw	r3,-4(fp)
  804fc8:	18c00417 	ldw	r3,16(r3)
  804fcc:	1806d43a 	srli	r3,r3,16
  804fd0:	18ffffcc 	andi	r3,r3,65535
  804fd4:	1806d23a 	srli	r3,r3,8
  804fd8:	10c00005 	stb	r3,0(r2)
            tim = get_fattime();                /* Update updated time */
  804fdc:	080151c0 	call	80151c <get_fattime>
  804fe0:	e0bffe15 	stw	r2,-8(fp)
            ST_DWORD(dir+DIR_WrtTime, tim);
  804fe4:	e0bffd17 	ldw	r2,-12(fp)
  804fe8:	10800584 	addi	r2,r2,22
  804fec:	e0fffe17 	ldw	r3,-8(fp)
  804ff0:	10c00005 	stb	r3,0(r2)
  804ff4:	e0bffd17 	ldw	r2,-12(fp)
  804ff8:	108005c4 	addi	r2,r2,23
  804ffc:	e0fffe17 	ldw	r3,-8(fp)
  805000:	18ffffcc 	andi	r3,r3,65535
  805004:	1806d23a 	srli	r3,r3,8
  805008:	10c00005 	stb	r3,0(r2)
  80500c:	e0bffd17 	ldw	r2,-12(fp)
  805010:	10800604 	addi	r2,r2,24
  805014:	e0fffe17 	ldw	r3,-8(fp)
  805018:	1806d43a 	srli	r3,r3,16
  80501c:	10c00005 	stb	r3,0(r2)
  805020:	e0bffd17 	ldw	r2,-12(fp)
  805024:	10800644 	addi	r2,r2,25
  805028:	e0fffe17 	ldw	r3,-8(fp)
  80502c:	1806d63a 	srli	r3,r3,24
  805030:	10c00005 	stb	r3,0(r2)
            fp->flag &= ~FA__WRITTEN;
  805034:	e0bfff17 	ldw	r2,-4(fp)
  805038:	10c00183 	ldbu	r3,6(r2)
  80503c:	00bff7c4 	movi	r2,-33
  805040:	1884703a 	and	r2,r3,r2
  805044:	1007883a 	mov	r3,r2
  805048:	e0bfff17 	ldw	r2,-4(fp)
  80504c:	10c00185 	stb	r3,6(r2)
            fp->fs->wflag = 1;
  805050:	e0bfff17 	ldw	r2,-4(fp)
  805054:	10800017 	ldw	r2,0(r2)
  805058:	00c00044 	movi	r3,1
  80505c:	10c00105 	stb	r3,4(r2)
            res = sync(fp->fs);
  805060:	e0bfff17 	ldw	r2,-4(fp)
  805064:	10800017 	ldw	r2,0(r2)
  805068:	1009883a 	mov	r4,r2
  80506c:	08018700 	call	801870 <sync>
  805070:	e0bffc15 	stw	r2,-16(fp)
         }
      }
   }

   LEAVE_FF(fp->fs, res);
  805074:	e0bffc17 	ldw	r2,-16(fp)
}
  805078:	e037883a 	mov	sp,fp
  80507c:	dfc00117 	ldw	ra,4(sp)
  805080:	df000017 	ldw	fp,0(sp)
  805084:	dec00204 	addi	sp,sp,8
  805088:	f800283a 	ret

0080508c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
   FIL *fp     /* Pointer to the file object to be closed */
)
{
  80508c:	defffc04 	addi	sp,sp,-16
  805090:	dfc00315 	stw	ra,12(sp)
  805094:	df000215 	stw	fp,8(sp)
  805098:	df000204 	addi	fp,sp,8
  80509c:	e13fff15 	stw	r4,-4(fp)
   res = validate(fs, fp->id);
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
   LEAVE_FF(fs, res);

#else
   res = f_sync(fp);    /* Flush cached data */
  8050a0:	e13fff17 	ldw	r4,-4(fp)
  8050a4:	0804e040 	call	804e04 <f_sync>
  8050a8:	e0bffe15 	stw	r2,-8(fp)
#else
      res = dec_lock(fp->lockid);
#endif
   }
#endif
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
  8050ac:	e0bffe17 	ldw	r2,-8(fp)
  8050b0:	1000021e 	bne	r2,zero,8050bc <f_close+0x30>
  8050b4:	e0bfff17 	ldw	r2,-4(fp)
  8050b8:	10000015 	stw	zero,0(r2)
   return res;
  8050bc:	e0bffe17 	ldw	r2,-8(fp)
#endif
}
  8050c0:	e037883a 	mov	sp,fp
  8050c4:	dfc00117 	ldw	ra,4(sp)
  8050c8:	df000017 	ldw	fp,0(sp)
  8050cc:	dec00204 	addi	sp,sp,8
  8050d0:	f800283a 	ret

008050d4 <f_lseek>:

FRESULT f_lseek (
   FIL *fp,          /* Pointer to the file object */
   uint32_t ofs      /* File pointer from top of file */
)
{
  8050d4:	defff604 	addi	sp,sp,-40
  8050d8:	dfc00915 	stw	ra,36(sp)
  8050dc:	df000815 	stw	fp,32(sp)
  8050e0:	dc000715 	stw	r16,28(sp)
  8050e4:	df000804 	addi	fp,sp,32
  8050e8:	e13ffd15 	stw	r4,-12(fp)
  8050ec:	e17ffe15 	stw	r5,-8(fp)
   FRESULT res;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  8050f0:	e0bffd17 	ldw	r2,-12(fp)
  8050f4:	10c00017 	ldw	r3,0(r2)
  8050f8:	e0bffd17 	ldw	r2,-12(fp)
  8050fc:	1080010b 	ldhu	r2,4(r2)
  805100:	10bfffcc 	andi	r2,r2,65535
  805104:	1809883a 	mov	r4,r3
  805108:	100b883a 	mov	r5,r2
  80510c:	0803dfc0 	call	803dfc <validate>
  805110:	e0bffa15 	stw	r2,-24(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  805114:	e0bffa17 	ldw	r2,-24(fp)
  805118:	10000226 	beq	r2,zero,805124 <f_lseek+0x50>
  80511c:	e0bffa17 	ldw	r2,-24(fp)
  805120:	00012106 	br	8055a8 <f_lseek+0x4d4>
   if (fp->flag & FA__ERROR)        /* Check abort flag */
  805124:	e0bffd17 	ldw	r2,-12(fp)
  805128:	10800183 	ldbu	r2,6(r2)
  80512c:	10803fcc 	andi	r2,r2,255
  805130:	1080201c 	xori	r2,r2,128
  805134:	10bfe004 	addi	r2,r2,-128
  805138:	1000020e 	bge	r2,zero,805144 <f_lseek+0x70>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  80513c:	00800084 	movi	r2,2
  805140:	00011906 	br	8055a8 <f_lseek+0x4d4>

   /* Normal Seek */
   {
      uint32_t clst, bcs, nsect, ifptr;

      if (ofs > fp->fsize              /* In read-only mode, clip offset with the file size */
  805144:	e0bffd17 	ldw	r2,-12(fp)
  805148:	10c00317 	ldw	r3,12(r2)
  80514c:	e0bffe17 	ldw	r2,-8(fp)
  805150:	1880082e 	bgeu	r3,r2,805174 <f_lseek+0xa0>
#if !_FS_READONLY
          && !(fp->flag & FA_WRITE)
  805154:	e0bffd17 	ldw	r2,-12(fp)
  805158:	10800183 	ldbu	r2,6(r2)
  80515c:	10803fcc 	andi	r2,r2,255
  805160:	1080008c 	andi	r2,r2,2
  805164:	1000031e 	bne	r2,zero,805174 <f_lseek+0xa0>
#endif
         ) ofs = fp->fsize;
  805168:	e0bffd17 	ldw	r2,-12(fp)
  80516c:	10800317 	ldw	r2,12(r2)
  805170:	e0bffe15 	stw	r2,-8(fp)

      ifptr = fp->fptr;
  805174:	e0bffd17 	ldw	r2,-12(fp)
  805178:	10800217 	ldw	r2,8(r2)
  80517c:	e0bffb15 	stw	r2,-20(fp)
      fp->fptr = nsect = 0;
  805180:	e03ff915 	stw	zero,-28(fp)
  805184:	e0bffd17 	ldw	r2,-12(fp)
  805188:	e0fff917 	ldw	r3,-28(fp)
  80518c:	10c00215 	stw	r3,8(r2)
      if (ofs) {
  805190:	e0bffe17 	ldw	r2,-8(fp)
  805194:	1000b226 	beq	r2,zero,805460 <f_lseek+0x38c>
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
  805198:	e0bffd17 	ldw	r2,-12(fp)
  80519c:	10800017 	ldw	r2,0(r2)
  8051a0:	10800083 	ldbu	r2,2(r2)
  8051a4:	10803fcc 	andi	r2,r2,255
  8051a8:	1004927a 	slli	r2,r2,9
  8051ac:	e0bffc15 	stw	r2,-16(fp)
         if (ifptr > 0 &&
  8051b0:	e0bffb17 	ldw	r2,-20(fp)
  8051b4:	10001c26 	beq	r2,zero,805228 <f_lseek+0x154>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
  8051b8:	e0bffe17 	ldw	r2,-8(fp)
  8051bc:	10bfffc4 	addi	r2,r2,-1
  8051c0:	1009883a 	mov	r4,r2
  8051c4:	e17ffc17 	ldw	r5,-16(fp)
  8051c8:	080a9800 	call	80a980 <__udivsi3>
  8051cc:	1021883a 	mov	r16,r2
  8051d0:	e0bffb17 	ldw	r2,-20(fp)
  8051d4:	10bfffc4 	addi	r2,r2,-1
  8051d8:	1009883a 	mov	r4,r2
  8051dc:	e17ffc17 	ldw	r5,-16(fp)
  8051e0:	080a9800 	call	80a980 <__udivsi3>

      ifptr = fp->fptr;
      fp->fptr = nsect = 0;
      if (ofs) {
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
         if (ifptr > 0 &&
  8051e4:	80801036 	bltu	r16,r2,805228 <f_lseek+0x154>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
            fp->fptr = (ifptr - 1) & ~(bcs - 1);   /* start from the current cluster */
  8051e8:	e0bffb17 	ldw	r2,-20(fp)
  8051ec:	10ffffc4 	addi	r3,r2,-1
  8051f0:	e0bffc17 	ldw	r2,-16(fp)
  8051f4:	0085c83a 	sub	r2,zero,r2
  8051f8:	1886703a 	and	r3,r3,r2
  8051fc:	e0bffd17 	ldw	r2,-12(fp)
  805200:	10c00215 	stw	r3,8(r2)
            ofs -= fp->fptr;
  805204:	e0bffd17 	ldw	r2,-12(fp)
  805208:	10800217 	ldw	r2,8(r2)
  80520c:	e0fffe17 	ldw	r3,-8(fp)
  805210:	1885c83a 	sub	r2,r3,r2
  805214:	e0bffe15 	stw	r2,-8(fp)
            clst = fp->clust;
  805218:	e0bffd17 	ldw	r2,-12(fp)
  80521c:	10800517 	ldw	r2,20(r2)
  805220:	e0bff815 	stw	r2,-32(fp)
  805224:	00002906 	br	8052cc <f_lseek+0x1f8>
         } else {                         /* When seek to back cluster, */
            clst = fp->sclust;                  /* start from the first cluster */
  805228:	e0bffd17 	ldw	r2,-12(fp)
  80522c:	10800417 	ldw	r2,16(r2)
  805230:	e0bff815 	stw	r2,-32(fp)
#if !_FS_READONLY
            if (clst == 0) {                 /* If no cluster chain, create a new chain */
  805234:	e0bff817 	ldw	r2,-32(fp)
  805238:	1000211e 	bne	r2,zero,8052c0 <f_lseek+0x1ec>
               clst = create_chain(fp->fs, 0);
  80523c:	e0bffd17 	ldw	r2,-12(fp)
  805240:	10800017 	ldw	r2,0(r2)
  805244:	1009883a 	mov	r4,r2
  805248:	000b883a 	mov	r5,zero
  80524c:	08022000 	call	802200 <create_chain>
  805250:	e0bff815 	stw	r2,-32(fp)
               if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  805254:	e0bff817 	ldw	r2,-32(fp)
  805258:	10800058 	cmpnei	r2,r2,1
  80525c:	1000091e 	bne	r2,zero,805284 <f_lseek+0x1b0>
  805260:	e0bffd17 	ldw	r2,-12(fp)
  805264:	10c00183 	ldbu	r3,6(r2)
  805268:	00bfe004 	movi	r2,-128
  80526c:	1884b03a 	or	r2,r3,r2
  805270:	1007883a 	mov	r3,r2
  805274:	e0bffd17 	ldw	r2,-12(fp)
  805278:	10c00185 	stb	r3,6(r2)
  80527c:	00800084 	movi	r2,2
  805280:	0000c906 	br	8055a8 <f_lseek+0x4d4>
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  805284:	e0bff817 	ldw	r2,-32(fp)
  805288:	10bfffd8 	cmpnei	r2,r2,-1
  80528c:	1000091e 	bne	r2,zero,8052b4 <f_lseek+0x1e0>
  805290:	e0bffd17 	ldw	r2,-12(fp)
  805294:	10c00183 	ldbu	r3,6(r2)
  805298:	00bfe004 	movi	r2,-128
  80529c:	1884b03a 	or	r2,r3,r2
  8052a0:	1007883a 	mov	r3,r2
  8052a4:	e0bffd17 	ldw	r2,-12(fp)
  8052a8:	10c00185 	stb	r3,6(r2)
  8052ac:	00800044 	movi	r2,1
  8052b0:	0000bd06 	br	8055a8 <f_lseek+0x4d4>
               fp->sclust = clst;
  8052b4:	e0bffd17 	ldw	r2,-12(fp)
  8052b8:	e0fff817 	ldw	r3,-32(fp)
  8052bc:	10c00415 	stw	r3,16(r2)
            }
#endif
            fp->clust = clst;
  8052c0:	e0bffd17 	ldw	r2,-12(fp)
  8052c4:	e0fff817 	ldw	r3,-32(fp)
  8052c8:	10c00515 	stw	r3,20(r2)
         }
         if (clst != 0) {
  8052cc:	e0bff817 	ldw	r2,-32(fp)
  8052d0:	10006326 	beq	r2,zero,805460 <f_lseek+0x38c>
            while (ofs > bcs) {                 /* Cluster following loop */
  8052d4:	00004006 	br	8053d8 <f_lseek+0x304>
#if !_FS_READONLY
               if (fp->flag & FA_WRITE) {       /* Check if in write mode or not */
  8052d8:	e0bffd17 	ldw	r2,-12(fp)
  8052dc:	10800183 	ldbu	r2,6(r2)
  8052e0:	10803fcc 	andi	r2,r2,255
  8052e4:	1080008c 	andi	r2,r2,2
  8052e8:	10000b26 	beq	r2,zero,805318 <f_lseek+0x244>
                  clst = create_chain(fp->fs, clst);  /* Force stretch if in write mode */
  8052ec:	e0bffd17 	ldw	r2,-12(fp)
  8052f0:	10800017 	ldw	r2,0(r2)
  8052f4:	1009883a 	mov	r4,r2
  8052f8:	e17ff817 	ldw	r5,-32(fp)
  8052fc:	08022000 	call	802200 <create_chain>
  805300:	e0bff815 	stw	r2,-32(fp)
                  if (clst == 0) {           /* When disk gets full, clip file size */
  805304:	e0bff817 	ldw	r2,-32(fp)
  805308:	1000091e 	bne	r2,zero,805330 <f_lseek+0x25c>
                     ofs = bcs; break;
  80530c:	e0bffc17 	ldw	r2,-16(fp)
  805310:	e0bffe15 	stw	r2,-8(fp)
  805314:	00003306 	br	8053e4 <f_lseek+0x310>
                  }
               } else
#endif
                  clst = get_fat(fp->fs, clst); /* Follow cluster chain if not in write mode */
  805318:	e0bffd17 	ldw	r2,-12(fp)
  80531c:	10800017 	ldw	r2,0(r2)
  805320:	1009883a 	mov	r4,r2
  805324:	e17ff817 	ldw	r5,-32(fp)
  805328:	0801af80 	call	801af8 <get_fat>
  80532c:	e0bff815 	stw	r2,-32(fp)
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  805330:	e0bff817 	ldw	r2,-32(fp)
  805334:	10bfffd8 	cmpnei	r2,r2,-1
  805338:	1000091e 	bne	r2,zero,805360 <f_lseek+0x28c>
  80533c:	e0bffd17 	ldw	r2,-12(fp)
  805340:	10c00183 	ldbu	r3,6(r2)
  805344:	00bfe004 	movi	r2,-128
  805348:	1884b03a 	or	r2,r3,r2
  80534c:	1007883a 	mov	r3,r2
  805350:	e0bffd17 	ldw	r2,-12(fp)
  805354:	10c00185 	stb	r3,6(r2)
  805358:	00800044 	movi	r2,1
  80535c:	00009206 	br	8055a8 <f_lseek+0x4d4>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  805360:	e0bff817 	ldw	r2,-32(fp)
  805364:	108000b0 	cmpltui	r2,r2,2
  805368:	1000051e 	bne	r2,zero,805380 <f_lseek+0x2ac>
  80536c:	e0bffd17 	ldw	r2,-12(fp)
  805370:	10800017 	ldw	r2,0(r2)
  805374:	10800617 	ldw	r2,24(r2)
  805378:	e0fff817 	ldw	r3,-32(fp)
  80537c:	18800936 	bltu	r3,r2,8053a4 <f_lseek+0x2d0>
  805380:	e0bffd17 	ldw	r2,-12(fp)
  805384:	10c00183 	ldbu	r3,6(r2)
  805388:	00bfe004 	movi	r2,-128
  80538c:	1884b03a 	or	r2,r3,r2
  805390:	1007883a 	mov	r3,r2
  805394:	e0bffd17 	ldw	r2,-12(fp)
  805398:	10c00185 	stb	r3,6(r2)
  80539c:	00800084 	movi	r2,2
  8053a0:	00008106 	br	8055a8 <f_lseek+0x4d4>
               fp->clust = clst;
  8053a4:	e0bffd17 	ldw	r2,-12(fp)
  8053a8:	e0fff817 	ldw	r3,-32(fp)
  8053ac:	10c00515 	stw	r3,20(r2)
               fp->fptr += bcs;
  8053b0:	e0bffd17 	ldw	r2,-12(fp)
  8053b4:	10c00217 	ldw	r3,8(r2)
  8053b8:	e0bffc17 	ldw	r2,-16(fp)
  8053bc:	1887883a 	add	r3,r3,r2
  8053c0:	e0bffd17 	ldw	r2,-12(fp)
  8053c4:	10c00215 	stw	r3,8(r2)
               ofs -= bcs;
  8053c8:	e0fffe17 	ldw	r3,-8(fp)
  8053cc:	e0bffc17 	ldw	r2,-16(fp)
  8053d0:	1885c83a 	sub	r2,r3,r2
  8053d4:	e0bffe15 	stw	r2,-8(fp)
            }
#endif
            fp->clust = clst;
         }
         if (clst != 0) {
            while (ofs > bcs) {                 /* Cluster following loop */
  8053d8:	e0bffe17 	ldw	r2,-8(fp)
  8053dc:	e0fffc17 	ldw	r3,-16(fp)
  8053e0:	18bfbd36 	bltu	r3,r2,8052d8 <__alt_data_end+0xff8052d8>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
               fp->clust = clst;
               fp->fptr += bcs;
               ofs -= bcs;
            }
            fp->fptr += ofs;
  8053e4:	e0bffd17 	ldw	r2,-12(fp)
  8053e8:	10c00217 	ldw	r3,8(r2)
  8053ec:	e0bffe17 	ldw	r2,-8(fp)
  8053f0:	1887883a 	add	r3,r3,r2
  8053f4:	e0bffd17 	ldw	r2,-12(fp)
  8053f8:	10c00215 	stw	r3,8(r2)
            if (ofs % SS(fp->fs)) {
  8053fc:	e0bffe17 	ldw	r2,-8(fp)
  805400:	10807fcc 	andi	r2,r2,511
  805404:	10001626 	beq	r2,zero,805460 <f_lseek+0x38c>
               nsect = clust2sect(fp->fs, clst);   /* Current sector */
  805408:	e0bffd17 	ldw	r2,-12(fp)
  80540c:	10800017 	ldw	r2,0(r2)
  805410:	1009883a 	mov	r4,r2
  805414:	e17ff817 	ldw	r5,-32(fp)
  805418:	0801a8c0 	call	801a8c <clust2sect>
  80541c:	e0bff915 	stw	r2,-28(fp)
               if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  805420:	e0bff917 	ldw	r2,-28(fp)
  805424:	1000091e 	bne	r2,zero,80544c <f_lseek+0x378>
  805428:	e0bffd17 	ldw	r2,-12(fp)
  80542c:	10c00183 	ldbu	r3,6(r2)
  805430:	00bfe004 	movi	r2,-128
  805434:	1884b03a 	or	r2,r3,r2
  805438:	1007883a 	mov	r3,r2
  80543c:	e0bffd17 	ldw	r2,-12(fp)
  805440:	10c00185 	stb	r3,6(r2)
  805444:	00800084 	movi	r2,2
  805448:	00005706 	br	8055a8 <f_lseek+0x4d4>
               nsect += ofs / SS(fp->fs);
  80544c:	e0bffe17 	ldw	r2,-8(fp)
  805450:	1004d27a 	srli	r2,r2,9
  805454:	e0fff917 	ldw	r3,-28(fp)
  805458:	1885883a 	add	r2,r3,r2
  80545c:	e0bff915 	stw	r2,-28(fp)
            }
         }
      }
      if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) { /* Fill sector cache if needed */
  805460:	e0bffd17 	ldw	r2,-12(fp)
  805464:	10800217 	ldw	r2,8(r2)
  805468:	10807fcc 	andi	r2,r2,511
  80546c:	10003e26 	beq	r2,zero,805568 <f_lseek+0x494>
  805470:	e0bffd17 	ldw	r2,-12(fp)
  805474:	10c00617 	ldw	r3,24(r2)
  805478:	e0bff917 	ldw	r2,-28(fp)
  80547c:	18803a26 	beq	r3,r2,805568 <f_lseek+0x494>
#if !_FS_TINY
#if !_FS_READONLY
         if (fp->flag & FA__DIRTY) {         /* Write-back dirty sector cache */
  805480:	e0bffd17 	ldw	r2,-12(fp)
  805484:	10800183 	ldbu	r2,6(r2)
  805488:	10803fcc 	andi	r2,r2,255
  80548c:	1080100c 	andi	r2,r2,64
  805490:	10001d26 	beq	r2,zero,805508 <f_lseek+0x434>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  805494:	e0bffd17 	ldw	r2,-12(fp)
  805498:	10800017 	ldw	r2,0(r2)
  80549c:	10800043 	ldbu	r2,1(r2)
  8054a0:	11003fcc 	andi	r4,r2,255
  8054a4:	e0bffd17 	ldw	r2,-12(fp)
  8054a8:	10c00904 	addi	r3,r2,36
  8054ac:	e0bffd17 	ldw	r2,-12(fp)
  8054b0:	10800617 	ldw	r2,24(r2)
  8054b4:	180b883a 	mov	r5,r3
  8054b8:	100d883a 	mov	r6,r2
  8054bc:	01c00044 	movi	r7,1
  8054c0:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  8054c4:	10000926 	beq	r2,zero,8054ec <f_lseek+0x418>
               ABORT(fp->fs, FR_DISK_ERR);
  8054c8:	e0bffd17 	ldw	r2,-12(fp)
  8054cc:	10c00183 	ldbu	r3,6(r2)
  8054d0:	00bfe004 	movi	r2,-128
  8054d4:	1884b03a 	or	r2,r3,r2
  8054d8:	1007883a 	mov	r3,r2
  8054dc:	e0bffd17 	ldw	r2,-12(fp)
  8054e0:	10c00185 	stb	r3,6(r2)
  8054e4:	00800044 	movi	r2,1
  8054e8:	00002f06 	br	8055a8 <f_lseek+0x4d4>
            fp->flag &= ~FA__DIRTY;
  8054ec:	e0bffd17 	ldw	r2,-12(fp)
  8054f0:	10c00183 	ldbu	r3,6(r2)
  8054f4:	00bfefc4 	movi	r2,-65
  8054f8:	1884703a 	and	r2,r3,r2
  8054fc:	1007883a 	mov	r3,r2
  805500:	e0bffd17 	ldw	r2,-12(fp)
  805504:	10c00185 	stb	r3,6(r2)
         }
#endif
         if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK) /* Fill sector cache */
  805508:	e0bffd17 	ldw	r2,-12(fp)
  80550c:	10800017 	ldw	r2,0(r2)
  805510:	10800043 	ldbu	r2,1(r2)
  805514:	10c03fcc 	andi	r3,r2,255
  805518:	e0bffd17 	ldw	r2,-12(fp)
  80551c:	10800904 	addi	r2,r2,36
  805520:	1809883a 	mov	r4,r3
  805524:	100b883a 	mov	r5,r2
  805528:	e1bff917 	ldw	r6,-28(fp)
  80552c:	01c00044 	movi	r7,1
  805530:	0800dec0 	call	800dec <ffs_DiskIORead>
  805534:	10000926 	beq	r2,zero,80555c <f_lseek+0x488>
            ABORT(fp->fs, FR_DISK_ERR);
  805538:	e0bffd17 	ldw	r2,-12(fp)
  80553c:	10c00183 	ldbu	r3,6(r2)
  805540:	00bfe004 	movi	r2,-128
  805544:	1884b03a 	or	r2,r3,r2
  805548:	1007883a 	mov	r3,r2
  80554c:	e0bffd17 	ldw	r2,-12(fp)
  805550:	10c00185 	stb	r3,6(r2)
  805554:	00800044 	movi	r2,1
  805558:	00001306 	br	8055a8 <f_lseek+0x4d4>
#endif
         fp->dsect = nsect;
  80555c:	e0bffd17 	ldw	r2,-12(fp)
  805560:	e0fff917 	ldw	r3,-28(fp)
  805564:	10c00615 	stw	r3,24(r2)
      }
#if !_FS_READONLY
      if (fp->fptr > fp->fsize) {         /* Set file change flag if the file size is extended */
  805568:	e0bffd17 	ldw	r2,-12(fp)
  80556c:	10800217 	ldw	r2,8(r2)
  805570:	e0fffd17 	ldw	r3,-12(fp)
  805574:	18c00317 	ldw	r3,12(r3)
  805578:	18800a2e 	bgeu	r3,r2,8055a4 <f_lseek+0x4d0>
         fp->fsize = fp->fptr;
  80557c:	e0bffd17 	ldw	r2,-12(fp)
  805580:	10c00217 	ldw	r3,8(r2)
  805584:	e0bffd17 	ldw	r2,-12(fp)
  805588:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
  80558c:	e0bffd17 	ldw	r2,-12(fp)
  805590:	10800183 	ldbu	r2,6(r2)
  805594:	10800814 	ori	r2,r2,32
  805598:	1007883a 	mov	r3,r2
  80559c:	e0bffd17 	ldw	r2,-12(fp)
  8055a0:	10c00185 	stb	r3,6(r2)
      }
#endif
   }

   LEAVE_FF(fp->fs, res);
  8055a4:	e0bffa17 	ldw	r2,-24(fp)
}
  8055a8:	e6ffff04 	addi	sp,fp,-4
  8055ac:	dfc00217 	ldw	ra,8(sp)
  8055b0:	df000117 	ldw	fp,4(sp)
  8055b4:	dc000017 	ldw	r16,0(sp)
  8055b8:	dec00304 	addi	sp,sp,12
  8055bc:	f800283a 	ret

008055c0 <f_opendir>:

FRESULT f_opendir (
   DIR *dj,       /* Pointer to directory object to create */
   const TCHAR *path /* Pointer to the directory path */
)
{
  8055c0:	defff804 	addi	sp,sp,-32
  8055c4:	dfc00715 	stw	ra,28(sp)
  8055c8:	df000615 	stw	fp,24(sp)
  8055cc:	df000604 	addi	fp,sp,24
  8055d0:	e13ffe15 	stw	r4,-8(fp)
  8055d4:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj->fs, 0);
  8055d8:	e0bffe17 	ldw	r2,-8(fp)
  8055dc:	e0ffff04 	addi	r3,fp,-4
  8055e0:	1809883a 	mov	r4,r3
  8055e4:	100b883a 	mov	r5,r2
  8055e8:	000d883a 	mov	r6,zero
  8055ec:	08034c00 	call	8034c0 <chk_mounted>
  8055f0:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
  8055f4:	e0bffa17 	ldw	r2,-24(fp)
  8055f8:	1000471e 	bne	r2,zero,805718 <f_opendir+0x158>

      INIT_BUF(*dj);
  8055fc:	e0bffe17 	ldw	r2,-8(fp)
  805600:	e0fffb04 	addi	r3,fp,-20
  805604:	10c00615 	stw	r3,24(r2)
      res = follow_path(dj, path);        /* Follow the path to the directory */
  805608:	e0bfff17 	ldw	r2,-4(fp)
  80560c:	e13ffe17 	ldw	r4,-8(fp)
  805610:	100b883a 	mov	r5,r2
  805614:	080317c0 	call	80317c <follow_path>
  805618:	e0bffa15 	stw	r2,-24(fp)
      FREE_BUF();
      if (res == FR_OK) {                 /* Follow completed */
  80561c:	e0bffa17 	ldw	r2,-24(fp)
  805620:	1000381e 	bne	r2,zero,805704 <f_opendir+0x144>
         if (dj->dir) {                /* It is not the root dir */
  805624:	e0bffe17 	ldw	r2,-8(fp)
  805628:	10800517 	ldw	r2,20(r2)
  80562c:	10002a26 	beq	r2,zero,8056d8 <f_opendir+0x118>
            if (dj->dir[DIR_Attr] & AM_DIR) {   /* The object is a directory */
  805630:	e0bffe17 	ldw	r2,-8(fp)
  805634:	10800517 	ldw	r2,20(r2)
  805638:	108002c4 	addi	r2,r2,11
  80563c:	10800003 	ldbu	r2,0(r2)
  805640:	10803fcc 	andi	r2,r2,255
  805644:	1080040c 	andi	r2,r2,16
  805648:	10002126 	beq	r2,zero,8056d0 <f_opendir+0x110>
               dj->sclust = LD_CLUST(dj->dir);
  80564c:	e0bffe17 	ldw	r2,-8(fp)
  805650:	10800517 	ldw	r2,20(r2)
  805654:	10800544 	addi	r2,r2,21
  805658:	10800003 	ldbu	r2,0(r2)
  80565c:	10803fcc 	andi	r2,r2,255
  805660:	1004923a 	slli	r2,r2,8
  805664:	1007883a 	mov	r3,r2
  805668:	e0bffe17 	ldw	r2,-8(fp)
  80566c:	10800517 	ldw	r2,20(r2)
  805670:	10800504 	addi	r2,r2,20
  805674:	10800003 	ldbu	r2,0(r2)
  805678:	10803fcc 	andi	r2,r2,255
  80567c:	1884b03a 	or	r2,r3,r2
  805680:	10bfffcc 	andi	r2,r2,65535
  805684:	1006943a 	slli	r3,r2,16
  805688:	e0bffe17 	ldw	r2,-8(fp)
  80568c:	10800517 	ldw	r2,20(r2)
  805690:	108006c4 	addi	r2,r2,27
  805694:	10800003 	ldbu	r2,0(r2)
  805698:	10803fcc 	andi	r2,r2,255
  80569c:	1004923a 	slli	r2,r2,8
  8056a0:	1009883a 	mov	r4,r2
  8056a4:	e0bffe17 	ldw	r2,-8(fp)
  8056a8:	10800517 	ldw	r2,20(r2)
  8056ac:	10800684 	addi	r2,r2,26
  8056b0:	10800003 	ldbu	r2,0(r2)
  8056b4:	10803fcc 	andi	r2,r2,255
  8056b8:	2084b03a 	or	r2,r4,r2
  8056bc:	10bfffcc 	andi	r2,r2,65535
  8056c0:	1886b03a 	or	r3,r3,r2
  8056c4:	e0bffe17 	ldw	r2,-8(fp)
  8056c8:	10c00215 	stw	r3,8(r2)
  8056cc:	00000206 	br	8056d8 <f_opendir+0x118>
            } else {                /* The object is not a directory */
               res = FR_NO_PATH;
  8056d0:	00800144 	movi	r2,5
  8056d4:	e0bffa15 	stw	r2,-24(fp)
            }
         }
         if (res == FR_OK) {
  8056d8:	e0bffa17 	ldw	r2,-24(fp)
  8056dc:	1000091e 	bne	r2,zero,805704 <f_opendir+0x144>
            dj->id = dj->fs->id;
  8056e0:	e0bffe17 	ldw	r2,-8(fp)
  8056e4:	10800017 	ldw	r2,0(r2)
  8056e8:	10c0018b 	ldhu	r3,6(r2)
  8056ec:	e0bffe17 	ldw	r2,-8(fp)
  8056f0:	10c0010d 	sth	r3,4(r2)
            res = dir_sdi(dj, 0);         /* Rewind dir */
  8056f4:	e13ffe17 	ldw	r4,-8(fp)
  8056f8:	000b883a 	mov	r5,zero
  8056fc:	08023e40 	call	8023e4 <dir_sdi>
  805700:	e0bffa15 	stw	r2,-24(fp)
         }
      }
      if (res == FR_NO_FILE) res = FR_NO_PATH;
  805704:	e0bffa17 	ldw	r2,-24(fp)
  805708:	10800118 	cmpnei	r2,r2,4
  80570c:	1000021e 	bne	r2,zero,805718 <f_opendir+0x158>
  805710:	00800144 	movi	r2,5
  805714:	e0bffa15 	stw	r2,-24(fp)
   }

   LEAVE_FF(dj->fs, res);
  805718:	e0bffa17 	ldw	r2,-24(fp)
}
  80571c:	e037883a 	mov	sp,fp
  805720:	dfc00117 	ldw	ra,4(sp)
  805724:	df000017 	ldw	fp,0(sp)
  805728:	dec00204 	addi	sp,sp,8
  80572c:	f800283a 	ret

00805730 <f_readdir>:

FRESULT f_readdir (
   DIR *dj,       /* Pointer to the open directory object */
   FILINFO *fno      /* Pointer to file information to return */
)
{
  805730:	defff804 	addi	sp,sp,-32
  805734:	dfc00715 	stw	ra,28(sp)
  805738:	df000615 	stw	fp,24(sp)
  80573c:	df000604 	addi	fp,sp,24
  805740:	e13ffe15 	stw	r4,-8(fp)
  805744:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = validate(dj->fs, dj->id);        /* Check validity of the object */
  805748:	e0bffe17 	ldw	r2,-8(fp)
  80574c:	10c00017 	ldw	r3,0(r2)
  805750:	e0bffe17 	ldw	r2,-8(fp)
  805754:	1080010b 	ldhu	r2,4(r2)
  805758:	10bfffcc 	andi	r2,r2,65535
  80575c:	1809883a 	mov	r4,r3
  805760:	100b883a 	mov	r5,r2
  805764:	0803dfc0 	call	803dfc <validate>
  805768:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
  80576c:	e0bffa17 	ldw	r2,-24(fp)
  805770:	1000221e 	bne	r2,zero,8057fc <f_readdir+0xcc>

      if (!fno) {
  805774:	e0bfff17 	ldw	r2,-4(fp)
  805778:	1000051e 	bne	r2,zero,805790 <f_readdir+0x60>
         res = dir_sdi(dj, 0);         /* Rewind the directory object */
  80577c:	e13ffe17 	ldw	r4,-8(fp)
  805780:	000b883a 	mov	r5,zero
  805784:	08023e40 	call	8023e4 <dir_sdi>
  805788:	e0bffa15 	stw	r2,-24(fp)
  80578c:	00001b06 	br	8057fc <f_readdir+0xcc>
      } else {
         INIT_BUF(*dj);
  805790:	e0bffe17 	ldw	r2,-8(fp)
  805794:	e0fffb04 	addi	r3,fp,-20
  805798:	10c00615 	stw	r3,24(r2)
         res = dir_read(dj);           /* Read an directory item */
  80579c:	e13ffe17 	ldw	r4,-8(fp)
  8057a0:	08029ac0 	call	8029ac <dir_read>
  8057a4:	e0bffa15 	stw	r2,-24(fp)
         if (res == FR_NO_FILE) {      /* Reached end of dir */
  8057a8:	e0bffa17 	ldw	r2,-24(fp)
  8057ac:	10800118 	cmpnei	r2,r2,4
  8057b0:	1000031e 	bne	r2,zero,8057c0 <f_readdir+0x90>
            dj->sect = 0;
  8057b4:	e0bffe17 	ldw	r2,-8(fp)
  8057b8:	10000415 	stw	zero,16(r2)
            res = FR_OK;
  8057bc:	e03ffa15 	stw	zero,-24(fp)
         }
         if (res == FR_OK) {           /* A valid entry is found */
  8057c0:	e0bffa17 	ldw	r2,-24(fp)
  8057c4:	10000d1e 	bne	r2,zero,8057fc <f_readdir+0xcc>

            get_fileinfo(dj, fno);     /* Get the object information */
  8057c8:	e13ffe17 	ldw	r4,-8(fp)
  8057cc:	e17fff17 	ldw	r5,-4(fp)
  8057d0:	0802f4c0 	call	802f4c <get_fileinfo>
            res = dir_next(dj, 0);     /* Increment index for next */
  8057d4:	e13ffe17 	ldw	r4,-8(fp)
  8057d8:	000b883a 	mov	r5,zero
  8057dc:	08025d00 	call	8025d0 <dir_next>
  8057e0:	e0bffa15 	stw	r2,-24(fp)
            if (res == FR_NO_FILE) {
  8057e4:	e0bffa17 	ldw	r2,-24(fp)
  8057e8:	10800118 	cmpnei	r2,r2,4
  8057ec:	1000031e 	bne	r2,zero,8057fc <f_readdir+0xcc>

               dj->sect = 0;
  8057f0:	e0bffe17 	ldw	r2,-8(fp)
  8057f4:	10000415 	stw	zero,16(r2)
               res = FR_OK;
  8057f8:	e03ffa15 	stw	zero,-24(fp)
         }
         FREE_BUF();
      }
   }

   LEAVE_FF(dj->fs, res);
  8057fc:	e0bffa17 	ldw	r2,-24(fp)
}
  805800:	e037883a 	mov	sp,fp
  805804:	dfc00117 	ldw	ra,4(sp)
  805808:	df000017 	ldw	fp,0(sp)
  80580c:	dec00204 	addi	sp,sp,8
  805810:	f800283a 	ret

00805814 <f_stat>:

FRESULT f_stat (
   const TCHAR *path,   /* Pointer to the file path */
   FILINFO *fno      /* Pointer to file information to return */
)
{
  805814:	defff104 	addi	sp,sp,-60
  805818:	dfc00e15 	stw	ra,56(sp)
  80581c:	df000d15 	stw	fp,52(sp)
  805820:	df000d04 	addi	fp,sp,52
  805824:	e13ffe15 	stw	r4,-8(fp)
  805828:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DIR dj;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 0);
  80582c:	e0fffe04 	addi	r3,fp,-8
  805830:	e0bff404 	addi	r2,fp,-48
  805834:	1809883a 	mov	r4,r3
  805838:	100b883a 	mov	r5,r2
  80583c:	000d883a 	mov	r6,zero
  805840:	08034c00 	call	8034c0 <chk_mounted>
  805844:	e0bff315 	stw	r2,-52(fp)
   if (res == FR_OK) {
  805848:	e0bff317 	ldw	r2,-52(fp)
  80584c:	1000131e 	bne	r2,zero,80589c <f_stat+0x88>
      INIT_BUF(dj);
  805850:	e0bffb04 	addi	r2,fp,-20
  805854:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
  805858:	e0bffe17 	ldw	r2,-8(fp)
  80585c:	e0fff404 	addi	r3,fp,-48
  805860:	1809883a 	mov	r4,r3
  805864:	100b883a 	mov	r5,r2
  805868:	080317c0 	call	80317c <follow_path>
  80586c:	e0bff315 	stw	r2,-52(fp)
      if (res == FR_OK) {           /* Follow completed */
  805870:	e0bff317 	ldw	r2,-52(fp)
  805874:	1000091e 	bne	r2,zero,80589c <f_stat+0x88>
         if (dj.dir)    /* Found an object */
  805878:	e0bff917 	ldw	r2,-28(fp)
  80587c:	10000526 	beq	r2,zero,805894 <f_stat+0x80>
            get_fileinfo(&dj, fno);
  805880:	e0bff404 	addi	r2,fp,-48
  805884:	1009883a 	mov	r4,r2
  805888:	e17fff17 	ldw	r5,-4(fp)
  80588c:	0802f4c0 	call	802f4c <get_fileinfo>
  805890:	00000206 	br	80589c <f_stat+0x88>
         else        /* It is root dir */
            res = FR_INVALID_NAME;
  805894:	00800184 	movi	r2,6
  805898:	e0bff315 	stw	r2,-52(fp)
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
  80589c:	e0bff317 	ldw	r2,-52(fp)
}
  8058a0:	e037883a 	mov	sp,fp
  8058a4:	dfc00117 	ldw	ra,4(sp)
  8058a8:	df000017 	ldw	fp,0(sp)
  8058ac:	dec00204 	addi	sp,sp,8
  8058b0:	f800283a 	ret

008058b4 <f_getfree>:
FRESULT f_getfree (
   const TCHAR *path,   /* Pointer to the logical drive number (root dir) */
   uint32_t *nclst,     /* Pointer to the variable to return number of free clusters */
   FATFS **fatfs     /* Pointer to pointer to corresponding file system object to return */
)
{
  8058b4:	defff304 	addi	sp,sp,-52
  8058b8:	dfc00c15 	stw	ra,48(sp)
  8058bc:	df000b15 	stw	fp,44(sp)
  8058c0:	df000b04 	addi	fp,sp,44
  8058c4:	e13ffd15 	stw	r4,-12(fp)
  8058c8:	e17ffe15 	stw	r5,-8(fp)
  8058cc:	e1bfff15 	stw	r6,-4(fp)
   uint32_t i;
   uint8_t fat, *p;


   /* Get drive number */
   res = chk_mounted(&path, fatfs, 0);
  8058d0:	e0bffd04 	addi	r2,fp,-12
  8058d4:	1009883a 	mov	r4,r2
  8058d8:	e17fff17 	ldw	r5,-4(fp)
  8058dc:	000d883a 	mov	r6,zero
  8058e0:	08034c00 	call	8034c0 <chk_mounted>
  8058e4:	e0bff515 	stw	r2,-44(fp)
   if (res == FR_OK) {
  8058e8:	e0bff517 	ldw	r2,-44(fp)
  8058ec:	1000a61e 	bne	r2,zero,805b88 <f_getfree+0x2d4>
      /* If free_clust is valid, return it without full cluster scan */
      if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
  8058f0:	e0bfff17 	ldw	r2,-4(fp)
  8058f4:	10800017 	ldw	r2,0(r2)
  8058f8:	10800417 	ldw	r2,16(r2)
  8058fc:	e0ffff17 	ldw	r3,-4(fp)
  805900:	18c00017 	ldw	r3,0(r3)
  805904:	18c00617 	ldw	r3,24(r3)
  805908:	18ffff84 	addi	r3,r3,-2
  80590c:	18800636 	bltu	r3,r2,805928 <f_getfree+0x74>
         *nclst = (*fatfs)->free_clust;
  805910:	e0bfff17 	ldw	r2,-4(fp)
  805914:	10800017 	ldw	r2,0(r2)
  805918:	10c00417 	ldw	r3,16(r2)
  80591c:	e0bffe17 	ldw	r2,-8(fp)
  805920:	10c00015 	stw	r3,0(r2)
  805924:	00009806 	br	805b88 <f_getfree+0x2d4>
      } else {
         /* Get number of free clusters */
         fat = (*fatfs)->fs_type;
  805928:	e0bfff17 	ldw	r2,-4(fp)
  80592c:	10800017 	ldw	r2,0(r2)
  805930:	10800003 	ldbu	r2,0(r2)
  805934:	e0bffb05 	stb	r2,-20(fp)
         n = 0;
  805938:	e03ff615 	stw	zero,-40(fp)
         if (fat == FS_FAT12) {
  80593c:	e0bffb03 	ldbu	r2,-20(fp)
  805940:	10800058 	cmpnei	r2,r2,1
  805944:	1000231e 	bne	r2,zero,8059d4 <f_getfree+0x120>
            clst = 2;
  805948:	00800084 	movi	r2,2
  80594c:	e0bff715 	stw	r2,-36(fp)
            do {
               stat = get_fat(*fatfs, clst);
  805950:	e0bfff17 	ldw	r2,-4(fp)
  805954:	10800017 	ldw	r2,0(r2)
  805958:	1009883a 	mov	r4,r2
  80595c:	e17ff717 	ldw	r5,-36(fp)
  805960:	0801af80 	call	801af8 <get_fat>
  805964:	e0bffc15 	stw	r2,-16(fp)
               if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  805968:	e0bffc17 	ldw	r2,-16(fp)
  80596c:	10bfffd8 	cmpnei	r2,r2,-1
  805970:	1000031e 	bne	r2,zero,805980 <f_getfree+0xcc>
  805974:	00800044 	movi	r2,1
  805978:	e0bff515 	stw	r2,-44(fp)
  80597c:	00001406 	br	8059d0 <f_getfree+0x11c>
               if (stat == 1) { res = FR_INT_ERR; break; }
  805980:	e0bffc17 	ldw	r2,-16(fp)
  805984:	10800058 	cmpnei	r2,r2,1
  805988:	1000031e 	bne	r2,zero,805998 <f_getfree+0xe4>
  80598c:	00800084 	movi	r2,2
  805990:	e0bff515 	stw	r2,-44(fp)
  805994:	00000e06 	br	8059d0 <f_getfree+0x11c>
               if (stat == 0) n++;
  805998:	e0bffc17 	ldw	r2,-16(fp)
  80599c:	1000031e 	bne	r2,zero,8059ac <f_getfree+0xf8>
  8059a0:	e0bff617 	ldw	r2,-40(fp)
  8059a4:	10800044 	addi	r2,r2,1
  8059a8:	e0bff615 	stw	r2,-40(fp)
            } while (++clst < (*fatfs)->n_fatent);
  8059ac:	e0bff717 	ldw	r2,-36(fp)
  8059b0:	10800044 	addi	r2,r2,1
  8059b4:	e0bff715 	stw	r2,-36(fp)
  8059b8:	e0bfff17 	ldw	r2,-4(fp)
  8059bc:	10800017 	ldw	r2,0(r2)
  8059c0:	10800617 	ldw	r2,24(r2)
  8059c4:	e0fff717 	ldw	r3,-36(fp)
  8059c8:	18bfe136 	bltu	r3,r2,805950 <__alt_data_end+0xff805950>
  8059cc:	00006006 	br	805b50 <f_getfree+0x29c>
  8059d0:	00005f06 	br	805b50 <f_getfree+0x29c>
         } else {
            clst = (*fatfs)->n_fatent;
  8059d4:	e0bfff17 	ldw	r2,-4(fp)
  8059d8:	10800017 	ldw	r2,0(r2)
  8059dc:	10800617 	ldw	r2,24(r2)
  8059e0:	e0bff715 	stw	r2,-36(fp)
            sect = (*fatfs)->fatbase;
  8059e4:	e0bfff17 	ldw	r2,-4(fp)
  8059e8:	10800017 	ldw	r2,0(r2)
  8059ec:	10800817 	ldw	r2,32(r2)
  8059f0:	e0bff815 	stw	r2,-32(fp)
            i = 0; p = 0;
  8059f4:	e03ff915 	stw	zero,-28(fp)
  8059f8:	e03ffa15 	stw	zero,-24(fp)
            do {
               if (!i) {
  8059fc:	e0bff917 	ldw	r2,-28(fp)
  805a00:	1000111e 	bne	r2,zero,805a48 <f_getfree+0x194>
                  res = move_window(*fatfs, sect++);
  805a04:	e0bfff17 	ldw	r2,-4(fp)
  805a08:	11000017 	ldw	r4,0(r2)
  805a0c:	e0bff817 	ldw	r2,-32(fp)
  805a10:	10c00044 	addi	r3,r2,1
  805a14:	e0fff815 	stw	r3,-32(fp)
  805a18:	100b883a 	mov	r5,r2
  805a1c:	08017140 	call	801714 <move_window>
  805a20:	e0bff515 	stw	r2,-44(fp)
                  if (res != FR_OK) break;
  805a24:	e0bff517 	ldw	r2,-44(fp)
  805a28:	10000126 	beq	r2,zero,805a30 <f_getfree+0x17c>
  805a2c:	00004806 	br	805b50 <f_getfree+0x29c>
                  p = (*fatfs)->win;
  805a30:	e0bfff17 	ldw	r2,-4(fp)
  805a34:	10800017 	ldw	r2,0(r2)
  805a38:	10800c04 	addi	r2,r2,48
  805a3c:	e0bffa15 	stw	r2,-24(fp)
                  i = SS(*fatfs);
  805a40:	00808004 	movi	r2,512
  805a44:	e0bff915 	stw	r2,-28(fp)
               }
               if (fat == FS_FAT16) {
  805a48:	e0bffb03 	ldbu	r2,-20(fp)
  805a4c:	10800098 	cmpnei	r2,r2,2
  805a50:	1000181e 	bne	r2,zero,805ab4 <f_getfree+0x200>
                  if (LD_WORD(p) == 0) n++;
  805a54:	e0bffa17 	ldw	r2,-24(fp)
  805a58:	10800044 	addi	r2,r2,1
  805a5c:	10800003 	ldbu	r2,0(r2)
  805a60:	10803fcc 	andi	r2,r2,255
  805a64:	1004923a 	slli	r2,r2,8
  805a68:	1007883a 	mov	r3,r2
  805a6c:	e0bffa17 	ldw	r2,-24(fp)
  805a70:	10800003 	ldbu	r2,0(r2)
  805a74:	10803fcc 	andi	r2,r2,255
  805a78:	1884b03a 	or	r2,r3,r2
  805a7c:	10bfffcc 	andi	r2,r2,65535
  805a80:	10a0001c 	xori	r2,r2,32768
  805a84:	10a00004 	addi	r2,r2,-32768
  805a88:	1000031e 	bne	r2,zero,805a98 <f_getfree+0x1e4>
  805a8c:	e0bff617 	ldw	r2,-40(fp)
  805a90:	10800044 	addi	r2,r2,1
  805a94:	e0bff615 	stw	r2,-40(fp)
                  p += 2; i -= 2;
  805a98:	e0bffa17 	ldw	r2,-24(fp)
  805a9c:	10800084 	addi	r2,r2,2
  805aa0:	e0bffa15 	stw	r2,-24(fp)
  805aa4:	e0bff917 	ldw	r2,-28(fp)
  805aa8:	10bfff84 	addi	r2,r2,-2
  805aac:	e0bff915 	stw	r2,-28(fp)
  805ab0:	00002206 	br	805b3c <f_getfree+0x288>
               } else {
                  if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
  805ab4:	e0bffa17 	ldw	r2,-24(fp)
  805ab8:	108000c4 	addi	r2,r2,3
  805abc:	10800003 	ldbu	r2,0(r2)
  805ac0:	10803fcc 	andi	r2,r2,255
  805ac4:	1006963a 	slli	r3,r2,24
  805ac8:	e0bffa17 	ldw	r2,-24(fp)
  805acc:	10800084 	addi	r2,r2,2
  805ad0:	10800003 	ldbu	r2,0(r2)
  805ad4:	10803fcc 	andi	r2,r2,255
  805ad8:	1004943a 	slli	r2,r2,16
  805adc:	1884b03a 	or	r2,r3,r2
  805ae0:	e0fffa17 	ldw	r3,-24(fp)
  805ae4:	18c00044 	addi	r3,r3,1
  805ae8:	18c00003 	ldbu	r3,0(r3)
  805aec:	18c03fcc 	andi	r3,r3,255
  805af0:	1806923a 	slli	r3,r3,8
  805af4:	10c6b03a 	or	r3,r2,r3
  805af8:	e0bffa17 	ldw	r2,-24(fp)
  805afc:	10800003 	ldbu	r2,0(r2)
  805b00:	10803fcc 	andi	r2,r2,255
  805b04:	1886b03a 	or	r3,r3,r2
  805b08:	00840034 	movhi	r2,4096
  805b0c:	10bfffc4 	addi	r2,r2,-1
  805b10:	1884703a 	and	r2,r3,r2
  805b14:	1000031e 	bne	r2,zero,805b24 <f_getfree+0x270>
  805b18:	e0bff617 	ldw	r2,-40(fp)
  805b1c:	10800044 	addi	r2,r2,1
  805b20:	e0bff615 	stw	r2,-40(fp)
                  p += 4; i -= 4;
  805b24:	e0bffa17 	ldw	r2,-24(fp)
  805b28:	10800104 	addi	r2,r2,4
  805b2c:	e0bffa15 	stw	r2,-24(fp)
  805b30:	e0bff917 	ldw	r2,-28(fp)
  805b34:	10bfff04 	addi	r2,r2,-4
  805b38:	e0bff915 	stw	r2,-28(fp)
               }
            } while (--clst);
  805b3c:	e0bff717 	ldw	r2,-36(fp)
  805b40:	10bfffc4 	addi	r2,r2,-1
  805b44:	e0bff715 	stw	r2,-36(fp)
  805b48:	e0bff717 	ldw	r2,-36(fp)
  805b4c:	103fab1e 	bne	r2,zero,8059fc <__alt_data_end+0xff8059fc>
         }
         (*fatfs)->free_clust = n;
  805b50:	e0bfff17 	ldw	r2,-4(fp)
  805b54:	10800017 	ldw	r2,0(r2)
  805b58:	e0fff617 	ldw	r3,-40(fp)
  805b5c:	10c00415 	stw	r3,16(r2)
         if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
  805b60:	e0bffb03 	ldbu	r2,-20(fp)
  805b64:	108000d8 	cmpnei	r2,r2,3
  805b68:	1000041e 	bne	r2,zero,805b7c <f_getfree+0x2c8>
  805b6c:	e0bfff17 	ldw	r2,-4(fp)
  805b70:	10800017 	ldw	r2,0(r2)
  805b74:	00c00044 	movi	r3,1
  805b78:	10c00145 	stb	r3,5(r2)
         *nclst = n;
  805b7c:	e0bffe17 	ldw	r2,-8(fp)
  805b80:	e0fff617 	ldw	r3,-40(fp)
  805b84:	10c00015 	stw	r3,0(r2)
      }
   }
   LEAVE_FF(*fatfs, res);
  805b88:	e0bff517 	ldw	r2,-44(fp)
}
  805b8c:	e037883a 	mov	sp,fp
  805b90:	dfc00117 	ldw	ra,4(sp)
  805b94:	df000017 	ldw	fp,0(sp)
  805b98:	dec00204 	addi	sp,sp,8
  805b9c:	f800283a 	ret

00805ba0 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
   FIL *fp     /* Pointer to the file object */
)
{
  805ba0:	defffb04 	addi	sp,sp,-20
  805ba4:	dfc00415 	stw	ra,16(sp)
  805ba8:	df000315 	stw	fp,12(sp)
  805bac:	df000304 	addi	fp,sp,12
  805bb0:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t ncl;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  805bb4:	e0bfff17 	ldw	r2,-4(fp)
  805bb8:	10c00017 	ldw	r3,0(r2)
  805bbc:	e0bfff17 	ldw	r2,-4(fp)
  805bc0:	1080010b 	ldhu	r2,4(r2)
  805bc4:	10bfffcc 	andi	r2,r2,65535
  805bc8:	1809883a 	mov	r4,r3
  805bcc:	100b883a 	mov	r5,r2
  805bd0:	0803dfc0 	call	803dfc <validate>
  805bd4:	e0bffd15 	stw	r2,-12(fp)
   if (res == FR_OK) {
  805bd8:	e0bffd17 	ldw	r2,-12(fp)
  805bdc:	1000101e 	bne	r2,zero,805c20 <f_truncate+0x80>
      if (fp->flag & FA__ERROR) {         /* Check abort flag */
  805be0:	e0bfff17 	ldw	r2,-4(fp)
  805be4:	10800183 	ldbu	r2,6(r2)
  805be8:	10803fcc 	andi	r2,r2,255
  805bec:	1080201c 	xori	r2,r2,128
  805bf0:	10bfe004 	addi	r2,r2,-128
  805bf4:	1000030e 	bge	r2,zero,805c04 <f_truncate+0x64>
         res = FR_INT_ERR;
  805bf8:	00800084 	movi	r2,2
  805bfc:	e0bffd15 	stw	r2,-12(fp)
  805c00:	00000706 	br	805c20 <f_truncate+0x80>
      } else {
         if (!(fp->flag & FA_WRITE))      /* Check access mode */
  805c04:	e0bfff17 	ldw	r2,-4(fp)
  805c08:	10800183 	ldbu	r2,6(r2)
  805c0c:	10803fcc 	andi	r2,r2,255
  805c10:	1080008c 	andi	r2,r2,2
  805c14:	1000021e 	bne	r2,zero,805c20 <f_truncate+0x80>
            res = FR_DENIED;
  805c18:	008001c4 	movi	r2,7
  805c1c:	e0bffd15 	stw	r2,-12(fp)
      }
   }
   if (res == FR_OK) {
  805c20:	e0bffd17 	ldw	r2,-12(fp)
  805c24:	1000521e 	bne	r2,zero,805d70 <f_truncate+0x1d0>
      if (fp->fsize > fp->fptr) {
  805c28:	e0bfff17 	ldw	r2,-4(fp)
  805c2c:	10800317 	ldw	r2,12(r2)
  805c30:	e0ffff17 	ldw	r3,-4(fp)
  805c34:	18c00217 	ldw	r3,8(r3)
  805c38:	1880442e 	bgeu	r3,r2,805d4c <f_truncate+0x1ac>
         fp->fsize = fp->fptr;   /* Set file size to current R/W point */
  805c3c:	e0bfff17 	ldw	r2,-4(fp)
  805c40:	10c00217 	ldw	r3,8(r2)
  805c44:	e0bfff17 	ldw	r2,-4(fp)
  805c48:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
  805c4c:	e0bfff17 	ldw	r2,-4(fp)
  805c50:	10800183 	ldbu	r2,6(r2)
  805c54:	10800814 	ori	r2,r2,32
  805c58:	1007883a 	mov	r3,r2
  805c5c:	e0bfff17 	ldw	r2,-4(fp)
  805c60:	10c00185 	stb	r3,6(r2)
         if (fp->fptr == 0) { /* When set file size to zero, remove entire cluster chain */
  805c64:	e0bfff17 	ldw	r2,-4(fp)
  805c68:	10800217 	ldw	r2,8(r2)
  805c6c:	10000b1e 	bne	r2,zero,805c9c <f_truncate+0xfc>
            res = remove_chain(fp->fs, fp->sclust);
  805c70:	e0bfff17 	ldw	r2,-4(fp)
  805c74:	10c00017 	ldw	r3,0(r2)
  805c78:	e0bfff17 	ldw	r2,-4(fp)
  805c7c:	10800417 	ldw	r2,16(r2)
  805c80:	1809883a 	mov	r4,r3
  805c84:	100b883a 	mov	r5,r2
  805c88:	08020ec0 	call	8020ec <remove_chain>
  805c8c:	e0bffd15 	stw	r2,-12(fp)
            fp->sclust = 0;
  805c90:	e0bfff17 	ldw	r2,-4(fp)
  805c94:	10000415 	stw	zero,16(r2)
  805c98:	00002c06 	br	805d4c <f_truncate+0x1ac>
         } else {          /* When truncate a part of the file, remove remaining clusters */
            ncl = get_fat(fp->fs, fp->clust);
  805c9c:	e0bfff17 	ldw	r2,-4(fp)
  805ca0:	10c00017 	ldw	r3,0(r2)
  805ca4:	e0bfff17 	ldw	r2,-4(fp)
  805ca8:	10800517 	ldw	r2,20(r2)
  805cac:	1809883a 	mov	r4,r3
  805cb0:	100b883a 	mov	r5,r2
  805cb4:	0801af80 	call	801af8 <get_fat>
  805cb8:	e0bffe15 	stw	r2,-8(fp)
            res = FR_OK;
  805cbc:	e03ffd15 	stw	zero,-12(fp)
            if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
  805cc0:	e0bffe17 	ldw	r2,-8(fp)
  805cc4:	10bfffd8 	cmpnei	r2,r2,-1
  805cc8:	1000021e 	bne	r2,zero,805cd4 <f_truncate+0x134>
  805ccc:	00800044 	movi	r2,1
  805cd0:	e0bffd15 	stw	r2,-12(fp)
            if (ncl == 1) res = FR_INT_ERR;
  805cd4:	e0bffe17 	ldw	r2,-8(fp)
  805cd8:	10800058 	cmpnei	r2,r2,1
  805cdc:	1000021e 	bne	r2,zero,805ce8 <f_truncate+0x148>
  805ce0:	00800084 	movi	r2,2
  805ce4:	e0bffd15 	stw	r2,-12(fp)
            if (res == FR_OK && ncl < fp->fs->n_fatent) {
  805ce8:	e0bffd17 	ldw	r2,-12(fp)
  805cec:	1000171e 	bne	r2,zero,805d4c <f_truncate+0x1ac>
  805cf0:	e0bfff17 	ldw	r2,-4(fp)
  805cf4:	10800017 	ldw	r2,0(r2)
  805cf8:	10800617 	ldw	r2,24(r2)
  805cfc:	e0fffe17 	ldw	r3,-8(fp)
  805d00:	1880122e 	bgeu	r3,r2,805d4c <f_truncate+0x1ac>
               res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
  805d04:	e0bfff17 	ldw	r2,-4(fp)
  805d08:	10c00017 	ldw	r3,0(r2)
  805d0c:	e0bfff17 	ldw	r2,-4(fp)
  805d10:	10800517 	ldw	r2,20(r2)
  805d14:	1809883a 	mov	r4,r3
  805d18:	100b883a 	mov	r5,r2
  805d1c:	01840034 	movhi	r6,4096
  805d20:	31bfffc4 	addi	r6,r6,-1
  805d24:	0801d7c0 	call	801d7c <put_fat>
  805d28:	e0bffd15 	stw	r2,-12(fp)
               if (res == FR_OK) res = remove_chain(fp->fs, ncl);
  805d2c:	e0bffd17 	ldw	r2,-12(fp)
  805d30:	1000061e 	bne	r2,zero,805d4c <f_truncate+0x1ac>
  805d34:	e0bfff17 	ldw	r2,-4(fp)
  805d38:	10800017 	ldw	r2,0(r2)
  805d3c:	1009883a 	mov	r4,r2
  805d40:	e17ffe17 	ldw	r5,-8(fp)
  805d44:	08020ec0 	call	8020ec <remove_chain>
  805d48:	e0bffd15 	stw	r2,-12(fp)
            }
         }
      }
      if (res != FR_OK) fp->flag |= FA__ERROR;
  805d4c:	e0bffd17 	ldw	r2,-12(fp)
  805d50:	10000726 	beq	r2,zero,805d70 <f_truncate+0x1d0>
  805d54:	e0bfff17 	ldw	r2,-4(fp)
  805d58:	10c00183 	ldbu	r3,6(r2)
  805d5c:	00bfe004 	movi	r2,-128
  805d60:	1884b03a 	or	r2,r3,r2
  805d64:	1007883a 	mov	r3,r2
  805d68:	e0bfff17 	ldw	r2,-4(fp)
  805d6c:	10c00185 	stb	r3,6(r2)
   }

   LEAVE_FF(fp->fs, res);
  805d70:	e0bffd17 	ldw	r2,-12(fp)
}
  805d74:	e037883a 	mov	sp,fp
  805d78:	dfc00117 	ldw	ra,4(sp)
  805d7c:	df000017 	ldw	fp,0(sp)
  805d80:	dec00204 	addi	sp,sp,8
  805d84:	f800283a 	ret

00805d88 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
   const TCHAR *path    /* Pointer to the file or directory path */
)
{
  805d88:	deffe904 	addi	sp,sp,-92
  805d8c:	dfc01615 	stw	ra,88(sp)
  805d90:	df001515 	stw	fp,84(sp)
  805d94:	df001504 	addi	fp,sp,84
  805d98:	e13fff15 	stw	r4,-4(fp)
   uint8_t *dir;
   uint32_t dclst;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  805d9c:	e0ffff04 	addi	r3,fp,-4
  805da0:	e0bfee04 	addi	r2,fp,-72
  805da4:	1809883a 	mov	r4,r3
  805da8:	100b883a 	mov	r5,r2
  805dac:	01800044 	movi	r6,1
  805db0:	08034c00 	call	8034c0 <chk_mounted>
  805db4:	e0bfeb15 	stw	r2,-84(fp)
   if (res == FR_OK) {
  805db8:	e0bfeb17 	ldw	r2,-84(fp)
  805dbc:	1000721e 	bne	r2,zero,805f88 <f_unlink+0x200>
      INIT_BUF(dj);
  805dc0:	e0bffc04 	addi	r2,fp,-16
  805dc4:	e0bff415 	stw	r2,-48(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
  805dc8:	e0bfff17 	ldw	r2,-4(fp)
  805dcc:	e0ffee04 	addi	r3,fp,-72
  805dd0:	1809883a 	mov	r4,r3
  805dd4:	100b883a 	mov	r5,r2
  805dd8:	080317c0 	call	80317c <follow_path>
  805ddc:	e0bfeb15 	stw	r2,-84(fp)
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;        /* Cannot remove dot entry */
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&dj, 2); /* Cannot remove open file */
#endif
      if (res == FR_OK) {              /* The object is accessible */
  805de0:	e0bfeb17 	ldw	r2,-84(fp)
  805de4:	1000681e 	bne	r2,zero,805f88 <f_unlink+0x200>
         dir = dj.dir;
  805de8:	e0bff317 	ldw	r2,-52(fp)
  805dec:	e0bfec15 	stw	r2,-80(fp)
         if (!dir) {
  805df0:	e0bfec17 	ldw	r2,-80(fp)
  805df4:	1000031e 	bne	r2,zero,805e04 <f_unlink+0x7c>
            res = FR_INVALID_NAME;     /* Cannot remove the start directory */
  805df8:	00800184 	movi	r2,6
  805dfc:	e0bfeb15 	stw	r2,-84(fp)
  805e00:	00000806 	br	805e24 <f_unlink+0x9c>
         } else {
            if (dir[DIR_Attr] & AM_RDO)
  805e04:	e0bfec17 	ldw	r2,-80(fp)
  805e08:	108002c4 	addi	r2,r2,11
  805e0c:	10800003 	ldbu	r2,0(r2)
  805e10:	10803fcc 	andi	r2,r2,255
  805e14:	1080004c 	andi	r2,r2,1
  805e18:	10000226 	beq	r2,zero,805e24 <f_unlink+0x9c>
               res = FR_DENIED;     /* Cannot remove R/O object */
  805e1c:	008001c4 	movi	r2,7
  805e20:	e0bfeb15 	stw	r2,-84(fp)
         }
         dclst = LD_CLUST(dir);
  805e24:	e0bfec17 	ldw	r2,-80(fp)
  805e28:	10800544 	addi	r2,r2,21
  805e2c:	10800003 	ldbu	r2,0(r2)
  805e30:	10803fcc 	andi	r2,r2,255
  805e34:	1004923a 	slli	r2,r2,8
  805e38:	1007883a 	mov	r3,r2
  805e3c:	e0bfec17 	ldw	r2,-80(fp)
  805e40:	10800504 	addi	r2,r2,20
  805e44:	10800003 	ldbu	r2,0(r2)
  805e48:	10803fcc 	andi	r2,r2,255
  805e4c:	1884b03a 	or	r2,r3,r2
  805e50:	10bfffcc 	andi	r2,r2,65535
  805e54:	1006943a 	slli	r3,r2,16
  805e58:	e0bfec17 	ldw	r2,-80(fp)
  805e5c:	108006c4 	addi	r2,r2,27
  805e60:	10800003 	ldbu	r2,0(r2)
  805e64:	10803fcc 	andi	r2,r2,255
  805e68:	1004923a 	slli	r2,r2,8
  805e6c:	1009883a 	mov	r4,r2
  805e70:	e0bfec17 	ldw	r2,-80(fp)
  805e74:	10800684 	addi	r2,r2,26
  805e78:	10800003 	ldbu	r2,0(r2)
  805e7c:	10803fcc 	andi	r2,r2,255
  805e80:	2084b03a 	or	r2,r4,r2
  805e84:	10bfffcc 	andi	r2,r2,65535
  805e88:	1884b03a 	or	r2,r3,r2
  805e8c:	e0bfed15 	stw	r2,-76(fp)
         if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) { /* Is it a sub-dir? */
  805e90:	e0bfeb17 	ldw	r2,-84(fp)
  805e94:	1000271e 	bne	r2,zero,805f34 <f_unlink+0x1ac>
  805e98:	e0bfec17 	ldw	r2,-80(fp)
  805e9c:	108002c4 	addi	r2,r2,11
  805ea0:	10800003 	ldbu	r2,0(r2)
  805ea4:	10803fcc 	andi	r2,r2,255
  805ea8:	1080040c 	andi	r2,r2,16
  805eac:	10002126 	beq	r2,zero,805f34 <f_unlink+0x1ac>
            if (dclst < 2) {
  805eb0:	e0bfed17 	ldw	r2,-76(fp)
  805eb4:	108000a8 	cmpgeui	r2,r2,2
  805eb8:	1000031e 	bne	r2,zero,805ec8 <f_unlink+0x140>
               res = FR_INT_ERR;
  805ebc:	00800084 	movi	r2,2
  805ec0:	e0bfeb15 	stw	r2,-84(fp)
  805ec4:	00001b06 	br	805f34 <f_unlink+0x1ac>
            } else {
               mem_cpy(&sdj, &dj, sizeof(DIR)); /* Check if the sub-dir is empty or not */
  805ec8:	e0fff504 	addi	r3,fp,-44
  805ecc:	e0bfee04 	addi	r2,fp,-72
  805ed0:	1809883a 	mov	r4,r3
  805ed4:	100b883a 	mov	r5,r2
  805ed8:	01800704 	movi	r6,28
  805edc:	08015480 	call	801548 <mem_cpy>
               sdj.sclust = dclst;
  805ee0:	e0bfed17 	ldw	r2,-76(fp)
  805ee4:	e0bff715 	stw	r2,-36(fp)
               res = dir_sdi(&sdj, 2);    /* Exclude dot entries */
  805ee8:	e0bff504 	addi	r2,fp,-44
  805eec:	1009883a 	mov	r4,r2
  805ef0:	01400084 	movi	r5,2
  805ef4:	08023e40 	call	8023e4 <dir_sdi>
  805ef8:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) {
  805efc:	e0bfeb17 	ldw	r2,-84(fp)
  805f00:	10000c1e 	bne	r2,zero,805f34 <f_unlink+0x1ac>
                  res = dir_read(&sdj);
  805f04:	e0bff504 	addi	r2,fp,-44
  805f08:	1009883a 	mov	r4,r2
  805f0c:	08029ac0 	call	8029ac <dir_read>
  805f10:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_OK        /* Not empty dir */
  805f14:	e0bfeb17 	ldw	r2,-84(fp)
  805f18:	1000021e 	bne	r2,zero,805f24 <f_unlink+0x19c>
#if _FS_RPATH
                  || dclst == sdj.fs->cdir   /* Current dir */
#endif
                  ) res = FR_DENIED;
  805f1c:	008001c4 	movi	r2,7
  805f20:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_NO_FILE) res = FR_OK; /* Empty */
  805f24:	e0bfeb17 	ldw	r2,-84(fp)
  805f28:	10800118 	cmpnei	r2,r2,4
  805f2c:	1000011e 	bne	r2,zero,805f34 <f_unlink+0x1ac>
  805f30:	e03feb15 	stw	zero,-84(fp)
               }
            }
         }
         if (res == FR_OK) {
  805f34:	e0bfeb17 	ldw	r2,-84(fp)
  805f38:	1000131e 	bne	r2,zero,805f88 <f_unlink+0x200>
            res = dir_remove(&dj);     /* Remove the directory entry */
  805f3c:	e0bfee04 	addi	r2,fp,-72
  805f40:	1009883a 	mov	r4,r2
  805f44:	0802bc80 	call	802bc8 <dir_remove>
  805f48:	e0bfeb15 	stw	r2,-84(fp)
            if (res == FR_OK) {
  805f4c:	e0bfeb17 	ldw	r2,-84(fp)
  805f50:	10000d1e 	bne	r2,zero,805f88 <f_unlink+0x200>
               if (dclst)           /* Remove the cluster chain if exist */
  805f54:	e0bfed17 	ldw	r2,-76(fp)
  805f58:	10000526 	beq	r2,zero,805f70 <f_unlink+0x1e8>
                  res = remove_chain(dj.fs, dclst);
  805f5c:	e0bfee17 	ldw	r2,-72(fp)
  805f60:	1009883a 	mov	r4,r2
  805f64:	e17fed17 	ldw	r5,-76(fp)
  805f68:	08020ec0 	call	8020ec <remove_chain>
  805f6c:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) res = sync(dj.fs);
  805f70:	e0bfeb17 	ldw	r2,-84(fp)
  805f74:	1000041e 	bne	r2,zero,805f88 <f_unlink+0x200>
  805f78:	e0bfee17 	ldw	r2,-72(fp)
  805f7c:	1009883a 	mov	r4,r2
  805f80:	08018700 	call	801870 <sync>
  805f84:	e0bfeb15 	stw	r2,-84(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(dj.fs, res);
  805f88:	e0bfeb17 	ldw	r2,-84(fp)
}
  805f8c:	e037883a 	mov	sp,fp
  805f90:	dfc00117 	ldw	ra,4(sp)
  805f94:	df000017 	ldw	fp,0(sp)
  805f98:	dec00204 	addi	sp,sp,8
  805f9c:	f800283a 	ret

00805fa0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
   const TCHAR *path    /* Pointer to the directory path */
)
{
  805fa0:	deffec04 	addi	sp,sp,-80
  805fa4:	dfc01315 	stw	ra,76(sp)
  805fa8:	df001215 	stw	fp,72(sp)
  805fac:	df001204 	addi	fp,sp,72
  805fb0:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   DIR dj;
   uint8_t *dir, n;
   uint32_t dsc, dcl, pcl, tim = get_fattime();
  805fb4:	080151c0 	call	80151c <get_fattime>
  805fb8:	e0bff215 	stw	r2,-56(fp)
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  805fbc:	e0ffff04 	addi	r3,fp,-4
  805fc0:	e0bff504 	addi	r2,fp,-44
  805fc4:	1809883a 	mov	r4,r3
  805fc8:	100b883a 	mov	r5,r2
  805fcc:	01800044 	movi	r6,1
  805fd0:	08034c00 	call	8034c0 <chk_mounted>
  805fd4:	e0bfee15 	stw	r2,-72(fp)
   if (res == FR_OK) {
  805fd8:	e0bfee17 	ldw	r2,-72(fp)
  805fdc:	1000fa1e 	bne	r2,zero,8063c8 <f_mkdir+0x428>
      INIT_BUF(dj);
  805fe0:	e0bffc04 	addi	r2,fp,-16
  805fe4:	e0bffb15 	stw	r2,-20(fp)
      res = follow_path(&dj, path);       /* Follow the file path */
  805fe8:	e0bfff17 	ldw	r2,-4(fp)
  805fec:	e0fff504 	addi	r3,fp,-44
  805ff0:	1809883a 	mov	r4,r3
  805ff4:	100b883a 	mov	r5,r2
  805ff8:	080317c0 	call	80317c <follow_path>
  805ffc:	e0bfee15 	stw	r2,-72(fp)
      if (res == FR_OK) res = FR_EXIST;      /* Any object with same name is already existing */
  806000:	e0bfee17 	ldw	r2,-72(fp)
  806004:	1000021e 	bne	r2,zero,806010 <f_mkdir+0x70>
  806008:	00800204 	movi	r2,8
  80600c:	e0bfee15 	stw	r2,-72(fp)
      if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_NO_FILE) {            /* Can create a new directory */
  806010:	e0bfee17 	ldw	r2,-72(fp)
  806014:	10800118 	cmpnei	r2,r2,4
  806018:	1000eb1e 	bne	r2,zero,8063c8 <f_mkdir+0x428>
         dcl = create_chain(dj.fs, 0);    /* Allocate a cluster for the new directory table */
  80601c:	e0bff517 	ldw	r2,-44(fp)
  806020:	1009883a 	mov	r4,r2
  806024:	000b883a 	mov	r5,zero
  806028:	08022000 	call	802200 <create_chain>
  80602c:	e0bff315 	stw	r2,-52(fp)
         res = FR_OK;
  806030:	e03fee15 	stw	zero,-72(fp)
         if (dcl == 0) res = FR_DENIED;      /* No space to allocate a new cluster */
  806034:	e0bff317 	ldw	r2,-52(fp)
  806038:	1000021e 	bne	r2,zero,806044 <f_mkdir+0xa4>
  80603c:	008001c4 	movi	r2,7
  806040:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 1) res = FR_INT_ERR;
  806044:	e0bff317 	ldw	r2,-52(fp)
  806048:	10800058 	cmpnei	r2,r2,1
  80604c:	1000021e 	bne	r2,zero,806058 <f_mkdir+0xb8>
  806050:	00800084 	movi	r2,2
  806054:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
  806058:	e0bff317 	ldw	r2,-52(fp)
  80605c:	10bfffd8 	cmpnei	r2,r2,-1
  806060:	1000021e 	bne	r2,zero,80606c <f_mkdir+0xcc>
  806064:	00800044 	movi	r2,1
  806068:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK)             /* Flush FAT */
  80606c:	e0bfee17 	ldw	r2,-72(fp)
  806070:	1000051e 	bne	r2,zero,806088 <f_mkdir+0xe8>
            res = move_window(dj.fs, 0);
  806074:	e0bff517 	ldw	r2,-44(fp)
  806078:	1009883a 	mov	r4,r2
  80607c:	000b883a 	mov	r5,zero
  806080:	08017140 	call	801714 <move_window>
  806084:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK) {              /* Initialize the new directory table */
  806088:	e0bfee17 	ldw	r2,-72(fp)
  80608c:	10008a1e 	bne	r2,zero,8062b8 <f_mkdir+0x318>
            dsc = clust2sect(dj.fs, dcl);
  806090:	e0bff517 	ldw	r2,-44(fp)
  806094:	1009883a 	mov	r4,r2
  806098:	e17ff317 	ldw	r5,-52(fp)
  80609c:	0801a8c0 	call	801a8c <clust2sect>
  8060a0:	e0bff015 	stw	r2,-64(fp)
            dir = dj.fs->win;
  8060a4:	e0bff517 	ldw	r2,-44(fp)
  8060a8:	10800c04 	addi	r2,r2,48
  8060ac:	e0bff415 	stw	r2,-48(fp)
            mem_set(dir, 0, SS(dj.fs));
  8060b0:	e13ff417 	ldw	r4,-48(fp)
  8060b4:	000b883a 	mov	r5,zero
  8060b8:	01808004 	movi	r6,512
  8060bc:	08015b40 	call	8015b4 <mem_set>
            mem_set(dir+DIR_Name, ' ', 8+3); /* Create "." entry */
  8060c0:	e13ff417 	ldw	r4,-48(fp)
  8060c4:	01400804 	movi	r5,32
  8060c8:	018002c4 	movi	r6,11
  8060cc:	08015b40 	call	8015b4 <mem_set>
            dir[DIR_Name] = '.';
  8060d0:	e0bff417 	ldw	r2,-48(fp)
  8060d4:	00c00b84 	movi	r3,46
  8060d8:	10c00005 	stb	r3,0(r2)
            dir[DIR_Attr] = AM_DIR;
  8060dc:	e0bff417 	ldw	r2,-48(fp)
  8060e0:	108002c4 	addi	r2,r2,11
  8060e4:	00c00404 	movi	r3,16
  8060e8:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);
  8060ec:	e0bff417 	ldw	r2,-48(fp)
  8060f0:	10800584 	addi	r2,r2,22
  8060f4:	e0fff217 	ldw	r3,-56(fp)
  8060f8:	10c00005 	stb	r3,0(r2)
  8060fc:	e0bff417 	ldw	r2,-48(fp)
  806100:	108005c4 	addi	r2,r2,23
  806104:	e0fff217 	ldw	r3,-56(fp)
  806108:	18ffffcc 	andi	r3,r3,65535
  80610c:	1806d23a 	srli	r3,r3,8
  806110:	10c00005 	stb	r3,0(r2)
  806114:	e0bff417 	ldw	r2,-48(fp)
  806118:	10800604 	addi	r2,r2,24
  80611c:	e0fff217 	ldw	r3,-56(fp)
  806120:	1806d43a 	srli	r3,r3,16
  806124:	10c00005 	stb	r3,0(r2)
  806128:	e0bff417 	ldw	r2,-48(fp)
  80612c:	10800644 	addi	r2,r2,25
  806130:	e0fff217 	ldw	r3,-56(fp)
  806134:	1806d63a 	srli	r3,r3,24
  806138:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);
  80613c:	e0bff417 	ldw	r2,-48(fp)
  806140:	10800684 	addi	r2,r2,26
  806144:	e0fff317 	ldw	r3,-52(fp)
  806148:	10c00005 	stb	r3,0(r2)
  80614c:	e0bff417 	ldw	r2,-48(fp)
  806150:	108006c4 	addi	r2,r2,27
  806154:	e0fff317 	ldw	r3,-52(fp)
  806158:	18ffffcc 	andi	r3,r3,65535
  80615c:	1806d23a 	srli	r3,r3,8
  806160:	10c00005 	stb	r3,0(r2)
  806164:	e0bff417 	ldw	r2,-48(fp)
  806168:	10800504 	addi	r2,r2,20
  80616c:	e0fff317 	ldw	r3,-52(fp)
  806170:	1806d43a 	srli	r3,r3,16
  806174:	10c00005 	stb	r3,0(r2)
  806178:	e0bff417 	ldw	r2,-48(fp)
  80617c:	10800544 	addi	r2,r2,21
  806180:	e0fff317 	ldw	r3,-52(fp)
  806184:	1806d43a 	srli	r3,r3,16
  806188:	18ffffcc 	andi	r3,r3,65535
  80618c:	1806d23a 	srli	r3,r3,8
  806190:	10c00005 	stb	r3,0(r2)
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
  806194:	e0bff417 	ldw	r2,-48(fp)
  806198:	10800804 	addi	r2,r2,32
  80619c:	1009883a 	mov	r4,r2
  8061a0:	e17ff417 	ldw	r5,-48(fp)
  8061a4:	01800804 	movi	r6,32
  8061a8:	08015480 	call	801548 <mem_cpy>
            dir[33] = '.'; pcl = dj.sclust;
  8061ac:	e0bff417 	ldw	r2,-48(fp)
  8061b0:	10800844 	addi	r2,r2,33
  8061b4:	00c00b84 	movi	r3,46
  8061b8:	10c00005 	stb	r3,0(r2)
  8061bc:	e0bff717 	ldw	r2,-36(fp)
  8061c0:	e0bff115 	stw	r2,-60(fp)
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  8061c4:	e0bff517 	ldw	r2,-44(fp)
  8061c8:	10800003 	ldbu	r2,0(r2)
  8061cc:	10803fcc 	andi	r2,r2,255
  8061d0:	108000d8 	cmpnei	r2,r2,3
  8061d4:	1000051e 	bne	r2,zero,8061ec <f_mkdir+0x24c>
  8061d8:	e0bff517 	ldw	r2,-44(fp)
  8061dc:	10c00917 	ldw	r3,36(r2)
  8061e0:	e0bff117 	ldw	r2,-60(fp)
  8061e4:	1880011e 	bne	r3,r2,8061ec <f_mkdir+0x24c>
               pcl = 0;
  8061e8:	e03ff115 	stw	zero,-60(fp)
            ST_CLUST(dir+SZ_DIR, pcl);
  8061ec:	e0bff417 	ldw	r2,-48(fp)
  8061f0:	10800e84 	addi	r2,r2,58
  8061f4:	e0fff117 	ldw	r3,-60(fp)
  8061f8:	10c00005 	stb	r3,0(r2)
  8061fc:	e0bff417 	ldw	r2,-48(fp)
  806200:	10800ec4 	addi	r2,r2,59
  806204:	e0fff117 	ldw	r3,-60(fp)
  806208:	18ffffcc 	andi	r3,r3,65535
  80620c:	1806d23a 	srli	r3,r3,8
  806210:	10c00005 	stb	r3,0(r2)
  806214:	e0bff417 	ldw	r2,-48(fp)
  806218:	10800d04 	addi	r2,r2,52
  80621c:	e0fff117 	ldw	r3,-60(fp)
  806220:	1806d43a 	srli	r3,r3,16
  806224:	10c00005 	stb	r3,0(r2)
  806228:	e0bff417 	ldw	r2,-48(fp)
  80622c:	10800d44 	addi	r2,r2,53
  806230:	e0fff117 	ldw	r3,-60(fp)
  806234:	1806d43a 	srli	r3,r3,16
  806238:	18ffffcc 	andi	r3,r3,65535
  80623c:	1806d23a 	srli	r3,r3,8
  806240:	10c00005 	stb	r3,0(r2)
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
  806244:	e0bff517 	ldw	r2,-44(fp)
  806248:	10800083 	ldbu	r2,2(r2)
  80624c:	e0bfef05 	stb	r2,-68(fp)
  806250:	00001706 	br	8062b0 <f_mkdir+0x310>
               dj.fs->winsect = dsc++;
  806254:	e0fff517 	ldw	r3,-44(fp)
  806258:	e0bff017 	ldw	r2,-64(fp)
  80625c:	11000044 	addi	r4,r2,1
  806260:	e13ff015 	stw	r4,-64(fp)
  806264:	18800b15 	stw	r2,44(r3)
               dj.fs->wflag = 1;
  806268:	e0bff517 	ldw	r2,-44(fp)
  80626c:	00c00044 	movi	r3,1
  806270:	10c00105 	stb	r3,4(r2)
               res = move_window(dj.fs, 0);
  806274:	e0bff517 	ldw	r2,-44(fp)
  806278:	1009883a 	mov	r4,r2
  80627c:	000b883a 	mov	r5,zero
  806280:	08017140 	call	801714 <move_window>
  806284:	e0bfee15 	stw	r2,-72(fp)
               if (res != FR_OK) break;
  806288:	e0bfee17 	ldw	r2,-72(fp)
  80628c:	10000126 	beq	r2,zero,806294 <f_mkdir+0x2f4>
  806290:	00000906 	br	8062b8 <f_mkdir+0x318>
               mem_set(dir, 0, SS(dj.fs));
  806294:	e13ff417 	ldw	r4,-48(fp)
  806298:	000b883a 	mov	r5,zero
  80629c:	01808004 	movi	r6,512
  8062a0:	08015b40 	call	8015b4 <mem_set>
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
            dir[33] = '.'; pcl = dj.sclust;
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
               pcl = 0;
            ST_CLUST(dir+SZ_DIR, pcl);
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
  8062a4:	e0bfef03 	ldbu	r2,-68(fp)
  8062a8:	10bfffc4 	addi	r2,r2,-1
  8062ac:	e0bfef05 	stb	r2,-68(fp)
  8062b0:	e0bfef03 	ldbu	r2,-68(fp)
  8062b4:	103fe71e 	bne	r2,zero,806254 <__alt_data_end+0xff806254>
               res = move_window(dj.fs, 0);
               if (res != FR_OK) break;
               mem_set(dir, 0, SS(dj.fs));
            }
         }
         if (res == FR_OK) res = dir_register(&dj);   /* Register the object to the directoy */
  8062b8:	e0bfee17 	ldw	r2,-72(fp)
  8062bc:	1000041e 	bne	r2,zero,8062d0 <f_mkdir+0x330>
  8062c0:	e0bff504 	addi	r2,fp,-44
  8062c4:	1009883a 	mov	r4,r2
  8062c8:	0802aa80 	call	802aa8 <dir_register>
  8062cc:	e0bfee15 	stw	r2,-72(fp)
         if (res != FR_OK) {
  8062d0:	e0bfee17 	ldw	r2,-72(fp)
  8062d4:	10000526 	beq	r2,zero,8062ec <f_mkdir+0x34c>
            remove_chain(dj.fs, dcl);        /* Could not register, remove cluster chain */
  8062d8:	e0bff517 	ldw	r2,-44(fp)
  8062dc:	1009883a 	mov	r4,r2
  8062e0:	e17ff317 	ldw	r5,-52(fp)
  8062e4:	08020ec0 	call	8020ec <remove_chain>
  8062e8:	00003706 	br	8063c8 <f_mkdir+0x428>
         } else {
            dir = dj.dir;
  8062ec:	e0bffa17 	ldw	r2,-24(fp)
  8062f0:	e0bff415 	stw	r2,-48(fp)
            dir[DIR_Attr] = AM_DIR;          /* Attribute */
  8062f4:	e0bff417 	ldw	r2,-48(fp)
  8062f8:	108002c4 	addi	r2,r2,11
  8062fc:	00c00404 	movi	r3,16
  806300:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);     /* Created time */
  806304:	e0bff417 	ldw	r2,-48(fp)
  806308:	10800584 	addi	r2,r2,22
  80630c:	e0fff217 	ldw	r3,-56(fp)
  806310:	10c00005 	stb	r3,0(r2)
  806314:	e0bff417 	ldw	r2,-48(fp)
  806318:	108005c4 	addi	r2,r2,23
  80631c:	e0fff217 	ldw	r3,-56(fp)
  806320:	18ffffcc 	andi	r3,r3,65535
  806324:	1806d23a 	srli	r3,r3,8
  806328:	10c00005 	stb	r3,0(r2)
  80632c:	e0bff417 	ldw	r2,-48(fp)
  806330:	10800604 	addi	r2,r2,24
  806334:	e0fff217 	ldw	r3,-56(fp)
  806338:	1806d43a 	srli	r3,r3,16
  80633c:	10c00005 	stb	r3,0(r2)
  806340:	e0bff417 	ldw	r2,-48(fp)
  806344:	10800644 	addi	r2,r2,25
  806348:	e0fff217 	ldw	r3,-56(fp)
  80634c:	1806d63a 	srli	r3,r3,24
  806350:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);              /* Table start cluster */
  806354:	e0bff417 	ldw	r2,-48(fp)
  806358:	10800684 	addi	r2,r2,26
  80635c:	e0fff317 	ldw	r3,-52(fp)
  806360:	10c00005 	stb	r3,0(r2)
  806364:	e0bff417 	ldw	r2,-48(fp)
  806368:	108006c4 	addi	r2,r2,27
  80636c:	e0fff317 	ldw	r3,-52(fp)
  806370:	18ffffcc 	andi	r3,r3,65535
  806374:	1806d23a 	srli	r3,r3,8
  806378:	10c00005 	stb	r3,0(r2)
  80637c:	e0bff417 	ldw	r2,-48(fp)
  806380:	10800504 	addi	r2,r2,20
  806384:	e0fff317 	ldw	r3,-52(fp)
  806388:	1806d43a 	srli	r3,r3,16
  80638c:	10c00005 	stb	r3,0(r2)
  806390:	e0bff417 	ldw	r2,-48(fp)
  806394:	10800544 	addi	r2,r2,21
  806398:	e0fff317 	ldw	r3,-52(fp)
  80639c:	1806d43a 	srli	r3,r3,16
  8063a0:	18ffffcc 	andi	r3,r3,65535
  8063a4:	1806d23a 	srli	r3,r3,8
  8063a8:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  8063ac:	e0bff517 	ldw	r2,-44(fp)
  8063b0:	00c00044 	movi	r3,1
  8063b4:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  8063b8:	e0bff517 	ldw	r2,-44(fp)
  8063bc:	1009883a 	mov	r4,r2
  8063c0:	08018700 	call	801870 <sync>
  8063c4:	e0bfee15 	stw	r2,-72(fp)
         }
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
  8063c8:	e0bfee17 	ldw	r2,-72(fp)
}
  8063cc:	e037883a 	mov	sp,fp
  8063d0:	dfc00117 	ldw	ra,4(sp)
  8063d4:	df000017 	ldw	fp,0(sp)
  8063d8:	dec00204 	addi	sp,sp,8
  8063dc:	f800283a 	ret

008063e0 <f_chmod>:
FRESULT f_chmod (
   const TCHAR *path,   /* Pointer to the file path */
   uint8_t value,       /* Attribute bits */
   uint8_t mask         /* Attribute mask to change */
)
{
  8063e0:	deffef04 	addi	sp,sp,-68
  8063e4:	dfc01015 	stw	ra,64(sp)
  8063e8:	df000f15 	stw	fp,60(sp)
  8063ec:	df000f04 	addi	fp,sp,60
  8063f0:	e13ffd15 	stw	r4,-12(fp)
  8063f4:	2807883a 	mov	r3,r5
  8063f8:	3005883a 	mov	r2,r6
  8063fc:	e0fffe05 	stb	r3,-8(fp)
  806400:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  806404:	e0fffd04 	addi	r3,fp,-12
  806408:	e0bff304 	addi	r2,fp,-52
  80640c:	1809883a 	mov	r4,r3
  806410:	100b883a 	mov	r5,r2
  806414:	01800044 	movi	r6,1
  806418:	08034c00 	call	8034c0 <chk_mounted>
  80641c:	e0bff115 	stw	r2,-60(fp)
   if (res == FR_OK) {
  806420:	e0bff117 	ldw	r2,-60(fp)
  806424:	1000291e 	bne	r2,zero,8064cc <f_chmod+0xec>
      INIT_BUF(dj);
  806428:	e0bffa04 	addi	r2,fp,-24
  80642c:	e0bff915 	stw	r2,-28(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
  806430:	e0bffd17 	ldw	r2,-12(fp)
  806434:	e0fff304 	addi	r3,fp,-52
  806438:	1809883a 	mov	r4,r3
  80643c:	100b883a 	mov	r5,r2
  806440:	080317c0 	call	80317c <follow_path>
  806444:	e0bff115 	stw	r2,-60(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
  806448:	e0bff117 	ldw	r2,-60(fp)
  80644c:	10001f1e 	bne	r2,zero,8064cc <f_chmod+0xec>
         dir = dj.dir;
  806450:	e0bff817 	ldw	r2,-32(fp)
  806454:	e0bff215 	stw	r2,-56(fp)
         if (!dir) {                /* Is it a root directory? */
  806458:	e0bff217 	ldw	r2,-56(fp)
  80645c:	1000031e 	bne	r2,zero,80646c <f_chmod+0x8c>
            res = FR_INVALID_NAME;
  806460:	00800184 	movi	r2,6
  806464:	e0bff115 	stw	r2,-60(fp)
  806468:	00001806 	br	8064cc <f_chmod+0xec>
         } else {                /* File or sub directory */
            mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;   /* Valid attribute mask */
  80646c:	e0bfff03 	ldbu	r2,-4(fp)
  806470:	108009cc 	andi	r2,r2,39
  806474:	e0bfff05 	stb	r2,-4(fp)
            dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (uint8_t)~mask);   /* Apply attribute change */
  806478:	e0bff217 	ldw	r2,-56(fp)
  80647c:	108002c4 	addi	r2,r2,11
  806480:	e13ffe03 	ldbu	r4,-8(fp)
  806484:	e0ffff03 	ldbu	r3,-4(fp)
  806488:	20c6703a 	and	r3,r4,r3
  80648c:	180b883a 	mov	r5,r3
  806490:	e0fff217 	ldw	r3,-56(fp)
  806494:	18c002c4 	addi	r3,r3,11
  806498:	18c00003 	ldbu	r3,0(r3)
  80649c:	e13fff03 	ldbu	r4,-4(fp)
  8064a0:	0108303a 	nor	r4,zero,r4
  8064a4:	1906703a 	and	r3,r3,r4
  8064a8:	28c6b03a 	or	r3,r5,r3
  8064ac:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  8064b0:	e0bff317 	ldw	r2,-52(fp)
  8064b4:	00c00044 	movi	r3,1
  8064b8:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  8064bc:	e0bff317 	ldw	r2,-52(fp)
  8064c0:	1009883a 	mov	r4,r2
  8064c4:	08018700 	call	801870 <sync>
  8064c8:	e0bff115 	stw	r2,-60(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
  8064cc:	e0bff117 	ldw	r2,-60(fp)
}
  8064d0:	e037883a 	mov	sp,fp
  8064d4:	dfc00117 	ldw	ra,4(sp)
  8064d8:	df000017 	ldw	fp,0(sp)
  8064dc:	dec00204 	addi	sp,sp,8
  8064e0:	f800283a 	ret

008064e4 <f_utime>:

FRESULT f_utime (
   const TCHAR *path,   /* Pointer to the file/directory name */
   const FILINFO *fno   /* Pointer to the time stamp to be set */
)
{
  8064e4:	defff004 	addi	sp,sp,-64
  8064e8:	dfc00f15 	stw	ra,60(sp)
  8064ec:	df000e15 	stw	fp,56(sp)
  8064f0:	df000e04 	addi	fp,sp,56
  8064f4:	e13ffe15 	stw	r4,-8(fp)
  8064f8:	e17fff15 	stw	r5,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  8064fc:	e0fffe04 	addi	r3,fp,-8
  806500:	e0bff404 	addi	r2,fp,-48
  806504:	1809883a 	mov	r4,r3
  806508:	100b883a 	mov	r5,r2
  80650c:	01800044 	movi	r6,1
  806510:	08034c00 	call	8034c0 <chk_mounted>
  806514:	e0bff215 	stw	r2,-56(fp)
   if (res == FR_OK) {
  806518:	e0bff217 	ldw	r2,-56(fp)
  80651c:	1000301e 	bne	r2,zero,8065e0 <f_utime+0xfc>
      INIT_BUF(dj);
  806520:	e0bffb04 	addi	r2,fp,-20
  806524:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
  806528:	e0bffe17 	ldw	r2,-8(fp)
  80652c:	e0fff404 	addi	r3,fp,-48
  806530:	1809883a 	mov	r4,r3
  806534:	100b883a 	mov	r5,r2
  806538:	080317c0 	call	80317c <follow_path>
  80653c:	e0bff215 	stw	r2,-56(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
  806540:	e0bff217 	ldw	r2,-56(fp)
  806544:	1000261e 	bne	r2,zero,8065e0 <f_utime+0xfc>
         dir = dj.dir;
  806548:	e0bff917 	ldw	r2,-28(fp)
  80654c:	e0bff315 	stw	r2,-52(fp)
         if (!dir) {             /* Root directory */
  806550:	e0bff317 	ldw	r2,-52(fp)
  806554:	1000031e 	bne	r2,zero,806564 <f_utime+0x80>
            res = FR_INVALID_NAME;
  806558:	00800184 	movi	r2,6
  80655c:	e0bff215 	stw	r2,-56(fp)
  806560:	00001f06 	br	8065e0 <f_utime+0xfc>
         } else {             /* File or sub-directory */
            ST_WORD(dir+DIR_WrtTime, fno->ftime);
  806564:	e0bff317 	ldw	r2,-52(fp)
  806568:	10800584 	addi	r2,r2,22
  80656c:	e0ffff17 	ldw	r3,-4(fp)
  806570:	18c0018b 	ldhu	r3,6(r3)
  806574:	10c00005 	stb	r3,0(r2)
  806578:	e0bff317 	ldw	r2,-52(fp)
  80657c:	108005c4 	addi	r2,r2,23
  806580:	e0ffff17 	ldw	r3,-4(fp)
  806584:	18c0018b 	ldhu	r3,6(r3)
  806588:	18ffffcc 	andi	r3,r3,65535
  80658c:	1806d23a 	srli	r3,r3,8
  806590:	10c00005 	stb	r3,0(r2)
            ST_WORD(dir+DIR_WrtDate, fno->fdate);
  806594:	e0bff317 	ldw	r2,-52(fp)
  806598:	10800604 	addi	r2,r2,24
  80659c:	e0ffff17 	ldw	r3,-4(fp)
  8065a0:	18c0010b 	ldhu	r3,4(r3)
  8065a4:	10c00005 	stb	r3,0(r2)
  8065a8:	e0bff317 	ldw	r2,-52(fp)
  8065ac:	10800644 	addi	r2,r2,25
  8065b0:	e0ffff17 	ldw	r3,-4(fp)
  8065b4:	18c0010b 	ldhu	r3,4(r3)
  8065b8:	18ffffcc 	andi	r3,r3,65535
  8065bc:	1806d23a 	srli	r3,r3,8
  8065c0:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  8065c4:	e0bff417 	ldw	r2,-48(fp)
  8065c8:	00c00044 	movi	r3,1
  8065cc:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  8065d0:	e0bff417 	ldw	r2,-48(fp)
  8065d4:	1009883a 	mov	r4,r2
  8065d8:	08018700 	call	801870 <sync>
  8065dc:	e0bff215 	stw	r2,-56(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
  8065e0:	e0bff217 	ldw	r2,-56(fp)
}
  8065e4:	e037883a 	mov	sp,fp
  8065e8:	dfc00117 	ldw	ra,4(sp)
  8065ec:	df000017 	ldw	fp,0(sp)
  8065f0:	dec00204 	addi	sp,sp,8
  8065f4:	f800283a 	ret

008065f8 <f_rename>:

FRESULT f_rename (
   const TCHAR *path_old,  /* Pointer to the old name */
   const TCHAR *path_new   /* Pointer to the new name */
)
{
  8065f8:	deffe204 	addi	sp,sp,-120
  8065fc:	dfc01d15 	stw	ra,116(sp)
  806600:	df001c15 	stw	fp,112(sp)
  806604:	df001c04 	addi	fp,sp,112
  806608:	e13ffe15 	stw	r4,-8(fp)
  80660c:	e17fff15 	stw	r5,-4(fp)
   uint8_t buf[21], *dir;
   uint32_t dw;
   DEF_NAMEBUF;


   res = chk_mounted(&path_old, &djo.fs, 1);
  806610:	e0fffe04 	addi	r3,fp,-8
  806614:	e0bfe704 	addi	r2,fp,-100
  806618:	1809883a 	mov	r4,r3
  80661c:	100b883a 	mov	r5,r2
  806620:	01800044 	movi	r6,1
  806624:	08034c00 	call	8034c0 <chk_mounted>
  806628:	e0bfe415 	stw	r2,-112(fp)
   if (res == FR_OK) {
  80662c:	e0bfe417 	ldw	r2,-112(fp)
  806630:	1000b01e 	bne	r2,zero,8068f4 <f_rename+0x2fc>
      djn.fs = djo.fs;
  806634:	e0bfe717 	ldw	r2,-100(fp)
  806638:	e0bfee15 	stw	r2,-72(fp)
      INIT_BUF(djo);
  80663c:	e0bffa44 	addi	r2,fp,-23
  806640:	e0bfed15 	stw	r2,-76(fp)
      res = follow_path(&djo, path_old);     /* Check old object */
  806644:	e0bffe17 	ldw	r2,-8(fp)
  806648:	e0ffe704 	addi	r3,fp,-100
  80664c:	1809883a 	mov	r4,r3
  806650:	100b883a 	mov	r5,r2
  806654:	080317c0 	call	80317c <follow_path>
  806658:	e0bfe415 	stw	r2,-112(fp)
      if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
      if (res == FR_OK) {                 /* Old object is found */
  80665c:	e0bfe417 	ldw	r2,-112(fp)
  806660:	1000a41e 	bne	r2,zero,8068f4 <f_rename+0x2fc>
         if (!djo.dir) {                  /* Is root dir? */
  806664:	e0bfec17 	ldw	r2,-80(fp)
  806668:	1000031e 	bne	r2,zero,806678 <f_rename+0x80>
            res = FR_NO_FILE;
  80666c:	00800104 	movi	r2,4
  806670:	e0bfe415 	stw	r2,-112(fp)
  806674:	00009f06 	br	8068f4 <f_rename+0x2fc>
         } else {
            mem_cpy(buf, djo.dir+DIR_Attr, 21);    /* Save the object information except for name */
  806678:	e0bfec17 	ldw	r2,-80(fp)
  80667c:	108002c4 	addi	r2,r2,11
  806680:	e0fff504 	addi	r3,fp,-44
  806684:	1809883a 	mov	r4,r3
  806688:	100b883a 	mov	r5,r2
  80668c:	01800544 	movi	r6,21
  806690:	08015480 	call	801548 <mem_cpy>
            mem_cpy(&djn, &djo, sizeof(DIR));      /* Check new object */
  806694:	e0ffee04 	addi	r3,fp,-72
  806698:	e0bfe704 	addi	r2,fp,-100
  80669c:	1809883a 	mov	r4,r3
  8066a0:	100b883a 	mov	r5,r2
  8066a4:	01800704 	movi	r6,28
  8066a8:	08015480 	call	801548 <mem_cpy>
            res = follow_path(&djn, path_new);
  8066ac:	e0bfee04 	addi	r2,fp,-72
  8066b0:	1009883a 	mov	r4,r2
  8066b4:	e17fff17 	ldw	r5,-4(fp)
  8066b8:	080317c0 	call	80317c <follow_path>
  8066bc:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_OK) res = FR_EXIST;      /* The new object name is already existing */
  8066c0:	e0bfe417 	ldw	r2,-112(fp)
  8066c4:	1000021e 	bne	r2,zero,8066d0 <f_rename+0xd8>
  8066c8:	00800204 	movi	r2,8
  8066cc:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_NO_FILE) {            /* Is it a valid path and no name collision? */
  8066d0:	e0bfe417 	ldw	r2,-112(fp)
  8066d4:	10800118 	cmpnei	r2,r2,4
  8066d8:	1000861e 	bne	r2,zero,8068f4 <f_rename+0x2fc>
/* Start critical section that any interruption or error can cause cross-link */
               res = dir_register(&djn);        /* Register the new entry */
  8066dc:	e0bfee04 	addi	r2,fp,-72
  8066e0:	1009883a 	mov	r4,r2
  8066e4:	0802aa80 	call	802aa8 <dir_register>
  8066e8:	e0bfe415 	stw	r2,-112(fp)
               if (res == FR_OK) {
  8066ec:	e0bfe417 	ldw	r2,-112(fp)
  8066f0:	1000801e 	bne	r2,zero,8068f4 <f_rename+0x2fc>
                  dir = djn.dir;             /* Copy object information except for name */
  8066f4:	e0bff317 	ldw	r2,-52(fp)
  8066f8:	e0bfe515 	stw	r2,-108(fp)
                  mem_cpy(dir+13, buf+2, 19);
  8066fc:	e0bfe517 	ldw	r2,-108(fp)
  806700:	10c00344 	addi	r3,r2,13
  806704:	e0bff504 	addi	r2,fp,-44
  806708:	10800084 	addi	r2,r2,2
  80670c:	1809883a 	mov	r4,r3
  806710:	100b883a 	mov	r5,r2
  806714:	018004c4 	movi	r6,19
  806718:	08015480 	call	801548 <mem_cpy>
                  dir[DIR_Attr] = buf[0] | AM_ARC;
  80671c:	e0bfe517 	ldw	r2,-108(fp)
  806720:	108002c4 	addi	r2,r2,11
  806724:	e0fff503 	ldbu	r3,-44(fp)
  806728:	18c00814 	ori	r3,r3,32
  80672c:	10c00005 	stb	r3,0(r2)
                  djo.fs->wflag = 1;
  806730:	e0bfe717 	ldw	r2,-100(fp)
  806734:	00c00044 	movi	r3,1
  806738:	10c00105 	stb	r3,4(r2)
                  if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {    /* Update .. entry in the directory if needed */
  80673c:	e0ffe917 	ldw	r3,-92(fp)
  806740:	e0bff017 	ldw	r2,-64(fp)
  806744:	18805f26 	beq	r3,r2,8068c4 <f_rename+0x2cc>
  806748:	e0bfe517 	ldw	r2,-108(fp)
  80674c:	108002c4 	addi	r2,r2,11
  806750:	10800003 	ldbu	r2,0(r2)
  806754:	10803fcc 	andi	r2,r2,255
  806758:	1080040c 	andi	r2,r2,16
  80675c:	10005926 	beq	r2,zero,8068c4 <f_rename+0x2cc>
                     dw = clust2sect(djn.fs, LD_CLUST(dir));
  806760:	e13fee17 	ldw	r4,-72(fp)
  806764:	e0bfe517 	ldw	r2,-108(fp)
  806768:	10800544 	addi	r2,r2,21
  80676c:	10800003 	ldbu	r2,0(r2)
  806770:	10803fcc 	andi	r2,r2,255
  806774:	1004923a 	slli	r2,r2,8
  806778:	1007883a 	mov	r3,r2
  80677c:	e0bfe517 	ldw	r2,-108(fp)
  806780:	10800504 	addi	r2,r2,20
  806784:	10800003 	ldbu	r2,0(r2)
  806788:	10803fcc 	andi	r2,r2,255
  80678c:	1884b03a 	or	r2,r3,r2
  806790:	10bfffcc 	andi	r2,r2,65535
  806794:	1006943a 	slli	r3,r2,16
  806798:	e0bfe517 	ldw	r2,-108(fp)
  80679c:	108006c4 	addi	r2,r2,27
  8067a0:	10800003 	ldbu	r2,0(r2)
  8067a4:	10803fcc 	andi	r2,r2,255
  8067a8:	1004923a 	slli	r2,r2,8
  8067ac:	100b883a 	mov	r5,r2
  8067b0:	e0bfe517 	ldw	r2,-108(fp)
  8067b4:	10800684 	addi	r2,r2,26
  8067b8:	10800003 	ldbu	r2,0(r2)
  8067bc:	10803fcc 	andi	r2,r2,255
  8067c0:	2884b03a 	or	r2,r5,r2
  8067c4:	10bfffcc 	andi	r2,r2,65535
  8067c8:	1884b03a 	or	r2,r3,r2
  8067cc:	100b883a 	mov	r5,r2
  8067d0:	0801a8c0 	call	801a8c <clust2sect>
  8067d4:	e0bfe615 	stw	r2,-104(fp)
                     if (!dw) {
  8067d8:	e0bfe617 	ldw	r2,-104(fp)
  8067dc:	1000031e 	bne	r2,zero,8067ec <f_rename+0x1f4>
                        res = FR_INT_ERR;
  8067e0:	00800084 	movi	r2,2
  8067e4:	e0bfe415 	stw	r2,-112(fp)
  8067e8:	00003606 	br	8068c4 <f_rename+0x2cc>
                     } else {
                        res = move_window(djn.fs, dw);
  8067ec:	e0bfee17 	ldw	r2,-72(fp)
  8067f0:	1009883a 	mov	r4,r2
  8067f4:	e17fe617 	ldw	r5,-104(fp)
  8067f8:	08017140 	call	801714 <move_window>
  8067fc:	e0bfe415 	stw	r2,-112(fp)
                        dir = djn.fs->win+SZ_DIR;  /* .. entry */
  806800:	e0bfee17 	ldw	r2,-72(fp)
  806804:	10801404 	addi	r2,r2,80
  806808:	e0bfe515 	stw	r2,-108(fp)
                        if (res == FR_OK && dir[1] == '.') {
  80680c:	e0bfe417 	ldw	r2,-112(fp)
  806810:	10002c1e 	bne	r2,zero,8068c4 <f_rename+0x2cc>
  806814:	e0bfe517 	ldw	r2,-108(fp)
  806818:	10800044 	addi	r2,r2,1
  80681c:	10800003 	ldbu	r2,0(r2)
  806820:	10803fcc 	andi	r2,r2,255
  806824:	10800b98 	cmpnei	r2,r2,46
  806828:	1000261e 	bne	r2,zero,8068c4 <f_rename+0x2cc>
                           dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
  80682c:	e0bfee17 	ldw	r2,-72(fp)
  806830:	10800003 	ldbu	r2,0(r2)
  806834:	10803fcc 	andi	r2,r2,255
  806838:	108000d8 	cmpnei	r2,r2,3
  80683c:	1000041e 	bne	r2,zero,806850 <f_rename+0x258>
  806840:	e0fff017 	ldw	r3,-64(fp)
  806844:	e0bfee17 	ldw	r2,-72(fp)
  806848:	10800917 	ldw	r2,36(r2)
  80684c:	18800226 	beq	r3,r2,806858 <f_rename+0x260>
  806850:	e0bff017 	ldw	r2,-64(fp)
  806854:	00000106 	br	80685c <f_rename+0x264>
  806858:	0005883a 	mov	r2,zero
  80685c:	e0bfe615 	stw	r2,-104(fp)
                           ST_CLUST(dir, dw);
  806860:	e0bfe517 	ldw	r2,-108(fp)
  806864:	10800684 	addi	r2,r2,26
  806868:	e0ffe617 	ldw	r3,-104(fp)
  80686c:	10c00005 	stb	r3,0(r2)
  806870:	e0bfe517 	ldw	r2,-108(fp)
  806874:	108006c4 	addi	r2,r2,27
  806878:	e0ffe617 	ldw	r3,-104(fp)
  80687c:	18ffffcc 	andi	r3,r3,65535
  806880:	1806d23a 	srli	r3,r3,8
  806884:	10c00005 	stb	r3,0(r2)
  806888:	e0bfe517 	ldw	r2,-108(fp)
  80688c:	10800504 	addi	r2,r2,20
  806890:	e0ffe617 	ldw	r3,-104(fp)
  806894:	1806d43a 	srli	r3,r3,16
  806898:	10c00005 	stb	r3,0(r2)
  80689c:	e0bfe517 	ldw	r2,-108(fp)
  8068a0:	10800544 	addi	r2,r2,21
  8068a4:	e0ffe617 	ldw	r3,-104(fp)
  8068a8:	1806d43a 	srli	r3,r3,16
  8068ac:	18ffffcc 	andi	r3,r3,65535
  8068b0:	1806d23a 	srli	r3,r3,8
  8068b4:	10c00005 	stb	r3,0(r2)
                           djn.fs->wflag = 1;
  8068b8:	e0bfee17 	ldw	r2,-72(fp)
  8068bc:	00c00044 	movi	r3,1
  8068c0:	10c00105 	stb	r3,4(r2)
                        }
                     }
                  }
                  if (res == FR_OK) {
  8068c4:	e0bfe417 	ldw	r2,-112(fp)
  8068c8:	10000a1e 	bne	r2,zero,8068f4 <f_rename+0x2fc>
                     res = dir_remove(&djo);    /* Remove old entry */
  8068cc:	e0bfe704 	addi	r2,fp,-100
  8068d0:	1009883a 	mov	r4,r2
  8068d4:	0802bc80 	call	802bc8 <dir_remove>
  8068d8:	e0bfe415 	stw	r2,-112(fp)
                     if (res == FR_OK)
  8068dc:	e0bfe417 	ldw	r2,-112(fp)
  8068e0:	1000041e 	bne	r2,zero,8068f4 <f_rename+0x2fc>
                        res = sync(djo.fs);
  8068e4:	e0bfe717 	ldw	r2,-100(fp)
  8068e8:	1009883a 	mov	r4,r2
  8068ec:	08018700 	call	801870 <sync>
  8068f0:	e0bfe415 	stw	r2,-112(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(djo.fs, res);
  8068f4:	e0bfe417 	ldw	r2,-112(fp)
}
  8068f8:	e037883a 	mov	sp,fp
  8068fc:	dfc00117 	ldw	ra,4(sp)
  806900:	df000017 	ldw	fp,0(sp)
  806904:	dec00204 	addi	sp,sp,8
  806908:	f800283a 	ret

0080690c <f_mkfs>:
FRESULT f_mkfs (
   uint8_t drv,      /* Logical drive number */
   uint8_t sfd,      /* Partitioning rule 0:FDISK, 1:SFD */
   uint32_t au        /* Allocation unit size [bytes] */
)
{
  80690c:	deffea04 	addi	sp,sp,-88
  806910:	dfc01515 	stw	ra,84(sp)
  806914:	df001415 	stw	fp,80(sp)
  806918:	df001404 	addi	fp,sp,80
  80691c:	2007883a 	mov	r3,r4
  806920:	2805883a 	mov	r2,r5
  806924:	e1bfff15 	stw	r6,-4(fp)
  806928:	e0fffd05 	stb	r3,-12(fp)
  80692c:	e0bffe05 	stb	r2,-8(fp)
   FATFS *fs;
   DSTATUS stat;


   /* Check mounted drive and clear work area */
   if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
  806930:	e0bffd03 	ldbu	r2,-12(fp)
  806934:	10000226 	beq	r2,zero,806940 <f_mkfs+0x34>
  806938:	008002c4 	movi	r2,11
  80693c:	00039d06 	br	8077b4 <f_mkfs+0xea8>
   if (sfd > 1) return FR_INVALID_PARAMETER;
  806940:	e0bffe03 	ldbu	r2,-8(fp)
  806944:	108000b0 	cmpltui	r2,r2,2
  806948:	1000021e 	bne	r2,zero,806954 <f_mkfs+0x48>
  80694c:	008004c4 	movi	r2,19
  806950:	00039806 	br	8077b4 <f_mkfs+0xea8>
   if (au & (au - 1)) return FR_INVALID_PARAMETER;
  806954:	e0bfff17 	ldw	r2,-4(fp)
  806958:	10ffffc4 	addi	r3,r2,-1
  80695c:	e0bfff17 	ldw	r2,-4(fp)
  806960:	1884703a 	and	r2,r3,r2
  806964:	10000226 	beq	r2,zero,806970 <f_mkfs+0x64>
  806968:	008004c4 	movi	r2,19
  80696c:	00039106 	br	8077b4 <f_mkfs+0xea8>
   fs = FatFs[drv];
  806970:	e0bffd03 	ldbu	r2,-12(fp)
  806974:	1085883a 	add	r2,r2,r2
  806978:	1087883a 	add	r3,r2,r2
  80697c:	d0a76e04 	addi	r2,gp,-25160
  806980:	1885883a 	add	r2,r3,r2
  806984:	10800017 	ldw	r2,0(r2)
  806988:	e0bff315 	stw	r2,-52(fp)
   if (!fs) return FR_NOT_ENABLED;
  80698c:	e0bff317 	ldw	r2,-52(fp)
  806990:	1000021e 	bne	r2,zero,80699c <f_mkfs+0x90>
  806994:	00800304 	movi	r2,12
  806998:	00038606 	br	8077b4 <f_mkfs+0xea8>
   fs->fs_type = 0;
  80699c:	e0bff317 	ldw	r2,-52(fp)
  8069a0:	10000005 	stb	zero,0(r2)
   pdrv = LD2PD(drv);   /* Physical drive */
  8069a4:	e0bffd03 	ldbu	r2,-12(fp)
  8069a8:	e0bff405 	stb	r2,-48(fp)
   part = LD2PT(drv);   /* Partition (0:auto detect, 1-4:get from partition table)*/
  8069ac:	e03ff445 	stb	zero,-47(fp)

   /* Get disk statics */
   stat = disk_initialize(pdrv);
  8069b0:	e0bff403 	ldbu	r2,-48(fp)
  8069b4:	1009883a 	mov	r4,r2
  8069b8:	0800b680 	call	800b68 <ffs_DiskIOInitialize>
  8069bc:	e0bff485 	stb	r2,-46(fp)
   if (stat & STA_NOINIT) return FR_NOT_READY;
  8069c0:	e0bff483 	ldbu	r2,-46(fp)
  8069c4:	1080004c 	andi	r2,r2,1
  8069c8:	10000226 	beq	r2,zero,8069d4 <f_mkfs+0xc8>
  8069cc:	008000c4 	movi	r2,3
  8069d0:	00037806 	br	8077b4 <f_mkfs+0xea8>
   if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
  8069d4:	e0bff483 	ldbu	r2,-46(fp)
  8069d8:	1080010c 	andi	r2,r2,4
  8069dc:	10000226 	beq	r2,zero,8069e8 <f_mkfs+0xdc>
  8069e0:	00800284 	movi	r2,10
  8069e4:	00037306 	br	8077b4 <f_mkfs+0xea8>
      if (!tbl[4]) return FR_MKFS_ABORTED;   /* No partition? */
      b_vol = LD_DWORD(tbl+8);   /* Volume start sector */
      n_vol = LD_DWORD(tbl+12);  /* Volume size */
   } else {
      /* Create a partition in this function */
      if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
  8069e8:	e0fff403 	ldbu	r3,-48(fp)
  8069ec:	e0bffc04 	addi	r2,fp,-16
  8069f0:	1809883a 	mov	r4,r3
  8069f4:	01400044 	movi	r5,1
  8069f8:	100d883a 	mov	r6,r2
  8069fc:	08010740 	call	801074 <ffs_DiskIOIoctl>
  806a00:	1000031e 	bne	r2,zero,806a10 <f_mkfs+0x104>
  806a04:	e0bffc17 	ldw	r2,-16(fp)
  806a08:	10802028 	cmpgeui	r2,r2,128
  806a0c:	1000021e 	bne	r2,zero,806a18 <f_mkfs+0x10c>
         return FR_DISK_ERR;
  806a10:	00800044 	movi	r2,1
  806a14:	00036706 	br	8077b4 <f_mkfs+0xea8>
      b_vol = (sfd) ? 0 : 63;    /* Volume start sector */
  806a18:	e0bffe03 	ldbu	r2,-8(fp)
  806a1c:	10000226 	beq	r2,zero,806a28 <f_mkfs+0x11c>
  806a20:	0005883a 	mov	r2,zero
  806a24:	00000106 	br	806a2c <f_mkfs+0x120>
  806a28:	00800fc4 	movi	r2,63
  806a2c:	e0bff515 	stw	r2,-44(fp)
      n_vol -= b_vol;            /* Volume size */
  806a30:	e0fffc17 	ldw	r3,-16(fp)
  806a34:	e0bff517 	ldw	r2,-44(fp)
  806a38:	1885c83a 	sub	r2,r3,r2
  806a3c:	e0bffc15 	stw	r2,-16(fp)
   }

   if (!au) {           /* AU auto selection */
  806a40:	e0bfff17 	ldw	r2,-4(fp)
  806a44:	10001b1e 	bne	r2,zero,806ab4 <f_mkfs+0x1a8>
      vs = n_vol / (2000 / (SS(fs) / 512));
  806a48:	e0bffc17 	ldw	r2,-16(fp)
  806a4c:	1009883a 	mov	r4,r2
  806a50:	0141f404 	movi	r5,2000
  806a54:	080a9800 	call	80a980 <__udivsi3>
  806a58:	e0bff615 	stw	r2,-40(fp)
      for (i = 0; vs < vst[i]; i++) ;
  806a5c:	e03fee15 	stw	zero,-72(fp)
  806a60:	00000306 	br	806a70 <f_mkfs+0x164>
  806a64:	e0bfee17 	ldw	r2,-72(fp)
  806a68:	10800044 	addi	r2,r2,1
  806a6c:	e0bfee15 	stw	r2,-72(fp)
  806a70:	008020b4 	movhi	r2,130
  806a74:	10b15304 	addi	r2,r2,-15028
  806a78:	e0ffee17 	ldw	r3,-72(fp)
  806a7c:	18c7883a 	add	r3,r3,r3
  806a80:	10c5883a 	add	r2,r2,r3
  806a84:	1080000b 	ldhu	r2,0(r2)
  806a88:	10bfffcc 	andi	r2,r2,65535
  806a8c:	e0fff617 	ldw	r3,-40(fp)
  806a90:	18bff436 	bltu	r3,r2,806a64 <__alt_data_end+0xff806a64>
      au = cst[i];
  806a94:	008020b4 	movhi	r2,130
  806a98:	10b15884 	addi	r2,r2,-15006
  806a9c:	e0ffee17 	ldw	r3,-72(fp)
  806aa0:	18c7883a 	add	r3,r3,r3
  806aa4:	10c5883a 	add	r2,r2,r3
  806aa8:	1080000b 	ldhu	r2,0(r2)
  806aac:	10bfffcc 	andi	r2,r2,65535
  806ab0:	e0bfff15 	stw	r2,-4(fp)
   }
   au /= SS(fs);     /* Number of sectors per cluster */
  806ab4:	e0bfff17 	ldw	r2,-4(fp)
  806ab8:	1004d27a 	srli	r2,r2,9
  806abc:	e0bfff15 	stw	r2,-4(fp)
   if (au == 0) au = 1;
  806ac0:	e0bfff17 	ldw	r2,-4(fp)
  806ac4:	1000021e 	bne	r2,zero,806ad0 <f_mkfs+0x1c4>
  806ac8:	00800044 	movi	r2,1
  806acc:	e0bfff15 	stw	r2,-4(fp)
   if (au > 128) au = 128;
  806ad0:	e0bfff17 	ldw	r2,-4(fp)
  806ad4:	10802070 	cmpltui	r2,r2,129
  806ad8:	1000021e 	bne	r2,zero,806ae4 <f_mkfs+0x1d8>
  806adc:	00802004 	movi	r2,128
  806ae0:	e0bfff15 	stw	r2,-4(fp)

   /* Pre-compute number of clusters and FAT syb-type */
   n_clst = n_vol / au;
  806ae4:	e0bffc17 	ldw	r2,-16(fp)
  806ae8:	1009883a 	mov	r4,r2
  806aec:	e17fff17 	ldw	r5,-4(fp)
  806af0:	080a9800 	call	80a980 <__udivsi3>
  806af4:	e0bff715 	stw	r2,-36(fp)
   fmt = FS_FAT12;
  806af8:	00800044 	movi	r2,1
  806afc:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
  806b00:	e0bff717 	ldw	r2,-36(fp)
  806b04:	1083fdb0 	cmpltui	r2,r2,4086
  806b08:	1000021e 	bne	r2,zero,806b14 <f_mkfs+0x208>
  806b0c:	00800084 	movi	r2,2
  806b10:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
  806b14:	e0bff717 	ldw	r2,-36(fp)
  806b18:	10bffdb0 	cmpltui	r2,r2,65526
  806b1c:	1000021e 	bne	r2,zero,806b28 <f_mkfs+0x21c>
  806b20:	008000c4 	movi	r2,3
  806b24:	e0bfec05 	stb	r2,-80(fp)

   /* Determine offset and size of FAT structure */
   if (fmt == FS_FAT32) {
  806b28:	e0bfec03 	ldbu	r2,-80(fp)
  806b2c:	108000d8 	cmpnei	r2,r2,3
  806b30:	10000b1e 	bne	r2,zero,806b60 <f_mkfs+0x254>
      n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
  806b34:	e0bff717 	ldw	r2,-36(fp)
  806b38:	10802084 	addi	r2,r2,130
  806b3c:	1085883a 	add	r2,r2,r2
  806b40:	1085883a 	add	r2,r2,r2
  806b44:	10bfffc4 	addi	r2,r2,-1
  806b48:	1004d27a 	srli	r2,r2,9
  806b4c:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 32;
  806b50:	00800804 	movi	r2,32
  806b54:	e0bff015 	stw	r2,-64(fp)
      n_dir = 0;
  806b58:	e03ff215 	stw	zero,-56(fp)
  806b5c:	00001706 	br	806bbc <f_mkfs+0x2b0>
   } else {
      n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
  806b60:	e0bfec03 	ldbu	r2,-80(fp)
  806b64:	10800058 	cmpnei	r2,r2,1
  806b68:	1000081e 	bne	r2,zero,806b8c <f_mkfs+0x280>
  806b6c:	e0fff717 	ldw	r3,-36(fp)
  806b70:	1805883a 	mov	r2,r3
  806b74:	1085883a 	add	r2,r2,r2
  806b78:	10c5883a 	add	r2,r2,r3
  806b7c:	10800044 	addi	r2,r2,1
  806b80:	1004d07a 	srli	r2,r2,1
  806b84:	108000c4 	addi	r2,r2,3
  806b88:	00000306 	br	806b98 <f_mkfs+0x28c>
  806b8c:	e0bff717 	ldw	r2,-36(fp)
  806b90:	10800084 	addi	r2,r2,2
  806b94:	1085883a 	add	r2,r2,r2
  806b98:	e0bff115 	stw	r2,-60(fp)
      n_fat = (n_fat + SS(fs) - 1) / SS(fs);
  806b9c:	e0bff117 	ldw	r2,-60(fp)
  806ba0:	10807fc4 	addi	r2,r2,511
  806ba4:	1004d27a 	srli	r2,r2,9
  806ba8:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 1;
  806bac:	00800044 	movi	r2,1
  806bb0:	e0bff015 	stw	r2,-64(fp)
      n_dir = (uint32_t)N_ROOTDIR * SZ_DIR / SS(fs);
  806bb4:	00800804 	movi	r2,32
  806bb8:	e0bff215 	stw	r2,-56(fp)
   }
   b_fat = b_vol + n_rsv;           /* FAT area start sector */
  806bbc:	e0fff517 	ldw	r3,-44(fp)
  806bc0:	e0bff017 	ldw	r2,-64(fp)
  806bc4:	1885883a 	add	r2,r3,r2
  806bc8:	e0bfef15 	stw	r2,-68(fp)
   b_dir = b_fat + n_fat * N_FATS;     /* Directory area start sector */
  806bcc:	e0ffef17 	ldw	r3,-68(fp)
  806bd0:	e0bff117 	ldw	r2,-60(fp)
  806bd4:	1885883a 	add	r2,r3,r2
  806bd8:	e0bff815 	stw	r2,-32(fp)
   b_data = b_dir + n_dir;          /* Data area start sector */
  806bdc:	e0fff817 	ldw	r3,-32(fp)
  806be0:	e0bff217 	ldw	r2,-56(fp)
  806be4:	1885883a 	add	r2,r3,r2
  806be8:	e0bff915 	stw	r2,-28(fp)
   if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED; /* Too small volume */
  806bec:	e0fff917 	ldw	r3,-28(fp)
  806bf0:	e0bfff17 	ldw	r2,-4(fp)
  806bf4:	1887883a 	add	r3,r3,r2
  806bf8:	e0bff517 	ldw	r2,-44(fp)
  806bfc:	1885c83a 	sub	r2,r3,r2
  806c00:	e0fffc17 	ldw	r3,-16(fp)
  806c04:	1880022e 	bgeu	r3,r2,806c10 <f_mkfs+0x304>
  806c08:	00800384 	movi	r2,14
  806c0c:	0002e906 	br	8077b4 <f_mkfs+0xea8>

   /* Align data start sector to erase block boundary (for flash memory media) */
   if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
  806c10:	e0fff403 	ldbu	r3,-48(fp)
  806c14:	e0bffb04 	addi	r2,fp,-20
  806c18:	1809883a 	mov	r4,r3
  806c1c:	014000c4 	movi	r5,3
  806c20:	100d883a 	mov	r6,r2
  806c24:	08010740 	call	801074 <ffs_DiskIOIoctl>
  806c28:	1000051e 	bne	r2,zero,806c40 <f_mkfs+0x334>
  806c2c:	e0bffb17 	ldw	r2,-20(fp)
  806c30:	10000326 	beq	r2,zero,806c40 <f_mkfs+0x334>
  806c34:	e0bffb17 	ldw	r2,-20(fp)
  806c38:	10a00070 	cmpltui	r2,r2,32769
  806c3c:	1000021e 	bne	r2,zero,806c48 <f_mkfs+0x33c>
  806c40:	00800044 	movi	r2,1
  806c44:	e0bffb15 	stw	r2,-20(fp)
   n = (b_data + n - 1) & ~(n - 1); /* Next nearest erase block from current data start */
  806c48:	e0fffb17 	ldw	r3,-20(fp)
  806c4c:	e0bff917 	ldw	r2,-28(fp)
  806c50:	1885883a 	add	r2,r3,r2
  806c54:	10ffffc4 	addi	r3,r2,-1
  806c58:	e0bffb17 	ldw	r2,-20(fp)
  806c5c:	0085c83a 	sub	r2,zero,r2
  806c60:	1884703a 	and	r2,r3,r2
  806c64:	e0bffb15 	stw	r2,-20(fp)
   n = (n - b_data) / N_FATS;
  806c68:	e0fffb17 	ldw	r3,-20(fp)
  806c6c:	e0bff917 	ldw	r2,-28(fp)
  806c70:	1885c83a 	sub	r2,r3,r2
  806c74:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {     /* FAT32: Move FAT offset */
  806c78:	e0bfec03 	ldbu	r2,-80(fp)
  806c7c:	108000d8 	cmpnei	r2,r2,3
  806c80:	1000091e 	bne	r2,zero,806ca8 <f_mkfs+0x39c>
      n_rsv += n;
  806c84:	e0bffb17 	ldw	r2,-20(fp)
  806c88:	e0fff017 	ldw	r3,-64(fp)
  806c8c:	1885883a 	add	r2,r3,r2
  806c90:	e0bff015 	stw	r2,-64(fp)
      b_fat += n;
  806c94:	e0bffb17 	ldw	r2,-20(fp)
  806c98:	e0ffef17 	ldw	r3,-68(fp)
  806c9c:	1885883a 	add	r2,r3,r2
  806ca0:	e0bfef15 	stw	r2,-68(fp)
  806ca4:	00000406 	br	806cb8 <f_mkfs+0x3ac>
   } else {             /* FAT12/16: Expand FAT size */
      n_fat += n;
  806ca8:	e0bffb17 	ldw	r2,-20(fp)
  806cac:	e0fff117 	ldw	r3,-60(fp)
  806cb0:	1885883a 	add	r2,r3,r2
  806cb4:	e0bff115 	stw	r2,-60(fp)
   }

   /* Determine number of clusters and final check of validity of the FAT sub-type */
   n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
  806cb8:	e0fffc17 	ldw	r3,-16(fp)
  806cbc:	e0bff017 	ldw	r2,-64(fp)
  806cc0:	1887c83a 	sub	r3,r3,r2
  806cc4:	e0bff117 	ldw	r2,-60(fp)
  806cc8:	1887c83a 	sub	r3,r3,r2
  806ccc:	e0bff217 	ldw	r2,-56(fp)
  806cd0:	1885c83a 	sub	r2,r3,r2
  806cd4:	1009883a 	mov	r4,r2
  806cd8:	e17fff17 	ldw	r5,-4(fp)
  806cdc:	080a9800 	call	80a980 <__udivsi3>
  806ce0:	e0bff715 	stw	r2,-36(fp)
   if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
  806ce4:	e0bfec03 	ldbu	r2,-80(fp)
  806ce8:	10800098 	cmpnei	r2,r2,2
  806cec:	1000031e 	bne	r2,zero,806cfc <f_mkfs+0x3f0>
  806cf0:	e0bff717 	ldw	r2,-36(fp)
  806cf4:	1083fdb0 	cmpltui	r2,r2,4086
  806cf8:	1000061e 	bne	r2,zero,806d14 <f_mkfs+0x408>
      || (fmt == FS_FAT32 && n_clst < MIN_FAT32))
  806cfc:	e0bfec03 	ldbu	r2,-80(fp)
  806d00:	108000d8 	cmpnei	r2,r2,3
  806d04:	1000051e 	bne	r2,zero,806d1c <f_mkfs+0x410>
  806d08:	e0bff717 	ldw	r2,-36(fp)
  806d0c:	10bffda8 	cmpgeui	r2,r2,65526
  806d10:	1000021e 	bne	r2,zero,806d1c <f_mkfs+0x410>
      return FR_MKFS_ABORTED;
  806d14:	00800384 	movi	r2,14
  806d18:	0002a606 	br	8077b4 <f_mkfs+0xea8>

   switch (fmt) { /* Determine system ID for partition table */
  806d1c:	e0bfec03 	ldbu	r2,-80(fp)
  806d20:	10c00060 	cmpeqi	r3,r2,1
  806d24:	1800031e 	bne	r3,zero,806d34 <f_mkfs+0x428>
  806d28:	108000a0 	cmpeqi	r2,r2,2
  806d2c:	1000041e 	bne	r2,zero,806d40 <f_mkfs+0x434>
  806d30:	00000b06 	br	806d60 <f_mkfs+0x454>
   case FS_FAT12: sys = 0x01; break;
  806d34:	00800044 	movi	r2,1
  806d38:	e0bfec85 	stb	r2,-78(fp)
  806d3c:	00000a06 	br	806d68 <f_mkfs+0x45c>
   case FS_FAT16: sys = (n_vol < 0x10000) ? 0x04 : 0x06; break;
  806d40:	e0bffc17 	ldw	r2,-16(fp)
  806d44:	00ffffd4 	movui	r3,65535
  806d48:	18800236 	bltu	r3,r2,806d54 <f_mkfs+0x448>
  806d4c:	00800104 	movi	r2,4
  806d50:	00000106 	br	806d58 <f_mkfs+0x44c>
  806d54:	00800184 	movi	r2,6
  806d58:	e0bfec85 	stb	r2,-78(fp)
  806d5c:	00000206 	br	806d68 <f_mkfs+0x45c>
   default:       sys = 0x0C;
  806d60:	00800304 	movi	r2,12
  806d64:	e0bfec85 	stb	r2,-78(fp)
      tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
      tbl[4] = sys;
      if (disk_write(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
      md = 0xF8;
   } else {
      if (sfd) {  /* No patition table (SFD) */
  806d68:	e0bffe03 	ldbu	r2,-8(fp)
  806d6c:	10000326 	beq	r2,zero,806d7c <f_mkfs+0x470>
         md = 0xF0;
  806d70:	00bffc04 	movi	r2,-16
  806d74:	e0bfec45 	stb	r2,-79(fp)
  806d78:	00006106 	br	806f00 <f_mkfs+0x5f4>
      } else { /* Create partition table (FDISK) */
         mem_set(fs->win, 0, SS(fs));
  806d7c:	e0bff317 	ldw	r2,-52(fp)
  806d80:	10800c04 	addi	r2,r2,48
  806d84:	1009883a 	mov	r4,r2
  806d88:	000b883a 	mov	r5,zero
  806d8c:	01808004 	movi	r6,512
  806d90:	08015b40 	call	8015b4 <mem_set>
         tbl = fs->win+MBR_Table;   /* Create partiton table for single partition in the drive */
  806d94:	e0bff317 	ldw	r2,-52(fp)
  806d98:	10807b84 	addi	r2,r2,494
  806d9c:	e0bffa15 	stw	r2,-24(fp)
         tbl[1] = 1;                /* Partition start head */
  806da0:	e0bffa17 	ldw	r2,-24(fp)
  806da4:	10800044 	addi	r2,r2,1
  806da8:	00c00044 	movi	r3,1
  806dac:	10c00005 	stb	r3,0(r2)
         tbl[2] = 1;                /* Partition start sector */
  806db0:	e0bffa17 	ldw	r2,-24(fp)
  806db4:	10800084 	addi	r2,r2,2
  806db8:	00c00044 	movi	r3,1
  806dbc:	10c00005 	stb	r3,0(r2)
         tbl[3] = 0;                /* Partition start cylinder */
  806dc0:	e0bffa17 	ldw	r2,-24(fp)
  806dc4:	108000c4 	addi	r2,r2,3
  806dc8:	10000005 	stb	zero,0(r2)
         tbl[4] = sys;              /* System type */
  806dcc:	e0bffa17 	ldw	r2,-24(fp)
  806dd0:	10800104 	addi	r2,r2,4
  806dd4:	e0ffec83 	ldbu	r3,-78(fp)
  806dd8:	10c00005 	stb	r3,0(r2)
         tbl[5] = 254;              /* Partition end head */
  806ddc:	e0bffa17 	ldw	r2,-24(fp)
  806de0:	10800144 	addi	r2,r2,5
  806de4:	00ffff84 	movi	r3,-2
  806de8:	10c00005 	stb	r3,0(r2)
         n = (b_vol + n_vol) / 63 / 255;
  806dec:	e0fffc17 	ldw	r3,-16(fp)
  806df0:	e0bff517 	ldw	r2,-44(fp)
  806df4:	1885883a 	add	r2,r3,r2
  806df8:	1009883a 	mov	r4,r2
  806dfc:	014fb044 	movi	r5,16065
  806e00:	080a9800 	call	80a980 <__udivsi3>
  806e04:	e0bffb15 	stw	r2,-20(fp)
         tbl[6] = (uint8_t)((n >> 2) | 63);  /* Partiiton end sector */
  806e08:	e0bffa17 	ldw	r2,-24(fp)
  806e0c:	10800184 	addi	r2,r2,6
  806e10:	e0fffb17 	ldw	r3,-20(fp)
  806e14:	1806d0ba 	srli	r3,r3,2
  806e18:	18c00fd4 	ori	r3,r3,63
  806e1c:	10c00005 	stb	r3,0(r2)
         tbl[7] = (uint8_t)n;          /* End cylinder */
  806e20:	e0bffa17 	ldw	r2,-24(fp)
  806e24:	108001c4 	addi	r2,r2,7
  806e28:	e0fffb17 	ldw	r3,-20(fp)
  806e2c:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 63);       /* Partition start in LBA */
  806e30:	e0bffa17 	ldw	r2,-24(fp)
  806e34:	10800204 	addi	r2,r2,8
  806e38:	00c00fc4 	movi	r3,63
  806e3c:	10c00005 	stb	r3,0(r2)
  806e40:	e0bffa17 	ldw	r2,-24(fp)
  806e44:	10800244 	addi	r2,r2,9
  806e48:	10000005 	stb	zero,0(r2)
  806e4c:	e0bffa17 	ldw	r2,-24(fp)
  806e50:	10800284 	addi	r2,r2,10
  806e54:	10000005 	stb	zero,0(r2)
  806e58:	e0bffa17 	ldw	r2,-24(fp)
  806e5c:	108002c4 	addi	r2,r2,11
  806e60:	10000005 	stb	zero,0(r2)
         ST_DWORD(tbl+12, n_vol);      /* Partition size in LBA */
  806e64:	e0bffa17 	ldw	r2,-24(fp)
  806e68:	10800304 	addi	r2,r2,12
  806e6c:	e0fffc17 	ldw	r3,-16(fp)
  806e70:	10c00005 	stb	r3,0(r2)
  806e74:	e0bffa17 	ldw	r2,-24(fp)
  806e78:	10800344 	addi	r2,r2,13
  806e7c:	e0fffc17 	ldw	r3,-16(fp)
  806e80:	18ffffcc 	andi	r3,r3,65535
  806e84:	1806d23a 	srli	r3,r3,8
  806e88:	10c00005 	stb	r3,0(r2)
  806e8c:	e0bffa17 	ldw	r2,-24(fp)
  806e90:	10800384 	addi	r2,r2,14
  806e94:	e0fffc17 	ldw	r3,-16(fp)
  806e98:	1806d43a 	srli	r3,r3,16
  806e9c:	10c00005 	stb	r3,0(r2)
  806ea0:	e0bffa17 	ldw	r2,-24(fp)
  806ea4:	108003c4 	addi	r2,r2,15
  806ea8:	e0fffc17 	ldw	r3,-16(fp)
  806eac:	1806d63a 	srli	r3,r3,24
  806eb0:	10c00005 	stb	r3,0(r2)
         ST_WORD(fs->win+BS_55AA, 0xAA55);   /* MBR signature */
  806eb4:	e0bff317 	ldw	r2,-52(fp)
  806eb8:	00c01544 	movi	r3,85
  806ebc:	10c08b85 	stb	r3,558(r2)
  806ec0:	e0bff317 	ldw	r2,-52(fp)
  806ec4:	00ffea84 	movi	r3,-86
  806ec8:	10c08bc5 	stb	r3,559(r2)
         if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)  /* Write it to the MBR sector */
  806ecc:	e0fff403 	ldbu	r3,-48(fp)
  806ed0:	e0bff317 	ldw	r2,-52(fp)
  806ed4:	10800c04 	addi	r2,r2,48
  806ed8:	1809883a 	mov	r4,r3
  806edc:	100b883a 	mov	r5,r2
  806ee0:	000d883a 	mov	r6,zero
  806ee4:	01c00044 	movi	r7,1
  806ee8:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  806eec:	10000226 	beq	r2,zero,806ef8 <f_mkfs+0x5ec>
            return FR_DISK_ERR;
  806ef0:	00800044 	movi	r2,1
  806ef4:	00022f06 	br	8077b4 <f_mkfs+0xea8>
         md = 0xF8;
  806ef8:	00bffe04 	movi	r2,-8
  806efc:	e0bfec45 	stb	r2,-79(fp)
      }
   }

   /* Create BPB in the VBR */
   tbl = fs->win;                   /* Clear sector */
  806f00:	e0bff317 	ldw	r2,-52(fp)
  806f04:	10800c04 	addi	r2,r2,48
  806f08:	e0bffa15 	stw	r2,-24(fp)
   mem_set(tbl, 0, SS(fs));
  806f0c:	e13ffa17 	ldw	r4,-24(fp)
  806f10:	000b883a 	mov	r5,zero
  806f14:	01808004 	movi	r6,512
  806f18:	08015b40 	call	8015b4 <mem_set>
   mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
  806f1c:	e13ffa17 	ldw	r4,-24(fp)
  806f20:	014020b4 	movhi	r5,130
  806f24:	29712604 	addi	r5,r5,-15208
  806f28:	018002c4 	movi	r6,11
  806f2c:	08015480 	call	801548 <mem_cpy>
   i = SS(fs);                      /* Sector size */
  806f30:	00808004 	movi	r2,512
  806f34:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_BytsPerSec, i);
  806f38:	e0bffa17 	ldw	r2,-24(fp)
  806f3c:	108002c4 	addi	r2,r2,11
  806f40:	e0ffee17 	ldw	r3,-72(fp)
  806f44:	10c00005 	stb	r3,0(r2)
  806f48:	e0bffa17 	ldw	r2,-24(fp)
  806f4c:	10800304 	addi	r2,r2,12
  806f50:	e0ffee17 	ldw	r3,-72(fp)
  806f54:	18ffffcc 	andi	r3,r3,65535
  806f58:	1806d23a 	srli	r3,r3,8
  806f5c:	10c00005 	stb	r3,0(r2)
   tbl[BPB_SecPerClus] = (uint8_t)au;        /* Sectors per cluster */
  806f60:	e0bffa17 	ldw	r2,-24(fp)
  806f64:	10800344 	addi	r2,r2,13
  806f68:	e0ffff17 	ldw	r3,-4(fp)
  806f6c:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);    /* Reserved sectors */
  806f70:	e0bffa17 	ldw	r2,-24(fp)
  806f74:	10800384 	addi	r2,r2,14
  806f78:	e0fff017 	ldw	r3,-64(fp)
  806f7c:	10c00005 	stb	r3,0(r2)
  806f80:	e0bffa17 	ldw	r2,-24(fp)
  806f84:	108003c4 	addi	r2,r2,15
  806f88:	e0fff017 	ldw	r3,-64(fp)
  806f8c:	18ffffcc 	andi	r3,r3,65535
  806f90:	1806d23a 	srli	r3,r3,8
  806f94:	10c00005 	stb	r3,0(r2)
   tbl[BPB_NumFATs] = N_FATS;          /* Number of FATs */
  806f98:	e0bffa17 	ldw	r2,-24(fp)
  806f9c:	10800404 	addi	r2,r2,16
  806fa0:	00c00044 	movi	r3,1
  806fa4:	10c00005 	stb	r3,0(r2)
   i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR; /* Number of rootdir entries */
  806fa8:	e0bfec03 	ldbu	r2,-80(fp)
  806fac:	108000d8 	cmpnei	r2,r2,3
  806fb0:	1000021e 	bne	r2,zero,806fbc <f_mkfs+0x6b0>
  806fb4:	0005883a 	mov	r2,zero
  806fb8:	00000106 	br	806fc0 <f_mkfs+0x6b4>
  806fbc:	00808004 	movi	r2,512
  806fc0:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_RootEntCnt, i);
  806fc4:	e0bffa17 	ldw	r2,-24(fp)
  806fc8:	10800444 	addi	r2,r2,17
  806fcc:	e0ffee17 	ldw	r3,-72(fp)
  806fd0:	10c00005 	stb	r3,0(r2)
  806fd4:	e0bffa17 	ldw	r2,-24(fp)
  806fd8:	10800484 	addi	r2,r2,18
  806fdc:	e0ffee17 	ldw	r3,-72(fp)
  806fe0:	18ffffcc 	andi	r3,r3,65535
  806fe4:	1806d23a 	srli	r3,r3,8
  806fe8:	10c00005 	stb	r3,0(r2)
   if (n_vol < 0x10000) {              /* Number of total sectors */
  806fec:	e0bffc17 	ldw	r2,-16(fp)
  806ff0:	00ffffd4 	movui	r3,65535
  806ff4:	18800b36 	bltu	r3,r2,807024 <f_mkfs+0x718>
      ST_WORD(tbl+BPB_TotSec16, n_vol);
  806ff8:	e0bffa17 	ldw	r2,-24(fp)
  806ffc:	108004c4 	addi	r2,r2,19
  807000:	e0fffc17 	ldw	r3,-16(fp)
  807004:	10c00005 	stb	r3,0(r2)
  807008:	e0bffa17 	ldw	r2,-24(fp)
  80700c:	10800504 	addi	r2,r2,20
  807010:	e0fffc17 	ldw	r3,-16(fp)
  807014:	18ffffcc 	andi	r3,r3,65535
  807018:	1806d23a 	srli	r3,r3,8
  80701c:	10c00005 	stb	r3,0(r2)
  807020:	00001406 	br	807074 <f_mkfs+0x768>
   } else {
      ST_DWORD(tbl+BPB_TotSec32, n_vol);
  807024:	e0bffa17 	ldw	r2,-24(fp)
  807028:	10800804 	addi	r2,r2,32
  80702c:	e0fffc17 	ldw	r3,-16(fp)
  807030:	10c00005 	stb	r3,0(r2)
  807034:	e0bffa17 	ldw	r2,-24(fp)
  807038:	10800844 	addi	r2,r2,33
  80703c:	e0fffc17 	ldw	r3,-16(fp)
  807040:	18ffffcc 	andi	r3,r3,65535
  807044:	1806d23a 	srli	r3,r3,8
  807048:	10c00005 	stb	r3,0(r2)
  80704c:	e0bffa17 	ldw	r2,-24(fp)
  807050:	10800884 	addi	r2,r2,34
  807054:	e0fffc17 	ldw	r3,-16(fp)
  807058:	1806d43a 	srli	r3,r3,16
  80705c:	10c00005 	stb	r3,0(r2)
  807060:	e0bffa17 	ldw	r2,-24(fp)
  807064:	108008c4 	addi	r2,r2,35
  807068:	e0fffc17 	ldw	r3,-16(fp)
  80706c:	1806d63a 	srli	r3,r3,24
  807070:	10c00005 	stb	r3,0(r2)
   }
   tbl[BPB_Media] = md;             /* Media descriptor */
  807074:	e0bffa17 	ldw	r2,-24(fp)
  807078:	10800544 	addi	r2,r2,21
  80707c:	e0ffec43 	ldbu	r3,-79(fp)
  807080:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_SecPerTrk, 63);        /* Number of sectors per track */
  807084:	e0bffa17 	ldw	r2,-24(fp)
  807088:	10800604 	addi	r2,r2,24
  80708c:	00c00fc4 	movi	r3,63
  807090:	10c00005 	stb	r3,0(r2)
  807094:	e0bffa17 	ldw	r2,-24(fp)
  807098:	10800644 	addi	r2,r2,25
  80709c:	10000005 	stb	zero,0(r2)
   ST_WORD(tbl+BPB_NumHeads, 255);        /* Number of heads */
  8070a0:	e0bffa17 	ldw	r2,-24(fp)
  8070a4:	10800684 	addi	r2,r2,26
  8070a8:	00ffffc4 	movi	r3,-1
  8070ac:	10c00005 	stb	r3,0(r2)
  8070b0:	e0bffa17 	ldw	r2,-24(fp)
  8070b4:	108006c4 	addi	r2,r2,27
  8070b8:	10000005 	stb	zero,0(r2)
   ST_DWORD(tbl+BPB_HiddSec, b_vol);      /* Hidden sectors */
  8070bc:	e0bffa17 	ldw	r2,-24(fp)
  8070c0:	10800704 	addi	r2,r2,28
  8070c4:	e0fff517 	ldw	r3,-44(fp)
  8070c8:	10c00005 	stb	r3,0(r2)
  8070cc:	e0bffa17 	ldw	r2,-24(fp)
  8070d0:	10800744 	addi	r2,r2,29
  8070d4:	e0fff517 	ldw	r3,-44(fp)
  8070d8:	18ffffcc 	andi	r3,r3,65535
  8070dc:	1806d23a 	srli	r3,r3,8
  8070e0:	10c00005 	stb	r3,0(r2)
  8070e4:	e0bffa17 	ldw	r2,-24(fp)
  8070e8:	10800784 	addi	r2,r2,30
  8070ec:	e0fff517 	ldw	r3,-44(fp)
  8070f0:	1806d43a 	srli	r3,r3,16
  8070f4:	10c00005 	stb	r3,0(r2)
  8070f8:	e0bffa17 	ldw	r2,-24(fp)
  8070fc:	108007c4 	addi	r2,r2,31
  807100:	e0fff517 	ldw	r3,-44(fp)
  807104:	1806d63a 	srli	r3,r3,24
  807108:	10c00005 	stb	r3,0(r2)
   n = get_fattime();                  /* Use current time as VSN */
  80710c:	080151c0 	call	80151c <get_fattime>
  807110:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {
  807114:	e0bfec03 	ldbu	r2,-80(fp)
  807118:	108000d8 	cmpnei	r2,r2,3
  80711c:	1000531e 	bne	r2,zero,80726c <f_mkfs+0x960>
      ST_DWORD(tbl+BS_VolID32, n);     /* VSN */
  807120:	e0bffa17 	ldw	r2,-24(fp)
  807124:	108010c4 	addi	r2,r2,67
  807128:	e0fffb17 	ldw	r3,-20(fp)
  80712c:	10c00005 	stb	r3,0(r2)
  807130:	e0bffa17 	ldw	r2,-24(fp)
  807134:	10801104 	addi	r2,r2,68
  807138:	e0fffb17 	ldw	r3,-20(fp)
  80713c:	18ffffcc 	andi	r3,r3,65535
  807140:	1806d23a 	srli	r3,r3,8
  807144:	10c00005 	stb	r3,0(r2)
  807148:	e0bffa17 	ldw	r2,-24(fp)
  80714c:	10801144 	addi	r2,r2,69
  807150:	e0fffb17 	ldw	r3,-20(fp)
  807154:	1806d43a 	srli	r3,r3,16
  807158:	10c00005 	stb	r3,0(r2)
  80715c:	e0bffa17 	ldw	r2,-24(fp)
  807160:	10801184 	addi	r2,r2,70
  807164:	e0fffb17 	ldw	r3,-20(fp)
  807168:	1806d63a 	srli	r3,r3,24
  80716c:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_FATSz32, n_fat);   /* Number of sectors per FAT */
  807170:	e0bffa17 	ldw	r2,-24(fp)
  807174:	10800904 	addi	r2,r2,36
  807178:	e0fff117 	ldw	r3,-60(fp)
  80717c:	10c00005 	stb	r3,0(r2)
  807180:	e0bffa17 	ldw	r2,-24(fp)
  807184:	10800944 	addi	r2,r2,37
  807188:	e0fff117 	ldw	r3,-60(fp)
  80718c:	18ffffcc 	andi	r3,r3,65535
  807190:	1806d23a 	srli	r3,r3,8
  807194:	10c00005 	stb	r3,0(r2)
  807198:	e0bffa17 	ldw	r2,-24(fp)
  80719c:	10800984 	addi	r2,r2,38
  8071a0:	e0fff117 	ldw	r3,-60(fp)
  8071a4:	1806d43a 	srli	r3,r3,16
  8071a8:	10c00005 	stb	r3,0(r2)
  8071ac:	e0bffa17 	ldw	r2,-24(fp)
  8071b0:	108009c4 	addi	r2,r2,39
  8071b4:	e0fff117 	ldw	r3,-60(fp)
  8071b8:	1806d63a 	srli	r3,r3,24
  8071bc:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_RootClus, 2);      /* Root directory start cluster (2) */
  8071c0:	e0bffa17 	ldw	r2,-24(fp)
  8071c4:	10800b04 	addi	r2,r2,44
  8071c8:	00c00084 	movi	r3,2
  8071cc:	10c00005 	stb	r3,0(r2)
  8071d0:	e0bffa17 	ldw	r2,-24(fp)
  8071d4:	10800b44 	addi	r2,r2,45
  8071d8:	10000005 	stb	zero,0(r2)
  8071dc:	e0bffa17 	ldw	r2,-24(fp)
  8071e0:	10800b84 	addi	r2,r2,46
  8071e4:	10000005 	stb	zero,0(r2)
  8071e8:	e0bffa17 	ldw	r2,-24(fp)
  8071ec:	10800bc4 	addi	r2,r2,47
  8071f0:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_FSInfo, 1);         /* FSInfo record offset (VBR+1) */
  8071f4:	e0bffa17 	ldw	r2,-24(fp)
  8071f8:	10800c04 	addi	r2,r2,48
  8071fc:	00c00044 	movi	r3,1
  807200:	10c00005 	stb	r3,0(r2)
  807204:	e0bffa17 	ldw	r2,-24(fp)
  807208:	10800c44 	addi	r2,r2,49
  80720c:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_BkBootSec, 6);      /* Backup boot record offset (VBR+6) */
  807210:	e0bffa17 	ldw	r2,-24(fp)
  807214:	10800c84 	addi	r2,r2,50
  807218:	00c00184 	movi	r3,6
  80721c:	10c00005 	stb	r3,0(r2)
  807220:	e0bffa17 	ldw	r2,-24(fp)
  807224:	10800cc4 	addi	r2,r2,51
  807228:	10000005 	stb	zero,0(r2)
      tbl[BS_DrvNum32] = 0x80;         /* Drive number */
  80722c:	e0bffa17 	ldw	r2,-24(fp)
  807230:	10801004 	addi	r2,r2,64
  807234:	00ffe004 	movi	r3,-128
  807238:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig32] = 0x29;        /* Extended boot signature */
  80723c:	e0bffa17 	ldw	r2,-24(fp)
  807240:	10801084 	addi	r2,r2,66
  807244:	00c00a44 	movi	r3,41
  807248:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);  /* Volume label, FAT signature */
  80724c:	e0bffa17 	ldw	r2,-24(fp)
  807250:	108011c4 	addi	r2,r2,71
  807254:	1009883a 	mov	r4,r2
  807258:	014020b4 	movhi	r5,130
  80725c:	29712904 	addi	r5,r5,-15196
  807260:	018004c4 	movi	r6,19
  807264:	08015480 	call	801548 <mem_cpy>
  807268:	00002d06 	br	807320 <f_mkfs+0xa14>
   } else {
      ST_DWORD(tbl+BS_VolID, n);       /* VSN */
  80726c:	e0bffa17 	ldw	r2,-24(fp)
  807270:	108009c4 	addi	r2,r2,39
  807274:	e0fffb17 	ldw	r3,-20(fp)
  807278:	10c00005 	stb	r3,0(r2)
  80727c:	e0bffa17 	ldw	r2,-24(fp)
  807280:	10800a04 	addi	r2,r2,40
  807284:	e0fffb17 	ldw	r3,-20(fp)
  807288:	18ffffcc 	andi	r3,r3,65535
  80728c:	1806d23a 	srli	r3,r3,8
  807290:	10c00005 	stb	r3,0(r2)
  807294:	e0bffa17 	ldw	r2,-24(fp)
  807298:	10800a44 	addi	r2,r2,41
  80729c:	e0fffb17 	ldw	r3,-20(fp)
  8072a0:	1806d43a 	srli	r3,r3,16
  8072a4:	10c00005 	stb	r3,0(r2)
  8072a8:	e0bffa17 	ldw	r2,-24(fp)
  8072ac:	10800a84 	addi	r2,r2,42
  8072b0:	e0fffb17 	ldw	r3,-20(fp)
  8072b4:	1806d63a 	srli	r3,r3,24
  8072b8:	10c00005 	stb	r3,0(r2)
      ST_WORD(tbl+BPB_FATSz16, n_fat); /* Number of sectors per FAT */
  8072bc:	e0bffa17 	ldw	r2,-24(fp)
  8072c0:	10800584 	addi	r2,r2,22
  8072c4:	e0fff117 	ldw	r3,-60(fp)
  8072c8:	10c00005 	stb	r3,0(r2)
  8072cc:	e0bffa17 	ldw	r2,-24(fp)
  8072d0:	108005c4 	addi	r2,r2,23
  8072d4:	e0fff117 	ldw	r3,-60(fp)
  8072d8:	18ffffcc 	andi	r3,r3,65535
  8072dc:	1806d23a 	srli	r3,r3,8
  8072e0:	10c00005 	stb	r3,0(r2)
      tbl[BS_DrvNum] = 0x80;           /* Drive number */
  8072e4:	e0bffa17 	ldw	r2,-24(fp)
  8072e8:	10800904 	addi	r2,r2,36
  8072ec:	00ffe004 	movi	r3,-128
  8072f0:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig] = 0x29;          /* Extended boot signature */
  8072f4:	e0bffa17 	ldw	r2,-24(fp)
  8072f8:	10800984 	addi	r2,r2,38
  8072fc:	00c00a44 	movi	r3,41
  807300:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
  807304:	e0bffa17 	ldw	r2,-24(fp)
  807308:	10800ac4 	addi	r2,r2,43
  80730c:	1009883a 	mov	r4,r2
  807310:	014020b4 	movhi	r5,130
  807314:	29712e04 	addi	r5,r5,-15176
  807318:	018004c4 	movi	r6,19
  80731c:	08015480 	call	801548 <mem_cpy>
   }
   ST_WORD(tbl+BS_55AA, 0xAA55);       /* Signature (Offset is fixed here regardless of sector size) */
  807320:	e0bffa17 	ldw	r2,-24(fp)
  807324:	10807f84 	addi	r2,r2,510
  807328:	00c01544 	movi	r3,85
  80732c:	10c00005 	stb	r3,0(r2)
  807330:	e0bffa17 	ldw	r2,-24(fp)
  807334:	10807fc4 	addi	r2,r2,511
  807338:	00ffea84 	movi	r3,-86
  80733c:	10c00005 	stb	r3,0(r2)
   if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)  /* Write it to the VBR sector */
  807340:	e0bff403 	ldbu	r2,-48(fp)
  807344:	1009883a 	mov	r4,r2
  807348:	e17ffa17 	ldw	r5,-24(fp)
  80734c:	e1bff517 	ldw	r6,-44(fp)
  807350:	01c00044 	movi	r7,1
  807354:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  807358:	10000226 	beq	r2,zero,807364 <f_mkfs+0xa58>
      return FR_DISK_ERR;
  80735c:	00800044 	movi	r2,1
  807360:	00011406 	br	8077b4 <f_mkfs+0xea8>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
  807364:	e0bfec03 	ldbu	r2,-80(fp)
  807368:	108000d8 	cmpnei	r2,r2,3
  80736c:	1000081e 	bne	r2,zero,807390 <f_mkfs+0xa84>
      disk_write(pdrv, tbl, b_vol + 6, 1);
  807370:	e0fff403 	ldbu	r3,-48(fp)
  807374:	e0bff517 	ldw	r2,-44(fp)
  807378:	10800184 	addi	r2,r2,6
  80737c:	1809883a 	mov	r4,r3
  807380:	e17ffa17 	ldw	r5,-24(fp)
  807384:	100d883a 	mov	r6,r2
  807388:	01c00044 	movi	r7,1
  80738c:	0800f080 	call	800f08 <ffs_DiskIOWrite>

   /* Initialize FAT area */
   wsect = b_fat;
  807390:	e0bfef17 	ldw	r2,-68(fp)
  807394:	e0bfed15 	stw	r2,-76(fp)
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
  807398:	e03fee15 	stw	zero,-72(fp)
  80739c:	00008606 	br	8075b8 <f_mkfs+0xcac>
      mem_set(tbl, 0, SS(fs));         /* 1st sector of the FAT  */
  8073a0:	e13ffa17 	ldw	r4,-24(fp)
  8073a4:	000b883a 	mov	r5,zero
  8073a8:	01808004 	movi	r6,512
  8073ac:	08015b40 	call	8015b4 <mem_set>
      n = md;                       /* Media descriptor byte */
  8073b0:	e0bfec43 	ldbu	r2,-79(fp)
  8073b4:	e0bffb15 	stw	r2,-20(fp)
      if (fmt != FS_FAT32) {
  8073b8:	e0bfec03 	ldbu	r2,-80(fp)
  8073bc:	108000e0 	cmpeqi	r2,r2,3
  8073c0:	10001f1e 	bne	r2,zero,807440 <f_mkfs+0xb34>
         n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
  8073c4:	e0bfec03 	ldbu	r2,-80(fp)
  8073c8:	10800058 	cmpnei	r2,r2,1
  8073cc:	1000031e 	bne	r2,zero,8073dc <f_mkfs+0xad0>
  8073d0:	00804034 	movhi	r2,256
  8073d4:	10bfc004 	addi	r2,r2,-256
  8073d8:	00000106 	br	8073e0 <f_mkfs+0xad4>
  8073dc:	00bfc004 	movi	r2,-256
  8073e0:	e0fffb17 	ldw	r3,-20(fp)
  8073e4:	10c4b03a 	or	r2,r2,r3
  8073e8:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT12/16) */
  8073ec:	e0bffb17 	ldw	r2,-20(fp)
  8073f0:	1007883a 	mov	r3,r2
  8073f4:	e0bffa17 	ldw	r2,-24(fp)
  8073f8:	10c00005 	stb	r3,0(r2)
  8073fc:	e0bffa17 	ldw	r2,-24(fp)
  807400:	10800044 	addi	r2,r2,1
  807404:	e0fffb17 	ldw	r3,-20(fp)
  807408:	18ffffcc 	andi	r3,r3,65535
  80740c:	1806d23a 	srli	r3,r3,8
  807410:	10c00005 	stb	r3,0(r2)
  807414:	e0bffa17 	ldw	r2,-24(fp)
  807418:	10800084 	addi	r2,r2,2
  80741c:	e0fffb17 	ldw	r3,-20(fp)
  807420:	1806d43a 	srli	r3,r3,16
  807424:	10c00005 	stb	r3,0(r2)
  807428:	e0bffa17 	ldw	r2,-24(fp)
  80742c:	108000c4 	addi	r2,r2,3
  807430:	e0fffb17 	ldw	r3,-20(fp)
  807434:	1806d63a 	srli	r3,r3,24
  807438:	10c00005 	stb	r3,0(r2)
  80743c:	00003806 	br	807520 <f_mkfs+0xc14>
      } else {
         n |= 0xFFFFFF00;
  807440:	e0fffb17 	ldw	r3,-20(fp)
  807444:	00bfc004 	movi	r2,-256
  807448:	1884b03a 	or	r2,r3,r2
  80744c:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT32) */
  807450:	e0bffb17 	ldw	r2,-20(fp)
  807454:	1007883a 	mov	r3,r2
  807458:	e0bffa17 	ldw	r2,-24(fp)
  80745c:	10c00005 	stb	r3,0(r2)
  807460:	e0bffa17 	ldw	r2,-24(fp)
  807464:	10800044 	addi	r2,r2,1
  807468:	e0fffb17 	ldw	r3,-20(fp)
  80746c:	18ffffcc 	andi	r3,r3,65535
  807470:	1806d23a 	srli	r3,r3,8
  807474:	10c00005 	stb	r3,0(r2)
  807478:	e0bffa17 	ldw	r2,-24(fp)
  80747c:	10800084 	addi	r2,r2,2
  807480:	e0fffb17 	ldw	r3,-20(fp)
  807484:	1806d43a 	srli	r3,r3,16
  807488:	10c00005 	stb	r3,0(r2)
  80748c:	e0bffa17 	ldw	r2,-24(fp)
  807490:	108000c4 	addi	r2,r2,3
  807494:	e0fffb17 	ldw	r3,-20(fp)
  807498:	1806d63a 	srli	r3,r3,24
  80749c:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+4, 0xFFFFFFFF);
  8074a0:	e0bffa17 	ldw	r2,-24(fp)
  8074a4:	10800104 	addi	r2,r2,4
  8074a8:	00ffffc4 	movi	r3,-1
  8074ac:	10c00005 	stb	r3,0(r2)
  8074b0:	e0bffa17 	ldw	r2,-24(fp)
  8074b4:	10800144 	addi	r2,r2,5
  8074b8:	00ffffc4 	movi	r3,-1
  8074bc:	10c00005 	stb	r3,0(r2)
  8074c0:	e0bffa17 	ldw	r2,-24(fp)
  8074c4:	10800184 	addi	r2,r2,6
  8074c8:	00ffffc4 	movi	r3,-1
  8074cc:	10c00005 	stb	r3,0(r2)
  8074d0:	e0bffa17 	ldw	r2,-24(fp)
  8074d4:	108001c4 	addi	r2,r2,7
  8074d8:	00ffffc4 	movi	r3,-1
  8074dc:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
  8074e0:	e0bffa17 	ldw	r2,-24(fp)
  8074e4:	10800204 	addi	r2,r2,8
  8074e8:	00ffffc4 	movi	r3,-1
  8074ec:	10c00005 	stb	r3,0(r2)
  8074f0:	e0bffa17 	ldw	r2,-24(fp)
  8074f4:	10800244 	addi	r2,r2,9
  8074f8:	00ffffc4 	movi	r3,-1
  8074fc:	10c00005 	stb	r3,0(r2)
  807500:	e0bffa17 	ldw	r2,-24(fp)
  807504:	10800284 	addi	r2,r2,10
  807508:	00ffffc4 	movi	r3,-1
  80750c:	10c00005 	stb	r3,0(r2)
  807510:	e0bffa17 	ldw	r2,-24(fp)
  807514:	108002c4 	addi	r2,r2,11
  807518:	00c003c4 	movi	r3,15
  80751c:	10c00005 	stb	r3,0(r2)
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  807520:	e13ff403 	ldbu	r4,-48(fp)
  807524:	e0bfed17 	ldw	r2,-76(fp)
  807528:	10c00044 	addi	r3,r2,1
  80752c:	e0ffed15 	stw	r3,-76(fp)
  807530:	e17ffa17 	ldw	r5,-24(fp)
  807534:	100d883a 	mov	r6,r2
  807538:	01c00044 	movi	r7,1
  80753c:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  807540:	10000226 	beq	r2,zero,80754c <f_mkfs+0xc40>
         return FR_DISK_ERR;
  807544:	00800044 	movi	r2,1
  807548:	00009a06 	br	8077b4 <f_mkfs+0xea8>
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
  80754c:	e13ffa17 	ldw	r4,-24(fp)
  807550:	000b883a 	mov	r5,zero
  807554:	01808004 	movi	r6,512
  807558:	08015b40 	call	8015b4 <mem_set>
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
  80755c:	00800044 	movi	r2,1
  807560:	e0bffb15 	stw	r2,-20(fp)
  807564:	00000e06 	br	8075a0 <f_mkfs+0xc94>
         if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  807568:	e13ff403 	ldbu	r4,-48(fp)
  80756c:	e0bfed17 	ldw	r2,-76(fp)
  807570:	10c00044 	addi	r3,r2,1
  807574:	e0ffed15 	stw	r3,-76(fp)
  807578:	e17ffa17 	ldw	r5,-24(fp)
  80757c:	100d883a 	mov	r6,r2
  807580:	01c00044 	movi	r7,1
  807584:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  807588:	10000226 	beq	r2,zero,807594 <f_mkfs+0xc88>
            return FR_DISK_ERR;
  80758c:	00800044 	movi	r2,1
  807590:	00008806 	br	8077b4 <f_mkfs+0xea8>
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
         return FR_DISK_ERR;
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
  807594:	e0bffb17 	ldw	r2,-20(fp)
  807598:	10800044 	addi	r2,r2,1
  80759c:	e0bffb15 	stw	r2,-20(fp)
  8075a0:	e0fffb17 	ldw	r3,-20(fp)
  8075a4:	e0bff117 	ldw	r2,-60(fp)
  8075a8:	18bfef36 	bltu	r3,r2,807568 <__alt_data_end+0xff807568>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
      disk_write(pdrv, tbl, b_vol + 6, 1);

   /* Initialize FAT area */
   wsect = b_fat;
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
  8075ac:	e0bfee17 	ldw	r2,-72(fp)
  8075b0:	10800044 	addi	r2,r2,1
  8075b4:	e0bfee15 	stw	r2,-72(fp)
  8075b8:	e0bfee17 	ldw	r2,-72(fp)
  8075bc:	103f7826 	beq	r2,zero,8073a0 <__alt_data_end+0xff8073a0>
            return FR_DISK_ERR;
      }
   }

   /* Initialize root directory */
   i = (fmt == FS_FAT32) ? au : n_dir;
  8075c0:	e0bfec03 	ldbu	r2,-80(fp)
  8075c4:	108000d8 	cmpnei	r2,r2,3
  8075c8:	1000021e 	bne	r2,zero,8075d4 <f_mkfs+0xcc8>
  8075cc:	e0bfff17 	ldw	r2,-4(fp)
  8075d0:	00000106 	br	8075d8 <f_mkfs+0xccc>
  8075d4:	e0bff217 	ldw	r2,-56(fp)
  8075d8:	e0bfee15 	stw	r2,-72(fp)
   do {
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  8075dc:	e13ff403 	ldbu	r4,-48(fp)
  8075e0:	e0bfed17 	ldw	r2,-76(fp)
  8075e4:	10c00044 	addi	r3,r2,1
  8075e8:	e0ffed15 	stw	r3,-76(fp)
  8075ec:	e17ffa17 	ldw	r5,-24(fp)
  8075f0:	100d883a 	mov	r6,r2
  8075f4:	01c00044 	movi	r7,1
  8075f8:	0800f080 	call	800f08 <ffs_DiskIOWrite>
  8075fc:	10000226 	beq	r2,zero,807608 <f_mkfs+0xcfc>
         return FR_DISK_ERR;
  807600:	00800044 	movi	r2,1
  807604:	00006b06 	br	8077b4 <f_mkfs+0xea8>
   } while (--i);
  807608:	e0bfee17 	ldw	r2,-72(fp)
  80760c:	10bfffc4 	addi	r2,r2,-1
  807610:	e0bfee15 	stw	r2,-72(fp)
  807614:	e0bfee17 	ldw	r2,-72(fp)
  807618:	103ff01e 	bne	r2,zero,8075dc <__alt_data_end+0xff8075dc>
      disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
   }
#endif

   /* Create FSInfo if needed */
   if (fmt == FS_FAT32) {
  80761c:	e0bfec03 	ldbu	r2,-80(fp)
  807620:	108000d8 	cmpnei	r2,r2,3
  807624:	10005c1e 	bne	r2,zero,807798 <f_mkfs+0xe8c>
      ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
  807628:	e0bffa17 	ldw	r2,-24(fp)
  80762c:	00c01484 	movi	r3,82
  807630:	10c00005 	stb	r3,0(r2)
  807634:	e0bffa17 	ldw	r2,-24(fp)
  807638:	10800044 	addi	r2,r2,1
  80763c:	00c01484 	movi	r3,82
  807640:	10c00005 	stb	r3,0(r2)
  807644:	e0bffa17 	ldw	r2,-24(fp)
  807648:	10800084 	addi	r2,r2,2
  80764c:	00c01844 	movi	r3,97
  807650:	10c00005 	stb	r3,0(r2)
  807654:	e0bffa17 	ldw	r2,-24(fp)
  807658:	108000c4 	addi	r2,r2,3
  80765c:	00c01044 	movi	r3,65
  807660:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
  807664:	e0bffa17 	ldw	r2,-24(fp)
  807668:	10807904 	addi	r2,r2,484
  80766c:	00c01c84 	movi	r3,114
  807670:	10c00005 	stb	r3,0(r2)
  807674:	e0bffa17 	ldw	r2,-24(fp)
  807678:	10807944 	addi	r2,r2,485
  80767c:	00c01c84 	movi	r3,114
  807680:	10c00005 	stb	r3,0(r2)
  807684:	e0bffa17 	ldw	r2,-24(fp)
  807688:	10807984 	addi	r2,r2,486
  80768c:	00c01044 	movi	r3,65
  807690:	10c00005 	stb	r3,0(r2)
  807694:	e0bffa17 	ldw	r2,-24(fp)
  807698:	108079c4 	addi	r2,r2,487
  80769c:	00c01844 	movi	r3,97
  8076a0:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Free_Count, n_clst - 1); /* Number of free clusters */
  8076a4:	e0bffa17 	ldw	r2,-24(fp)
  8076a8:	10807a04 	addi	r2,r2,488
  8076ac:	e0fff717 	ldw	r3,-36(fp)
  8076b0:	18ffffc4 	addi	r3,r3,-1
  8076b4:	10c00005 	stb	r3,0(r2)
  8076b8:	e0bffa17 	ldw	r2,-24(fp)
  8076bc:	10807a44 	addi	r2,r2,489
  8076c0:	e0fff717 	ldw	r3,-36(fp)
  8076c4:	18ffffc4 	addi	r3,r3,-1
  8076c8:	18ffffcc 	andi	r3,r3,65535
  8076cc:	1806d23a 	srli	r3,r3,8
  8076d0:	10c00005 	stb	r3,0(r2)
  8076d4:	e0bffa17 	ldw	r2,-24(fp)
  8076d8:	10807a84 	addi	r2,r2,490
  8076dc:	e0fff717 	ldw	r3,-36(fp)
  8076e0:	18ffffc4 	addi	r3,r3,-1
  8076e4:	1806d43a 	srli	r3,r3,16
  8076e8:	10c00005 	stb	r3,0(r2)
  8076ec:	e0bffa17 	ldw	r2,-24(fp)
  8076f0:	10807ac4 	addi	r2,r2,491
  8076f4:	e0fff717 	ldw	r3,-36(fp)
  8076f8:	18ffffc4 	addi	r3,r3,-1
  8076fc:	1806d63a 	srli	r3,r3,24
  807700:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Nxt_Free, 2);            /* Last allocated cluster# */
  807704:	e0bffa17 	ldw	r2,-24(fp)
  807708:	10807b04 	addi	r2,r2,492
  80770c:	00c00084 	movi	r3,2
  807710:	10c00005 	stb	r3,0(r2)
  807714:	e0bffa17 	ldw	r2,-24(fp)
  807718:	10807b44 	addi	r2,r2,493
  80771c:	10000005 	stb	zero,0(r2)
  807720:	e0bffa17 	ldw	r2,-24(fp)
  807724:	10807b84 	addi	r2,r2,494
  807728:	10000005 	stb	zero,0(r2)
  80772c:	e0bffa17 	ldw	r2,-24(fp)
  807730:	10807bc4 	addi	r2,r2,495
  807734:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BS_55AA, 0xAA55);
  807738:	e0bffa17 	ldw	r2,-24(fp)
  80773c:	10807f84 	addi	r2,r2,510
  807740:	00c01544 	movi	r3,85
  807744:	10c00005 	stb	r3,0(r2)
  807748:	e0bffa17 	ldw	r2,-24(fp)
  80774c:	10807fc4 	addi	r2,r2,511
  807750:	00ffea84 	movi	r3,-86
  807754:	10c00005 	stb	r3,0(r2)
      disk_write(pdrv, tbl, b_vol + 1, 1);   /* Write original (VBR+1) */
  807758:	e0fff403 	ldbu	r3,-48(fp)
  80775c:	e0bff517 	ldw	r2,-44(fp)
  807760:	10800044 	addi	r2,r2,1
  807764:	1809883a 	mov	r4,r3
  807768:	e17ffa17 	ldw	r5,-24(fp)
  80776c:	100d883a 	mov	r6,r2
  807770:	01c00044 	movi	r7,1
  807774:	0800f080 	call	800f08 <ffs_DiskIOWrite>
      disk_write(pdrv, tbl, b_vol + 7, 1);   /* Write backup (VBR+7) */
  807778:	e0fff403 	ldbu	r3,-48(fp)
  80777c:	e0bff517 	ldw	r2,-44(fp)
  807780:	108001c4 	addi	r2,r2,7
  807784:	1809883a 	mov	r4,r3
  807788:	e17ffa17 	ldw	r5,-24(fp)
  80778c:	100d883a 	mov	r6,r2
  807790:	01c00044 	movi	r7,1
  807794:	0800f080 	call	800f08 <ffs_DiskIOWrite>
   }

   return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
  807798:	e0bff403 	ldbu	r2,-48(fp)
  80779c:	1009883a 	mov	r4,r2
  8077a0:	000b883a 	mov	r5,zero
  8077a4:	000d883a 	mov	r6,zero
  8077a8:	08010740 	call	801074 <ffs_DiskIOIoctl>
  8077ac:	1004c03a 	cmpne	r2,r2,zero
  8077b0:	10803fcc 	andi	r2,r2,255
}
  8077b4:	e037883a 	mov	sp,fp
  8077b8:	dfc00117 	ldw	ra,4(sp)
  8077bc:	df000017 	ldw	fp,0(sp)
  8077c0:	dec00204 	addi	sp,sp,8
  8077c4:	f800283a 	ret

008077c8 <f_gets>:
TCHAR* f_gets (
   TCHAR* buff,   /* Pointer to the string buffer to read */
   int len,    /* Size of string buffer (characters) */
   FIL* fil    /* Pointer to the file object */
)
{
  8077c8:	defff704 	addi	sp,sp,-36
  8077cc:	dfc00815 	stw	ra,32(sp)
  8077d0:	df000715 	stw	fp,28(sp)
  8077d4:	df000704 	addi	fp,sp,28
  8077d8:	e13ffd15 	stw	r4,-12(fp)
  8077dc:	e17ffe15 	stw	r5,-8(fp)
  8077e0:	e1bfff15 	stw	r6,-4(fp)
   int n = 0;
  8077e4:	e03ff915 	stw	zero,-28(fp)
   TCHAR c, *p = buff;
  8077e8:	e0bffd17 	ldw	r2,-12(fp)
  8077ec:	e0bffa15 	stw	r2,-24(fp)
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
  8077f0:	00001906 	br	807858 <f_gets+0x90>
      f_read(fil, s, 1, &rc);
  8077f4:	e0fffb44 	addi	r3,fp,-19
  8077f8:	e0bffc04 	addi	r2,fp,-16
  8077fc:	e13fff17 	ldw	r4,-4(fp)
  807800:	180b883a 	mov	r5,r3
  807804:	01800044 	movi	r6,1
  807808:	100f883a 	mov	r7,r2
  80780c:	08043a40 	call	8043a4 <f_read>
      if (rc != 1) break;        /* Break on EOF or error */
  807810:	e0bffc17 	ldw	r2,-16(fp)
  807814:	10800060 	cmpeqi	r2,r2,1
  807818:	1000011e 	bne	r2,zero,807820 <f_gets+0x58>
  80781c:	00001206 	br	807868 <f_gets+0xa0>
      c = s[0];
  807820:	e0bffb43 	ldbu	r2,-19(fp)
  807824:	e0bffb05 	stb	r2,-20(fp)
      }
#endif
#if _USE_STRFUNC >= 2
      if (c == '\r') continue;   /* Strip '\r' */
#endif
      *p++ = c;
  807828:	e0bffa17 	ldw	r2,-24(fp)
  80782c:	10c00044 	addi	r3,r2,1
  807830:	e0fffa15 	stw	r3,-24(fp)
  807834:	e0fffb03 	ldbu	r3,-20(fp)
  807838:	10c00005 	stb	r3,0(r2)
      n++;
  80783c:	e0bff917 	ldw	r2,-28(fp)
  807840:	10800044 	addi	r2,r2,1
  807844:	e0bff915 	stw	r2,-28(fp)
      if (c == '\n') break;      /* Break on EOL */
  807848:	e0bffb07 	ldb	r2,-20(fp)
  80784c:	10800298 	cmpnei	r2,r2,10
  807850:	1000011e 	bne	r2,zero,807858 <f_gets+0x90>
  807854:	00000406 	br	807868 <f_gets+0xa0>
   TCHAR c, *p = buff;
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
  807858:	e0bffe17 	ldw	r2,-8(fp)
  80785c:	10bfffc4 	addi	r2,r2,-1
  807860:	e0fff917 	ldw	r3,-28(fp)
  807864:	18bfe316 	blt	r3,r2,8077f4 <__alt_data_end+0xff8077f4>
#endif
      *p++ = c;
      n++;
      if (c == '\n') break;      /* Break on EOL */
   }
   *p = 0;
  807868:	e0bffa17 	ldw	r2,-24(fp)
  80786c:	10000005 	stb	zero,0(r2)
   return n ? buff : 0;       /* When no data read (eof or error), return with error. */
  807870:	e0bff917 	ldw	r2,-28(fp)
  807874:	10000226 	beq	r2,zero,807880 <f_gets+0xb8>
  807878:	e0bffd17 	ldw	r2,-12(fp)
  80787c:	00000106 	br	807884 <f_gets+0xbc>
  807880:	0005883a 	mov	r2,zero
}
  807884:	e037883a 	mov	sp,fp
  807888:	dfc00117 	ldw	ra,4(sp)
  80788c:	df000017 	ldw	fp,0(sp)
  807890:	dec00204 	addi	sp,sp,8
  807894:	f800283a 	ret

00807898 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
   TCHAR c, /* A character to be output */
   FIL* fil /* Pointer to the file object */
)
{
  807898:	defff904 	addi	sp,sp,-28
  80789c:	dfc00615 	stw	ra,24(sp)
  8078a0:	df000515 	stw	fp,20(sp)
  8078a4:	df000504 	addi	fp,sp,20
  8078a8:	2005883a 	mov	r2,r4
  8078ac:	e17fff15 	stw	r5,-4(fp)
  8078b0:	e0bffe05 	stb	r2,-8(fp)
         s[2] = (uint8_t)(0x80 | (c & 0x3F));
         btw = 3;
      }
   }
#else          /* Write the character without conversion */
   s[0] = (uint8_t)c;
  8078b4:	e0bffe03 	ldbu	r2,-8(fp)
  8078b8:	e0bffd05 	stb	r2,-12(fp)
   btw = 1;
  8078bc:	00800044 	movi	r2,1
  8078c0:	e0bffb15 	stw	r2,-20(fp)
#endif
   f_write(fil, s, btw, &bw);    /* Write the char to the file */
  8078c4:	e0fffd04 	addi	r3,fp,-12
  8078c8:	e0bffc04 	addi	r2,fp,-16
  8078cc:	e13fff17 	ldw	r4,-4(fp)
  8078d0:	180b883a 	mov	r5,r3
  8078d4:	e1bffb17 	ldw	r6,-20(fp)
  8078d8:	100f883a 	mov	r7,r2
  8078dc:	08048880 	call	804888 <f_write>
   return (bw == btw) ? 1 : EOF; /* Return the result */
  8078e0:	e0fffc17 	ldw	r3,-16(fp)
  8078e4:	e0bffb17 	ldw	r2,-20(fp)
  8078e8:	1880021e 	bne	r3,r2,8078f4 <f_putc+0x5c>
  8078ec:	00800044 	movi	r2,1
  8078f0:	00000106 	br	8078f8 <f_putc+0x60>
  8078f4:	00bfffc4 	movi	r2,-1
}
  8078f8:	e037883a 	mov	sp,fp
  8078fc:	dfc00117 	ldw	ra,4(sp)
  807900:	df000017 	ldw	fp,0(sp)
  807904:	dec00204 	addi	sp,sp,8
  807908:	f800283a 	ret

0080790c <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
   const TCHAR* str, /* Pointer to the string to be output */
   FIL* fil       /* Pointer to the file object */
)
{
  80790c:	defffb04 	addi	sp,sp,-20
  807910:	dfc00415 	stw	ra,16(sp)
  807914:	df000315 	stw	fp,12(sp)
  807918:	df000304 	addi	fp,sp,12
  80791c:	e13ffe15 	stw	r4,-8(fp)
  807920:	e17fff15 	stw	r5,-4(fp)
   int n;


   for (n = 0; *str; str++, n++) {
  807924:	e03ffd15 	stw	zero,-12(fp)
  807928:	00001206 	br	807974 <f_puts+0x68>
      if (f_putc(*str, fil) == EOF) return EOF;
  80792c:	e0bffe17 	ldw	r2,-8(fp)
  807930:	10800003 	ldbu	r2,0(r2)
  807934:	10803fcc 	andi	r2,r2,255
  807938:	1080201c 	xori	r2,r2,128
  80793c:	10bfe004 	addi	r2,r2,-128
  807940:	1009883a 	mov	r4,r2
  807944:	e17fff17 	ldw	r5,-4(fp)
  807948:	08078980 	call	807898 <f_putc>
  80794c:	10bfffd8 	cmpnei	r2,r2,-1
  807950:	1000021e 	bne	r2,zero,80795c <f_puts+0x50>
  807954:	00bfffc4 	movi	r2,-1
  807958:	00000d06 	br	807990 <f_puts+0x84>
)
{
   int n;


   for (n = 0; *str; str++, n++) {
  80795c:	e0bffe17 	ldw	r2,-8(fp)
  807960:	10800044 	addi	r2,r2,1
  807964:	e0bffe15 	stw	r2,-8(fp)
  807968:	e0bffd17 	ldw	r2,-12(fp)
  80796c:	10800044 	addi	r2,r2,1
  807970:	e0bffd15 	stw	r2,-12(fp)
  807974:	e0bffe17 	ldw	r2,-8(fp)
  807978:	10800003 	ldbu	r2,0(r2)
  80797c:	10803fcc 	andi	r2,r2,255
  807980:	1080201c 	xori	r2,r2,128
  807984:	10bfe004 	addi	r2,r2,-128
  807988:	103fe81e 	bne	r2,zero,80792c <__alt_data_end+0xff80792c>
      if (f_putc(*str, fil) == EOF) return EOF;
   }
   return n;
  80798c:	e0bffd17 	ldw	r2,-12(fp)
}
  807990:	e037883a 	mov	sp,fp
  807994:	dfc00117 	ldw	ra,4(sp)
  807998:	df000017 	ldw	fp,0(sp)
  80799c:	dec00204 	addi	sp,sp,8
  8079a0:	f800283a 	ret

008079a4 <f_printf>:
int f_printf (
   FIL* fil,         /* Pointer to the file object */
   const TCHAR* str, /* Pointer to the format string */
   ...               /* Optional arguments... */
)
{
  8079a4:	deffeb04 	addi	sp,sp,-84
  8079a8:	dfc01215 	stw	ra,72(sp)
  8079ac:	df001115 	stw	fp,68(sp)
  8079b0:	df001104 	addi	fp,sp,68
  8079b4:	e13ffe15 	stw	r4,-8(fp)
  8079b8:	e1800215 	stw	r6,8(fp)
  8079bc:	e1c00315 	stw	r7,12(fp)
  8079c0:	e17fff15 	stw	r5,-4(fp)
   uint32_t v;
   TCHAR c, d, s[16], *p;
   int res, chc, cc;


   va_start(arp, str);
  8079c4:	e0800204 	addi	r2,fp,8
  8079c8:	e0bff915 	stw	r2,-28(fp)

   for (cc = res = 0; cc != EOF; res += cc) {
  8079cc:	e03ff515 	stw	zero,-44(fp)
  8079d0:	e0bff517 	ldw	r2,-44(fp)
  8079d4:	e0bff715 	stw	r2,-36(fp)
  8079d8:	00017806 	br	807fbc <f_printf+0x618>
      c = *str++;
  8079dc:	e0bfff17 	ldw	r2,-4(fp)
  8079e0:	10c00044 	addi	r3,r2,1
  8079e4:	e0ffff15 	stw	r3,-4(fp)
  8079e8:	10800003 	ldbu	r2,0(r2)
  8079ec:	e0bff405 	stb	r2,-48(fp)
      if (c == 0) break;         /* End of string */
  8079f0:	e0bff407 	ldb	r2,-48(fp)
  8079f4:	1000011e 	bne	r2,zero,8079fc <f_printf+0x58>
  8079f8:	00017306 	br	807fc8 <f_printf+0x624>
      if (c != '%') {            /* Non escape character */
  8079fc:	e0bff407 	ldb	r2,-48(fp)
  807a00:	10800960 	cmpeqi	r2,r2,37
  807a04:	10000c1e 	bne	r2,zero,807a38 <f_printf+0x94>
         cc = f_putc(c, fil);
  807a08:	e0bff407 	ldb	r2,-48(fp)
  807a0c:	1009883a 	mov	r4,r2
  807a10:	e17ffe17 	ldw	r5,-8(fp)
  807a14:	08078980 	call	807898 <f_putc>
  807a18:	e0bff715 	stw	r2,-36(fp)
         if (cc != EOF) cc = 1;
  807a1c:	e0bff717 	ldw	r2,-36(fp)
  807a20:	10bfffe0 	cmpeqi	r2,r2,-1
  807a24:	1000031e 	bne	r2,zero,807a34 <f_printf+0x90>
  807a28:	00800044 	movi	r2,1
  807a2c:	e0bff715 	stw	r2,-36(fp)
         continue;
  807a30:	00015e06 	br	807fac <f_printf+0x608>
  807a34:	00015d06 	br	807fac <f_printf+0x608>
      }
      w = f = 0;
  807a38:	e03fef05 	stb	zero,-68(fp)
  807a3c:	e03ff215 	stw	zero,-56(fp)
      c = *str++;
  807a40:	e0bfff17 	ldw	r2,-4(fp)
  807a44:	10c00044 	addi	r3,r2,1
  807a48:	e0ffff15 	stw	r3,-4(fp)
  807a4c:	10800003 	ldbu	r2,0(r2)
  807a50:	e0bff405 	stb	r2,-48(fp)
      if (c == '0') {            /* Flag: '0' padding */
  807a54:	e0bff407 	ldb	r2,-48(fp)
  807a58:	10800c18 	cmpnei	r2,r2,48
  807a5c:	1000081e 	bne	r2,zero,807a80 <f_printf+0xdc>
         f = 1; c = *str++;
  807a60:	00800044 	movi	r2,1
  807a64:	e0bfef05 	stb	r2,-68(fp)
  807a68:	e0bfff17 	ldw	r2,-4(fp)
  807a6c:	10c00044 	addi	r3,r2,1
  807a70:	e0ffff15 	stw	r3,-4(fp)
  807a74:	10800003 	ldbu	r2,0(r2)
  807a78:	e0bff405 	stb	r2,-48(fp)
  807a7c:	00000a06 	br	807aa8 <f_printf+0x104>
      } else {
         if (c == '-') {         /* Flag: left justified */
  807a80:	e0bff407 	ldb	r2,-48(fp)
  807a84:	10800b58 	cmpnei	r2,r2,45
  807a88:	1000071e 	bne	r2,zero,807aa8 <f_printf+0x104>
            f = 2; c = *str++;
  807a8c:	00800084 	movi	r2,2
  807a90:	e0bfef05 	stb	r2,-68(fp)
  807a94:	e0bfff17 	ldw	r2,-4(fp)
  807a98:	10c00044 	addi	r3,r2,1
  807a9c:	e0ffff15 	stw	r3,-4(fp)
  807aa0:	10800003 	ldbu	r2,0(r2)
  807aa4:	e0bff405 	stb	r2,-48(fp)
         }
      }
      while (IsDigit(c)) {    /* Precision */
  807aa8:	00000b06 	br	807ad8 <f_printf+0x134>
         w = w * 10 + c - '0';
  807aac:	e0bff217 	ldw	r2,-56(fp)
  807ab0:	10c002a4 	muli	r3,r2,10
  807ab4:	e0bff407 	ldb	r2,-48(fp)
  807ab8:	1885883a 	add	r2,r3,r2
  807abc:	10bff404 	addi	r2,r2,-48
  807ac0:	e0bff215 	stw	r2,-56(fp)
         c = *str++;
  807ac4:	e0bfff17 	ldw	r2,-4(fp)
  807ac8:	10c00044 	addi	r3,r2,1
  807acc:	e0ffff15 	stw	r3,-4(fp)
  807ad0:	10800003 	ldbu	r2,0(r2)
  807ad4:	e0bff405 	stb	r2,-48(fp)
      } else {
         if (c == '-') {         /* Flag: left justified */
            f = 2; c = *str++;
         }
      }
      while (IsDigit(c)) {    /* Precision */
  807ad8:	e0bff407 	ldb	r2,-48(fp)
  807adc:	10800c10 	cmplti	r2,r2,48
  807ae0:	1000031e 	bne	r2,zero,807af0 <f_printf+0x14c>
  807ae4:	e0bff407 	ldb	r2,-48(fp)
  807ae8:	10800e90 	cmplti	r2,r2,58
  807aec:	103fef1e 	bne	r2,zero,807aac <__alt_data_end+0xff807aac>
         w = w * 10 + c - '0';
         c = *str++;
      }
      if (c == 'l' || c == 'L') {   /* Prefix: Size is long int */
  807af0:	e0bff407 	ldb	r2,-48(fp)
  807af4:	10801b20 	cmpeqi	r2,r2,108
  807af8:	1000031e 	bne	r2,zero,807b08 <f_printf+0x164>
  807afc:	e0bff407 	ldb	r2,-48(fp)
  807b00:	10801318 	cmpnei	r2,r2,76
  807b04:	1000081e 	bne	r2,zero,807b28 <f_printf+0x184>
         f |= 4; c = *str++;
  807b08:	e0bfef03 	ldbu	r2,-68(fp)
  807b0c:	10800114 	ori	r2,r2,4
  807b10:	e0bfef05 	stb	r2,-68(fp)
  807b14:	e0bfff17 	ldw	r2,-4(fp)
  807b18:	10c00044 	addi	r3,r2,1
  807b1c:	e0ffff15 	stw	r3,-4(fp)
  807b20:	10800003 	ldbu	r2,0(r2)
  807b24:	e0bff405 	stb	r2,-48(fp)
      }
      if (!c) break;
  807b28:	e0bff407 	ldb	r2,-48(fp)
  807b2c:	1000011e 	bne	r2,zero,807b34 <f_printf+0x190>
  807b30:	00012506 	br	807fc8 <f_printf+0x624>
      d = c;
  807b34:	e0bff403 	ldbu	r2,-48(fp)
  807b38:	e0bff445 	stb	r2,-47(fp)
      if (IsLower(d)) d -= 0x20;
  807b3c:	e0bff447 	ldb	r2,-47(fp)
  807b40:	10801850 	cmplti	r2,r2,97
  807b44:	1000061e 	bne	r2,zero,807b60 <f_printf+0x1bc>
  807b48:	e0bff447 	ldb	r2,-47(fp)
  807b4c:	10801ec8 	cmpgei	r2,r2,123
  807b50:	1000031e 	bne	r2,zero,807b60 <f_printf+0x1bc>
  807b54:	e0bff443 	ldbu	r2,-47(fp)
  807b58:	10bff804 	addi	r2,r2,-32
  807b5c:	e0bff445 	stb	r2,-47(fp)
      switch (d) {            /* Type is... */
  807b60:	e0bff447 	ldb	r2,-47(fp)
  807b64:	10bfef84 	addi	r2,r2,-66
  807b68:	10c005e8 	cmpgeui	r3,r2,23
  807b6c:	1800761e 	bne	r3,zero,807d48 <f_printf+0x3a4>
  807b70:	100690ba 	slli	r3,r2,2
  807b74:	00802034 	movhi	r2,128
  807b78:	109ee204 	addi	r2,r2,31624
  807b7c:	1885883a 	add	r2,r3,r2
  807b80:	10800017 	ldw	r2,0(r2)
  807b84:	1000683a 	jmp	r2
  807b88:	00807d18 	cmpnei	r2,zero,500
  807b8c:	00807ce8 	cmpgeui	r2,zero,499
  807b90:	00807d30 	cmpltui	r2,zero,500
  807b94:	00807d48 	cmpgei	r2,zero,501
  807b98:	00807d48 	cmpgei	r2,zero,501
  807b9c:	00807d48 	cmpgei	r2,zero,501
  807ba0:	00807d48 	cmpgei	r2,zero,501
  807ba4:	00807d48 	cmpgei	r2,zero,501
  807ba8:	00807d48 	cmpgei	r2,zero,501
  807bac:	00807d48 	cmpgei	r2,zero,501
  807bb0:	00807d48 	cmpgei	r2,zero,501
  807bb4:	00807d48 	cmpgei	r2,zero,501
  807bb8:	00807d48 	cmpgei	r2,zero,501
  807bbc:	00807d24 	muli	r2,zero,500
  807bc0:	00807d48 	cmpgei	r2,zero,501
  807bc4:	00807d48 	cmpgei	r2,zero,501
  807bc8:	00807d48 	cmpgei	r2,zero,501
  807bcc:	00807be4 	muli	r2,zero,495
  807bd0:	00807d48 	cmpgei	r2,zero,501
  807bd4:	00807d30 	cmpltui	r2,zero,500
  807bd8:	00807d48 	cmpgei	r2,zero,501
  807bdc:	00807d48 	cmpgei	r2,zero,501
  807be0:	00807d3c 	xorhi	r2,zero,500
      case 'S' :              /* String */
         p = va_arg(arp, TCHAR*);
  807be4:	e0bff917 	ldw	r2,-28(fp)
  807be8:	10c00104 	addi	r3,r2,4
  807bec:	e0fff915 	stw	r3,-28(fp)
  807bf0:	10800017 	ldw	r2,0(r2)
  807bf4:	e0bff815 	stw	r2,-32(fp)
         for (j = 0; p[j]; j++) ;
  807bf8:	e03ff115 	stw	zero,-60(fp)
  807bfc:	00000306 	br	807c0c <f_printf+0x268>
  807c00:	e0bff117 	ldw	r2,-60(fp)
  807c04:	10800044 	addi	r2,r2,1
  807c08:	e0bff115 	stw	r2,-60(fp)
  807c0c:	e0fff817 	ldw	r3,-32(fp)
  807c10:	e0bff117 	ldw	r2,-60(fp)
  807c14:	1885883a 	add	r2,r3,r2
  807c18:	10800003 	ldbu	r2,0(r2)
  807c1c:	10803fcc 	andi	r2,r2,255
  807c20:	1080201c 	xori	r2,r2,128
  807c24:	10bfe004 	addi	r2,r2,-128
  807c28:	103ff51e 	bne	r2,zero,807c00 <__alt_data_end+0xff807c00>
         chc = 0;
  807c2c:	e03ff615 	stw	zero,-40(fp)
         if (!(f & 2)) {
  807c30:	e0bfef03 	ldbu	r2,-68(fp)
  807c34:	1080008c 	andi	r2,r2,2
  807c38:	10000e1e 	bne	r2,zero,807c74 <f_printf+0x2d0>
            while (j++ < w) chc += (cc = f_putc(' ', fil));
  807c3c:	00000806 	br	807c60 <f_printf+0x2bc>
  807c40:	01000804 	movi	r4,32
  807c44:	e17ffe17 	ldw	r5,-8(fp)
  807c48:	08078980 	call	807898 <f_putc>
  807c4c:	e0bff715 	stw	r2,-36(fp)
  807c50:	e0bff717 	ldw	r2,-36(fp)
  807c54:	e0fff617 	ldw	r3,-40(fp)
  807c58:	1885883a 	add	r2,r3,r2
  807c5c:	e0bff615 	stw	r2,-40(fp)
  807c60:	e0bff117 	ldw	r2,-60(fp)
  807c64:	10c00044 	addi	r3,r2,1
  807c68:	e0fff115 	stw	r3,-60(fp)
  807c6c:	e0fff217 	ldw	r3,-56(fp)
  807c70:	10fff336 	bltu	r2,r3,807c40 <__alt_data_end+0xff807c40>
         }
         chc += (cc = f_puts(p, fil));
  807c74:	e13ff817 	ldw	r4,-32(fp)
  807c78:	e17ffe17 	ldw	r5,-8(fp)
  807c7c:	080790c0 	call	80790c <f_puts>
  807c80:	e0bff715 	stw	r2,-36(fp)
  807c84:	e0bff717 	ldw	r2,-36(fp)
  807c88:	e0fff617 	ldw	r3,-40(fp)
  807c8c:	1885883a 	add	r2,r3,r2
  807c90:	e0bff615 	stw	r2,-40(fp)
         while (j++ < w) chc += (cc = f_putc(' ', fil));
  807c94:	00000806 	br	807cb8 <f_printf+0x314>
  807c98:	01000804 	movi	r4,32
  807c9c:	e17ffe17 	ldw	r5,-8(fp)
  807ca0:	08078980 	call	807898 <f_putc>
  807ca4:	e0bff715 	stw	r2,-36(fp)
  807ca8:	e0bff717 	ldw	r2,-36(fp)
  807cac:	e0fff617 	ldw	r3,-40(fp)
  807cb0:	1885883a 	add	r2,r3,r2
  807cb4:	e0bff615 	stw	r2,-40(fp)
  807cb8:	e0bff117 	ldw	r2,-60(fp)
  807cbc:	10c00044 	addi	r3,r2,1
  807cc0:	e0fff115 	stw	r3,-60(fp)
  807cc4:	e0fff217 	ldw	r3,-56(fp)
  807cc8:	10fff336 	bltu	r2,r3,807c98 <__alt_data_end+0xff807c98>
         if (cc != EOF) cc = chc;
  807ccc:	e0bff717 	ldw	r2,-36(fp)
  807cd0:	10bfffe0 	cmpeqi	r2,r2,-1
  807cd4:	1000031e 	bne	r2,zero,807ce4 <f_printf+0x340>
  807cd8:	e0bff617 	ldw	r2,-40(fp)
  807cdc:	e0bff715 	stw	r2,-36(fp)
         continue;
  807ce0:	0000b206 	br	807fac <f_printf+0x608>
  807ce4:	0000b106 	br	807fac <f_printf+0x608>
      case 'C' :              /* Character */
         cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
  807ce8:	e0bff917 	ldw	r2,-28(fp)
  807cec:	10c00104 	addi	r3,r2,4
  807cf0:	e0fff915 	stw	r3,-28(fp)
  807cf4:	10800017 	ldw	r2,0(r2)
  807cf8:	10803fcc 	andi	r2,r2,255
  807cfc:	1080201c 	xori	r2,r2,128
  807d00:	10bfe004 	addi	r2,r2,-128
  807d04:	1009883a 	mov	r4,r2
  807d08:	e17ffe17 	ldw	r5,-8(fp)
  807d0c:	08078980 	call	807898 <f_putc>
  807d10:	e0bff715 	stw	r2,-36(fp)
  807d14:	0000a506 	br	807fac <f_printf+0x608>
      case 'B' :              /* Binary */
         r = 2; break;
  807d18:	00800084 	movi	r2,2
  807d1c:	e0bfef45 	stb	r2,-67(fp)
  807d20:	00000f06 	br	807d60 <f_printf+0x3bc>
      case 'O' :              /* Octal */
         r = 8; break;
  807d24:	00800204 	movi	r2,8
  807d28:	e0bfef45 	stb	r2,-67(fp)
  807d2c:	00000c06 	br	807d60 <f_printf+0x3bc>
      case 'D' :              /* Signed decimal */
      case 'U' :              /* Unsigned decimal */
         r = 10; break;
  807d30:	00800284 	movi	r2,10
  807d34:	e0bfef45 	stb	r2,-67(fp)
  807d38:	00000906 	br	807d60 <f_printf+0x3bc>
      case 'X' :              /* Hexdecimal */
         r = 16; break;
  807d3c:	00800404 	movi	r2,16
  807d40:	e0bfef45 	stb	r2,-67(fp)
  807d44:	00000606 	br	807d60 <f_printf+0x3bc>
      default:             /* Unknown type (passthrough) */
         cc = f_putc(c, fil); continue;
  807d48:	e0bff407 	ldb	r2,-48(fp)
  807d4c:	1009883a 	mov	r4,r2
  807d50:	e17ffe17 	ldw	r5,-8(fp)
  807d54:	08078980 	call	807898 <f_putc>
  807d58:	e0bff715 	stw	r2,-36(fp)
  807d5c:	00009306 	br	807fac <f_printf+0x608>
      }

      /* Get an argument and put it in numeral */
      v = (f & 4) ? (uint32_t)va_arg(arp, long) : ((d == 'D') ? (uint32_t)(long)va_arg(arp, int) : (uint32_t)va_arg(arp, unsigned int));
  807d60:	e0bfef03 	ldbu	r2,-68(fp)
  807d64:	1080010c 	andi	r2,r2,4
  807d68:	10000526 	beq	r2,zero,807d80 <f_printf+0x3dc>
  807d6c:	e0bff917 	ldw	r2,-28(fp)
  807d70:	10c00104 	addi	r3,r2,4
  807d74:	e0fff915 	stw	r3,-28(fp)
  807d78:	10800017 	ldw	r2,0(r2)
  807d7c:	00000c06 	br	807db0 <f_printf+0x40c>
  807d80:	e0bff447 	ldb	r2,-47(fp)
  807d84:	10801118 	cmpnei	r2,r2,68
  807d88:	1000051e 	bne	r2,zero,807da0 <f_printf+0x3fc>
  807d8c:	e0bff917 	ldw	r2,-28(fp)
  807d90:	10c00104 	addi	r3,r2,4
  807d94:	e0fff915 	stw	r3,-28(fp)
  807d98:	10800017 	ldw	r2,0(r2)
  807d9c:	00000406 	br	807db0 <f_printf+0x40c>
  807da0:	e0bff917 	ldw	r2,-28(fp)
  807da4:	10c00104 	addi	r3,r2,4
  807da8:	e0fff915 	stw	r3,-28(fp)
  807dac:	10800017 	ldw	r2,0(r2)
  807db0:	e0bff315 	stw	r2,-52(fp)
      if (d == 'D' && (v & 0x80000000)) {
  807db4:	e0bff447 	ldb	r2,-47(fp)
  807db8:	10801118 	cmpnei	r2,r2,68
  807dbc:	1000081e 	bne	r2,zero,807de0 <f_printf+0x43c>
  807dc0:	e0bff317 	ldw	r2,-52(fp)
  807dc4:	1000060e 	bge	r2,zero,807de0 <f_printf+0x43c>
         v = 0 - v;
  807dc8:	e0bff317 	ldw	r2,-52(fp)
  807dcc:	0085c83a 	sub	r2,zero,r2
  807dd0:	e0bff315 	stw	r2,-52(fp)
         f |= 8;
  807dd4:	e0bfef03 	ldbu	r2,-68(fp)
  807dd8:	10800214 	ori	r2,r2,8
  807ddc:	e0bfef05 	stb	r2,-68(fp)
      }
      i = 0;
  807de0:	e03ff015 	stw	zero,-64(fp)
      do {
         d = (TCHAR)(v % r); v /= r;
  807de4:	e0bfef43 	ldbu	r2,-67(fp)
  807de8:	e0fff317 	ldw	r3,-52(fp)
  807dec:	1809883a 	mov	r4,r3
  807df0:	100b883a 	mov	r5,r2
  807df4:	080a9880 	call	80a988 <__umodsi3>
  807df8:	e0bff445 	stb	r2,-47(fp)
  807dfc:	e0bfef43 	ldbu	r2,-67(fp)
  807e00:	e13ff317 	ldw	r4,-52(fp)
  807e04:	100b883a 	mov	r5,r2
  807e08:	080a9800 	call	80a980 <__udivsi3>
  807e0c:	e0bff315 	stw	r2,-52(fp)
         if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  807e10:	e0bff447 	ldb	r2,-47(fp)
  807e14:	10800290 	cmplti	r2,r2,10
  807e18:	1000091e 	bne	r2,zero,807e40 <f_printf+0x49c>
  807e1c:	e0bff407 	ldb	r2,-48(fp)
  807e20:	10801e18 	cmpnei	r2,r2,120
  807e24:	1000021e 	bne	r2,zero,807e30 <f_printf+0x48c>
  807e28:	008009c4 	movi	r2,39
  807e2c:	00000106 	br	807e34 <f_printf+0x490>
  807e30:	008001c4 	movi	r2,7
  807e34:	e0fff443 	ldbu	r3,-47(fp)
  807e38:	10c5883a 	add	r2,r2,r3
  807e3c:	e0bff445 	stb	r2,-47(fp)
         s[i++] = d + '0';
  807e40:	e0bff017 	ldw	r2,-64(fp)
  807e44:	10c00044 	addi	r3,r2,1
  807e48:	e0fff015 	stw	r3,-64(fp)
  807e4c:	e0fff443 	ldbu	r3,-47(fp)
  807e50:	18c00c04 	addi	r3,r3,48
  807e54:	1809883a 	mov	r4,r3
  807e58:	e0fffa04 	addi	r3,fp,-24
  807e5c:	1885883a 	add	r2,r3,r2
  807e60:	11000005 	stb	r4,0(r2)
      } while (v && i < sizeof(s) / sizeof(s[0]));
  807e64:	e0bff317 	ldw	r2,-52(fp)
  807e68:	10000326 	beq	r2,zero,807e78 <f_printf+0x4d4>
  807e6c:	e0bff017 	ldw	r2,-64(fp)
  807e70:	10800430 	cmpltui	r2,r2,16
  807e74:	103fdb1e 	bne	r2,zero,807de4 <__alt_data_end+0xff807de4>
      if (f & 8) s[i++] = '-';
  807e78:	e0bfef03 	ldbu	r2,-68(fp)
  807e7c:	1080020c 	andi	r2,r2,8
  807e80:	10000726 	beq	r2,zero,807ea0 <f_printf+0x4fc>
  807e84:	e0bff017 	ldw	r2,-64(fp)
  807e88:	10c00044 	addi	r3,r2,1
  807e8c:	e0fff015 	stw	r3,-64(fp)
  807e90:	e0fffa04 	addi	r3,fp,-24
  807e94:	1885883a 	add	r2,r3,r2
  807e98:	00c00b44 	movi	r3,45
  807e9c:	10c00005 	stb	r3,0(r2)
      j = i; d = (f & 1) ? '0' : ' ';
  807ea0:	e0bff017 	ldw	r2,-64(fp)
  807ea4:	e0bff115 	stw	r2,-60(fp)
  807ea8:	e0bfef03 	ldbu	r2,-68(fp)
  807eac:	1080004c 	andi	r2,r2,1
  807eb0:	10000226 	beq	r2,zero,807ebc <f_printf+0x518>
  807eb4:	00800c04 	movi	r2,48
  807eb8:	00000106 	br	807ec0 <f_printf+0x51c>
  807ebc:	00800804 	movi	r2,32
  807ec0:	e0bff445 	stb	r2,-47(fp)
      res = 0;
  807ec4:	e03ff515 	stw	zero,-44(fp)
      while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
  807ec8:	00000906 	br	807ef0 <f_printf+0x54c>
  807ecc:	e0bff447 	ldb	r2,-47(fp)
  807ed0:	1009883a 	mov	r4,r2
  807ed4:	e17ffe17 	ldw	r5,-8(fp)
  807ed8:	08078980 	call	807898 <f_putc>
  807edc:	e0bff715 	stw	r2,-36(fp)
  807ee0:	e0bff717 	ldw	r2,-36(fp)
  807ee4:	e0fff517 	ldw	r3,-44(fp)
  807ee8:	1885883a 	add	r2,r3,r2
  807eec:	e0bff515 	stw	r2,-44(fp)
  807ef0:	e0bfef03 	ldbu	r2,-68(fp)
  807ef4:	1080008c 	andi	r2,r2,2
  807ef8:	1000051e 	bne	r2,zero,807f10 <f_printf+0x56c>
  807efc:	e0bff117 	ldw	r2,-60(fp)
  807f00:	10c00044 	addi	r3,r2,1
  807f04:	e0fff115 	stw	r3,-60(fp)
  807f08:	e0fff217 	ldw	r3,-56(fp)
  807f0c:	10ffef36 	bltu	r2,r3,807ecc <__alt_data_end+0xff807ecc>
      do res += (cc = f_putc(s[--i], fil)); while(i);
  807f10:	e0bff017 	ldw	r2,-64(fp)
  807f14:	10bfffc4 	addi	r2,r2,-1
  807f18:	e0bff015 	stw	r2,-64(fp)
  807f1c:	e0fffa04 	addi	r3,fp,-24
  807f20:	e0bff017 	ldw	r2,-64(fp)
  807f24:	1885883a 	add	r2,r3,r2
  807f28:	10800003 	ldbu	r2,0(r2)
  807f2c:	10803fcc 	andi	r2,r2,255
  807f30:	1080201c 	xori	r2,r2,128
  807f34:	10bfe004 	addi	r2,r2,-128
  807f38:	1009883a 	mov	r4,r2
  807f3c:	e17ffe17 	ldw	r5,-8(fp)
  807f40:	08078980 	call	807898 <f_putc>
  807f44:	e0bff715 	stw	r2,-36(fp)
  807f48:	e0bff717 	ldw	r2,-36(fp)
  807f4c:	e0fff517 	ldw	r3,-44(fp)
  807f50:	1885883a 	add	r2,r3,r2
  807f54:	e0bff515 	stw	r2,-44(fp)
  807f58:	e0bff017 	ldw	r2,-64(fp)
  807f5c:	103fec1e 	bne	r2,zero,807f10 <__alt_data_end+0xff807f10>
      while (j++ < w) res += (cc = f_putc(' ', fil));
  807f60:	00000806 	br	807f84 <f_printf+0x5e0>
  807f64:	01000804 	movi	r4,32
  807f68:	e17ffe17 	ldw	r5,-8(fp)
  807f6c:	08078980 	call	807898 <f_putc>
  807f70:	e0bff715 	stw	r2,-36(fp)
  807f74:	e0bff717 	ldw	r2,-36(fp)
  807f78:	e0fff517 	ldw	r3,-44(fp)
  807f7c:	1885883a 	add	r2,r3,r2
  807f80:	e0bff515 	stw	r2,-44(fp)
  807f84:	e0bff117 	ldw	r2,-60(fp)
  807f88:	10c00044 	addi	r3,r2,1
  807f8c:	e0fff115 	stw	r3,-60(fp)
  807f90:	e0fff217 	ldw	r3,-56(fp)
  807f94:	10fff336 	bltu	r2,r3,807f64 <__alt_data_end+0xff807f64>
      if (cc != EOF) cc = res;
  807f98:	e0bff717 	ldw	r2,-36(fp)
  807f9c:	10bfffe0 	cmpeqi	r2,r2,-1
  807fa0:	1000021e 	bne	r2,zero,807fac <f_printf+0x608>
  807fa4:	e0bff517 	ldw	r2,-44(fp)
  807fa8:	e0bff715 	stw	r2,-36(fp)
   int res, chc, cc;


   va_start(arp, str);

   for (cc = res = 0; cc != EOF; res += cc) {
  807fac:	e0fff517 	ldw	r3,-44(fp)
  807fb0:	e0bff717 	ldw	r2,-36(fp)
  807fb4:	1885883a 	add	r2,r3,r2
  807fb8:	e0bff515 	stw	r2,-44(fp)
  807fbc:	e0bff717 	ldw	r2,-36(fp)
  807fc0:	10bfffd8 	cmpnei	r2,r2,-1
  807fc4:	103e851e 	bne	r2,zero,8079dc <__alt_data_end+0xff8079dc>
      while (j++ < w) res += (cc = f_putc(' ', fil));
      if (cc != EOF) cc = res;
   }

   va_end(arp);
   return (cc == EOF) ? cc : res;
  807fc8:	e0bff717 	ldw	r2,-36(fp)
  807fcc:	10bfffd8 	cmpnei	r2,r2,-1
  807fd0:	1000021e 	bne	r2,zero,807fdc <f_printf+0x638>
  807fd4:	e0bff717 	ldw	r2,-36(fp)
  807fd8:	00000106 	br	807fe0 <f_printf+0x63c>
  807fdc:	e0bff517 	ldw	r2,-44(fp)
}
  807fe0:	e037883a 	mov	sp,fp
  807fe4:	dfc00117 	ldw	ra,4(sp)
  807fe8:	df000017 	ldw	fp,0(sp)
  807fec:	dec00404 	addi	sp,sp,16
  807ff0:	f800283a 	ret

00807ff4 <TimerFunction>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static alt_u32 TimerFunction (void *context)
{
  807ff4:	defffd04 	addi	sp,sp,-12
  807ff8:	dfc00215 	stw	ra,8(sp)
  807ffc:	df000115 	stw	fp,4(sp)
  808000:	df000104 	addi	fp,sp,4
  808004:	e13fff15 	stw	r4,-4(fp)
   static unsigned short wTimer10ms = 0;

   (void)context;

   Systick++;
  808008:	d0a77017 	ldw	r2,-25152(gp)
  80800c:	10800044 	addi	r2,r2,1
  808010:	d0a77015 	stw	r2,-25152(gp)
   wTimer10ms++;
  808014:	d0a7770b 	ldhu	r2,-25124(gp)
  808018:	10800044 	addi	r2,r2,1
  80801c:	d0a7770d 	sth	r2,-25124(gp)
   Timer++; /* Performance counter for this module */
  808020:	d0a7710b 	ldhu	r2,-25148(gp)
  808024:	10800044 	addi	r2,r2,1
  808028:	d0a7710d 	sth	r2,-25148(gp)

   if (wTimer10ms == 10)
  80802c:	d0a7770b 	ldhu	r2,-25124(gp)
  808030:	10bfffcc 	andi	r2,r2,65535
  808034:	10800298 	cmpnei	r2,r2,10
  808038:	1000021e 	bne	r2,zero,808044 <TimerFunction+0x50>
   {
      wTimer10ms = 0;
  80803c:	d027770d 	sth	zero,-25124(gp)
      ffs_DiskIOTimerproc();  /* Drive timer procedure of low level disk I/O module */
  808040:	0800a600 	call	800a60 <ffs_DiskIOTimerproc>
   }

   return(1);
  808044:	00800044 	movi	r2,1
} /* TimerFunction */
  808048:	e037883a 	mov	sp,fp
  80804c:	dfc00117 	ldw	ra,4(sp)
  808050:	df000017 	ldw	fp,0(sp)
  808054:	dec00204 	addi	sp,sp,8
  808058:	f800283a 	ret

0080805c <IoInit>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void IoInit(void)
{
  80805c:	defffe04 	addi	sp,sp,-8
  808060:	dfc00115 	stw	ra,4(sp)
  808064:	df000015 	stw	fp,0(sp)
  808068:	d839883a 	mov	fp,sp
   uart0_init(115200);
  80806c:	010000b4 	movhi	r4,2
  808070:	21308004 	addi	r4,r4,-15872
  808074:	080a7b40 	call	80a7b4 <uart0_init>

   /* Init diskio interface */
   ffs_DiskIOInit();
  808078:	0800a340 	call	800a34 <ffs_DiskIOInit>

   //SetHighSpeed();

   /* Init timer system */
   alt_alarm_start(&alarm, 1, &TimerFunction, NULL);
  80807c:	010020b4 	movhi	r4,130
  808080:	21035204 	addi	r4,r4,3400
  808084:	01400044 	movi	r5,1
  808088:	01802034 	movhi	r6,128
  80808c:	319ffd04 	addi	r6,r6,32756
  808090:	000f883a 	mov	r7,zero
  808094:	08179ac0 	call	8179ac <alt_alarm_start>

} /* IoInit */
  808098:	e037883a 	mov	sp,fp
  80809c:	dfc00117 	ldw	ra,4(sp)
  8080a0:	df000017 	ldw	fp,0(sp)
  8080a4:	dec00204 	addi	sp,sp,8
  8080a8:	f800283a 	ret

008080ac <scan_files>:



static
FRESULT scan_files(char *path)
{
  8080ac:	defff304 	addi	sp,sp,-52
  8080b0:	dfc00c15 	stw	ra,48(sp)
  8080b4:	df000b15 	stw	fp,44(sp)
  8080b8:	df000b04 	addi	fp,sp,44
  8080bc:	e13fff15 	stw	r4,-4(fp)
    FRESULT res;
    uint8_t i;
    char *fn;


    if ((res = f_opendir(&dirs, path)) == FR_OK) {
  8080c0:	e0bff804 	addi	r2,fp,-32
  8080c4:	1009883a 	mov	r4,r2
  8080c8:	e17fff17 	ldw	r5,-4(fp)
  8080cc:	08055c00 	call	8055c0 <f_opendir>
  8080d0:	e0bff515 	stw	r2,-44(fp)
  8080d4:	e0bff517 	ldw	r2,-44(fp)
  8080d8:	10003e1e 	bne	r2,zero,8081d4 <scan_files+0x128>
        i = (uint8_t)strlen(path);
  8080dc:	e13fff17 	ldw	r4,-4(fp)
  8080e0:	080cf640 	call	80cf64 <strlen>
  8080e4:	e0bff605 	stb	r2,-40(fp)
        while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
  8080e8:	00002b06 	br	808198 <scan_files+0xec>
            if (_FS_RPATH && Finfo.fname[0] == '.')
                continue;
#if _USE_LFN
            fn = *Finfo.lfname ? Finfo.lfname : Finfo.fname;
#else
            fn = Finfo.fname;
  8080ec:	008020b4 	movhi	r2,130
  8080f0:	1084bf44 	addi	r2,r2,4861
  8080f4:	e0bff715 	stw	r2,-36(fp)
#endif
            if (Finfo.fattrib & AM_DIR) {
  8080f8:	008020b4 	movhi	r2,130
  8080fc:	1084bd04 	addi	r2,r2,4852
  808100:	10800203 	ldbu	r2,8(r2)
  808104:	10803fcc 	andi	r2,r2,255
  808108:	1080040c 	andi	r2,r2,16
  80810c:	10001926 	beq	r2,zero,808174 <scan_files+0xc8>
                acc_dirs++;
  808110:	d0a7780b 	ldhu	r2,-25120(gp)
  808114:	10800044 	addi	r2,r2,1
  808118:	d0a7780d 	sth	r2,-25120(gp)
                *(path + i) = '/';
  80811c:	e0bff603 	ldbu	r2,-40(fp)
  808120:	e0ffff17 	ldw	r3,-4(fp)
  808124:	1885883a 	add	r2,r3,r2
  808128:	00c00bc4 	movi	r3,47
  80812c:	10c00005 	stb	r3,0(r2)
                strcpy(path + i + 1, fn);
  808130:	e0bff603 	ldbu	r2,-40(fp)
  808134:	10800044 	addi	r2,r2,1
  808138:	e0ffff17 	ldw	r3,-4(fp)
  80813c:	1885883a 	add	r2,r3,r2
  808140:	1009883a 	mov	r4,r2
  808144:	e17ff717 	ldw	r5,-36(fp)
  808148:	080ced40 	call	80ced4 <strcpy>
                res = scan_files(path);
  80814c:	e13fff17 	ldw	r4,-4(fp)
  808150:	08080ac0 	call	8080ac <scan_files>
  808154:	e0bff515 	stw	r2,-44(fp)
                *(path + i) = '\0';
  808158:	e0bff603 	ldbu	r2,-40(fp)
  80815c:	e0ffff17 	ldw	r3,-4(fp)
  808160:	1885883a 	add	r2,r3,r2
  808164:	10000005 	stb	zero,0(r2)
                if (res != FR_OK)
  808168:	e0bff517 	ldw	r2,-44(fp)
  80816c:	10000a26 	beq	r2,zero,808198 <scan_files+0xec>
                    break;
  808170:	00001806 	br	8081d4 <scan_files+0x128>
            } else {
                //      xprintf("%s/%s\n", path, fn);
                acc_files++;
  808174:	d0a7788b 	ldhu	r2,-25118(gp)
  808178:	10800044 	addi	r2,r2,1
  80817c:	d0a7788d 	sth	r2,-25118(gp)
                acc_size += Finfo.fsize;
  808180:	008020b4 	movhi	r2,130
  808184:	1084bd04 	addi	r2,r2,4852
  808188:	10c00017 	ldw	r3,0(r2)
  80818c:	d0a77a17 	ldw	r2,-25112(gp)
  808190:	1885883a 	add	r2,r3,r2
  808194:	d0a77a15 	stw	r2,-25112(gp)
    char *fn;


    if ((res = f_opendir(&dirs, path)) == FR_OK) {
        i = (uint8_t)strlen(path);
        while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
  808198:	e0bff804 	addi	r2,fp,-32
  80819c:	1009883a 	mov	r4,r2
  8081a0:	014020b4 	movhi	r5,130
  8081a4:	2944bd04 	addi	r5,r5,4852
  8081a8:	08057300 	call	805730 <f_readdir>
  8081ac:	e0bff515 	stw	r2,-44(fp)
  8081b0:	e0bff517 	ldw	r2,-44(fp)
  8081b4:	1000071e 	bne	r2,zero,8081d4 <scan_files+0x128>
  8081b8:	008020b4 	movhi	r2,130
  8081bc:	1084bd04 	addi	r2,r2,4852
  8081c0:	10800243 	ldbu	r2,9(r2)
  8081c4:	10803fcc 	andi	r2,r2,255
  8081c8:	1080201c 	xori	r2,r2,128
  8081cc:	10bfe004 	addi	r2,r2,-128
  8081d0:	103fc61e 	bne	r2,zero,8080ec <__alt_data_end+0xff8080ec>
                acc_size += Finfo.fsize;
            }
        }
    }

    return res;
  8081d4:	e0bff517 	ldw	r2,-44(fp)
}
  8081d8:	e037883a 	mov	sp,fp
  8081dc:	dfc00117 	ldw	ra,4(sp)
  8081e0:	df000017 	ldw	fp,0(sp)
  8081e4:	dec00204 	addi	sp,sp,8
  8081e8:	f800283a 	ret

008081ec <put_rc>:

//                put_rc(f_mount((uint8_t) p1, &Fatfs[p1]));

static
void put_rc(FRESULT rc)
{
  8081ec:	defffb04 	addi	sp,sp,-20
  8081f0:	dfc00415 	stw	ra,16(sp)
  8081f4:	df000315 	stw	fp,12(sp)
  8081f8:	df000304 	addi	fp,sp,12
  8081fc:	e13fff15 	stw	r4,-4(fp)
    const char *str =
  808200:	008020b4 	movhi	r2,130
  808204:	10b15e04 	addi	r2,r2,-14984
  808208:	e0bffd15 	stw	r2,-12(fp)
        "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
        "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
        "LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
    FRESULT i;

    for (i = 0; i != rc && *str; i++) {
  80820c:	e03ffe15 	stw	zero,-8(fp)
  808210:	00000c06 	br	808244 <put_rc+0x58>
        while (*str++);
  808214:	0001883a 	nop
  808218:	e0bffd17 	ldw	r2,-12(fp)
  80821c:	10c00044 	addi	r3,r2,1
  808220:	e0fffd15 	stw	r3,-12(fp)
  808224:	10800003 	ldbu	r2,0(r2)
  808228:	10803fcc 	andi	r2,r2,255
  80822c:	1080201c 	xori	r2,r2,128
  808230:	10bfe004 	addi	r2,r2,-128
  808234:	103ff81e 	bne	r2,zero,808218 <__alt_data_end+0xff808218>
        "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
        "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
        "LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
    FRESULT i;

    for (i = 0; i != rc && *str; i++) {
  808238:	e0bffe17 	ldw	r2,-8(fp)
  80823c:	10800044 	addi	r2,r2,1
  808240:	e0bffe15 	stw	r2,-8(fp)
  808244:	e0fffe17 	ldw	r3,-8(fp)
  808248:	e0bfff17 	ldw	r2,-4(fp)
  80824c:	18800626 	beq	r3,r2,808268 <put_rc+0x7c>
  808250:	e0bffd17 	ldw	r2,-12(fp)
  808254:	10800003 	ldbu	r2,0(r2)
  808258:	10803fcc 	andi	r2,r2,255
  80825c:	1080201c 	xori	r2,r2,128
  808260:	10bfe004 	addi	r2,r2,-128
  808264:	103feb1e 	bne	r2,zero,808214 <__alt_data_end+0xff808214>
        while (*str++);
    }
    xprintf("rc=%u FR_%s\n", (uint32_t) rc, str);
  808268:	010020b4 	movhi	r4,130
  80826c:	21319304 	addi	r4,r4,-14772
  808270:	e17fff17 	ldw	r5,-4(fp)
  808274:	e1bffd17 	ldw	r6,-12(fp)
  808278:	080a3300 	call	80a330 <xprintf>
}
  80827c:	e037883a 	mov	sp,fp
  808280:	dfc00117 	ldw	ra,4(sp)
  808284:	df000017 	ldw	fp,0(sp)
  808288:	dec00204 	addi	sp,sp,8
  80828c:	f800283a 	ret

00808290 <display_help>:

static
void display_help(void)
{
  808290:	defffe04 	addi	sp,sp,-8
  808294:	dfc00115 	stw	ra,4(sp)
  808298:	df000015 	stw	fp,0(sp)
  80829c:	d839883a 	mov	fp,sp
    xputs("dd <phy_drv#> [<sector>] - Dump sector\n"
  8082a0:	010020b4 	movhi	r4,130
  8082a4:	21319704 	addi	r4,r4,-14756
  8082a8:	080a1100 	call	80a110 <xputs>
    	  "fp -  (to be added by you) \n"
          "fr <len> - Read file\n"
          "fs [<path>] - Show logical drive status\n"
          "fz [<len>] - Get/Set transfer unit for fr/fw commands\n"
          "h view help (this)\n");
}
  8082ac:	e037883a 	mov	sp,fp
  8082b0:	dfc00117 	ldw	ra,4(sp)
  8082b4:	df000017 	ldw	fp,0(sp)
  8082b8:	dec00204 	addi	sp,sp,8
  8082bc:	f800283a 	ret

008082c0 <main>:
unsigned long sizes[14];
int xx;
int names_index = 11;

int main(void)
{
  8082c0:	deffd604 	addi	sp,sp,-168
  8082c4:	dfc02915 	stw	ra,164(sp)
  8082c8:	df002815 	stw	fp,160(sp)
  8082cc:	dc002715 	stw	r16,156(sp)
  8082d0:	df002804 	addi	fp,sp,160
	alt_irq_register(TIMER_0_IRQ, (void*)0, timer_ISR);
  8082d4:	01000144 	movi	r4,5
  8082d8:	000b883a 	mov	r5,zero
  8082dc:	01802074 	movhi	r6,129
  8082e0:	31a67c04 	addi	r6,r6,-26128
  8082e4:	0817d380 	call	817d38 <alt_irq_register>
	alt_irq_register(BUTTON_PIO_IRQ, (void*)0, button_ISR);
  8082e8:	01000044 	movi	r4,1
  8082ec:	000b883a 	mov	r5,zero
  8082f0:	01802074 	movhi	r6,129
  8082f4:	31a6e704 	addi	r6,r6,-25700
  8082f8:	0817d380 	call	817d38 <alt_irq_register>
	IOWR(BUTTON_PIO_BASE, 3, 0);
  8082fc:	0007883a 	mov	r3,zero
  808300:	00804034 	movhi	r2,256
  808304:	10844b04 	addi	r2,r2,4396
  808308:	10c00035 	stwio	r3,0(r2)
	IOWR(BUTTON_PIO_BASE, 2, 0xF);
  80830c:	00c003c4 	movi	r3,15
  808310:	00804034 	movhi	r2,256
  808314:	10844a04 	addi	r2,r2,4392
  808318:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
  80831c:	0007883a 	mov	r3,zero
  808320:	00804034 	movhi	r2,256
  808324:	10841804 	addi	r2,r2,4192
  808328:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x2);
  80832c:	00c00084 	movi	r3,2
  808330:	00804034 	movhi	r2,256
  808334:	10841b04 	addi	r2,r2,4204
  808338:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xFFFF);
  80833c:	00ffffd4 	movui	r3,65535
  808340:	00804034 	movhi	r2,256
  808344:	10841a04 	addi	r2,r2,4200
  808348:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x8);
  80834c:	00c00204 	movi	r3,8
  808350:	00804034 	movhi	r2,256
  808354:	10841904 	addi	r2,r2,4196
  808358:	10c00035 	stwio	r3,0(r2)

	int ii = 0;
  80835c:	e03fec15 	stw	zero,-80(fp)
	int fifospace;
    char *ptr, *ptr2;
    long p1, p2, p3;
    uint8_t res, b1, drv = 0;
  808360:	e03fe105 	stb	zero,-124(fp)
    uint16_t w1;
    uint32_t s1, s2, cnt, blen = sizeof(Buff);
  808364:	00810004 	movi	r2,1024
  808368:	e0bfe315 	stw	r2,-116(fp)
    static const uint8_t ft[] = { 0, 12, 16, 32 };
    uint32_t ofs = 0, sect = 0, blk[2];
  80836c:	e03fe415 	stw	zero,-112(fp)
  808370:	e03fe515 	stw	zero,-108(fp)
    alt_up_audio_dev * audio_dev;
    /* used for audio record/playback */
    unsigned int l_buf;
    unsigned int r_buf;
    // open the Audio port
    audio_dev = alt_up_audio_open_dev ("/dev/Audio");
  808374:	010020b4 	movhi	r4,130
  808378:	21323304 	addi	r4,r4,-14132
  80837c:	081b0d00 	call	81b0d0 <alt_up_audio_open_dev>
  808380:	e0bfed15 	stw	r2,-76(fp)
    if ( audio_dev == NULL)
  808384:	e0bfed17 	ldw	r2,-76(fp)
  808388:	1000041e 	bne	r2,zero,80839c <main+0xdc>
    alt_printf ("Error: could not open audio device \n");
  80838c:	010020b4 	movhi	r4,130
  808390:	21323604 	addi	r4,r4,-14120
  808394:	08185100 	call	818510 <alt_printf>
  808398:	00000306 	br	8083a8 <main+0xe8>
    else
    alt_printf ("Opened audio device \n");
  80839c:	010020b4 	movhi	r4,130
  8083a0:	21324004 	addi	r4,r4,-14080
  8083a4:	08185100 	call	818510 <alt_printf>

    IoInit();
  8083a8:	080805c0 	call	80805c <IoInit>

    IOWR(SEVEN_SEG_PIO_BASE,1,0x0007);
  8083ac:	00c001c4 	movi	r3,7
  8083b0:	00804034 	movhi	r2,256
  8083b4:	10840904 	addi	r2,r2,4132
  8083b8:	10c00035 	stwio	r3,0(r2)

    xputs(PSTR("FatFs module test monitor\n"));
  8083bc:	010020b4 	movhi	r4,130
  8083c0:	21324604 	addi	r4,r4,-14056
  8083c4:	080a1100 	call	80a110 <xputs>
    xputs(_USE_LFN ? "LFN Enabled" : "LFN Disabled");
  8083c8:	010020b4 	movhi	r4,130
  8083cc:	21324d04 	addi	r4,r4,-14028
  8083d0:	080a1100 	call	80a110 <xputs>
    xprintf(", Code page: %u\n", _CODE_PAGE);
  8083d4:	010020b4 	movhi	r4,130
  8083d8:	21325104 	addi	r4,r4,-14012
  8083dc:	01413884 	movi	r5,1250
  8083e0:	080a3300 	call	80a330 <xprintf>

    display_help();
  8083e4:	08082900 	call	808290 <display_help>
    Finfo.lfsize = sizeof(Lfname);
#endif

    for (;;) {

        get_line(Line, sizeof(Line));
  8083e8:	010020b4 	movhi	r4,130
  8083ec:	21066104 	addi	r4,r4,6532
  8083f0:	01404004 	movi	r5,256
  8083f4:	080a6f80 	call	80a6f8 <get_line>

        ptr = Line;
  8083f8:	008020b4 	movhi	r2,130
  8083fc:	10866104 	addi	r2,r2,6532
  808400:	e0bff315 	stw	r2,-52(fp)
        switch (*ptr++) {
  808404:	e0bff317 	ldw	r2,-52(fp)
  808408:	10c00044 	addi	r3,r2,1
  80840c:	e0fff315 	stw	r3,-52(fp)
  808410:	10800003 	ldbu	r2,0(r2)
  808414:	10803fcc 	andi	r2,r2,255
  808418:	1080201c 	xori	r2,r2,128
  80841c:	10bfe004 	addi	r2,r2,-128
  808420:	10bfe784 	addi	r2,r2,-98
  808424:	10c00328 	cmpgeui	r3,r2,12
  808428:	183fef1e 	bne	r3,zero,8083e8 <__alt_data_end+0xff8083e8>
  80842c:	100690ba 	slli	r3,r2,2
  808430:	00802074 	movhi	r2,129
  808434:	10a11104 	addi	r2,r2,-31676
  808438:	1885883a 	add	r2,r3,r2
  80843c:	10800017 	ldw	r2,0(r2)
  808440:	1000683a 	jmp	r2
  808444:	00808a0c 	andi	r2,zero,552
  808448:	008083e8 	cmpgeui	r2,zero,527
  80844c:	00808550 	cmplti	r2,zero,533
  808450:	008083e8 	cmpgeui	r2,zero,527
  808454:	00808ba8 	cmpgeui	r2,zero,558
  808458:	008083e8 	cmpgeui	r2,zero,527
  80845c:	008099e0 	cmpeqi	r2,zero,615
  808460:	008083e8 	cmpgeui	r2,zero,527
  808464:	008083e8 	cmpgeui	r2,zero,527
  808468:	008083e8 	cmpgeui	r2,zero,527
  80846c:	008083e8 	cmpgeui	r2,zero,527
  808470:	00808474 	movhi	r2,529

        case 'm':              /* System memroy/register controls */
            switch (*ptr++) {
  808474:	e0bff317 	ldw	r2,-52(fp)
  808478:	10c00044 	addi	r3,r2,1
  80847c:	e0fff315 	stw	r3,-52(fp)
  808480:	10800003 	ldbu	r2,0(r2)
  808484:	10803fcc 	andi	r2,r2,255
  808488:	1080201c 	xori	r2,r2,128
  80848c:	10bfe004 	addi	r2,r2,-128
  808490:	10801920 	cmpeqi	r2,r2,100
  808494:	1000011e 	bne	r2,zero,80849c <main+0x1dc>
                    put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
                if (p2)
                    put_dump((uint8_t *) ptr, (uint32_t) ptr, p2);
                break;
            }
            break;
  808498:	00055406 	br	8099ec <main+0x172c>
        switch (*ptr++) {

        case 'm':              /* System memroy/register controls */
            switch (*ptr++) {
            case 'd':          /* md <address> [<count>] - Dump memory */
                if (!xatoi(&ptr, &p1))
  80849c:	e0fff304 	addi	r3,fp,-52
  8084a0:	e0bff404 	addi	r2,fp,-48
  8084a4:	1809883a 	mov	r4,r3
  8084a8:	100b883a 	mov	r5,r2
  8084ac:	0809e3c0 	call	809e3c <xatoi>
  8084b0:	1000011e 	bne	r2,zero,8084b8 <main+0x1f8>
                    break;
  8084b4:	00002506 	br	80854c <main+0x28c>
                if (!xatoi(&ptr, &p2))
  8084b8:	e0fff304 	addi	r3,fp,-52
  8084bc:	e0bff504 	addi	r2,fp,-44
  8084c0:	1809883a 	mov	r4,r3
  8084c4:	100b883a 	mov	r5,r2
  8084c8:	0809e3c0 	call	809e3c <xatoi>
  8084cc:	1000021e 	bne	r2,zero,8084d8 <main+0x218>
                    p2 = 128;
  8084d0:	00802004 	movi	r2,128
  8084d4:	e0bff515 	stw	r2,-44(fp)
                for (ptr = (char *) p1; p2 >= 16; ptr += 16, p2 -= 16)
  8084d8:	e0bff417 	ldw	r2,-48(fp)
  8084dc:	e0bff315 	stw	r2,-52(fp)
  8084e0:	00000c06 	br	808514 <main+0x254>
                    put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
  8084e4:	e0bff317 	ldw	r2,-52(fp)
  8084e8:	e0fff317 	ldw	r3,-52(fp)
  8084ec:	1009883a 	mov	r4,r2
  8084f0:	180b883a 	mov	r5,r3
  8084f4:	01800404 	movi	r6,16
  8084f8:	080a5dc0 	call	80a5dc <put_dump>
            case 'd':          /* md <address> [<count>] - Dump memory */
                if (!xatoi(&ptr, &p1))
                    break;
                if (!xatoi(&ptr, &p2))
                    p2 = 128;
                for (ptr = (char *) p1; p2 >= 16; ptr += 16, p2 -= 16)
  8084fc:	e0bff317 	ldw	r2,-52(fp)
  808500:	10800404 	addi	r2,r2,16
  808504:	e0bff315 	stw	r2,-52(fp)
  808508:	e0bff517 	ldw	r2,-44(fp)
  80850c:	10bffc04 	addi	r2,r2,-16
  808510:	e0bff515 	stw	r2,-44(fp)
  808514:	e0bff517 	ldw	r2,-44(fp)
  808518:	10800408 	cmpgei	r2,r2,16
  80851c:	103ff11e 	bne	r2,zero,8084e4 <__alt_data_end+0xff8084e4>
                    put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
                if (p2)
  808520:	e0bff517 	ldw	r2,-44(fp)
  808524:	10000826 	beq	r2,zero,808548 <main+0x288>
                    put_dump((uint8_t *) ptr, (uint32_t) ptr, p2);
  808528:	e0fff317 	ldw	r3,-52(fp)
  80852c:	e0bff317 	ldw	r2,-52(fp)
  808530:	100b883a 	mov	r5,r2
  808534:	e0bff517 	ldw	r2,-44(fp)
  808538:	1809883a 	mov	r4,r3
  80853c:	100d883a 	mov	r6,r2
  808540:	080a5dc0 	call	80a5dc <put_dump>
                break;
  808544:	00000006 	br	808548 <main+0x288>
  808548:	0001883a 	nop
            }
            break;
  80854c:	00052706 	br	8099ec <main+0x172c>

        case 'd':              /* Disk I/O layer controls */
            switch (*ptr++)
  808550:	e0bff317 	ldw	r2,-52(fp)
  808554:	10c00044 	addi	r3,r2,1
  808558:	e0fff315 	stw	r3,-52(fp)
  80855c:	10800003 	ldbu	r2,0(r2)
  808560:	10803fcc 	andi	r2,r2,255
  808564:	1080201c 	xori	r2,r2,128
  808568:	10bfe004 	addi	r2,r2,-128
  80856c:	10c01920 	cmpeqi	r3,r2,100
  808570:	18000a1e 	bne	r3,zero,80859c <main+0x2dc>
  808574:	10c01948 	cmpgei	r3,r2,101
  808578:	1800031e 	bne	r3,zero,808588 <main+0x2c8>
  80857c:	108018e0 	cmpeqi	r2,r2,99
  808580:	1000e31e 	bne	r2,zero,808910 <main+0x650>
                    xprintf("rc=%d\n", disk_ioctl((uint8_t) p1, CTRL_ERASE_SECTOR, blk));
                    break;
                }
                break;
            }
            break; // end of Disk Controls //
  808584:	00051906 	br	8099ec <main+0x172c>
                break;
            }
            break;

        case 'd':              /* Disk I/O layer controls */
            switch (*ptr++)
  808588:	10c01a60 	cmpeqi	r3,r2,105
  80858c:	1800461e 	bne	r3,zero,8086a8 <main+0x3e8>
  808590:	10801ce0 	cmpeqi	r2,r2,115
  808594:	1000551e 	bne	r2,zero,8086ec <main+0x42c>
                    xprintf("rc=%d\n", disk_ioctl((uint8_t) p1, CTRL_ERASE_SECTOR, blk));
                    break;
                }
                break;
            }
            break; // end of Disk Controls //
  808598:	00051406 	br	8099ec <main+0x172c>

        case 'd':              /* Disk I/O layer controls */
            switch (*ptr++)
            {
            case 'd':          /* dd [<drv> [<lba>]] - Dump secrtor */
                if (!xatoi(&ptr, &p1))
  80859c:	e0fff304 	addi	r3,fp,-52
  8085a0:	e0bff404 	addi	r2,fp,-48
  8085a4:	1809883a 	mov	r4,r3
  8085a8:	100b883a 	mov	r5,r2
  8085ac:	0809e3c0 	call	809e3c <xatoi>
  8085b0:	1000031e 	bne	r2,zero,8085c0 <main+0x300>
                {
                    p1 = drv;
  8085b4:	e0bfe103 	ldbu	r2,-124(fp)
  8085b8:	e0bff415 	stw	r2,-48(fp)
  8085bc:	00000806 	br	8085e0 <main+0x320>
                }
                else
                {
                    if (!xatoi(&ptr, &p2))
  8085c0:	e0fff304 	addi	r3,fp,-52
  8085c4:	e0bff504 	addi	r2,fp,-44
  8085c8:	1809883a 	mov	r4,r3
  8085cc:	100b883a 	mov	r5,r2
  8085d0:	0809e3c0 	call	809e3c <xatoi>
  8085d4:	1000021e 	bne	r2,zero,8085e0 <main+0x320>
                        p2 = sect;
  8085d8:	e0bfe517 	ldw	r2,-108(fp)
  8085dc:	e0bff515 	stw	r2,-44(fp)
                }
                drv = (uint8_t) p1;
  8085e0:	e0bff417 	ldw	r2,-48(fp)
  8085e4:	e0bfe105 	stb	r2,-124(fp)
                sect = p2 + 1;
  8085e8:	e0bff517 	ldw	r2,-44(fp)
  8085ec:	10800044 	addi	r2,r2,1
  8085f0:	e0bfe515 	stw	r2,-108(fp)
                res = disk_read((uint8_t) p1, Buff, p2, 1);
  8085f4:	e0bff417 	ldw	r2,-48(fp)
  8085f8:	10803fcc 	andi	r2,r2,255
  8085fc:	e0fff517 	ldw	r3,-44(fp)
  808600:	1009883a 	mov	r4,r2
  808604:	014020b4 	movhi	r5,130
  808608:	2944d104 	addi	r5,r5,4932
  80860c:	180d883a 	mov	r6,r3
  808610:	01c00044 	movi	r7,1
  808614:	0800dec0 	call	800dec <ffs_DiskIORead>
  808618:	e0bfee05 	stb	r2,-72(fp)
                if (res)
  80861c:	e0bfee03 	ldbu	r2,-72(fp)
  808620:	10000626 	beq	r2,zero,80863c <main+0x37c>
                {
                    xprintf("rc=%d\n", (uint16_t) res);
  808624:	e0bfee03 	ldbu	r2,-72(fp)
  808628:	010020b4 	movhi	r4,130
  80862c:	21325604 	addi	r4,r4,-13992
  808630:	100b883a 	mov	r5,r2
  808634:	080a3300 	call	80a330 <xprintf>
                    break;
  808638:	0000f306 	br	808a08 <main+0x748>
                }
                xprintf("D:%lu S:%lu\n", p1, p2);
  80863c:	e0fff417 	ldw	r3,-48(fp)
  808640:	e0bff517 	ldw	r2,-44(fp)
  808644:	010020b4 	movhi	r4,130
  808648:	21325804 	addi	r4,r4,-13984
  80864c:	180b883a 	mov	r5,r3
  808650:	100d883a 	mov	r6,r2
  808654:	080a3300 	call	80a330 <xprintf>
                for (ptr = (char *) Buff, ofs = 0; ofs < 0x200; ptr += 16, ofs += 16)
  808658:	008020b4 	movhi	r2,130
  80865c:	1084d104 	addi	r2,r2,4932
  808660:	e0bff315 	stw	r2,-52(fp)
  808664:	e03fe415 	stw	zero,-112(fp)
  808668:	00000b06 	br	808698 <main+0x3d8>
                    put_dump((uint8_t *) ptr, ofs, 16);
  80866c:	e0bff317 	ldw	r2,-52(fp)
  808670:	1009883a 	mov	r4,r2
  808674:	e17fe417 	ldw	r5,-112(fp)
  808678:	01800404 	movi	r6,16
  80867c:	080a5dc0 	call	80a5dc <put_dump>
                {
                    xprintf("rc=%d\n", (uint16_t) res);
                    break;
                }
                xprintf("D:%lu S:%lu\n", p1, p2);
                for (ptr = (char *) Buff, ofs = 0; ofs < 0x200; ptr += 16, ofs += 16)
  808680:	e0bff317 	ldw	r2,-52(fp)
  808684:	10800404 	addi	r2,r2,16
  808688:	e0bff315 	stw	r2,-52(fp)
  80868c:	e0bfe417 	ldw	r2,-112(fp)
  808690:	10800404 	addi	r2,r2,16
  808694:	e0bfe415 	stw	r2,-112(fp)
  808698:	e0bfe417 	ldw	r2,-112(fp)
  80869c:	10808030 	cmpltui	r2,r2,512
  8086a0:	103ff21e 	bne	r2,zero,80866c <__alt_data_end+0xff80866c>
                    put_dump((uint8_t *) ptr, ofs, 16);
                break;
  8086a4:	0000d806 	br	808a08 <main+0x748>

            case 'i':          /* di <drv> - Initialize disk */
                if (!xatoi(&ptr, &p1))
  8086a8:	e0fff304 	addi	r3,fp,-52
  8086ac:	e0bff404 	addi	r2,fp,-48
  8086b0:	1809883a 	mov	r4,r3
  8086b4:	100b883a 	mov	r5,r2
  8086b8:	0809e3c0 	call	809e3c <xatoi>
  8086bc:	1000011e 	bne	r2,zero,8086c4 <main+0x404>
                    break;
  8086c0:	0000d106 	br	808a08 <main+0x748>
                xprintf("rc=%d\n", (uint16_t) disk_initialize((uint8_t) p1));
  8086c4:	e0bff417 	ldw	r2,-48(fp)
  8086c8:	10803fcc 	andi	r2,r2,255
  8086cc:	1009883a 	mov	r4,r2
  8086d0:	0800b680 	call	800b68 <ffs_DiskIOInitialize>
  8086d4:	10803fcc 	andi	r2,r2,255
  8086d8:	010020b4 	movhi	r4,130
  8086dc:	21325604 	addi	r4,r4,-13992
  8086e0:	100b883a 	mov	r5,r2
  8086e4:	080a3300 	call	80a330 <xprintf>
                break;
  8086e8:	0000c706 	br	808a08 <main+0x748>

            case 's':          /* ds <drv> - Show disk status */
                if (!xatoi(&ptr, &p1))
  8086ec:	e0fff304 	addi	r3,fp,-52
  8086f0:	e0bff404 	addi	r2,fp,-48
  8086f4:	1809883a 	mov	r4,r3
  8086f8:	100b883a 	mov	r5,r2
  8086fc:	0809e3c0 	call	809e3c <xatoi>
  808700:	1000011e 	bne	r2,zero,808708 <main+0x448>
                    break;
  808704:	0000c006 	br	808a08 <main+0x748>
                if (disk_ioctl((uint8_t) p1, GET_SECTOR_COUNT, &p2) == RES_OK) {
  808708:	e0bff417 	ldw	r2,-48(fp)
  80870c:	10c03fcc 	andi	r3,r2,255
  808710:	e0bff504 	addi	r2,fp,-44
  808714:	1809883a 	mov	r4,r3
  808718:	01400044 	movi	r5,1
  80871c:	100d883a 	mov	r6,r2
  808720:	08010740 	call	801074 <ffs_DiskIOIoctl>
  808724:	1000051e 	bne	r2,zero,80873c <main+0x47c>
                    xprintf("Drive size: %lu sectors\n", p2);
  808728:	e0bff517 	ldw	r2,-44(fp)
  80872c:	010020b4 	movhi	r4,130
  808730:	21325c04 	addi	r4,r4,-13968
  808734:	100b883a 	mov	r5,r2
  808738:	080a3300 	call	80a330 <xprintf>
                }
                if (disk_ioctl((uint8_t) p1, GET_SECTOR_SIZE, &w1) == RES_OK) {
  80873c:	e0bff417 	ldw	r2,-48(fp)
  808740:	10c03fcc 	andi	r3,r2,255
  808744:	e0bff784 	addi	r2,fp,-34
  808748:	1809883a 	mov	r4,r3
  80874c:	01400084 	movi	r5,2
  808750:	100d883a 	mov	r6,r2
  808754:	08010740 	call	801074 <ffs_DiskIOIoctl>
  808758:	1000061e 	bne	r2,zero,808774 <main+0x4b4>
                    xprintf("Sector size: %u bytes\n", w1);
  80875c:	e0bff78b 	ldhu	r2,-34(fp)
  808760:	10bfffcc 	andi	r2,r2,65535
  808764:	010020b4 	movhi	r4,130
  808768:	21326304 	addi	r4,r4,-13940
  80876c:	100b883a 	mov	r5,r2
  808770:	080a3300 	call	80a330 <xprintf>
                }
                if (disk_ioctl((uint8_t) p1, GET_BLOCK_SIZE, &p2) == RES_OK) {
  808774:	e0bff417 	ldw	r2,-48(fp)
  808778:	10c03fcc 	andi	r3,r2,255
  80877c:	e0bff504 	addi	r2,fp,-44
  808780:	1809883a 	mov	r4,r3
  808784:	014000c4 	movi	r5,3
  808788:	100d883a 	mov	r6,r2
  80878c:	08010740 	call	801074 <ffs_DiskIOIoctl>
  808790:	1000051e 	bne	r2,zero,8087a8 <main+0x4e8>
                    xprintf("Block size: %lu sectors\n", p2);
  808794:	e0bff517 	ldw	r2,-44(fp)
  808798:	010020b4 	movhi	r4,130
  80879c:	21326904 	addi	r4,r4,-13916
  8087a0:	100b883a 	mov	r5,r2
  8087a4:	080a3300 	call	80a330 <xprintf>
                }
                if (disk_ioctl((uint8_t) p1, MMC_GET_TYPE, &b1) == RES_OK) {
  8087a8:	e0bff417 	ldw	r2,-48(fp)
  8087ac:	10c03fcc 	andi	r3,r2,255
  8087b0:	e0bff704 	addi	r2,fp,-36
  8087b4:	1809883a 	mov	r4,r3
  8087b8:	01400284 	movi	r5,10
  8087bc:	100d883a 	mov	r6,r2
  8087c0:	08010740 	call	801074 <ffs_DiskIOIoctl>
  8087c4:	1000061e 	bne	r2,zero,8087e0 <main+0x520>
                    xprintf("MMC/SDC type: %u\n", b1);
  8087c8:	e0bff703 	ldbu	r2,-36(fp)
  8087cc:	10803fcc 	andi	r2,r2,255
  8087d0:	010020b4 	movhi	r4,130
  8087d4:	21327004 	addi	r4,r4,-13888
  8087d8:	100b883a 	mov	r5,r2
  8087dc:	080a3300 	call	80a330 <xprintf>
                }
                if (disk_ioctl((uint8_t) p1, MMC_GET_CSD, Buff) == RES_OK) {
  8087e0:	e0bff417 	ldw	r2,-48(fp)
  8087e4:	10803fcc 	andi	r2,r2,255
  8087e8:	1009883a 	mov	r4,r2
  8087ec:	014002c4 	movi	r5,11
  8087f0:	018020b4 	movhi	r6,130
  8087f4:	3184d104 	addi	r6,r6,4932
  8087f8:	08010740 	call	801074 <ffs_DiskIOIoctl>
  8087fc:	1000081e 	bne	r2,zero,808820 <main+0x560>
                    xputs("CSD:\n");
  808800:	010020b4 	movhi	r4,130
  808804:	21327504 	addi	r4,r4,-13868
  808808:	080a1100 	call	80a110 <xputs>
                    put_dump(Buff, 0, 16);
  80880c:	010020b4 	movhi	r4,130
  808810:	2104d104 	addi	r4,r4,4932
  808814:	000b883a 	mov	r5,zero
  808818:	01800404 	movi	r6,16
  80881c:	080a5dc0 	call	80a5dc <put_dump>
                }
                if (disk_ioctl((uint8_t) p1, MMC_GET_CID, Buff) == RES_OK) {
  808820:	e0bff417 	ldw	r2,-48(fp)
  808824:	10803fcc 	andi	r2,r2,255
  808828:	1009883a 	mov	r4,r2
  80882c:	01400304 	movi	r5,12
  808830:	018020b4 	movhi	r6,130
  808834:	3184d104 	addi	r6,r6,4932
  808838:	08010740 	call	801074 <ffs_DiskIOIoctl>
  80883c:	1000081e 	bne	r2,zero,808860 <main+0x5a0>
                    xputs("CID:\n");
  808840:	010020b4 	movhi	r4,130
  808844:	21327704 	addi	r4,r4,-13860
  808848:	080a1100 	call	80a110 <xputs>
                    put_dump(Buff, 0, 16);
  80884c:	010020b4 	movhi	r4,130
  808850:	2104d104 	addi	r4,r4,4932
  808854:	000b883a 	mov	r5,zero
  808858:	01800404 	movi	r6,16
  80885c:	080a5dc0 	call	80a5dc <put_dump>
                }
                if (disk_ioctl((uint8_t) p1, MMC_GET_OCR, Buff) == RES_OK) {
  808860:	e0bff417 	ldw	r2,-48(fp)
  808864:	10803fcc 	andi	r2,r2,255
  808868:	1009883a 	mov	r4,r2
  80886c:	01400344 	movi	r5,13
  808870:	018020b4 	movhi	r6,130
  808874:	3184d104 	addi	r6,r6,4932
  808878:	08010740 	call	801074 <ffs_DiskIOIoctl>
  80887c:	1000081e 	bne	r2,zero,8088a0 <main+0x5e0>
                    xputs("OCR:\n");
  808880:	010020b4 	movhi	r4,130
  808884:	21327904 	addi	r4,r4,-13852
  808888:	080a1100 	call	80a110 <xputs>
                    put_dump(Buff, 0, 4);
  80888c:	010020b4 	movhi	r4,130
  808890:	2104d104 	addi	r4,r4,4932
  808894:	000b883a 	mov	r5,zero
  808898:	01800104 	movi	r6,4
  80889c:	080a5dc0 	call	80a5dc <put_dump>
                }
                if (disk_ioctl((uint8_t) p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
  8088a0:	e0bff417 	ldw	r2,-48(fp)
  8088a4:	10803fcc 	andi	r2,r2,255
  8088a8:	1009883a 	mov	r4,r2
  8088ac:	01400384 	movi	r5,14
  8088b0:	018020b4 	movhi	r6,130
  8088b4:	3184d104 	addi	r6,r6,4932
  8088b8:	08010740 	call	801074 <ffs_DiskIOIoctl>
  8088bc:	1000131e 	bne	r2,zero,80890c <main+0x64c>
                    xputs("SD Status:\n");
  8088c0:	010020b4 	movhi	r4,130
  8088c4:	21327b04 	addi	r4,r4,-13844
  8088c8:	080a1100 	call	80a110 <xputs>
                    for (s1 = 0; s1 < 64; s1 += 16)
  8088cc:	e03fe215 	stw	zero,-120(fp)
  8088d0:	00000b06 	br	808900 <main+0x640>
                        put_dump(Buff + s1, s1, 16);
  8088d4:	e0ffe217 	ldw	r3,-120(fp)
  8088d8:	008020b4 	movhi	r2,130
  8088dc:	1084d104 	addi	r2,r2,4932
  8088e0:	1885883a 	add	r2,r3,r2
  8088e4:	1009883a 	mov	r4,r2
  8088e8:	e17fe217 	ldw	r5,-120(fp)
  8088ec:	01800404 	movi	r6,16
  8088f0:	080a5dc0 	call	80a5dc <put_dump>
                    xputs("OCR:\n");
                    put_dump(Buff, 0, 4);
                }
                if (disk_ioctl((uint8_t) p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
                    xputs("SD Status:\n");
                    for (s1 = 0; s1 < 64; s1 += 16)
  8088f4:	e0bfe217 	ldw	r2,-120(fp)
  8088f8:	10800404 	addi	r2,r2,16
  8088fc:	e0bfe215 	stw	r2,-120(fp)
  808900:	e0bfe217 	ldw	r2,-120(fp)
  808904:	10801030 	cmpltui	r2,r2,64
  808908:	103ff21e 	bne	r2,zero,8088d4 <__alt_data_end+0xff8088d4>
                        put_dump(Buff + s1, s1, 16);
                }
                break;
  80890c:	00003e06 	br	808a08 <main+0x748>

            case 'c':          /* Disk ioctl */
                switch (*ptr++) {
  808910:	e0bff317 	ldw	r2,-52(fp)
  808914:	10c00044 	addi	r3,r2,1
  808918:	e0fff315 	stw	r3,-52(fp)
  80891c:	10800003 	ldbu	r2,0(r2)
  808920:	10803fcc 	andi	r2,r2,255
  808924:	1080201c 	xori	r2,r2,128
  808928:	10bfe004 	addi	r2,r2,-128
  80892c:	10c01960 	cmpeqi	r3,r2,101
  808930:	1800151e 	bne	r3,zero,808988 <main+0x6c8>
  808934:	10801ce0 	cmpeqi	r2,r2,115
  808938:	1000011e 	bne	r2,zero,808940 <main+0x680>
                    if (!xatoi(&ptr, &p1) || !xatoi(&ptr, (long *) &blk[0]) || !xatoi(&ptr, (long *) &blk[1]))
                        break;
                    xprintf("rc=%d\n", disk_ioctl((uint8_t) p1, CTRL_ERASE_SECTOR, blk));
                    break;
                }
                break;
  80893c:	00003106 	br	808a04 <main+0x744>
                break;

            case 'c':          /* Disk ioctl */
                switch (*ptr++) {
                case 's':      /* dcs <drv> - CTRL_SYNC */
                    if (!xatoi(&ptr, &p1))
  808940:	e0fff304 	addi	r3,fp,-52
  808944:	e0bff404 	addi	r2,fp,-48
  808948:	1809883a 	mov	r4,r3
  80894c:	100b883a 	mov	r5,r2
  808950:	0809e3c0 	call	809e3c <xatoi>
  808954:	1000011e 	bne	r2,zero,80895c <main+0x69c>
                        break;
  808958:	00002a06 	br	808a04 <main+0x744>
                    xprintf("rc=%d\n", disk_ioctl((uint8_t) p1, CTRL_SYNC, 0));
  80895c:	e0bff417 	ldw	r2,-48(fp)
  808960:	10803fcc 	andi	r2,r2,255
  808964:	1009883a 	mov	r4,r2
  808968:	000b883a 	mov	r5,zero
  80896c:	000d883a 	mov	r6,zero
  808970:	08010740 	call	801074 <ffs_DiskIOIoctl>
  808974:	010020b4 	movhi	r4,130
  808978:	21325604 	addi	r4,r4,-13992
  80897c:	100b883a 	mov	r5,r2
  808980:	080a3300 	call	80a330 <xprintf>
                    break;
  808984:	00001f06 	br	808a04 <main+0x744>
                case 'e':      /* dce <drv> <start> <end> - CTRL_ERASE_SECTOR */
                    if (!xatoi(&ptr, &p1) || !xatoi(&ptr, (long *) &blk[0]) || !xatoi(&ptr, (long *) &blk[1]))
  808988:	e0fff304 	addi	r3,fp,-52
  80898c:	e0bff404 	addi	r2,fp,-48
  808990:	1809883a 	mov	r4,r3
  808994:	100b883a 	mov	r5,r2
  808998:	0809e3c0 	call	809e3c <xatoi>
  80899c:	10001926 	beq	r2,zero,808a04 <main+0x744>
  8089a0:	e0fff304 	addi	r3,fp,-52
  8089a4:	e0bffa04 	addi	r2,fp,-24
  8089a8:	1809883a 	mov	r4,r3
  8089ac:	100b883a 	mov	r5,r2
  8089b0:	0809e3c0 	call	809e3c <xatoi>
  8089b4:	10001326 	beq	r2,zero,808a04 <main+0x744>
  8089b8:	e0fff304 	addi	r3,fp,-52
  8089bc:	e0bffa04 	addi	r2,fp,-24
  8089c0:	10800104 	addi	r2,r2,4
  8089c4:	1809883a 	mov	r4,r3
  8089c8:	100b883a 	mov	r5,r2
  8089cc:	0809e3c0 	call	809e3c <xatoi>
  8089d0:	10000c26 	beq	r2,zero,808a04 <main+0x744>
                        break;
                    xprintf("rc=%d\n", disk_ioctl((uint8_t) p1, CTRL_ERASE_SECTOR, blk));
  8089d4:	e0bff417 	ldw	r2,-48(fp)
  8089d8:	10c03fcc 	andi	r3,r2,255
  8089dc:	e0bffa04 	addi	r2,fp,-24
  8089e0:	1809883a 	mov	r4,r3
  8089e4:	01400104 	movi	r5,4
  8089e8:	100d883a 	mov	r6,r2
  8089ec:	08010740 	call	801074 <ffs_DiskIOIoctl>
  8089f0:	010020b4 	movhi	r4,130
  8089f4:	21325604 	addi	r4,r4,-13992
  8089f8:	100b883a 	mov	r5,r2
  8089fc:	080a3300 	call	80a330 <xprintf>
                    break;
  808a00:	0001883a 	nop
                }
                break;
  808a04:	0001883a 	nop
            }
            break; // end of Disk Controls //
  808a08:	0003f806 	br	8099ec <main+0x172c>

        case 'b':              /* Buffer controls */
            switch (*ptr++)
  808a0c:	e0bff317 	ldw	r2,-52(fp)
  808a10:	10c00044 	addi	r3,r2,1
  808a14:	e0fff315 	stw	r3,-52(fp)
  808a18:	10800003 	ldbu	r2,0(r2)
  808a1c:	10803fcc 	andi	r2,r2,255
  808a20:	1080201c 	xori	r2,r2,128
  808a24:	10bfe004 	addi	r2,r2,-128
  808a28:	10c019a0 	cmpeqi	r3,r2,102
  808a2c:	18004e1e 	bne	r3,zero,808b68 <main+0x8a8>
  808a30:	10c01ca0 	cmpeqi	r3,r2,114
  808a34:	1800251e 	bne	r3,zero,808acc <main+0x80c>
  808a38:	10801920 	cmpeqi	r2,r2,100
  808a3c:	1000011e 	bne	r2,zero,808a44 <main+0x784>
                    break;
                memset(Buff, (uint8_t) p1, sizeof(Buff));
                break;

            }
            break; // end of Buffer Controls //
  808a40:	0003ea06 	br	8099ec <main+0x172c>

        case 'b':              /* Buffer controls */
            switch (*ptr++)
            {
            case 'd':          /* bd <addr> - Dump R/W buffer */
                if (!xatoi(&ptr, &p1))
  808a44:	e0fff304 	addi	r3,fp,-52
  808a48:	e0bff404 	addi	r2,fp,-48
  808a4c:	1809883a 	mov	r4,r3
  808a50:	100b883a 	mov	r5,r2
  808a54:	0809e3c0 	call	809e3c <xatoi>
  808a58:	1000011e 	bne	r2,zero,808a60 <main+0x7a0>
                    break;
  808a5c:	00005106 	br	808ba4 <main+0x8e4>
                for (ptr = (char *) &Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr += 16, ofs += 16)
  808a60:	e0fff417 	ldw	r3,-48(fp)
  808a64:	008020b4 	movhi	r2,130
  808a68:	1084d104 	addi	r2,r2,4932
  808a6c:	1885883a 	add	r2,r3,r2
  808a70:	e0bff315 	stw	r2,-52(fp)
  808a74:	e0bff417 	ldw	r2,-48(fp)
  808a78:	e0bfe415 	stw	r2,-112(fp)
  808a7c:	00800804 	movi	r2,32
  808a80:	e0bff915 	stw	r2,-28(fp)
  808a84:	00000e06 	br	808ac0 <main+0x800>
                    put_dump((uint8_t *) ptr, ofs, 16);
  808a88:	e0bff317 	ldw	r2,-52(fp)
  808a8c:	1009883a 	mov	r4,r2
  808a90:	e17fe417 	ldw	r5,-112(fp)
  808a94:	01800404 	movi	r6,16
  808a98:	080a5dc0 	call	80a5dc <put_dump>
            switch (*ptr++)
            {
            case 'd':          /* bd <addr> - Dump R/W buffer */
                if (!xatoi(&ptr, &p1))
                    break;
                for (ptr = (char *) &Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr += 16, ofs += 16)
  808a9c:	e0bff917 	ldw	r2,-28(fp)
  808aa0:	10bfffc4 	addi	r2,r2,-1
  808aa4:	e0bff915 	stw	r2,-28(fp)
  808aa8:	e0bff317 	ldw	r2,-52(fp)
  808aac:	10800404 	addi	r2,r2,16
  808ab0:	e0bff315 	stw	r2,-52(fp)
  808ab4:	e0bfe417 	ldw	r2,-112(fp)
  808ab8:	10800404 	addi	r2,r2,16
  808abc:	e0bfe415 	stw	r2,-112(fp)
  808ac0:	e0bff917 	ldw	r2,-28(fp)
  808ac4:	103ff01e 	bne	r2,zero,808a88 <__alt_data_end+0xff808a88>
                    put_dump((uint8_t *) ptr, ofs, 16);
                break;
  808ac8:	00003606 	br	808ba4 <main+0x8e4>


            case 'r':          /* br <drv> <lba> [<num>] - Read disk into R/W buffer */
                if (!xatoi(&ptr, &p1))
  808acc:	e0fff304 	addi	r3,fp,-52
  808ad0:	e0bff404 	addi	r2,fp,-48
  808ad4:	1809883a 	mov	r4,r3
  808ad8:	100b883a 	mov	r5,r2
  808adc:	0809e3c0 	call	809e3c <xatoi>
  808ae0:	1000011e 	bne	r2,zero,808ae8 <main+0x828>
                    break;
  808ae4:	00002f06 	br	808ba4 <main+0x8e4>
                if (!xatoi(&ptr, &p2))
  808ae8:	e0fff304 	addi	r3,fp,-52
  808aec:	e0bff504 	addi	r2,fp,-44
  808af0:	1809883a 	mov	r4,r3
  808af4:	100b883a 	mov	r5,r2
  808af8:	0809e3c0 	call	809e3c <xatoi>
  808afc:	1000011e 	bne	r2,zero,808b04 <main+0x844>
                    break;
  808b00:	00002806 	br	808ba4 <main+0x8e4>
                if (!xatoi(&ptr, &p3))
  808b04:	e0fff304 	addi	r3,fp,-52
  808b08:	e0bff604 	addi	r2,fp,-40
  808b0c:	1809883a 	mov	r4,r3
  808b10:	100b883a 	mov	r5,r2
  808b14:	0809e3c0 	call	809e3c <xatoi>
  808b18:	1000021e 	bne	r2,zero,808b24 <main+0x864>
                    p3 = 1;
  808b1c:	00800044 	movi	r2,1
  808b20:	e0bff615 	stw	r2,-40(fp)
                xprintf("rc=%u\n", (uint16_t) disk_read((uint8_t) p1, Buff, p2, p3));
  808b24:	e0bff417 	ldw	r2,-48(fp)
  808b28:	10c03fcc 	andi	r3,r2,255
  808b2c:	e0bff517 	ldw	r2,-44(fp)
  808b30:	100d883a 	mov	r6,r2
  808b34:	e0bff617 	ldw	r2,-40(fp)
  808b38:	10803fcc 	andi	r2,r2,255
  808b3c:	1809883a 	mov	r4,r3
  808b40:	014020b4 	movhi	r5,130
  808b44:	2944d104 	addi	r5,r5,4932
  808b48:	100f883a 	mov	r7,r2
  808b4c:	0800dec0 	call	800dec <ffs_DiskIORead>
  808b50:	10bfffcc 	andi	r2,r2,65535
  808b54:	010020b4 	movhi	r4,130
  808b58:	21327e04 	addi	r4,r4,-13832
  808b5c:	100b883a 	mov	r5,r2
  808b60:	080a3300 	call	80a330 <xprintf>
                break;
  808b64:	00000f06 	br	808ba4 <main+0x8e4>


            case 'f':          /* bf <val> - Fill working buffer */
                if (!xatoi(&ptr, &p1))
  808b68:	e0fff304 	addi	r3,fp,-52
  808b6c:	e0bff404 	addi	r2,fp,-48
  808b70:	1809883a 	mov	r4,r3
  808b74:	100b883a 	mov	r5,r2
  808b78:	0809e3c0 	call	809e3c <xatoi>
  808b7c:	1000011e 	bne	r2,zero,808b84 <main+0x8c4>
                    break;
  808b80:	00000806 	br	808ba4 <main+0x8e4>
                memset(Buff, (uint8_t) p1, sizeof(Buff));
  808b84:	e0bff417 	ldw	r2,-48(fp)
  808b88:	10803fcc 	andi	r2,r2,255
  808b8c:	010020b4 	movhi	r4,130
  808b90:	2104d104 	addi	r4,r4,4932
  808b94:	100b883a 	mov	r5,r2
  808b98:	01810004 	movi	r6,1024
  808b9c:	080c8080 	call	80c808 <memset>
                break;
  808ba0:	0001883a 	nop

            }
            break; // end of Buffer Controls //
  808ba4:	00039106 	br	8099ec <main+0x172c>

        case 'f':              /* FatFS API controls */
            switch (*ptr++)
  808ba8:	e0bff317 	ldw	r2,-52(fp)
  808bac:	10c00044 	addi	r3,r2,1
  808bb0:	e0fff315 	stw	r3,-52(fp)
  808bb4:	10800003 	ldbu	r2,0(r2)
  808bb8:	10803fcc 	andi	r2,r2,255
  808bbc:	1080201c 	xori	r2,r2,128
  808bc0:	10bfe004 	addi	r2,r2,-128
  808bc4:	10bfe744 	addi	r2,r2,-99
  808bc8:	10c00628 	cmpgeui	r3,r2,24
  808bcc:	1803861e 	bne	r3,zero,8099e8 <main+0x1728>
  808bd0:	100690ba 	slli	r3,r2,2
  808bd4:	00802074 	movhi	r2,129
  808bd8:	10a2fa04 	addi	r2,r2,-29720
  808bdc:	1885883a 	add	r2,r3,r2
  808be0:	10800017 	ldw	r2,0(r2)
  808be4:	1000683a 	jmp	r2
  808be8:	00808c48 	cmpgei	r2,zero,561
  808bec:	00808c60 	cmpeqi	r2,zero,561
  808bf0:	00808d3c 	xorhi	r2,zero,564
  808bf4:	008099e8 	cmpgeui	r2,zero,615
  808bf8:	008099e8 	cmpgeui	r2,zero,615
  808bfc:	008099e8 	cmpgeui	r2,zero,615
  808c00:	00808db8 	rdprs	r2,zero,566
  808c04:	008099e8 	cmpgeui	r2,zero,615
  808c08:	008099e8 	cmpgeui	r2,zero,615
  808c0c:	00808e10 	cmplti	r2,zero,568
  808c10:	008099e8 	cmpgeui	r2,zero,615
  808c14:	008099e8 	cmpgeui	r2,zero,615
  808c18:	008090fc 	xorhi	r2,zero,579
  808c1c:	00809170 	cmpltui	r2,zero,581
  808c20:	008099e8 	cmpgeui	r2,zero,615
  808c24:	008096f8 	rdprs	r2,zero,603
  808c28:	00809810 	cmplti	r2,zero,608
  808c2c:	008099e8 	cmpgeui	r2,zero,615
  808c30:	008099e8 	cmpgeui	r2,zero,615
  808c34:	008099e8 	cmpgeui	r2,zero,615
  808c38:	008099e8 	cmpgeui	r2,zero,615
  808c3c:	008099e8 	cmpgeui	r2,zero,615
  808c40:	008099e8 	cmpgeui	r2,zero,615
  808c44:	00809994 	movui	r2,614
            {

            case 'c':          /* fc - Close a file */
                put_rc(f_close(&File1));
  808c48:	010020b4 	movhi	r4,130
  808c4c:	2103ee04 	addi	r4,r4,4024
  808c50:	080508c0 	call	80508c <f_close>
  808c54:	1009883a 	mov	r4,r2
  808c58:	08081ec0 	call	8081ec <put_rc>
                break;
  808c5c:	00035f06 	br	8099dc <main+0x171c>

            case 'd':          /* fd <len> - read and dump file from current fp */
                if (!xatoi(&ptr, &p1))
  808c60:	e0fff304 	addi	r3,fp,-52
  808c64:	e0bff404 	addi	r2,fp,-48
  808c68:	1809883a 	mov	r4,r3
  808c6c:	100b883a 	mov	r5,r2
  808c70:	0809e3c0 	call	809e3c <xatoi>
  808c74:	1000011e 	bne	r2,zero,808c7c <main+0x9bc>
                    break;
  808c78:	00035806 	br	8099dc <main+0x171c>
                ofs = File1.fptr;
  808c7c:	008020b4 	movhi	r2,130
  808c80:	1083ee04 	addi	r2,r2,4024
  808c84:	10800217 	ldw	r2,8(r2)
  808c88:	e0bfe415 	stw	r2,-112(fp)
                while (p1)
  808c8c:	00002806 	br	808d30 <main+0xa70>
                {
                    if ((uint32_t) p1 >= 16)
  808c90:	e0bff417 	ldw	r2,-48(fp)
  808c94:	10800430 	cmpltui	r2,r2,16
  808c98:	1000061e 	bne	r2,zero,808cb4 <main+0x9f4>
                    {
                        cnt = 16;
  808c9c:	00800404 	movi	r2,16
  808ca0:	e0bff915 	stw	r2,-28(fp)
                        p1 -= 16;
  808ca4:	e0bff417 	ldw	r2,-48(fp)
  808ca8:	10bffc04 	addi	r2,r2,-16
  808cac:	e0bff415 	stw	r2,-48(fp)
  808cb0:	00000306 	br	808cc0 <main+0xa00>
                    }
                    else
                    {
                        cnt = p1;
  808cb4:	e0bff417 	ldw	r2,-48(fp)
  808cb8:	e0bff915 	stw	r2,-28(fp)
                        p1 = 0;
  808cbc:	e03ff415 	stw	zero,-48(fp)
                    }
                    res = f_read(&File1, Buff, cnt, &cnt);
  808cc0:	e0fff917 	ldw	r3,-28(fp)
  808cc4:	e0bff904 	addi	r2,fp,-28
  808cc8:	010020b4 	movhi	r4,130
  808ccc:	2103ee04 	addi	r4,r4,4024
  808cd0:	014020b4 	movhi	r5,130
  808cd4:	2944d104 	addi	r5,r5,4932
  808cd8:	180d883a 	mov	r6,r3
  808cdc:	100f883a 	mov	r7,r2
  808ce0:	08043a40 	call	8043a4 <f_read>
  808ce4:	e0bfee05 	stb	r2,-72(fp)
                    if (res != FR_OK)
  808ce8:	e0bfee03 	ldbu	r2,-72(fp)
  808cec:	10000426 	beq	r2,zero,808d00 <main+0xa40>
                    {
                        put_rc(res);
  808cf0:	e0bfee03 	ldbu	r2,-72(fp)
  808cf4:	1009883a 	mov	r4,r2
  808cf8:	08081ec0 	call	8081ec <put_rc>
                        break;
  808cfc:	00000e06 	br	808d38 <main+0xa78>
                    }
                    if (!cnt)
  808d00:	e0bff917 	ldw	r2,-28(fp)
  808d04:	1000011e 	bne	r2,zero,808d0c <main+0xa4c>
                        break;
  808d08:	00000b06 	br	808d38 <main+0xa78>

                    put_dump(Buff, ofs, cnt);
  808d0c:	e0bff917 	ldw	r2,-28(fp)
  808d10:	010020b4 	movhi	r4,130
  808d14:	2104d104 	addi	r4,r4,4932
  808d18:	e17fe417 	ldw	r5,-112(fp)
  808d1c:	100d883a 	mov	r6,r2
  808d20:	080a5dc0 	call	80a5dc <put_dump>
                    ofs += 16;
  808d24:	e0bfe417 	ldw	r2,-112(fp)
  808d28:	10800404 	addi	r2,r2,16
  808d2c:	e0bfe415 	stw	r2,-112(fp)

            case 'd':          /* fd <len> - read and dump file from current fp */
                if (!xatoi(&ptr, &p1))
                    break;
                ofs = File1.fptr;
                while (p1)
  808d30:	e0bff417 	ldw	r2,-48(fp)
  808d34:	103fd61e 	bne	r2,zero,808c90 <__alt_data_end+0xff808c90>
                        break;

                    put_dump(Buff, ofs, cnt);
                    ofs += 16;
                }
                break;
  808d38:	00032806 	br	8099dc <main+0x171c>

            case 'e':          /* fe - Seek file pointer */
                if (!xatoi(&ptr, &p1))
  808d3c:	e0fff304 	addi	r3,fp,-52
  808d40:	e0bff404 	addi	r2,fp,-48
  808d44:	1809883a 	mov	r4,r3
  808d48:	100b883a 	mov	r5,r2
  808d4c:	0809e3c0 	call	809e3c <xatoi>
  808d50:	1000011e 	bne	r2,zero,808d58 <main+0xa98>
                    break;
  808d54:	00032106 	br	8099dc <main+0x171c>
                res = f_lseek(&File1, p1);
  808d58:	e0bff417 	ldw	r2,-48(fp)
  808d5c:	010020b4 	movhi	r4,130
  808d60:	2103ee04 	addi	r4,r4,4024
  808d64:	100b883a 	mov	r5,r2
  808d68:	08050d40 	call	8050d4 <f_lseek>
  808d6c:	e0bfee05 	stb	r2,-72(fp)
                put_rc(res);
  808d70:	e0bfee03 	ldbu	r2,-72(fp)
  808d74:	1009883a 	mov	r4,r2
  808d78:	08081ec0 	call	8081ec <put_rc>
                if (res == FR_OK)
  808d7c:	e0bfee03 	ldbu	r2,-72(fp)
  808d80:	10000c1e 	bne	r2,zero,808db4 <main+0xaf4>
                    xprintf("fptr=%lu(0x%lX)\n", File1.fptr, File1.fptr);
  808d84:	008020b4 	movhi	r2,130
  808d88:	1083ee04 	addi	r2,r2,4024
  808d8c:	10c00217 	ldw	r3,8(r2)
  808d90:	008020b4 	movhi	r2,130
  808d94:	1083ee04 	addi	r2,r2,4024
  808d98:	10800217 	ldw	r2,8(r2)
  808d9c:	010020b4 	movhi	r4,130
  808da0:	21328004 	addi	r4,r4,-13824
  808da4:	180b883a 	mov	r5,r3
  808da8:	100d883a 	mov	r6,r2
  808dac:	080a3300 	call	80a330 <xprintf>
                break;
  808db0:	00030a06 	br	8099dc <main+0x171c>
  808db4:	00030906 	br	8099dc <main+0x171c>

            case 'i':          /* fi <vol> - Force initialized the logical drive */
                if (!xatoi(&ptr, &p1))
  808db8:	e0fff304 	addi	r3,fp,-52
  808dbc:	e0bff404 	addi	r2,fp,-48
  808dc0:	1809883a 	mov	r4,r3
  808dc4:	100b883a 	mov	r5,r2
  808dc8:	0809e3c0 	call	809e3c <xatoi>
  808dcc:	1000011e 	bne	r2,zero,808dd4 <main+0xb14>
                    break;
  808dd0:	00030206 	br	8099dc <main+0x171c>
                put_rc(f_mount((uint8_t) p1, &Fatfs[p1]));
  808dd4:	e0bff417 	ldw	r2,-48(fp)
  808dd8:	11003fcc 	andi	r4,r2,255
  808ddc:	e0bff417 	ldw	r2,-48(fp)
  808de0:	10c08c24 	muli	r3,r2,560
  808de4:	008020b4 	movhi	r2,130
  808de8:	10836204 	addi	r2,r2,3464
  808dec:	1885883a 	add	r2,r3,r2
  808df0:	100b883a 	mov	r5,r2
  808df4:	0803e8c0 	call	803e8c <f_mount>
  808df8:	1009883a 	mov	r4,r2
  808dfc:	08081ec0 	call	8081ec <put_rc>
                break;
  808e00:	0002f606 	br	8099dc <main+0x171c>

            case 'l':          /* fl [<path>] - Directory listing */
                while (*ptr == ' ')
                    ptr++;
  808e04:	e0bff317 	ldw	r2,-52(fp)
  808e08:	10800044 	addi	r2,r2,1
  808e0c:	e0bff315 	stw	r2,-52(fp)
                    break;
                put_rc(f_mount((uint8_t) p1, &Fatfs[p1]));
                break;

            case 'l':          /* fl [<path>] - Directory listing */
                while (*ptr == ' ')
  808e10:	e0bff317 	ldw	r2,-52(fp)
  808e14:	10800003 	ldbu	r2,0(r2)
  808e18:	10803fcc 	andi	r2,r2,255
  808e1c:	1080201c 	xori	r2,r2,128
  808e20:	10bfe004 	addi	r2,r2,-128
  808e24:	10800820 	cmpeqi	r2,r2,32
  808e28:	103ff61e 	bne	r2,zero,808e04 <__alt_data_end+0xff808e04>
                    ptr++;
                res = f_opendir(&Dir, ptr);
  808e2c:	e0bff317 	ldw	r2,-52(fp)
  808e30:	010020b4 	movhi	r4,130
  808e34:	21065a04 	addi	r4,r4,6504
  808e38:	100b883a 	mov	r5,r2
  808e3c:	08055c00 	call	8055c0 <f_opendir>
  808e40:	e0bfee05 	stb	r2,-72(fp)
                if (res) // if res in non-zero there is an error; print the error.
  808e44:	e0bfee03 	ldbu	r2,-72(fp)
  808e48:	10000426 	beq	r2,zero,808e5c <main+0xb9c>
                {
                    put_rc(res);
  808e4c:	e0bfee03 	ldbu	r2,-72(fp)
  808e50:	1009883a 	mov	r4,r2
  808e54:	08081ec0 	call	8081ec <put_rc>
                    break;
  808e58:	0002e006 	br	8099dc <main+0x171c>
                }
                p1 = s1 = s2 = 0; // otherwise initialize the pointers and proceed.
  808e5c:	e03ff815 	stw	zero,-32(fp)
  808e60:	e0bff817 	ldw	r2,-32(fp)
  808e64:	e0bfe215 	stw	r2,-120(fp)
  808e68:	e0bfe217 	ldw	r2,-120(fp)
  808e6c:	e0bff415 	stw	r2,-48(fp)
                for (;;)
                {
                    res = f_readdir(&Dir, &Finfo);
  808e70:	010020b4 	movhi	r4,130
  808e74:	21065a04 	addi	r4,r4,6504
  808e78:	014020b4 	movhi	r5,130
  808e7c:	2944bd04 	addi	r5,r5,4852
  808e80:	08057300 	call	805730 <f_readdir>
  808e84:	e0bfee05 	stb	r2,-72(fp)
                    if ((res != FR_OK) || !Finfo.fname[0])
  808e88:	e0bfee03 	ldbu	r2,-72(fp)
  808e8c:	10007b1e 	bne	r2,zero,80907c <main+0xdbc>
  808e90:	008020b4 	movhi	r2,130
  808e94:	1084bd04 	addi	r2,r2,4852
  808e98:	10800243 	ldbu	r2,9(r2)
  808e9c:	10803fcc 	andi	r2,r2,255
  808ea0:	1080201c 	xori	r2,r2,128
  808ea4:	10bfe004 	addi	r2,r2,-128
  808ea8:	10007426 	beq	r2,zero,80907c <main+0xdbc>
                        break;
                    if (Finfo.fattrib & AM_DIR)
  808eac:	008020b4 	movhi	r2,130
  808eb0:	1084bd04 	addi	r2,r2,4852
  808eb4:	10800203 	ldbu	r2,8(r2)
  808eb8:	10803fcc 	andi	r2,r2,255
  808ebc:	1080040c 	andi	r2,r2,16
  808ec0:	10000426 	beq	r2,zero,808ed4 <main+0xc14>
                    {
                        s2++;
  808ec4:	e0bff817 	ldw	r2,-32(fp)
  808ec8:	10800044 	addi	r2,r2,1
  808ecc:	e0bff815 	stw	r2,-32(fp)
  808ed0:	00000906 	br	808ef8 <main+0xc38>
                    }
                    else
                    {
                        s1++;
  808ed4:	e0bfe217 	ldw	r2,-120(fp)
  808ed8:	10800044 	addi	r2,r2,1
  808edc:	e0bfe215 	stw	r2,-120(fp)
                        p1 += Finfo.fsize;
  808ee0:	008020b4 	movhi	r2,130
  808ee4:	1084bd04 	addi	r2,r2,4852
  808ee8:	10800017 	ldw	r2,0(r2)
  808eec:	e0fff417 	ldw	r3,-48(fp)
  808ef0:	10c5883a 	add	r2,r2,r3
  808ef4:	e0bff415 	stw	r2,-48(fp)
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
                            (Finfo.fattrib & AM_DIR) ? 'D' : '-',
  808ef8:	008020b4 	movhi	r2,130
  808efc:	1084bd04 	addi	r2,r2,4852
  808f00:	10800203 	ldbu	r2,8(r2)
  808f04:	10803fcc 	andi	r2,r2,255
  808f08:	1080040c 	andi	r2,r2,16
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808f0c:	10000226 	beq	r2,zero,808f18 <main+0xc58>
  808f10:	01401104 	movi	r5,68
  808f14:	00000106 	br	808f1c <main+0xc5c>
  808f18:	01400b44 	movi	r5,45
                            (Finfo.fattrib & AM_DIR) ? 'D' : '-',
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
  808f1c:	008020b4 	movhi	r2,130
  808f20:	1084bd04 	addi	r2,r2,4852
  808f24:	10800203 	ldbu	r2,8(r2)
  808f28:	10803fcc 	andi	r2,r2,255
  808f2c:	1080004c 	andi	r2,r2,1
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808f30:	10000226 	beq	r2,zero,808f3c <main+0xc7c>
  808f34:	01801484 	movi	r6,82
  808f38:	00000106 	br	808f40 <main+0xc80>
  808f3c:	01800b44 	movi	r6,45
                            (Finfo.fattrib & AM_DIR) ? 'D' : '-',
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
                            (Finfo.fattrib & AM_HID) ? 'H' : '-',
  808f40:	008020b4 	movhi	r2,130
  808f44:	1084bd04 	addi	r2,r2,4852
  808f48:	10800203 	ldbu	r2,8(r2)
  808f4c:	10803fcc 	andi	r2,r2,255
  808f50:	1080008c 	andi	r2,r2,2
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808f54:	10000226 	beq	r2,zero,808f60 <main+0xca0>
  808f58:	01c01204 	movi	r7,72
  808f5c:	00000106 	br	808f64 <main+0xca4>
  808f60:	01c00b44 	movi	r7,45
                            (Finfo.fattrib & AM_DIR) ? 'D' : '-',
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
                            (Finfo.fattrib & AM_HID) ? 'H' : '-',
                            (Finfo.fattrib & AM_SYS) ? 'S' : '-',
  808f64:	008020b4 	movhi	r2,130
  808f68:	1084bd04 	addi	r2,r2,4852
  808f6c:	10800203 	ldbu	r2,8(r2)
  808f70:	10803fcc 	andi	r2,r2,255
  808f74:	1080010c 	andi	r2,r2,4
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808f78:	10000226 	beq	r2,zero,808f84 <main+0xcc4>
  808f7c:	010014c4 	movi	r4,83
  808f80:	00000106 	br	808f88 <main+0xcc8>
  808f84:	01000b44 	movi	r4,45
                            (Finfo.fattrib & AM_DIR) ? 'D' : '-',
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
                            (Finfo.fattrib & AM_HID) ? 'H' : '-',
                            (Finfo.fattrib & AM_SYS) ? 'S' : '-',
                            (Finfo.fattrib & AM_ARC) ? 'A' : '-',
  808f88:	008020b4 	movhi	r2,130
  808f8c:	1084bd04 	addi	r2,r2,4852
  808f90:	10800203 	ldbu	r2,8(r2)
  808f94:	10803fcc 	andi	r2,r2,255
  808f98:	1080080c 	andi	r2,r2,32
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808f9c:	10000226 	beq	r2,zero,808fa8 <main+0xce8>
  808fa0:	00c01044 	movi	r3,65
  808fa4:	00000106 	br	808fac <main+0xcec>
  808fa8:	00c00b44 	movi	r3,45
                            (Finfo.fattrib & AM_DIR) ? 'D' : '-',
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
                            (Finfo.fattrib & AM_HID) ? 'H' : '-',
                            (Finfo.fattrib & AM_SYS) ? 'S' : '-',
                            (Finfo.fattrib & AM_ARC) ? 'A' : '-',
                            (Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
  808fac:	008020b4 	movhi	r2,130
  808fb0:	1084bd04 	addi	r2,r2,4852
  808fb4:	1080010b 	ldhu	r2,4(r2)
  808fb8:	10bfffcc 	andi	r2,r2,65535
  808fbc:	1004d27a 	srli	r2,r2,9
  808fc0:	10bfffcc 	andi	r2,r2,65535
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808fc4:	1301ef04 	addi	r12,r2,1980
                            (Finfo.fattrib & AM_DIR) ? 'D' : '-',
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
                            (Finfo.fattrib & AM_HID) ? 'H' : '-',
                            (Finfo.fattrib & AM_SYS) ? 'S' : '-',
                            (Finfo.fattrib & AM_ARC) ? 'A' : '-',
                            (Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
  808fc8:	008020b4 	movhi	r2,130
  808fcc:	1084bd04 	addi	r2,r2,4852
  808fd0:	1080010b 	ldhu	r2,4(r2)
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808fd4:	10bfffcc 	andi	r2,r2,65535
  808fd8:	1004d17a 	srli	r2,r2,5
  808fdc:	10bfffcc 	andi	r2,r2,65535
  808fe0:	12c003cc 	andi	r11,r2,15
                            (Finfo.fattrib & AM_DIR) ? 'D' : '-',
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
                            (Finfo.fattrib & AM_HID) ? 'H' : '-',
                            (Finfo.fattrib & AM_SYS) ? 'S' : '-',
                            (Finfo.fattrib & AM_ARC) ? 'A' : '-',
                            (Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
  808fe4:	008020b4 	movhi	r2,130
  808fe8:	1084bd04 	addi	r2,r2,4852
  808fec:	1080010b 	ldhu	r2,4(r2)
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  808ff0:	10bfffcc 	andi	r2,r2,65535
  808ff4:	128007cc 	andi	r10,r2,31
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
                            (Finfo.fattrib & AM_HID) ? 'H' : '-',
                            (Finfo.fattrib & AM_SYS) ? 'S' : '-',
                            (Finfo.fattrib & AM_ARC) ? 'A' : '-',
                            (Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
                            (Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63, Finfo.fsize, &(Finfo.fname[0]));
  808ff8:	008020b4 	movhi	r2,130
  808ffc:	1084bd04 	addi	r2,r2,4852
  809000:	1080018b 	ldhu	r2,6(r2)
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  809004:	10bfffcc 	andi	r2,r2,65535
  809008:	1004d2fa 	srli	r2,r2,11
  80900c:	127fffcc 	andi	r9,r2,65535
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
                            (Finfo.fattrib & AM_HID) ? 'H' : '-',
                            (Finfo.fattrib & AM_SYS) ? 'S' : '-',
                            (Finfo.fattrib & AM_ARC) ? 'A' : '-',
                            (Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
                            (Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63, Finfo.fsize, &(Finfo.fname[0]));
  809010:	008020b4 	movhi	r2,130
  809014:	1084bd04 	addi	r2,r2,4852
  809018:	1080018b 	ldhu	r2,6(r2)
                    else
                    {
                        s1++;
                        p1 += Finfo.fsize;
                    }
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  80901c:	10bfffcc 	andi	r2,r2,65535
  809020:	1004d17a 	srli	r2,r2,5
  809024:	10bfffcc 	andi	r2,r2,65535
  809028:	12000fcc 	andi	r8,r2,63
  80902c:	008020b4 	movhi	r2,130
  809030:	1084bd04 	addi	r2,r2,4852
  809034:	10800017 	ldw	r2,0(r2)
  809038:	d9000015 	stw	r4,0(sp)
  80903c:	d8c00115 	stw	r3,4(sp)
  809040:	db000215 	stw	r12,8(sp)
  809044:	dac00315 	stw	r11,12(sp)
  809048:	da800415 	stw	r10,16(sp)
  80904c:	da400515 	stw	r9,20(sp)
  809050:	da000615 	stw	r8,24(sp)
  809054:	d8800715 	stw	r2,28(sp)
  809058:	008020b4 	movhi	r2,130
  80905c:	1084bf44 	addi	r2,r2,4861
  809060:	d8800815 	stw	r2,32(sp)
  809064:	010020b4 	movhi	r4,130
  809068:	21328504 	addi	r4,r4,-13804
  80906c:	080a3300 	call	80a330 <xprintf>
#if _USE_LFN
                    for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
                        xputc(' ');
                    xprintf("%s\n", Lfname);
#else
                    xputc('\n');
  809070:	01000284 	movi	r4,10
  809074:	080a0c00 	call	80a0c0 <xputc>
#endif
                }
  809078:	003f7d06 	br	808e70 <__alt_data_end+0xff808e70>
                xprintf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
  80907c:	e0fff417 	ldw	r3,-48(fp)
  809080:	e0bff817 	ldw	r2,-32(fp)
  809084:	010020b4 	movhi	r4,130
  809088:	21329004 	addi	r4,r4,-13760
  80908c:	e17fe217 	ldw	r5,-120(fp)
  809090:	180d883a 	mov	r6,r3
  809094:	100f883a 	mov	r7,r2
  809098:	080a3300 	call	80a330 <xprintf>
                res = f_getfree(ptr, (uint32_t *) & p1, &fs);
  80909c:	e13ff317 	ldw	r4,-52(fp)
  8090a0:	e0fff404 	addi	r3,fp,-48
  8090a4:	e0bffc04 	addi	r2,fp,-16
  8090a8:	180b883a 	mov	r5,r3
  8090ac:	100d883a 	mov	r6,r2
  8090b0:	08058b40 	call	8058b4 <f_getfree>
  8090b4:	e0bfee05 	stb	r2,-72(fp)
                if (res == FR_OK)
  8090b8:	e0bfee03 	ldbu	r2,-72(fp)
  8090bc:	10000b1e 	bne	r2,zero,8090ec <main+0xe2c>
                    xprintf(", %10lu bytes free\n", p1 * fs->csize * 512);
  8090c0:	e0bffc17 	ldw	r2,-16(fp)
  8090c4:	10800083 	ldbu	r2,2(r2)
  8090c8:	10c03fcc 	andi	r3,r2,255
  8090cc:	e0bff417 	ldw	r2,-48(fp)
  8090d0:	1885383a 	mul	r2,r3,r2
  8090d4:	1004927a 	slli	r2,r2,9
  8090d8:	010020b4 	movhi	r4,130
  8090dc:	21329b04 	addi	r4,r4,-13716
  8090e0:	100b883a 	mov	r5,r2
  8090e4:	080a3300 	call	80a330 <xprintf>
                else
                    put_rc(res);
                break;
  8090e8:	00023c06 	br	8099dc <main+0x171c>
                xprintf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
                res = f_getfree(ptr, (uint32_t *) & p1, &fs);
                if (res == FR_OK)
                    xprintf(", %10lu bytes free\n", p1 * fs->csize * 512);
                else
                    put_rc(res);
  8090ec:	e0bfee03 	ldbu	r2,-72(fp)
  8090f0:	1009883a 	mov	r4,r2
  8090f4:	08081ec0 	call	8081ec <put_rc>
                break;
  8090f8:	00023806 	br	8099dc <main+0x171c>

            case 'o':          /* fo <mode> <file> - Open a file */
                if (!xatoi(&ptr, &p1))
  8090fc:	e0fff304 	addi	r3,fp,-52
  809100:	e0bff404 	addi	r2,fp,-48
  809104:	1809883a 	mov	r4,r3
  809108:	100b883a 	mov	r5,r2
  80910c:	0809e3c0 	call	809e3c <xatoi>
  809110:	1000011e 	bne	r2,zero,809118 <main+0xe58>
                    break;
  809114:	00023106 	br	8099dc <main+0x171c>
                while (*ptr == ' ')
  809118:	00000306 	br	809128 <main+0xe68>
                    ptr++;
  80911c:	e0bff317 	ldw	r2,-52(fp)
  809120:	10800044 	addi	r2,r2,1
  809124:	e0bff315 	stw	r2,-52(fp)
                break;

            case 'o':          /* fo <mode> <file> - Open a file */
                if (!xatoi(&ptr, &p1))
                    break;
                while (*ptr == ' ')
  809128:	e0bff317 	ldw	r2,-52(fp)
  80912c:	10800003 	ldbu	r2,0(r2)
  809130:	10803fcc 	andi	r2,r2,255
  809134:	1080201c 	xori	r2,r2,128
  809138:	10bfe004 	addi	r2,r2,-128
  80913c:	10800820 	cmpeqi	r2,r2,32
  809140:	103ff61e 	bne	r2,zero,80911c <__alt_data_end+0xff80911c>
                    ptr++;
                put_rc(f_open(&File1, ptr, (uint8_t) p1));
  809144:	e0fff317 	ldw	r3,-52(fp)
  809148:	e0bff417 	ldw	r2,-48(fp)
  80914c:	10803fcc 	andi	r2,r2,255
  809150:	010020b4 	movhi	r4,130
  809154:	2103ee04 	addi	r4,r4,4024
  809158:	180b883a 	mov	r5,r3
  80915c:	100d883a 	mov	r6,r2
  809160:	0803f200 	call	803f20 <f_open>
  809164:	1009883a 	mov	r4,r2
  809168:	08081ec0 	call	8081ec <put_rc>
                break;
  80916c:	00021b06 	br	8099dc <main+0x171c>


            case 'p':          /* fp <len> - read and play file from current fp */
				res = f_opendir(&Dir, ptr);
  809170:	e0bff317 	ldw	r2,-52(fp)
  809174:	010020b4 	movhi	r4,130
  809178:	21065a04 	addi	r4,r4,6504
  80917c:	100b883a 	mov	r5,r2
  809180:	08055c00 	call	8055c0 <f_opendir>
  809184:	e0bfee05 	stb	r2,-72(fp)
				if (res) // if res in non-zero there is an error; print the error.
  809188:	e0bfee03 	ldbu	r2,-72(fp)
  80918c:	10000426 	beq	r2,zero,8091a0 <main+0xee0>
				{
					put_rc(res);
  809190:	e0bfee03 	ldbu	r2,-72(fp)
  809194:	1009883a 	mov	r4,r2
  809198:	08081ec0 	call	8081ec <put_rc>
					break;
  80919c:	00020f06 	br	8099dc <main+0x171c>
				}
				p1 = s1 = s2 = 0; // otherwise initialize the pointers and proceed.
  8091a0:	e03ff815 	stw	zero,-32(fp)
  8091a4:	e0bff817 	ldw	r2,-32(fp)
  8091a8:	e0bfe215 	stw	r2,-120(fp)
  8091ac:	e0bfe217 	ldw	r2,-120(fp)
  8091b0:	e0bff415 	stw	r2,-48(fp)
				xx = 0;
  8091b4:	d0277915 	stw	zero,-25116(gp)

				for (;;)
				{
					res = f_readdir(&Dir, &Finfo);
  8091b8:	010020b4 	movhi	r4,130
  8091bc:	21065a04 	addi	r4,r4,6504
  8091c0:	014020b4 	movhi	r5,130
  8091c4:	2944bd04 	addi	r5,r5,4852
  8091c8:	08057300 	call	805730 <f_readdir>
  8091cc:	e0bfee05 	stb	r2,-72(fp)
					if ((res != FR_OK) || !Finfo.fname[0])
  8091d0:	e0bfee03 	ldbu	r2,-72(fp)
  8091d4:	1000351e 	bne	r2,zero,8092ac <main+0xfec>
  8091d8:	008020b4 	movhi	r2,130
  8091dc:	1084bd04 	addi	r2,r2,4852
  8091e0:	10800243 	ldbu	r2,9(r2)
  8091e4:	10803fcc 	andi	r2,r2,255
  8091e8:	1080201c 	xori	r2,r2,128
  8091ec:	10bfe004 	addi	r2,r2,-128
  8091f0:	10002e26 	beq	r2,zero,8092ac <main+0xfec>
						break;
					if (Finfo.fattrib & AM_DIR)
  8091f4:	008020b4 	movhi	r2,130
  8091f8:	1084bd04 	addi	r2,r2,4852
  8091fc:	10800203 	ldbu	r2,8(r2)
  809200:	10803fcc 	andi	r2,r2,255
  809204:	1080040c 	andi	r2,r2,16
  809208:	10000426 	beq	r2,zero,80921c <main+0xf5c>
					{
						s2++;
  80920c:	e0bff817 	ldw	r2,-32(fp)
  809210:	10800044 	addi	r2,r2,1
  809214:	e0bff815 	stw	r2,-32(fp)
  809218:	00000906 	br	809240 <main+0xf80>
					}
					else
					{
						s1++;
  80921c:	e0bfe217 	ldw	r2,-120(fp)
  809220:	10800044 	addi	r2,r2,1
  809224:	e0bfe215 	stw	r2,-120(fp)
						p1 += Finfo.fsize;
  809228:	008020b4 	movhi	r2,130
  80922c:	1084bd04 	addi	r2,r2,4852
  809230:	10800017 	ldw	r2,0(r2)
  809234:	e0fff417 	ldw	r3,-48(fp)
  809238:	10c5883a 	add	r2,r2,r3
  80923c:	e0bff415 	stw	r2,-48(fp)
					}
					if (isWav(&(Finfo.fname[0]))){
  809240:	010020b4 	movhi	r4,130
  809244:	2104bf44 	addi	r4,r4,4861
  809248:	0809bf00 	call	809bf0 <isWav>
  80924c:	10001626 	beq	r2,zero,8092a8 <main+0xfe8>
						sizes[xx] = Finfo.fsize;
  809250:	d0e77917 	ldw	r3,-25116(gp)
  809254:	008020b4 	movhi	r2,130
  809258:	1084bd04 	addi	r2,r2,4852
  80925c:	11000017 	ldw	r4,0(r2)
  809260:	008020b4 	movhi	r2,130
  809264:	1084c304 	addi	r2,r2,4876
  809268:	18c7883a 	add	r3,r3,r3
  80926c:	18c7883a 	add	r3,r3,r3
  809270:	10c5883a 	add	r2,r2,r3
  809274:	11000015 	stw	r4,0(r2)
						strcpy(&names[xx] , &(Finfo.fname[0]));
  809278:	d0a77917 	ldw	r2,-25116(gp)
  80927c:	10c00524 	muli	r3,r2,20
  809280:	008020b4 	movhi	r2,130
  809284:	10847704 	addi	r2,r2,4572
  809288:	1885883a 	add	r2,r3,r2
  80928c:	1009883a 	mov	r4,r2
  809290:	014020b4 	movhi	r5,130
  809294:	2944bf44 	addi	r5,r5,4861
  809298:	080ced40 	call	80ced4 <strcpy>
						xx++;
  80929c:	d0a77917 	ldw	r2,-25116(gp)
  8092a0:	10800044 	addi	r2,r2,1
  8092a4:	d0a77915 	stw	r2,-25116(gp)
					}
				}
  8092a8:	003fc306 	br	8091b8 <__alt_data_end+0xff8091b8>
				while (1){
				if (track_changed)
  8092ac:	d0a77317 	ldw	r2,-25140(gp)
  8092b0:	10000126 	beq	r2,zero,8092b8 <main+0xff8>
					track_changed = 0;
  8092b4:	d0277315 	stw	zero,-25140(gp)
				if (done_playing){
  8092b8:	d0a77617 	ldw	r2,-25128(gp)
  8092bc:	10000326 	beq	r2,zero,8092cc <main+0x100c>
					stopped = 1;
  8092c0:	00800044 	movi	r2,1
  8092c4:	d0a00115 	stw	r2,-32764(gp)
					done_playing = 0;
  8092c8:	d0277615 	stw	zero,-25128(gp)
				}
				int previous = -1;
  8092cc:	00bfffc4 	movi	r2,-1
  8092d0:	e0bfe615 	stw	r2,-104(fp)
				if (stopped){
  8092d4:	d0a00117 	ldw	r2,-32764(gp)
  8092d8:	10000b26 	beq	r2,zero,809308 <main+0x1048>
					state = 3;
  8092dc:	008000c4 	movi	r2,3
  8092e0:	d0a00215 	stw	r2,-32760(gp)
					while (stopped){
  8092e4:	00000606 	br	809300 <main+0x1040>
						if (previous != names_index){
  8092e8:	d0a00317 	ldw	r2,-32756(gp)
  8092ec:	e0ffe617 	ldw	r3,-104(fp)
  8092f0:	18800326 	beq	r3,r2,809300 <main+0x1040>
							TestLCD();
  8092f4:	0809cd00 	call	809cd0 <TestLCD>
							previous = names_index;
  8092f8:	d0a00317 	ldw	r2,-32756(gp)
  8092fc:	e0bfe615 	stw	r2,-104(fp)
					done_playing = 0;
				}
				int previous = -1;
				if (stopped){
					state = 3;
					while (stopped){
  809300:	d0a00117 	ldw	r2,-32764(gp)
  809304:	103ff81e 	bne	r2,zero,8092e8 <__alt_data_end+0xff8092e8>
							TestLCD();
							previous = names_index;
						}
					}
				}
				state = 1;
  809308:	00800044 	movi	r2,1
  80930c:	d0a00215 	stw	r2,-32760(gp)
                put_rc(f_open(&File1, names[names_index], (uint8_t)1));
  809310:	d0a00317 	ldw	r2,-32756(gp)
  809314:	10c00524 	muli	r3,r2,20
  809318:	008020b4 	movhi	r2,130
  80931c:	10847704 	addi	r2,r2,4572
  809320:	1885883a 	add	r2,r3,r2
  809324:	010020b4 	movhi	r4,130
  809328:	2103ee04 	addi	r4,r4,4024
  80932c:	100b883a 	mov	r5,r2
  809330:	01800044 	movi	r6,1
  809334:	0803f200 	call	803f20 <f_open>
  809338:	1009883a 	mov	r4,r2
  80933c:	08081ec0 	call	8081ec <put_rc>
                p1 = sizes[names_index];
  809340:	d0e00317 	ldw	r3,-32756(gp)
  809344:	008020b4 	movhi	r2,130
  809348:	1084c304 	addi	r2,r2,4876
  80934c:	18c7883a 	add	r3,r3,r3
  809350:	18c7883a 	add	r3,r3,r3
  809354:	10c5883a 	add	r2,r2,r3
  809358:	10800017 	ldw	r2,0(r2)
  80935c:	e0bff415 	stw	r2,-48(fp)
                TestLCD();
  809360:	0809cd00 	call	809cd0 <TestLCD>
                ofs = File1.fptr;
  809364:	008020b4 	movhi	r2,130
  809368:	1083ee04 	addi	r2,r2,4024
  80936c:	10800217 	ldw	r2,8(r2)
  809370:	e0bfe415 	stw	r2,-112(fp)
                //int i = 0;
                //unsigned char mid_buf[8192];
                int x;
                int speed = 4;
  809374:	00800104 	movi	r2,4
  809378:	e0bfe815 	stw	r2,-96(fp)
                int mono = 0;
  80937c:	e03fe915 	stw	zero,-92(fp)
                int switch0;
                int switch1;
				switch0 = IORD(SWITCH_PIO_BASE, 0) & 0x1;
  809380:	00804034 	movhi	r2,256
  809384:	10844404 	addi	r2,r2,4368
  809388:	10800037 	ldwio	r2,0(r2)
  80938c:	1080004c 	andi	r2,r2,1
  809390:	e0bfef15 	stw	r2,-68(fp)
				switch1 = IORD(SWITCH_PIO_BASE, 0) & 0x2;
  809394:	00804034 	movhi	r2,256
  809398:	10844404 	addi	r2,r2,4368
  80939c:	10800037 	ldwio	r2,0(r2)
  8093a0:	1080008c 	andi	r2,r2,2
  8093a4:	e0bff015 	stw	r2,-64(fp)

				if (!switch0 && !switch1){
  8093a8:	e0bfef17 	ldw	r2,-68(fp)
  8093ac:	1000081e 	bne	r2,zero,8093d0 <main+0x1110>
  8093b0:	e0bff017 	ldw	r2,-64(fp)
  8093b4:	1000061e 	bne	r2,zero,8093d0 <main+0x1110>
					//stereo, normal speed
					printf("stereo, normal\n");
  8093b8:	010020b4 	movhi	r4,130
  8093bc:	2132a004 	addi	r4,r4,-13696
  8093c0:	080cab80 	call	80cab8 <puts>
					speed = 4;
  8093c4:	00800104 	movi	r2,4
  8093c8:	e0bfe815 	stw	r2,-96(fp)
					mono = 0;
  8093cc:	e03fe915 	stw	zero,-92(fp)
				}
				if (switch0 && !switch1){
  8093d0:	e0bfef17 	ldw	r2,-68(fp)
  8093d4:	10000826 	beq	r2,zero,8093f8 <main+0x1138>
  8093d8:	e0bff017 	ldw	r2,-64(fp)
  8093dc:	1000061e 	bne	r2,zero,8093f8 <main+0x1138>
					//stereo, half speed
					printf("stereo, half\n");
  8093e0:	010020b4 	movhi	r4,130
  8093e4:	2132a404 	addi	r4,r4,-13680
  8093e8:	080cab80 	call	80cab8 <puts>
					speed = 2;
  8093ec:	00800084 	movi	r2,2
  8093f0:	e0bfe815 	stw	r2,-96(fp)
					mono = 0;
  8093f4:	e03fe915 	stw	zero,-92(fp)
				}
				if (!switch0 && switch1){
  8093f8:	e0bfef17 	ldw	r2,-68(fp)
  8093fc:	1000081e 	bne	r2,zero,809420 <main+0x1160>
  809400:	e0bff017 	ldw	r2,-64(fp)
  809404:	10000626 	beq	r2,zero,809420 <main+0x1160>
					//stereo, double speed
					printf("stereo, double\n");
  809408:	010020b4 	movhi	r4,130
  80940c:	2132a804 	addi	r4,r4,-13664
  809410:	080cab80 	call	80cab8 <puts>
					speed = 8;
  809414:	00800204 	movi	r2,8
  809418:	e0bfe815 	stw	r2,-96(fp)
					mono = 0;
  80941c:	e03fe915 	stw	zero,-92(fp)
				}
				if (switch0 && switch1){
  809420:	e0bfef17 	ldw	r2,-68(fp)
  809424:	10000926 	beq	r2,zero,80944c <main+0x118c>
  809428:	e0bff017 	ldw	r2,-64(fp)
  80942c:	10000726 	beq	r2,zero,80944c <main+0x118c>
					printf("mono, normal\n");
  809430:	010020b4 	movhi	r4,130
  809434:	2132ac04 	addi	r4,r4,-13648
  809438:	080cab80 	call	80cab8 <puts>
					//mono, normal speed
					speed = 4;
  80943c:	00800104 	movi	r2,4
  809440:	e0bfe815 	stw	r2,-96(fp)
					mono = 1;
  809444:	00800044 	movi	r2,1
  809448:	e0bfe915 	stw	r2,-92(fp)
				}

                while (p1 > 0)
  80944c:	00009c06 	br	8096c0 <main+0x1400>
			// open the Audio port

			/* read and echo audio data */
			// left fifo first and then right fifo (2 bytes at a time as 16 bit number

			if ((uint32_t) p1 >= blen)
  809450:	e0bff417 	ldw	r2,-48(fp)
  809454:	1007883a 	mov	r3,r2
  809458:	e0bfe317 	ldw	r2,-116(fp)
  80945c:	18800336 	bltu	r3,r2,80946c <main+0x11ac>
			{
				cnt = blen;
  809460:	e0bfe317 	ldw	r2,-116(fp)
  809464:	e0bff915 	stw	r2,-28(fp)
  809468:	00000206 	br	809474 <main+0x11b4>
				//size -= blen;
			}
			else
			{
				cnt = p1;
  80946c:	e0bff417 	ldw	r2,-48(fp)
  809470:	e0bff915 	stw	r2,-28(fp)
				//p1 = 0;
			}

			res = f_read(&File1, Buff, cnt, &s2);
  809474:	e0fff917 	ldw	r3,-28(fp)
  809478:	e0bff804 	addi	r2,fp,-32
  80947c:	010020b4 	movhi	r4,130
  809480:	2103ee04 	addi	r4,r4,4024
  809484:	014020b4 	movhi	r5,130
  809488:	2944d104 	addi	r5,r5,4932
  80948c:	180d883a 	mov	r6,r3
  809490:	100f883a 	mov	r7,r2
  809494:	08043a40 	call	8043a4 <f_read>
  809498:	e0bfee05 	stb	r2,-72(fp)
			uint32_t remaining = s2;
  80949c:	e0bff817 	ldw	r2,-32(fp)
  8094a0:	e0bfea15 	stw	r2,-88(fp)
			while (remaining > 0){
  8094a4:	00008006 	br	8096a8 <main+0x13e8>
				if (paused){
  8094a8:	d0a77217 	ldw	r2,-25144(gp)
  8094ac:	10001126 	beq	r2,zero,8094f4 <main+0x1234>
					state = 2;
  8094b0:	00800084 	movi	r2,2
  8094b4:	d0a00215 	stw	r2,-32760(gp)
					TestLCD();
  8094b8:	0809cd00 	call	809cd0 <TestLCD>
					while (paused){
  8094bc:	00000606 	br	8094d8 <main+0x1218>
						if (track_changed)
  8094c0:	d0a77317 	ldw	r2,-25140(gp)
  8094c4:	10000126 	beq	r2,zero,8094cc <main+0x120c>
							break;
  8094c8:	00000506 	br	8094e0 <main+0x1220>
						if (stopped)
  8094cc:	d0a00117 	ldw	r2,-32764(gp)
  8094d0:	10000126 	beq	r2,zero,8094d8 <main+0x1218>
							break;
  8094d4:	00000206 	br	8094e0 <main+0x1220>
			uint32_t remaining = s2;
			while (remaining > 0){
				if (paused){
					state = 2;
					TestLCD();
					while (paused){
  8094d8:	d0a77217 	ldw	r2,-25144(gp)
  8094dc:	103ff81e 	bne	r2,zero,8094c0 <__alt_data_end+0xff8094c0>
						if (track_changed)
							break;
						if (stopped)
							break;
					}
					if (!paused){
  8094e0:	d0a77217 	ldw	r2,-25144(gp)
  8094e4:	1000031e 	bne	r2,zero,8094f4 <main+0x1234>
						state = 1;
  8094e8:	00800044 	movi	r2,1
  8094ec:	d0a00215 	stw	r2,-32760(gp)
						TestLCD();
  8094f0:	0809cd00 	call	809cd0 <TestLCD>
					}
				}
				if (track_changed || stopped)
  8094f4:	d0a77317 	ldw	r2,-25140(gp)
  8094f8:	10006d1e 	bne	r2,zero,8096b0 <main+0x13f0>
  8094fc:	d0a00117 	ldw	r2,-32764(gp)
  809500:	10006b1e 	bne	r2,zero,8096b0 <main+0x13f0>
					break;
				uint32_t min;
				// finding the amount of space available in the output buffers (*4 because return is in 32bit words, we want in bytes)
				uint32_t right_space = (alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_RIGHT)) * speed;
  809504:	e13fed17 	ldw	r4,-76(fp)
  809508:	01400044 	movi	r5,1
  80950c:	081b4980 	call	81b498 <alt_up_audio_write_fifo_space>
  809510:	1007883a 	mov	r3,r2
  809514:	e0bfe817 	ldw	r2,-96(fp)
  809518:	1885383a 	mul	r2,r3,r2
  80951c:	e0bff115 	stw	r2,-60(fp)
				uint32_t left_space = (alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_LEFT)) * speed;
  809520:	e13fed17 	ldw	r4,-76(fp)
  809524:	000b883a 	mov	r5,zero
  809528:	081b4980 	call	81b498 <alt_up_audio_write_fifo_space>
  80952c:	1007883a 	mov	r3,r2
  809530:	e0bfe817 	ldw	r2,-96(fp)
  809534:	1885383a 	mul	r2,r3,r2
  809538:	e0bff215 	stw	r2,-56(fp)

				// take minimum of space in both buffers
				if (right_space < left_space){
  80953c:	e0fff117 	ldw	r3,-60(fp)
  809540:	e0bff217 	ldw	r2,-56(fp)
  809544:	1880032e 	bgeu	r3,r2,809554 <main+0x1294>
					min = right_space;
  809548:	e0bff117 	ldw	r2,-60(fp)
  80954c:	e0bfeb15 	stw	r2,-84(fp)
  809550:	00000206 	br	80955c <main+0x129c>
				}
				else{
					min = left_space;
  809554:	e0bff217 	ldw	r2,-56(fp)
  809558:	e0bfeb15 	stw	r2,-84(fp)
				}
				// if the space in the output buffer is greater than the bytes yet to be read from the water truck
				if (min > remaining){
  80955c:	e0bfeb17 	ldw	r2,-84(fp)
  809560:	e0ffea17 	ldw	r3,-88(fp)
  809564:	1880022e 	bgeu	r3,r2,809570 <main+0x12b0>
					min = remaining;
  809568:	e0bfea17 	ldw	r2,-88(fp)
  80956c:	e0bfeb15 	stw	r2,-84(fp)
				}
				// put as many bytes as was previously calculated into the output buffers
				// s2 - remaining calculates the index in Buff we stopped transferring at last cycle of the loop
				for (x = (s2 - remaining); x < ((s2 - remaining) + min); x+=speed)
  809570:	e0fff817 	ldw	r3,-32(fp)
  809574:	e0bfea17 	ldw	r2,-88(fp)
  809578:	1885c83a 	sub	r2,r3,r2
  80957c:	e0bfe715 	stw	r2,-100(fp)
  809580:	00003e06 	br	80967c <main+0x13bc>
				{
					l_buf = ((uint16_t)Buff[x+1] << 8) | (uint16_t)Buff[x] & 0xFF;
  809584:	e0bfe717 	ldw	r2,-100(fp)
  809588:	10c00044 	addi	r3,r2,1
  80958c:	008020b4 	movhi	r2,130
  809590:	1084d104 	addi	r2,r2,4932
  809594:	10c5883a 	add	r2,r2,r3
  809598:	10800003 	ldbu	r2,0(r2)
  80959c:	10803fcc 	andi	r2,r2,255
  8095a0:	1006923a 	slli	r3,r2,8
  8095a4:	008020b4 	movhi	r2,130
  8095a8:	1084d104 	addi	r2,r2,4932
  8095ac:	e13fe717 	ldw	r4,-100(fp)
  8095b0:	1105883a 	add	r2,r2,r4
  8095b4:	10800003 	ldbu	r2,0(r2)
  8095b8:	10803fcc 	andi	r2,r2,255
  8095bc:	1884b03a 	or	r2,r3,r2
  8095c0:	e0bffd15 	stw	r2,-12(fp)
					r_buf = ((uint16_t)Buff[x+3] << 8) | (uint16_t)Buff[x+2] & 0xFF;
  8095c4:	e0bfe717 	ldw	r2,-100(fp)
  8095c8:	10c000c4 	addi	r3,r2,3
  8095cc:	008020b4 	movhi	r2,130
  8095d0:	1084d104 	addi	r2,r2,4932
  8095d4:	10c5883a 	add	r2,r2,r3
  8095d8:	10800003 	ldbu	r2,0(r2)
  8095dc:	10803fcc 	andi	r2,r2,255
  8095e0:	1006923a 	slli	r3,r2,8
  8095e4:	e0bfe717 	ldw	r2,-100(fp)
  8095e8:	11000084 	addi	r4,r2,2
  8095ec:	008020b4 	movhi	r2,130
  8095f0:	1084d104 	addi	r2,r2,4932
  8095f4:	1105883a 	add	r2,r2,r4
  8095f8:	10800003 	ldbu	r2,0(r2)
  8095fc:	10803fcc 	andi	r2,r2,255
  809600:	1884b03a 	or	r2,r3,r2
  809604:	e0bffe15 	stw	r2,-8(fp)

					if (mono)
  809608:	e0bfe917 	ldw	r2,-92(fp)
  80960c:	10000726 	beq	r2,zero,80962c <main+0x136c>
						alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_RIGHT);
  809610:	e0bffd04 	addi	r2,fp,-12
  809614:	e13fed17 	ldw	r4,-76(fp)
  809618:	100b883a 	mov	r5,r2
  80961c:	01800044 	movi	r6,1
  809620:	01c00044 	movi	r7,1
  809624:	081b6a80 	call	81b6a8 <alt_up_audio_write_fifo>
  809628:	00000606 	br	809644 <main+0x1384>
					else
						alt_up_audio_write_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
  80962c:	e0bffe04 	addi	r2,fp,-8
  809630:	e13fed17 	ldw	r4,-76(fp)
  809634:	100b883a 	mov	r5,r2
  809638:	01800044 	movi	r6,1
  80963c:	01c00044 	movi	r7,1
  809640:	081b6a80 	call	81b6a8 <alt_up_audio_write_fifo>
					// write audio buffer
					alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
  809644:	e0bffd04 	addi	r2,fp,-12
  809648:	e13fed17 	ldw	r4,-76(fp)
  80964c:	100b883a 	mov	r5,r2
  809650:	01800044 	movi	r6,1
  809654:	000f883a 	mov	r7,zero
  809658:	081b6a80 	call	81b6a8 <alt_up_audio_write_fifo>

					p1-=speed;
  80965c:	e0fff417 	ldw	r3,-48(fp)
  809660:	e0bfe817 	ldw	r2,-96(fp)
  809664:	1885c83a 	sub	r2,r3,r2
  809668:	e0bff415 	stw	r2,-48(fp)
				if (min > remaining){
					min = remaining;
				}
				// put as many bytes as was previously calculated into the output buffers
				// s2 - remaining calculates the index in Buff we stopped transferring at last cycle of the loop
				for (x = (s2 - remaining); x < ((s2 - remaining) + min); x+=speed)
  80966c:	e0ffe717 	ldw	r3,-100(fp)
  809670:	e0bfe817 	ldw	r2,-96(fp)
  809674:	1885883a 	add	r2,r3,r2
  809678:	e0bfe715 	stw	r2,-100(fp)
  80967c:	e0ffe717 	ldw	r3,-100(fp)
  809680:	e13ff817 	ldw	r4,-32(fp)
  809684:	e0bfea17 	ldw	r2,-88(fp)
  809688:	2089c83a 	sub	r4,r4,r2
  80968c:	e0bfeb17 	ldw	r2,-84(fp)
  809690:	2085883a 	add	r2,r4,r2
  809694:	18bfbb36 	bltu	r3,r2,809584 <__alt_data_end+0xff809584>
					alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);

					p1-=speed;
				}
				// calculate the number of bytes still to be pushed into the output buffers
				remaining-=min;
  809698:	e0ffea17 	ldw	r3,-88(fp)
  80969c:	e0bfeb17 	ldw	r2,-84(fp)
  8096a0:	1885c83a 	sub	r2,r3,r2
  8096a4:	e0bfea15 	stw	r2,-88(fp)
				//p1 = 0;
			}

			res = f_read(&File1, Buff, cnt, &s2);
			uint32_t remaining = s2;
			while (remaining > 0){
  8096a8:	e0bfea17 	ldw	r2,-88(fp)
  8096ac:	103f7e1e 	bne	r2,zero,8094a8 <__alt_data_end+0xff8094a8>
					p1-=speed;
				}
				// calculate the number of bytes still to be pushed into the output buffers
				remaining-=min;
			}
			if (track_changed || stopped)
  8096b0:	d0a77317 	ldw	r2,-25140(gp)
  8096b4:	1000041e 	bne	r2,zero,8096c8 <main+0x1408>
  8096b8:	d0a00117 	ldw	r2,-32764(gp)
  8096bc:	1000021e 	bne	r2,zero,8096c8 <main+0x1408>
					//mono, normal speed
					speed = 4;
					mono = 1;
				}

                while (p1 > 0)
  8096c0:	e0bff417 	ldw	r2,-48(fp)
  8096c4:	00bf6216 	blt	zero,r2,809450 <__alt_data_end+0xff809450>
				remaining-=min;
			}
			if (track_changed || stopped)
				break;
		}
                put_rc(f_close(&File1));
  8096c8:	010020b4 	movhi	r4,130
  8096cc:	2103ee04 	addi	r4,r4,4024
  8096d0:	080508c0 	call	80508c <f_close>
  8096d4:	1009883a 	mov	r4,r2
  8096d8:	08081ec0 	call	8081ec <put_rc>
                if (!track_changed && !stopped)
  8096dc:	d0a77317 	ldw	r2,-25140(gp)
  8096e0:	1000041e 	bne	r2,zero,8096f4 <main+0x1434>
  8096e4:	d0a00117 	ldw	r2,-32764(gp)
  8096e8:	1000021e 	bne	r2,zero,8096f4 <main+0x1434>
                	done_playing = 1;
  8096ec:	00800044 	movi	r2,1
  8096f0:	d0a77615 	stw	r2,-25128(gp)
        }
  8096f4:	003eed06 	br	8092ac <__alt_data_end+0xff8092ac>
		xprintf("done\n");
		break;
            case 'r':          /* fr <len> - read file */
                if (!xatoi(&ptr, &p1))
  8096f8:	e0fff304 	addi	r3,fp,-52
  8096fc:	e0bff404 	addi	r2,fp,-48
  809700:	1809883a 	mov	r4,r3
  809704:	100b883a 	mov	r5,r2
  809708:	0809e3c0 	call	809e3c <xatoi>
  80970c:	1000011e 	bne	r2,zero,809714 <main+0x1454>
                    break;
  809710:	0000b206 	br	8099dc <main+0x171c>
                p2 = 0;
  809714:	e03ff515 	stw	zero,-44(fp)
                Timer = 0;
  809718:	d027710d 	sth	zero,-25148(gp)
                while (p1)
  80971c:	00002806 	br	8097c0 <main+0x1500>
                {
                    if ((uint32_t) p1 >= blen)
  809720:	e0bff417 	ldw	r2,-48(fp)
  809724:	1007883a 	mov	r3,r2
  809728:	e0bfe317 	ldw	r2,-116(fp)
  80972c:	18800836 	bltu	r3,r2,809750 <main+0x1490>
                    {
                        cnt = blen;
  809730:	e0bfe317 	ldw	r2,-116(fp)
  809734:	e0bff915 	stw	r2,-28(fp)
                        p1 -= blen;
  809738:	e0bff417 	ldw	r2,-48(fp)
  80973c:	1007883a 	mov	r3,r2
  809740:	e0bfe317 	ldw	r2,-116(fp)
  809744:	1885c83a 	sub	r2,r3,r2
  809748:	e0bff415 	stw	r2,-48(fp)
  80974c:	00000306 	br	80975c <main+0x149c>
                    }
                    else
                    {
                        cnt = p1;
  809750:	e0bff417 	ldw	r2,-48(fp)
  809754:	e0bff915 	stw	r2,-28(fp)
                        p1 = 0;
  809758:	e03ff415 	stw	zero,-48(fp)
                    }
                    res = f_read(&File1, Buff, cnt, &s2);
  80975c:	e0fff917 	ldw	r3,-28(fp)
  809760:	e0bff804 	addi	r2,fp,-32
  809764:	010020b4 	movhi	r4,130
  809768:	2103ee04 	addi	r4,r4,4024
  80976c:	014020b4 	movhi	r5,130
  809770:	2944d104 	addi	r5,r5,4932
  809774:	180d883a 	mov	r6,r3
  809778:	100f883a 	mov	r7,r2
  80977c:	08043a40 	call	8043a4 <f_read>
  809780:	e0bfee05 	stb	r2,-72(fp)
                    if (res != FR_OK)
  809784:	e0bfee03 	ldbu	r2,-72(fp)
  809788:	10000426 	beq	r2,zero,80979c <main+0x14dc>
                    {
                        put_rc(res); // output a read error if a read error occurs
  80978c:	e0bfee03 	ldbu	r2,-72(fp)
  809790:	1009883a 	mov	r4,r2
  809794:	08081ec0 	call	8081ec <put_rc>
                        break;
  809798:	00000b06 	br	8097c8 <main+0x1508>
                    }
                    p2 += s2; // increment p2 by the s2 referenced value
  80979c:	e0bff517 	ldw	r2,-44(fp)
  8097a0:	1007883a 	mov	r3,r2
  8097a4:	e0bff817 	ldw	r2,-32(fp)
  8097a8:	1885883a 	add	r2,r3,r2
  8097ac:	e0bff515 	stw	r2,-44(fp)
                    if (cnt != s2) //error if cnt does not equal s2 referenced value ???
  8097b0:	e0fff917 	ldw	r3,-28(fp)
  8097b4:	e0bff817 	ldw	r2,-32(fp)
  8097b8:	18800126 	beq	r3,r2,8097c0 <main+0x1500>
                        break;
  8097bc:	00000206 	br	8097c8 <main+0x1508>
            case 'r':          /* fr <len> - read file */
                if (!xatoi(&ptr, &p1))
                    break;
                p2 = 0;
                Timer = 0;
                while (p1)
  8097c0:	e0bff417 	ldw	r2,-48(fp)
  8097c4:	103fd61e 	bne	r2,zero,809720 <__alt_data_end+0xff809720>
                    }
                    p2 += s2; // increment p2 by the s2 referenced value
                    if (cnt != s2) //error if cnt does not equal s2 referenced value ???
                        break;
                }
                xprintf("%lu bytes read with %lu kB/sec.\n", p2, Timer ? (p2 / Timer) : 0);
  8097c8:	e43ff517 	ldw	r16,-44(fp)
  8097cc:	d0a7710b 	ldhu	r2,-25148(gp)
  8097d0:	10bfffcc 	andi	r2,r2,65535
  8097d4:	10000726 	beq	r2,zero,8097f4 <main+0x1534>
  8097d8:	e0fff517 	ldw	r3,-44(fp)
  8097dc:	d0a7710b 	ldhu	r2,-25148(gp)
  8097e0:	10bfffcc 	andi	r2,r2,65535
  8097e4:	1809883a 	mov	r4,r3
  8097e8:	100b883a 	mov	r5,r2
  8097ec:	080a8d00 	call	80a8d0 <__divsi3>
  8097f0:	00000106 	br	8097f8 <main+0x1538>
  8097f4:	0005883a 	mov	r2,zero
  8097f8:	010020b4 	movhi	r4,130
  8097fc:	2132b004 	addi	r4,r4,-13632
  809800:	800b883a 	mov	r5,r16
  809804:	100d883a 	mov	r6,r2
  809808:	080a3300 	call	80a330 <xprintf>
                break;
  80980c:	00007306 	br	8099dc <main+0x171c>

            case 's':          /* fs [<path>] - Show volume status */
                res = f_getfree(ptr, (uint32_t *) & p2, &fs);
  809810:	e13ff317 	ldw	r4,-52(fp)
  809814:	e0fff504 	addi	r3,fp,-44
  809818:	e0bffc04 	addi	r2,fp,-16
  80981c:	180b883a 	mov	r5,r3
  809820:	100d883a 	mov	r6,r2
  809824:	08058b40 	call	8058b4 <f_getfree>
  809828:	e0bfee05 	stb	r2,-72(fp)
                if (res)
  80982c:	e0bfee03 	ldbu	r2,-72(fp)
  809830:	10000426 	beq	r2,zero,809844 <main+0x1584>
                {
                    put_rc(res);
  809834:	e0bfee03 	ldbu	r2,-72(fp)
  809838:	1009883a 	mov	r4,r2
  80983c:	08081ec0 	call	8081ec <put_rc>
                    break;
  809840:	00006606 	br	8099dc <main+0x171c>
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
  809844:	e0bffc17 	ldw	r2,-16(fp)
  809848:	10800003 	ldbu	r2,0(r2)
  80984c:	10803fcc 	andi	r2,r2,255
  809850:	10c000cc 	andi	r3,r2,3
  809854:	d0a00404 	addi	r2,gp,-32752
  809858:	1885883a 	add	r2,r3,r2
  80985c:	10800003 	ldbu	r2,0(r2)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
  809860:	12803fcc 	andi	r10,r2,255
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
  809864:	e0bffc17 	ldw	r2,-16(fp)
  809868:	10800083 	ldbu	r2,2(r2)
  80986c:	10803fcc 	andi	r2,r2,255
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
  809870:	1012927a 	slli	r9,r2,9
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
  809874:	e0bffc17 	ldw	r2,-16(fp)
  809878:	108000c3 	ldbu	r2,3(r2)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
  80987c:	12003fcc 	andi	r8,r2,255
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
                        fs->n_rootdir, fs->fsize, (uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase, fs->database);
  809880:	e0bffc17 	ldw	r2,-16(fp)
  809884:	1080020b 	ldhu	r2,8(r2)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
  809888:	11ffffcc 	andi	r7,r2,65535
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
                        fs->n_rootdir, fs->fsize, (uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase, fs->database);
  80988c:	e0bffc17 	ldw	r2,-16(fp)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
  809890:	11800717 	ldw	r6,28(r2)
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
                        fs->n_rootdir, fs->fsize, (uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase, fs->database);
  809894:	e0bffc17 	ldw	r2,-16(fp)
  809898:	10800617 	ldw	r2,24(r2)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
  80989c:	117fff84 	addi	r5,r2,-2
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
                        fs->n_rootdir, fs->fsize, (uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase, fs->database);
  8098a0:	e0bffc17 	ldw	r2,-16(fp)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
  8098a4:	11000817 	ldw	r4,32(r2)
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
                        fs->n_rootdir, fs->fsize, (uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase, fs->database);
  8098a8:	e0bffc17 	ldw	r2,-16(fp)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
  8098ac:	10c00917 	ldw	r3,36(r2)
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
                        fs->n_rootdir, fs->fsize, (uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase, fs->database);
  8098b0:	e0bffc17 	ldw	r2,-16(fp)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
  8098b4:	10800a17 	ldw	r2,40(r2)
  8098b8:	d9c00015 	stw	r7,0(sp)
  8098bc:	d9800115 	stw	r6,4(sp)
  8098c0:	d9400215 	stw	r5,8(sp)
  8098c4:	d9000315 	stw	r4,12(sp)
  8098c8:	d8c00415 	stw	r3,16(sp)
  8098cc:	d8800515 	stw	r2,20(sp)
  8098d0:	010020b4 	movhi	r4,130
  8098d4:	2132b904 	addi	r4,r4,-13596
  8098d8:	500b883a 	mov	r5,r10
  8098dc:	480d883a 	mov	r6,r9
  8098e0:	400f883a 	mov	r7,r8
  8098e4:	080a3300 	call	80a330 <xprintf>
                        "Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
                        "FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
                        ft[fs->fs_type & 3], (uint32_t) fs->csize * 512, fs->n_fats,
                        fs->n_rootdir, fs->fsize, (uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase, fs->database);
                acc_size = acc_files = acc_dirs = 0;
  8098e8:	d027780d 	sth	zero,-25120(gp)
  8098ec:	d0a7780b 	ldhu	r2,-25120(gp)
  8098f0:	d0a7788d 	sth	r2,-25118(gp)
  8098f4:	d0a7788b 	ldhu	r2,-25118(gp)
  8098f8:	10bfffcc 	andi	r2,r2,65535
  8098fc:	d0a77a15 	stw	r2,-25112(gp)
                res = scan_files(ptr);
  809900:	e0bff317 	ldw	r2,-52(fp)
  809904:	1009883a 	mov	r4,r2
  809908:	08080ac0 	call	8080ac <scan_files>
  80990c:	e0bfee05 	stb	r2,-72(fp)
                if (res)
  809910:	e0bfee03 	ldbu	r2,-72(fp)
  809914:	10000426 	beq	r2,zero,809928 <main+0x1668>
                {
                    put_rc(res);
  809918:	e0bfee03 	ldbu	r2,-72(fp)
  80991c:	1009883a 	mov	r4,r2
  809920:	08081ec0 	call	8081ec <put_rc>
                    break;
  809924:	00002d06 	br	8099dc <main+0x171c>
                }
                xprintf("\r%u files, %lu bytes.\n%u folders.\n"
  809928:	d0a7788b 	ldhu	r2,-25118(gp)
  80992c:	117fffcc 	andi	r5,r2,65535
  809930:	d1a77a17 	ldw	r6,-25112(gp)
  809934:	d0a7780b 	ldhu	r2,-25120(gp)
  809938:	11ffffcc 	andi	r7,r2,65535
                        "%lu KB total disk space.\n%lu KB available.\n",
                        acc_files, acc_size, acc_dirs, (fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2));
  80993c:	e0bffc17 	ldw	r2,-16(fp)
  809940:	10800617 	ldw	r2,24(r2)
  809944:	10ffff84 	addi	r3,r2,-2
  809948:	e0bffc17 	ldw	r2,-16(fp)
  80994c:	10800083 	ldbu	r2,2(r2)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("\r%u files, %lu bytes.\n%u folders.\n"
  809950:	10803fcc 	andi	r2,r2,255
  809954:	1004d07a 	srli	r2,r2,1
  809958:	10803fcc 	andi	r2,r2,255
  80995c:	1887383a 	mul	r3,r3,r2
                        "%lu KB total disk space.\n%lu KB available.\n",
                        acc_files, acc_size, acc_dirs, (fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2));
  809960:	e0bffc17 	ldw	r2,-16(fp)
  809964:	10800083 	ldbu	r2,2(r2)
                if (res)
                {
                    put_rc(res);
                    break;
                }
                xprintf("\r%u files, %lu bytes.\n%u folders.\n"
  809968:	10803fcc 	andi	r2,r2,255
  80996c:	1004d07a 	srli	r2,r2,1
  809970:	11003fcc 	andi	r4,r2,255
  809974:	e0bff517 	ldw	r2,-44(fp)
  809978:	2085383a 	mul	r2,r4,r2
  80997c:	d8c00015 	stw	r3,0(sp)
  809980:	d8800115 	stw	r2,4(sp)
  809984:	010020b4 	movhi	r4,130
  809988:	2132ec04 	addi	r4,r4,-13392
  80998c:	080a3300 	call	80a330 <xprintf>
                        "%lu KB total disk space.\n%lu KB available.\n",
                        acc_files, acc_size, acc_dirs, (fs->n_fatent - 2) * (fs->csize / 2), p2 * (fs->csize / 2));
                break;
  809990:	00001206 	br	8099dc <main+0x171c>

            case 'z':          /* fz [<rw size>] - Change R/W length for fr/fw/fx command */
                if (xatoi(&ptr, &p1) && p1 >= 1 && p1 <= sizeof(Buff))
  809994:	e0fff304 	addi	r3,fp,-52
  809998:	e0bff404 	addi	r2,fp,-48
  80999c:	1809883a 	mov	r4,r3
  8099a0:	100b883a 	mov	r5,r2
  8099a4:	0809e3c0 	call	809e3c <xatoi>
  8099a8:	10000726 	beq	r2,zero,8099c8 <main+0x1708>
  8099ac:	e0bff417 	ldw	r2,-48(fp)
  8099b0:	0080050e 	bge	zero,r2,8099c8 <main+0x1708>
  8099b4:	e0bff417 	ldw	r2,-48(fp)
  8099b8:	10810068 	cmpgeui	r2,r2,1025
  8099bc:	1000021e 	bne	r2,zero,8099c8 <main+0x1708>
                    blen = p1;
  8099c0:	e0bff417 	ldw	r2,-48(fp)
  8099c4:	e0bfe315 	stw	r2,-116(fp)
                xprintf("blen=%u\n", blen);
  8099c8:	010020b4 	movhi	r4,130
  8099cc:	21330004 	addi	r4,r4,-13312
  8099d0:	e17fe317 	ldw	r5,-116(fp)
  8099d4:	080a3300 	call	80a330 <xprintf>
                break;
  8099d8:	0001883a 	nop
            }
            break; // end of FatFS API controls //
  8099dc:	00000206 	br	8099e8 <main+0x1728>

        case 'h':
            display_help();
  8099e0:	08082900 	call	808290 <display_help>
            break;
  8099e4:	00000106 	br	8099ec <main+0x172c>
                if (xatoi(&ptr, &p1) && p1 >= 1 && p1 <= sizeof(Buff))
                    blen = p1;
                xprintf("blen=%u\n", blen);
                break;
            }
            break; // end of FatFS API controls //
  8099e8:	0001883a 	nop
        case 'h':
            display_help();
            break;

        }
    }
  8099ec:	003a7e06 	br	8083e8 <__alt_data_end+0xff8083e8>

008099f0 <timer_ISR>:
     * we use an int as return :-)
     */
    return (0);
}

static void timer_ISR(void* context, alt_32 id){
  8099f0:	defffc04 	addi	sp,sp,-16
  8099f4:	df000315 	stw	fp,12(sp)
  8099f8:	df000304 	addi	fp,sp,12
  8099fc:	e13ffe15 	stw	r4,-8(fp)
  809a00:	e17fff15 	stw	r5,-4(fp)
	int current_value = IORD(BUTTON_PIO_BASE, 0);
  809a04:	00804034 	movhi	r2,256
  809a08:	10844804 	addi	r2,r2,4384
  809a0c:	10800037 	ldwio	r2,0(r2)
  809a10:	e0bffd15 	stw	r2,-12(fp)
	IOWR(LED_PIO_BASE, 0, 0x1);
  809a14:	00c00044 	movi	r3,1
  809a18:	00804034 	movhi	r2,256
  809a1c:	10844c04 	addi	r2,r2,4400
  809a20:	10c00035 	stwio	r3,0(r2)
	if (button == 0 && current_value != 0xF){
  809a24:	d0a77517 	ldw	r2,-25132(gp)
  809a28:	1000341e 	bne	r2,zero,809afc <timer_ISR+0x10c>
  809a2c:	e0bffd17 	ldw	r2,-12(fp)
  809a30:	108003e0 	cmpeqi	r2,r2,15
  809a34:	1000311e 	bne	r2,zero,809afc <timer_ISR+0x10c>
		button = 1;
  809a38:	00800044 	movi	r2,1
  809a3c:	d0a77515 	stw	r2,-25132(gp)
		if (current_value == 0xE){
  809a40:	e0bffd17 	ldw	r2,-12(fp)
  809a44:	10800398 	cmpnei	r2,r2,14
  809a48:	10000a1e 	bne	r2,zero,809a74 <timer_ISR+0x84>
			track_changed = 1;
  809a4c:	00800044 	movi	r2,1
  809a50:	d0a77315 	stw	r2,-25140(gp)
			if (names_index == 13)
  809a54:	d0a00317 	ldw	r2,-32756(gp)
  809a58:	10800358 	cmpnei	r2,r2,13
  809a5c:	1000021e 	bne	r2,zero,809a68 <timer_ISR+0x78>
				names_index = 0;
  809a60:	d0200315 	stw	zero,-32756(gp)
  809a64:	00000306 	br	809a74 <timer_ISR+0x84>
			else
				names_index++;
  809a68:	d0a00317 	ldw	r2,-32756(gp)
  809a6c:	10800044 	addi	r2,r2,1
  809a70:	d0a00315 	stw	r2,-32756(gp)
		}
		if (current_value == 0x7){
  809a74:	e0bffd17 	ldw	r2,-12(fp)
  809a78:	108001d8 	cmpnei	r2,r2,7
  809a7c:	10000a1e 	bne	r2,zero,809aa8 <timer_ISR+0xb8>
			track_changed = 1;
  809a80:	00800044 	movi	r2,1
  809a84:	d0a77315 	stw	r2,-25140(gp)
			if (names_index == 0 )
  809a88:	d0a00317 	ldw	r2,-32756(gp)
  809a8c:	1000031e 	bne	r2,zero,809a9c <timer_ISR+0xac>
				names_index = 13;
  809a90:	00800344 	movi	r2,13
  809a94:	d0a00315 	stw	r2,-32756(gp)
  809a98:	00000306 	br	809aa8 <timer_ISR+0xb8>
			else
				names_index--;
  809a9c:	d0a00317 	ldw	r2,-32756(gp)
  809aa0:	10bfffc4 	addi	r2,r2,-1
  809aa4:	d0a00315 	stw	r2,-32756(gp)
		}
		if (current_value == 0xD){
  809aa8:	e0bffd17 	ldw	r2,-12(fp)
  809aac:	10800358 	cmpnei	r2,r2,13
  809ab0:	1000061e 	bne	r2,zero,809acc <timer_ISR+0xdc>
			if (paused)
  809ab4:	d0a77217 	ldw	r2,-25144(gp)
  809ab8:	10000226 	beq	r2,zero,809ac4 <timer_ISR+0xd4>
				paused = 0;
  809abc:	d0277215 	stw	zero,-25144(gp)
  809ac0:	00000206 	br	809acc <timer_ISR+0xdc>
			else
				paused = 1;
  809ac4:	00800044 	movi	r2,1
  809ac8:	d0a77215 	stw	r2,-25144(gp)
			/*if (state == 1)
				state = 2;
			else if (state == 2)
				state = 1;*/
		}
		if (current_value == 0xB){
  809acc:	e0bffd17 	ldw	r2,-12(fp)
  809ad0:	108002d8 	cmpnei	r2,r2,11
  809ad4:	1000091e 	bne	r2,zero,809afc <timer_ISR+0x10c>
			if (stopped)
  809ad8:	d0a00117 	ldw	r2,-32764(gp)
  809adc:	10000226 	beq	r2,zero,809ae8 <timer_ISR+0xf8>
				stopped = 0;
  809ae0:	d0200115 	stw	zero,-32764(gp)
  809ae4:	00000206 	br	809af0 <timer_ISR+0x100>
			else
				stopped = 1;
  809ae8:	00800044 	movi	r2,1
  809aec:	d0a00115 	stw	r2,-32764(gp)
			if (paused)
  809af0:	d0a77217 	ldw	r2,-25144(gp)
  809af4:	10000126 	beq	r2,zero,809afc <timer_ISR+0x10c>
				paused = 0;
  809af8:	d0277215 	stw	zero,-25144(gp)
				state = 3;
			else if (state == 3)
				state = 1;*/
		}
	}
	if(current_value == 0xF){
  809afc:	e0bffd17 	ldw	r2,-12(fp)
  809b00:	108003d8 	cmpnei	r2,r2,15
  809b04:	10000b1e 	bne	r2,zero,809b34 <timer_ISR+0x144>
		count_released++;
  809b08:	d0a77417 	ldw	r2,-25136(gp)
  809b0c:	10800044 	addi	r2,r2,1
  809b10:	d0a77415 	stw	r2,-25136(gp)
		if (count_released < 20)
  809b14:	d0a77417 	ldw	r2,-25136(gp)
  809b18:	10800508 	cmpgei	r2,r2,20
  809b1c:	10000a1e 	bne	r2,zero,809b48 <timer_ISR+0x158>
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x5);
  809b20:	00c00144 	movi	r3,5
  809b24:	00804034 	movhi	r2,256
  809b28:	10841904 	addi	r2,r2,4196
  809b2c:	10c00035 	stwio	r3,0(r2)
  809b30:	00000506 	br	809b48 <timer_ISR+0x158>
	}
	else{
		count_released = 0;
  809b34:	d0277415 	stw	zero,-25136(gp)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x5);
  809b38:	00c00144 	movi	r3,5
  809b3c:	00804034 	movhi	r2,256
  809b40:	10841904 	addi	r2,r2,4196
  809b44:	10c00035 	stwio	r3,0(r2)
	}
	if (count_released == 20){
  809b48:	d0a77417 	ldw	r2,-25136(gp)
  809b4c:	10800518 	cmpnei	r2,r2,20
  809b50:	10000e1e 	bne	r2,zero,809b8c <timer_ISR+0x19c>

			IOWR(LED_PIO_BASE, 0, 0x0);
  809b54:	0007883a 	mov	r3,zero
  809b58:	00804034 	movhi	r2,256
  809b5c:	10844c04 	addi	r2,r2,4400
  809b60:	10c00035 	stwio	r3,0(r2)
			count_released = 0;
  809b64:	d0277415 	stw	zero,-25136(gp)
			button = 0;
  809b68:	d0277515 	stw	zero,-25132(gp)
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x8);
  809b6c:	00c00204 	movi	r3,8
  809b70:	00804034 	movhi	r2,256
  809b74:	10841904 	addi	r2,r2,4196
  809b78:	10c00035 	stwio	r3,0(r2)
			IOWR(BUTTON_PIO_BASE, 2, 0xF);
  809b7c:	00c003c4 	movi	r3,15
  809b80:	00804034 	movhi	r2,256
  809b84:	10844a04 	addi	r2,r2,4392
  809b88:	10c00035 	stwio	r3,0(r2)
	}
}
  809b8c:	e037883a 	mov	sp,fp
  809b90:	df000017 	ldw	fp,0(sp)
  809b94:	dec00104 	addi	sp,sp,4
  809b98:	f800283a 	ret

00809b9c <button_ISR>:

static void button_ISR(void *context, alt_32 id){
  809b9c:	defffd04 	addi	sp,sp,-12
  809ba0:	df000215 	stw	fp,8(sp)
  809ba4:	df000204 	addi	fp,sp,8
  809ba8:	e13ffe15 	stw	r4,-8(fp)
  809bac:	e17fff15 	stw	r5,-4(fp)
	IOWR(BUTTON_PIO_BASE, 3, 0);
  809bb0:	0007883a 	mov	r3,zero
  809bb4:	00804034 	movhi	r2,256
  809bb8:	10844b04 	addi	r2,r2,4396
  809bbc:	10c00035 	stwio	r3,0(r2)
	IOWR(BUTTON_PIO_BASE, 2, 0);
  809bc0:	0007883a 	mov	r3,zero
  809bc4:	00804034 	movhi	r2,256
  809bc8:	10844a04 	addi	r2,r2,4392
  809bcc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x5);
  809bd0:	00c00144 	movi	r3,5
  809bd4:	00804034 	movhi	r2,256
  809bd8:	10841904 	addi	r2,r2,4196
  809bdc:	10c00035 	stwio	r3,0(r2)
}
  809be0:	e037883a 	mov	sp,fp
  809be4:	df000017 	ldw	fp,0(sp)
  809be8:	dec00104 	addi	sp,sp,4
  809bec:	f800283a 	ret

00809bf0 <isWav>:

int isWav(char *filename){
  809bf0:	defffc04 	addi	sp,sp,-16
  809bf4:	dfc00315 	stw	ra,12(sp)
  809bf8:	df000215 	stw	fp,8(sp)
  809bfc:	df000204 	addi	fp,sp,8
  809c00:	e13fff15 	stw	r4,-4(fp)
	// returns 1 if wav file
	// returns 0 if not wav file
	int x = (int)strlen(filename);
  809c04:	e13fff17 	ldw	r4,-4(fp)
  809c08:	080cf640 	call	80cf64 <strlen>
  809c0c:	e0bffe15 	stw	r2,-8(fp)
	if (filename[x-4] == '.' && filename[x-3] == 'W' && filename[x-2] == 'A' &&  filename[x-1] == 'V')
  809c10:	e0bffe17 	ldw	r2,-8(fp)
  809c14:	10bfff04 	addi	r2,r2,-4
  809c18:	e0ffff17 	ldw	r3,-4(fp)
  809c1c:	1885883a 	add	r2,r3,r2
  809c20:	10800003 	ldbu	r2,0(r2)
  809c24:	10803fcc 	andi	r2,r2,255
  809c28:	1080201c 	xori	r2,r2,128
  809c2c:	10bfe004 	addi	r2,r2,-128
  809c30:	10800b98 	cmpnei	r2,r2,46
  809c34:	1000201e 	bne	r2,zero,809cb8 <isWav+0xc8>
  809c38:	e0bffe17 	ldw	r2,-8(fp)
  809c3c:	10bfff44 	addi	r2,r2,-3
  809c40:	e0ffff17 	ldw	r3,-4(fp)
  809c44:	1885883a 	add	r2,r3,r2
  809c48:	10800003 	ldbu	r2,0(r2)
  809c4c:	10803fcc 	andi	r2,r2,255
  809c50:	1080201c 	xori	r2,r2,128
  809c54:	10bfe004 	addi	r2,r2,-128
  809c58:	108015d8 	cmpnei	r2,r2,87
  809c5c:	1000161e 	bne	r2,zero,809cb8 <isWav+0xc8>
  809c60:	e0bffe17 	ldw	r2,-8(fp)
  809c64:	10bfff84 	addi	r2,r2,-2
  809c68:	e0ffff17 	ldw	r3,-4(fp)
  809c6c:	1885883a 	add	r2,r3,r2
  809c70:	10800003 	ldbu	r2,0(r2)
  809c74:	10803fcc 	andi	r2,r2,255
  809c78:	1080201c 	xori	r2,r2,128
  809c7c:	10bfe004 	addi	r2,r2,-128
  809c80:	10801058 	cmpnei	r2,r2,65
  809c84:	10000c1e 	bne	r2,zero,809cb8 <isWav+0xc8>
  809c88:	e0bffe17 	ldw	r2,-8(fp)
  809c8c:	10bfffc4 	addi	r2,r2,-1
  809c90:	e0ffff17 	ldw	r3,-4(fp)
  809c94:	1885883a 	add	r2,r3,r2
  809c98:	10800003 	ldbu	r2,0(r2)
  809c9c:	10803fcc 	andi	r2,r2,255
  809ca0:	1080201c 	xori	r2,r2,128
  809ca4:	10bfe004 	addi	r2,r2,-128
  809ca8:	10801598 	cmpnei	r2,r2,86
  809cac:	1000021e 	bne	r2,zero,809cb8 <isWav+0xc8>
		return 1;
  809cb0:	00800044 	movi	r2,1
  809cb4:	00000106 	br	809cbc <isWav+0xcc>
	else{
		//printf("notwav\n");
		return 0;
  809cb8:	0005883a 	mov	r2,zero
	}
}
  809cbc:	e037883a 	mov	sp,fp
  809cc0:	dfc00117 	ldw	ra,4(sp)
  809cc4:	df000017 	ldw	fp,0(sp)
  809cc8:	dec00204 	addi	sp,sp,8
  809ccc:	f800283a 	ret

00809cd0 <TestLCD>:

static void TestLCD()
{
  809cd0:	defff804 	addi	sp,sp,-32
  809cd4:	dfc00715 	stw	ra,28(sp)
  809cd8:	df000615 	stw	fp,24(sp)
  809cdc:	df000604 	addi	fp,sp,24
	// char * displaytext
  FILE *lcd;
  int xxx;
  lcd = fopen("/dev/lcd_display", "w");
  809ce0:	010020b4 	movhi	r4,130
  809ce4:	21330304 	addi	r4,r4,-13300
  809ce8:	014020b4 	movhi	r5,130
  809cec:	29730804 	addi	r5,r5,-13280
  809cf0:	080b1b80 	call	80b1b8 <fopen>
  809cf4:	e0bffb15 	stw	r2,-20(fp)
  char text[16];
  for (xxx = 0; xxx < 13; xxx++){
  809cf8:	e03ffa15 	stw	zero,-24(fp)
  809cfc:	00000f06 	br	809d3c <TestLCD+0x6c>
	  text[xxx] = names[names_index][xxx];
  809d00:	d0e00317 	ldw	r3,-32756(gp)
  809d04:	008020b4 	movhi	r2,130
  809d08:	10847704 	addi	r2,r2,4572
  809d0c:	19000524 	muli	r4,r3,20
  809d10:	e0fffa17 	ldw	r3,-24(fp)
  809d14:	20c7883a 	add	r3,r4,r3
  809d18:	10c5883a 	add	r2,r2,r3
  809d1c:	10c00003 	ldbu	r3,0(r2)
  809d20:	e13ffc04 	addi	r4,fp,-16
  809d24:	e0bffa17 	ldw	r2,-24(fp)
  809d28:	2085883a 	add	r2,r4,r2
  809d2c:	10c00005 	stb	r3,0(r2)
	// char * displaytext
  FILE *lcd;
  int xxx;
  lcd = fopen("/dev/lcd_display", "w");
  char text[16];
  for (xxx = 0; xxx < 13; xxx++){
  809d30:	e0bffa17 	ldw	r2,-24(fp)
  809d34:	10800044 	addi	r2,r2,1
  809d38:	e0bffa15 	stw	r2,-24(fp)
  809d3c:	e0bffa17 	ldw	r2,-24(fp)
  809d40:	10800350 	cmplti	r2,r2,13
  809d44:	103fee1e 	bne	r2,zero,809d00 <__alt_data_end+0xff809d00>
	  text[xxx] = names[names_index][xxx];
  }
  printf("%s", text);
  809d48:	e0bffc04 	addi	r2,fp,-16
  809d4c:	010020b4 	movhi	r4,130
  809d50:	21330904 	addi	r4,r4,-13276
  809d54:	100b883a 	mov	r5,r2
  809d58:	080c9b40 	call	80c9b4 <printf>
  /* Write some simple text to the LCD. */

  if (lcd != NULL )
  809d5c:	e0bffb17 	ldw	r2,-20(fp)
  809d60:	10000726 	beq	r2,zero,809d80 <TestLCD+0xb0>
  {
	  fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  809d64:	e13ffb17 	ldw	r4,-20(fp)
  809d68:	014020b4 	movhi	r5,130
  809d6c:	29730a04 	addi	r5,r5,-13272
  809d70:	018006c4 	movi	r6,27
  809d74:	01c020b4 	movhi	r7,130
  809d78:	39f30c04 	addi	r7,r7,-13264
  809d7c:	080b1fc0 	call	80b1fc <fprintf>
  }

 // }
  /* Get the input string for exiting this test. */
  /* Send the command sequence to clear the LCD. */
  if (lcd != NULL )
  809d80:	e0bffb17 	ldw	r2,-20(fp)
  809d84:	10002526 	beq	r2,zero,809e1c <TestLCD+0x14c>
  {
	  fprintf(lcd, "%i %s", names_index, text);
  809d88:	d0e00317 	ldw	r3,-32756(gp)
  809d8c:	e0bffc04 	addi	r2,fp,-16
  809d90:	e13ffb17 	ldw	r4,-20(fp)
  809d94:	014020b4 	movhi	r5,130
  809d98:	29730d04 	addi	r5,r5,-13260
  809d9c:	180d883a 	mov	r6,r3
  809da0:	100f883a 	mov	r7,r2
  809da4:	080b1fc0 	call	80b1fc <fprintf>
	  if (state == 1)
  809da8:	d0a00217 	ldw	r2,-32760(gp)
  809dac:	10800058 	cmpnei	r2,r2,1
  809db0:	1000071e 	bne	r2,zero,809dd0 <TestLCD+0x100>
		  fprintf(lcd, "\nPLAYING");
  809db4:	010020b4 	movhi	r4,130
  809db8:	21330f04 	addi	r4,r4,-13252
  809dbc:	01400044 	movi	r5,1
  809dc0:	01800204 	movi	r6,8
  809dc4:	e1fffb17 	ldw	r7,-20(fp)
  809dc8:	080bd700 	call	80bd70 <fwrite>
  809dcc:	00001306 	br	809e1c <TestLCD+0x14c>
	  else if (state == 2)
  809dd0:	d0a00217 	ldw	r2,-32760(gp)
  809dd4:	10800098 	cmpnei	r2,r2,2
  809dd8:	1000071e 	bne	r2,zero,809df8 <TestLCD+0x128>
	  	  fprintf(lcd, "\nPAUSED");
  809ddc:	010020b4 	movhi	r4,130
  809de0:	21331204 	addi	r4,r4,-13240
  809de4:	01400044 	movi	r5,1
  809de8:	018001c4 	movi	r6,7
  809dec:	e1fffb17 	ldw	r7,-20(fp)
  809df0:	080bd700 	call	80bd70 <fwrite>
  809df4:	00000906 	br	809e1c <TestLCD+0x14c>
	  else if (state == 3)
  809df8:	d0a00217 	ldw	r2,-32760(gp)
  809dfc:	108000d8 	cmpnei	r2,r2,3
  809e00:	1000061e 	bne	r2,zero,809e1c <TestLCD+0x14c>
		  fprintf(lcd, "\nSTOPPED");
  809e04:	010020b4 	movhi	r4,130
  809e08:	21331404 	addi	r4,r4,-13232
  809e0c:	01400044 	movi	r5,1
  809e10:	01800204 	movi	r6,8
  809e14:	e1fffb17 	ldw	r7,-20(fp)
  809e18:	080bd700 	call	80bd70 <fwrite>
	  //fprintf(lcd, "\n%i %i", names_index, sizes[names_index]);
  }
  fclose( lcd );
  809e1c:	e13ffb17 	ldw	r4,-20(fp)
  809e20:	080aa800 	call	80aa80 <fclose>

  return;
  809e24:	0001883a 	nop
}
  809e28:	e037883a 	mov	sp,fp
  809e2c:	dfc00117 	ldw	ra,4(sp)
  809e30:	df000017 	ldw	fp,0(sp)
  809e34:	dec00204 	addi	sp,sp,8
  809e38:	f800283a 	ret

00809e3c <xatoi>:
#include <stdarg.h>
#include "monitor.h"
#include "uart.h"

int xatoi (char **str, long *res)
{
  809e3c:	defffb04 	addi	sp,sp,-20
  809e40:	df000415 	stw	fp,16(sp)
  809e44:	df000404 	addi	fp,sp,16
  809e48:	e13ffe15 	stw	r4,-8(fp)
  809e4c:	e17fff15 	stw	r5,-4(fp)
  unsigned long val;
  unsigned char c, radix, s = 0;
  809e50:	e03ffd85 	stb	zero,-10(fp)


  while ((c = **str) == ' ') (*str)++;
  809e54:	00000506 	br	809e6c <xatoi+0x30>
  809e58:	e0bffe17 	ldw	r2,-8(fp)
  809e5c:	10800017 	ldw	r2,0(r2)
  809e60:	10c00044 	addi	r3,r2,1
  809e64:	e0bffe17 	ldw	r2,-8(fp)
  809e68:	10c00015 	stw	r3,0(r2)
  809e6c:	e0bffe17 	ldw	r2,-8(fp)
  809e70:	10800017 	ldw	r2,0(r2)
  809e74:	10800003 	ldbu	r2,0(r2)
  809e78:	e0bffd05 	stb	r2,-12(fp)
  809e7c:	e0bffd03 	ldbu	r2,-12(fp)
  809e80:	10800820 	cmpeqi	r2,r2,32
  809e84:	103ff41e 	bne	r2,zero,809e58 <__alt_data_end+0xff809e58>
  if (c == '-') {
  809e88:	e0bffd03 	ldbu	r2,-12(fp)
  809e8c:	10800b58 	cmpnei	r2,r2,45
  809e90:	10000b1e 	bne	r2,zero,809ec0 <xatoi+0x84>
    s = 1;
  809e94:	00800044 	movi	r2,1
  809e98:	e0bffd85 	stb	r2,-10(fp)
    c = *(++(*str));
  809e9c:	e0bffe17 	ldw	r2,-8(fp)
  809ea0:	10800017 	ldw	r2,0(r2)
  809ea4:	10c00044 	addi	r3,r2,1
  809ea8:	e0bffe17 	ldw	r2,-8(fp)
  809eac:	10c00015 	stw	r3,0(r2)
  809eb0:	e0bffe17 	ldw	r2,-8(fp)
  809eb4:	10800017 	ldw	r2,0(r2)
  809eb8:	10800003 	ldbu	r2,0(r2)
  809ebc:	e0bffd05 	stb	r2,-12(fp)
  }
  if (c == '0') {
  809ec0:	e0bffd03 	ldbu	r2,-12(fp)
  809ec4:	10800c18 	cmpnei	r2,r2,48
  809ec8:	1000391e 	bne	r2,zero,809fb0 <xatoi+0x174>
    c = *(++(*str));
  809ecc:	e0bffe17 	ldw	r2,-8(fp)
  809ed0:	10800017 	ldw	r2,0(r2)
  809ed4:	10c00044 	addi	r3,r2,1
  809ed8:	e0bffe17 	ldw	r2,-8(fp)
  809edc:	10c00015 	stw	r3,0(r2)
  809ee0:	e0bffe17 	ldw	r2,-8(fp)
  809ee4:	10800017 	ldw	r2,0(r2)
  809ee8:	10800003 	ldbu	r2,0(r2)
  809eec:	e0bffd05 	stb	r2,-12(fp)
    if (c <= ' ') {
  809ef0:	e0bffd03 	ldbu	r2,-12(fp)
  809ef4:	10800868 	cmpgeui	r2,r2,33
  809ef8:	1000041e 	bne	r2,zero,809f0c <xatoi+0xd0>
      *res = 0; return 1;
  809efc:	e0bfff17 	ldw	r2,-4(fp)
  809f00:	10000015 	stw	zero,0(r2)
  809f04:	00800044 	movi	r2,1
  809f08:	00006906 	br	80a0b0 <xatoi+0x274>
    }
    if (c == 'x') {
  809f0c:	e0bffd03 	ldbu	r2,-12(fp)
  809f10:	10801e18 	cmpnei	r2,r2,120
  809f14:	10000c1e 	bne	r2,zero,809f48 <xatoi+0x10c>
      radix = 16;
  809f18:	00800404 	movi	r2,16
  809f1c:	e0bffd45 	stb	r2,-11(fp)
      c = *(++(*str));
  809f20:	e0bffe17 	ldw	r2,-8(fp)
  809f24:	10800017 	ldw	r2,0(r2)
  809f28:	10c00044 	addi	r3,r2,1
  809f2c:	e0bffe17 	ldw	r2,-8(fp)
  809f30:	10c00015 	stw	r3,0(r2)
  809f34:	e0bffe17 	ldw	r2,-8(fp)
  809f38:	10800017 	ldw	r2,0(r2)
  809f3c:	10800003 	ldbu	r2,0(r2)
  809f40:	e0bffd05 	stb	r2,-12(fp)
  809f44:	00002406 	br	809fd8 <xatoi+0x19c>
    } else {
      if (c == 'b') {
  809f48:	e0bffd03 	ldbu	r2,-12(fp)
  809f4c:	10801898 	cmpnei	r2,r2,98
  809f50:	10000c1e 	bne	r2,zero,809f84 <xatoi+0x148>
        radix = 2;
  809f54:	00800084 	movi	r2,2
  809f58:	e0bffd45 	stb	r2,-11(fp)
        c = *(++(*str));
  809f5c:	e0bffe17 	ldw	r2,-8(fp)
  809f60:	10800017 	ldw	r2,0(r2)
  809f64:	10c00044 	addi	r3,r2,1
  809f68:	e0bffe17 	ldw	r2,-8(fp)
  809f6c:	10c00015 	stw	r3,0(r2)
  809f70:	e0bffe17 	ldw	r2,-8(fp)
  809f74:	10800017 	ldw	r2,0(r2)
  809f78:	10800003 	ldbu	r2,0(r2)
  809f7c:	e0bffd05 	stb	r2,-12(fp)
  809f80:	00001506 	br	809fd8 <xatoi+0x19c>
      } else {
        if ((c >= '0')&&(c <= '9'))
  809f84:	e0bffd03 	ldbu	r2,-12(fp)
  809f88:	10800c30 	cmpltui	r2,r2,48
  809f8c:	1000061e 	bne	r2,zero,809fa8 <xatoi+0x16c>
  809f90:	e0bffd03 	ldbu	r2,-12(fp)
  809f94:	10800ea8 	cmpgeui	r2,r2,58
  809f98:	1000031e 	bne	r2,zero,809fa8 <xatoi+0x16c>
          radix = 8;
  809f9c:	00800204 	movi	r2,8
  809fa0:	e0bffd45 	stb	r2,-11(fp)
  809fa4:	00000c06 	br	809fd8 <xatoi+0x19c>
        else
          return 0;
  809fa8:	0005883a 	mov	r2,zero
  809fac:	00004006 	br	80a0b0 <xatoi+0x274>
      }
    }
  } else {
    if ((c < '1')||(c > '9'))
  809fb0:	e0bffd03 	ldbu	r2,-12(fp)
  809fb4:	10800c70 	cmpltui	r2,r2,49
  809fb8:	1000031e 	bne	r2,zero,809fc8 <xatoi+0x18c>
  809fbc:	e0bffd03 	ldbu	r2,-12(fp)
  809fc0:	10800eb0 	cmpltui	r2,r2,58
  809fc4:	1000021e 	bne	r2,zero,809fd0 <xatoi+0x194>
      return 0;
  809fc8:	0005883a 	mov	r2,zero
  809fcc:	00003806 	br	80a0b0 <xatoi+0x274>
    radix = 10;
  809fd0:	00800284 	movi	r2,10
  809fd4:	e0bffd45 	stb	r2,-11(fp)
  }
  val = 0;
  809fd8:	e03ffc15 	stw	zero,-16(fp)
  while (c > ' ') {
  809fdc:	00002806 	br	80a080 <xatoi+0x244>
    if (c >= 'a') c -= 0x20;
  809fe0:	e0bffd03 	ldbu	r2,-12(fp)
  809fe4:	10801870 	cmpltui	r2,r2,97
  809fe8:	1000031e 	bne	r2,zero,809ff8 <xatoi+0x1bc>
  809fec:	e0bffd03 	ldbu	r2,-12(fp)
  809ff0:	10bff804 	addi	r2,r2,-32
  809ff4:	e0bffd05 	stb	r2,-12(fp)
    c -= '0';
  809ff8:	e0bffd03 	ldbu	r2,-12(fp)
  809ffc:	10bff404 	addi	r2,r2,-48
  80a000:	e0bffd05 	stb	r2,-12(fp)
    if (c >= 17) {
  80a004:	e0bffd03 	ldbu	r2,-12(fp)
  80a008:	10800470 	cmpltui	r2,r2,17
  80a00c:	1000081e 	bne	r2,zero,80a030 <xatoi+0x1f4>
      c -= 7;
  80a010:	e0bffd03 	ldbu	r2,-12(fp)
  80a014:	10bffe44 	addi	r2,r2,-7
  80a018:	e0bffd05 	stb	r2,-12(fp)
      if (c <= 9) return 0;
  80a01c:	e0bffd03 	ldbu	r2,-12(fp)
  80a020:	108002a8 	cmpgeui	r2,r2,10
  80a024:	1000021e 	bne	r2,zero,80a030 <xatoi+0x1f4>
  80a028:	0005883a 	mov	r2,zero
  80a02c:	00002006 	br	80a0b0 <xatoi+0x274>
    }
    if (c >= radix) return 0;
  80a030:	e0fffd03 	ldbu	r3,-12(fp)
  80a034:	e0bffd43 	ldbu	r2,-11(fp)
  80a038:	18800236 	bltu	r3,r2,80a044 <xatoi+0x208>
  80a03c:	0005883a 	mov	r2,zero
  80a040:	00001b06 	br	80a0b0 <xatoi+0x274>
    val = val * radix + c;
  80a044:	e0fffd43 	ldbu	r3,-11(fp)
  80a048:	e0bffc17 	ldw	r2,-16(fp)
  80a04c:	1887383a 	mul	r3,r3,r2
  80a050:	e0bffd03 	ldbu	r2,-12(fp)
  80a054:	1885883a 	add	r2,r3,r2
  80a058:	e0bffc15 	stw	r2,-16(fp)
    c = *(++(*str));
  80a05c:	e0bffe17 	ldw	r2,-8(fp)
  80a060:	10800017 	ldw	r2,0(r2)
  80a064:	10c00044 	addi	r3,r2,1
  80a068:	e0bffe17 	ldw	r2,-8(fp)
  80a06c:	10c00015 	stw	r3,0(r2)
  80a070:	e0bffe17 	ldw	r2,-8(fp)
  80a074:	10800017 	ldw	r2,0(r2)
  80a078:	10800003 	ldbu	r2,0(r2)
  80a07c:	e0bffd05 	stb	r2,-12(fp)
    if ((c < '1')||(c > '9'))
      return 0;
    radix = 10;
  }
  val = 0;
  while (c > ' ') {
  80a080:	e0bffd03 	ldbu	r2,-12(fp)
  80a084:	10800868 	cmpgeui	r2,r2,33
  80a088:	103fd51e 	bne	r2,zero,809fe0 <__alt_data_end+0xff809fe0>
    }
    if (c >= radix) return 0;
    val = val * radix + c;
    c = *(++(*str));
  }
  if (s) val = -val;
  80a08c:	e0bffd83 	ldbu	r2,-10(fp)
  80a090:	10000326 	beq	r2,zero,80a0a0 <xatoi+0x264>
  80a094:	e0bffc17 	ldw	r2,-16(fp)
  80a098:	0085c83a 	sub	r2,zero,r2
  80a09c:	e0bffc15 	stw	r2,-16(fp)
  *res = val;
  80a0a0:	e0fffc17 	ldw	r3,-16(fp)
  80a0a4:	e0bfff17 	ldw	r2,-4(fp)
  80a0a8:	10c00015 	stw	r3,0(r2)
  return 1;
  80a0ac:	00800044 	movi	r2,1
}
  80a0b0:	e037883a 	mov	sp,fp
  80a0b4:	df000017 	ldw	fp,0(sp)
  80a0b8:	dec00104 	addi	sp,sp,4
  80a0bc:	f800283a 	ret

0080a0c0 <xputc>:

void xputc (char c)
{
  80a0c0:	defffd04 	addi	sp,sp,-12
  80a0c4:	dfc00215 	stw	ra,8(sp)
  80a0c8:	df000115 	stw	fp,4(sp)
  80a0cc:	df000104 	addi	fp,sp,4
  80a0d0:	2005883a 	mov	r2,r4
  80a0d4:	e0bfff05 	stb	r2,-4(fp)
  if (c == '\n') uart0_put('\r');
  80a0d8:	e0bfff07 	ldb	r2,-4(fp)
  80a0dc:	10800298 	cmpnei	r2,r2,10
  80a0e0:	1000021e 	bne	r2,zero,80a0ec <xputc+0x2c>
  80a0e4:	01000344 	movi	r4,13
  80a0e8:	080a7d40 	call	80a7d4 <uart0_put>
  uart0_put(c);
  80a0ec:	e0bfff03 	ldbu	r2,-4(fp)
  80a0f0:	10803fcc 	andi	r2,r2,255
  80a0f4:	1009883a 	mov	r4,r2
  80a0f8:	080a7d40 	call	80a7d4 <uart0_put>
}
  80a0fc:	e037883a 	mov	sp,fp
  80a100:	dfc00117 	ldw	ra,4(sp)
  80a104:	df000017 	ldw	fp,0(sp)
  80a108:	dec00204 	addi	sp,sp,8
  80a10c:	f800283a 	ret

0080a110 <xputs>:

void xputs (const char* str)
{
  80a110:	defffd04 	addi	sp,sp,-12
  80a114:	dfc00215 	stw	ra,8(sp)
  80a118:	df000115 	stw	fp,4(sp)
  80a11c:	df000104 	addi	fp,sp,4
  80a120:	e13fff15 	stw	r4,-4(fp)
  while (*str)
  80a124:	00000906 	br	80a14c <xputs+0x3c>
    xputc(*str++);
  80a128:	e0bfff17 	ldw	r2,-4(fp)
  80a12c:	10c00044 	addi	r3,r2,1
  80a130:	e0ffff15 	stw	r3,-4(fp)
  80a134:	10800003 	ldbu	r2,0(r2)
  80a138:	10803fcc 	andi	r2,r2,255
  80a13c:	1080201c 	xori	r2,r2,128
  80a140:	10bfe004 	addi	r2,r2,-128
  80a144:	1009883a 	mov	r4,r2
  80a148:	080a0c00 	call	80a0c0 <xputc>
  uart0_put(c);
}

void xputs (const char* str)
{
  while (*str)
  80a14c:	e0bfff17 	ldw	r2,-4(fp)
  80a150:	10800003 	ldbu	r2,0(r2)
  80a154:	10803fcc 	andi	r2,r2,255
  80a158:	1080201c 	xori	r2,r2,128
  80a15c:	10bfe004 	addi	r2,r2,-128
  80a160:	103ff11e 	bne	r2,zero,80a128 <__alt_data_end+0xff80a128>
    xputc(*str++);
}
  80a164:	e037883a 	mov	sp,fp
  80a168:	dfc00117 	ldw	ra,4(sp)
  80a16c:	df000017 	ldw	fp,0(sp)
  80a170:	dec00204 	addi	sp,sp,8
  80a174:	f800283a 	ret

0080a178 <xitoa>:




void xitoa (signed long val, signed char radix, signed char len)
{
  80a178:	defff304 	addi	sp,sp,-52
  80a17c:	dfc00c15 	stw	ra,48(sp)
  80a180:	df000b15 	stw	fp,44(sp)
  80a184:	df000b04 	addi	fp,sp,44
  80a188:	e13ffd15 	stw	r4,-12(fp)
  80a18c:	2807883a 	mov	r3,r5
  80a190:	3005883a 	mov	r2,r6
  80a194:	e0fffe05 	stb	r3,-8(fp)
  80a198:	e0bfff05 	stb	r2,-4(fp)
  unsigned char c, r, sgn = 0, pad = ' ';
  80a19c:	e03ff545 	stb	zero,-43(fp)
  80a1a0:	00800804 	movi	r2,32
  80a1a4:	e0bff585 	stb	r2,-42(fp)
  unsigned char s[20], i = 0;
  80a1a8:	e03ff5c5 	stb	zero,-41(fp)
  unsigned long v;


  if (radix < 0) {
  80a1ac:	e0bffe07 	ldb	r2,-8(fp)
  80a1b0:	10000a0e 	bge	r2,zero,80a1dc <xitoa+0x64>
    radix = -radix;
  80a1b4:	e0bffe03 	ldbu	r2,-8(fp)
  80a1b8:	0085c83a 	sub	r2,zero,r2
  80a1bc:	e0bffe05 	stb	r2,-8(fp)
    if (val < 0) {
  80a1c0:	e0bffd17 	ldw	r2,-12(fp)
  80a1c4:	1000050e 	bge	r2,zero,80a1dc <xitoa+0x64>
      val = -val;
  80a1c8:	e0bffd17 	ldw	r2,-12(fp)
  80a1cc:	0085c83a 	sub	r2,zero,r2
  80a1d0:	e0bffd15 	stw	r2,-12(fp)
      sgn = '-';
  80a1d4:	00800b44 	movi	r2,45
  80a1d8:	e0bff545 	stb	r2,-43(fp)
    }
  }
  v = val;
  80a1dc:	e0bffd17 	ldw	r2,-12(fp)
  80a1e0:	e0bff615 	stw	r2,-40(fp)
  r = radix;
  80a1e4:	e0bffe03 	ldbu	r2,-8(fp)
  80a1e8:	e0bff705 	stb	r2,-36(fp)
  if (len < 0) {
  80a1ec:	e0bfff07 	ldb	r2,-4(fp)
  80a1f0:	1000050e 	bge	r2,zero,80a208 <xitoa+0x90>
    len = -len;
  80a1f4:	e0bfff03 	ldbu	r2,-4(fp)
  80a1f8:	0085c83a 	sub	r2,zero,r2
  80a1fc:	e0bfff05 	stb	r2,-4(fp)
    pad = '0';
  80a200:	00800c04 	movi	r2,48
  80a204:	e0bff585 	stb	r2,-42(fp)
  }
  if (len > 20) return;
  80a208:	e0bfff07 	ldb	r2,-4(fp)
  80a20c:	10800550 	cmplti	r2,r2,21
  80a210:	10004226 	beq	r2,zero,80a31c <xitoa+0x1a4>
  do {
    c = (unsigned char)(v % r);
  80a214:	e0bff703 	ldbu	r2,-36(fp)
  80a218:	e0fff617 	ldw	r3,-40(fp)
  80a21c:	1809883a 	mov	r4,r3
  80a220:	100b883a 	mov	r5,r2
  80a224:	080a9880 	call	80a988 <__umodsi3>
  80a228:	e0bff505 	stb	r2,-44(fp)
    if (c >= 10) c += 7;
  80a22c:	e0bff503 	ldbu	r2,-44(fp)
  80a230:	108002b0 	cmpltui	r2,r2,10
  80a234:	1000031e 	bne	r2,zero,80a244 <xitoa+0xcc>
  80a238:	e0bff503 	ldbu	r2,-44(fp)
  80a23c:	108001c4 	addi	r2,r2,7
  80a240:	e0bff505 	stb	r2,-44(fp)
    c += '0';
  80a244:	e0bff503 	ldbu	r2,-44(fp)
  80a248:	10800c04 	addi	r2,r2,48
  80a24c:	e0bff505 	stb	r2,-44(fp)
    s[i++] = c;
  80a250:	e0bff5c3 	ldbu	r2,-41(fp)
  80a254:	10c00044 	addi	r3,r2,1
  80a258:	e0fff5c5 	stb	r3,-41(fp)
  80a25c:	10803fcc 	andi	r2,r2,255
  80a260:	e0fff744 	addi	r3,fp,-35
  80a264:	1885883a 	add	r2,r3,r2
  80a268:	e0fff503 	ldbu	r3,-44(fp)
  80a26c:	10c00005 	stb	r3,0(r2)
    v /= r;
  80a270:	e0bff703 	ldbu	r2,-36(fp)
  80a274:	e13ff617 	ldw	r4,-40(fp)
  80a278:	100b883a 	mov	r5,r2
  80a27c:	080a9800 	call	80a980 <__udivsi3>
  80a280:	e0bff615 	stw	r2,-40(fp)
  } while (v);
  80a284:	e0bff617 	ldw	r2,-40(fp)
  80a288:	103fe21e 	bne	r2,zero,80a214 <__alt_data_end+0xff80a214>
  if (sgn) s[i++] = sgn;
  80a28c:	e0bff543 	ldbu	r2,-43(fp)
  80a290:	10000826 	beq	r2,zero,80a2b4 <xitoa+0x13c>
  80a294:	e0bff5c3 	ldbu	r2,-41(fp)
  80a298:	10c00044 	addi	r3,r2,1
  80a29c:	e0fff5c5 	stb	r3,-41(fp)
  80a2a0:	10803fcc 	andi	r2,r2,255
  80a2a4:	e0fff744 	addi	r3,fp,-35
  80a2a8:	1885883a 	add	r2,r3,r2
  80a2ac:	e0fff543 	ldbu	r3,-43(fp)
  80a2b0:	10c00005 	stb	r3,0(r2)
  while (i < len)
  80a2b4:	00000806 	br	80a2d8 <xitoa+0x160>
    s[i++] = pad;
  80a2b8:	e0bff5c3 	ldbu	r2,-41(fp)
  80a2bc:	10c00044 	addi	r3,r2,1
  80a2c0:	e0fff5c5 	stb	r3,-41(fp)
  80a2c4:	10803fcc 	andi	r2,r2,255
  80a2c8:	e0fff744 	addi	r3,fp,-35
  80a2cc:	1885883a 	add	r2,r3,r2
  80a2d0:	e0fff583 	ldbu	r3,-42(fp)
  80a2d4:	10c00005 	stb	r3,0(r2)
    c += '0';
    s[i++] = c;
    v /= r;
  } while (v);
  if (sgn) s[i++] = sgn;
  while (i < len)
  80a2d8:	e0fff5c3 	ldbu	r3,-41(fp)
  80a2dc:	e0bfff07 	ldb	r2,-4(fp)
  80a2e0:	18bff516 	blt	r3,r2,80a2b8 <__alt_data_end+0xff80a2b8>
    s[i++] = pad;
  do
    xputc(s[--i]);
  80a2e4:	e0bff5c3 	ldbu	r2,-41(fp)
  80a2e8:	10bfffc4 	addi	r2,r2,-1
  80a2ec:	e0bff5c5 	stb	r2,-41(fp)
  80a2f0:	e0bff5c3 	ldbu	r2,-41(fp)
  80a2f4:	e0fff744 	addi	r3,fp,-35
  80a2f8:	1885883a 	add	r2,r3,r2
  80a2fc:	10800003 	ldbu	r2,0(r2)
  80a300:	10803fcc 	andi	r2,r2,255
  80a304:	1080201c 	xori	r2,r2,128
  80a308:	10bfe004 	addi	r2,r2,-128
  80a30c:	1009883a 	mov	r4,r2
  80a310:	080a0c00 	call	80a0c0 <xputc>
  while (i);
  80a314:	e0bff5c3 	ldbu	r2,-41(fp)
  80a318:	103ff21e 	bne	r2,zero,80a2e4 <__alt_data_end+0xff80a2e4>
}
  80a31c:	e037883a 	mov	sp,fp
  80a320:	dfc00117 	ldw	ra,4(sp)
  80a324:	df000017 	ldw	fp,0(sp)
  80a328:	dec00204 	addi	sp,sp,8
  80a32c:	f800283a 	ret

0080a330 <xprintf>:




void xprintf (const char* str, ...)
{
  80a330:	defff704 	addi	sp,sp,-36
  80a334:	dfc00515 	stw	ra,20(sp)
  80a338:	df000415 	stw	fp,16(sp)
  80a33c:	df000404 	addi	fp,sp,16
  80a340:	e1400215 	stw	r5,8(fp)
  80a344:	e1800315 	stw	r6,12(fp)
  80a348:	e1c00415 	stw	r7,16(fp)
  80a34c:	e13fff15 	stw	r4,-4(fp)
  va_list arp;
  char d, r, w, s, l;


  va_start(arp, str);
  80a350:	e0800204 	addi	r2,fp,8
  80a354:	e0bffe15 	stw	r2,-8(fp)

  while ((d = *str++) != 0) {
  80a358:	00009406 	br	80a5ac <xprintf+0x27c>
    if (d != '%') {
  80a35c:	e0bffc07 	ldb	r2,-16(fp)
  80a360:	10800960 	cmpeqi	r2,r2,37
  80a364:	1000041e 	bne	r2,zero,80a378 <xprintf+0x48>
      xputc(d); continue;
  80a368:	e0bffc07 	ldb	r2,-16(fp)
  80a36c:	1009883a 	mov	r4,r2
  80a370:	080a0c00 	call	80a0c0 <xputc>
  80a374:	00008d06 	br	80a5ac <xprintf+0x27c>
    }
    d = *str++; w = r = s = l = 0;
  80a378:	e0bfff17 	ldw	r2,-4(fp)
  80a37c:	10c00044 	addi	r3,r2,1
  80a380:	e0ffff15 	stw	r3,-4(fp)
  80a384:	10800003 	ldbu	r2,0(r2)
  80a388:	e0bffc05 	stb	r2,-16(fp)
  80a38c:	e03ffd05 	stb	zero,-12(fp)
  80a390:	e0bffd03 	ldbu	r2,-12(fp)
  80a394:	e0bffcc5 	stb	r2,-13(fp)
  80a398:	e0bffcc3 	ldbu	r2,-13(fp)
  80a39c:	e0bffc45 	stb	r2,-15(fp)
  80a3a0:	e0bffc43 	ldbu	r2,-15(fp)
  80a3a4:	e0bffc85 	stb	r2,-14(fp)
    if (d == '0') {
  80a3a8:	e0bffc07 	ldb	r2,-16(fp)
  80a3ac:	10800c18 	cmpnei	r2,r2,48
  80a3b0:	1000071e 	bne	r2,zero,80a3d0 <xprintf+0xa0>
      d = *str++; s = 1;
  80a3b4:	e0bfff17 	ldw	r2,-4(fp)
  80a3b8:	10c00044 	addi	r3,r2,1
  80a3bc:	e0ffff15 	stw	r3,-4(fp)
  80a3c0:	10800003 	ldbu	r2,0(r2)
  80a3c4:	e0bffc05 	stb	r2,-16(fp)
  80a3c8:	00800044 	movi	r2,1
  80a3cc:	e0bffcc5 	stb	r2,-13(fp)
    }
    while ((d >= '0')&&(d <= '9')) {
  80a3d0:	00000f06 	br	80a410 <xprintf+0xe0>
      w += w * 10 + (d - '0');
  80a3d4:	e0bffc83 	ldbu	r2,-14(fp)
  80a3d8:	108002a4 	muli	r2,r2,10
  80a3dc:	1007883a 	mov	r3,r2
  80a3e0:	e0bffc03 	ldbu	r2,-16(fp)
  80a3e4:	1885883a 	add	r2,r3,r2
  80a3e8:	1007883a 	mov	r3,r2
  80a3ec:	e0bffc83 	ldbu	r2,-14(fp)
  80a3f0:	1885883a 	add	r2,r3,r2
  80a3f4:	10bff404 	addi	r2,r2,-48
  80a3f8:	e0bffc85 	stb	r2,-14(fp)
      d = *str++;
  80a3fc:	e0bfff17 	ldw	r2,-4(fp)
  80a400:	10c00044 	addi	r3,r2,1
  80a404:	e0ffff15 	stw	r3,-4(fp)
  80a408:	10800003 	ldbu	r2,0(r2)
  80a40c:	e0bffc05 	stb	r2,-16(fp)
    }
    d = *str++; w = r = s = l = 0;
    if (d == '0') {
      d = *str++; s = 1;
    }
    while ((d >= '0')&&(d <= '9')) {
  80a410:	e0bffc07 	ldb	r2,-16(fp)
  80a414:	10800c10 	cmplti	r2,r2,48
  80a418:	1000031e 	bne	r2,zero,80a428 <xprintf+0xf8>
  80a41c:	e0bffc07 	ldb	r2,-16(fp)
  80a420:	10800e90 	cmplti	r2,r2,58
  80a424:	103feb1e 	bne	r2,zero,80a3d4 <__alt_data_end+0xff80a3d4>
      w += w * 10 + (d - '0');
      d = *str++;
    }
    if (s) w = -w;
  80a428:	e0bffcc7 	ldb	r2,-13(fp)
  80a42c:	10000326 	beq	r2,zero,80a43c <xprintf+0x10c>
  80a430:	e0bffc83 	ldbu	r2,-14(fp)
  80a434:	0085c83a 	sub	r2,zero,r2
  80a438:	e0bffc85 	stb	r2,-14(fp)
    if (d == 'l') {
  80a43c:	e0bffc07 	ldb	r2,-16(fp)
  80a440:	10801b18 	cmpnei	r2,r2,108
  80a444:	1000071e 	bne	r2,zero,80a464 <xprintf+0x134>
      l = 1;
  80a448:	00800044 	movi	r2,1
  80a44c:	e0bffd05 	stb	r2,-12(fp)
      d = *str++;
  80a450:	e0bfff17 	ldw	r2,-4(fp)
  80a454:	10c00044 	addi	r3,r2,1
  80a458:	e0ffff15 	stw	r3,-4(fp)
  80a45c:	10800003 	ldbu	r2,0(r2)
  80a460:	e0bffc05 	stb	r2,-16(fp)
    }
    if (!d) break;
  80a464:	e0bffc07 	ldb	r2,-16(fp)
  80a468:	1000011e 	bne	r2,zero,80a470 <xprintf+0x140>
  80a46c:	00005606 	br	80a5c8 <xprintf+0x298>
    if (d == 's') {
  80a470:	e0bffc07 	ldb	r2,-16(fp)
  80a474:	10801cd8 	cmpnei	r2,r2,115
  80a478:	1000071e 	bne	r2,zero,80a498 <xprintf+0x168>
      xputs(va_arg(arp, char*));
  80a47c:	e0bffe17 	ldw	r2,-8(fp)
  80a480:	10c00104 	addi	r3,r2,4
  80a484:	e0fffe15 	stw	r3,-8(fp)
  80a488:	10800017 	ldw	r2,0(r2)
  80a48c:	1009883a 	mov	r4,r2
  80a490:	080a1100 	call	80a110 <xputs>
      continue;
  80a494:	00004506 	br	80a5ac <xprintf+0x27c>
    }
    if (d == 'c') {
  80a498:	e0bffc07 	ldb	r2,-16(fp)
  80a49c:	108018d8 	cmpnei	r2,r2,99
  80a4a0:	10000a1e 	bne	r2,zero,80a4cc <xprintf+0x19c>
      // xputc(va_arg(arp, char));
      xputc(va_arg(arp, int));
  80a4a4:	e0bffe17 	ldw	r2,-8(fp)
  80a4a8:	10c00104 	addi	r3,r2,4
  80a4ac:	e0fffe15 	stw	r3,-8(fp)
  80a4b0:	10800017 	ldw	r2,0(r2)
  80a4b4:	10803fcc 	andi	r2,r2,255
  80a4b8:	1080201c 	xori	r2,r2,128
  80a4bc:	10bfe004 	addi	r2,r2,-128
  80a4c0:	1009883a 	mov	r4,r2
  80a4c4:	080a0c00 	call	80a0c0 <xputc>
      continue;
  80a4c8:	00003806 	br	80a5ac <xprintf+0x27c>
    }
    if (d == 'u') r = 10;
  80a4cc:	e0bffc07 	ldb	r2,-16(fp)
  80a4d0:	10801d58 	cmpnei	r2,r2,117
  80a4d4:	1000021e 	bne	r2,zero,80a4e0 <xprintf+0x1b0>
  80a4d8:	00800284 	movi	r2,10
  80a4dc:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'd') r = -10;
  80a4e0:	e0bffc07 	ldb	r2,-16(fp)
  80a4e4:	10801918 	cmpnei	r2,r2,100
  80a4e8:	1000021e 	bne	r2,zero,80a4f4 <xprintf+0x1c4>
  80a4ec:	00bffd84 	movi	r2,-10
  80a4f0:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'X') r = 16;
  80a4f4:	e0bffc07 	ldb	r2,-16(fp)
  80a4f8:	10801618 	cmpnei	r2,r2,88
  80a4fc:	1000021e 	bne	r2,zero,80a508 <xprintf+0x1d8>
  80a500:	00800404 	movi	r2,16
  80a504:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'b') r = 2;
  80a508:	e0bffc07 	ldb	r2,-16(fp)
  80a50c:	10801898 	cmpnei	r2,r2,98
  80a510:	1000021e 	bne	r2,zero,80a51c <xprintf+0x1ec>
  80a514:	00800084 	movi	r2,2
  80a518:	e0bffc45 	stb	r2,-15(fp)
    if (!r) break;
  80a51c:	e0bffc47 	ldb	r2,-15(fp)
  80a520:	1000011e 	bne	r2,zero,80a528 <xprintf+0x1f8>
  80a524:	00002806 	br	80a5c8 <xprintf+0x298>
    if (l) {
  80a528:	e0bffd07 	ldb	r2,-12(fp)
  80a52c:	10000a26 	beq	r2,zero,80a558 <xprintf+0x228>
      xitoa((long)va_arg(arp, long), r, w);
  80a530:	e0bffe17 	ldw	r2,-8(fp)
  80a534:	10c00104 	addi	r3,r2,4
  80a538:	e0fffe15 	stw	r3,-8(fp)
  80a53c:	11000017 	ldw	r4,0(r2)
  80a540:	e0fffc47 	ldb	r3,-15(fp)
  80a544:	e0bffc87 	ldb	r2,-14(fp)
  80a548:	180b883a 	mov	r5,r3
  80a54c:	100d883a 	mov	r6,r2
  80a550:	080a1780 	call	80a178 <xitoa>
  80a554:	00001506 	br	80a5ac <xprintf+0x27c>
    } else {
      if (r > 0)
  80a558:	e0bffc47 	ldb	r2,-15(fp)
  80a55c:	00800a0e 	bge	zero,r2,80a588 <xprintf+0x258>
        xitoa((unsigned long)va_arg(arp, int), r, w);
  80a560:	e0bffe17 	ldw	r2,-8(fp)
  80a564:	10c00104 	addi	r3,r2,4
  80a568:	e0fffe15 	stw	r3,-8(fp)
  80a56c:	11000017 	ldw	r4,0(r2)
  80a570:	e0fffc47 	ldb	r3,-15(fp)
  80a574:	e0bffc87 	ldb	r2,-14(fp)
  80a578:	180b883a 	mov	r5,r3
  80a57c:	100d883a 	mov	r6,r2
  80a580:	080a1780 	call	80a178 <xitoa>
  80a584:	00000906 	br	80a5ac <xprintf+0x27c>
      else
        xitoa((long)va_arg(arp, int), r, w);
  80a588:	e0bffe17 	ldw	r2,-8(fp)
  80a58c:	10c00104 	addi	r3,r2,4
  80a590:	e0fffe15 	stw	r3,-8(fp)
  80a594:	11000017 	ldw	r4,0(r2)
  80a598:	e0fffc47 	ldb	r3,-15(fp)
  80a59c:	e0bffc87 	ldb	r2,-14(fp)
  80a5a0:	180b883a 	mov	r5,r3
  80a5a4:	100d883a 	mov	r6,r2
  80a5a8:	080a1780 	call	80a178 <xitoa>
  char d, r, w, s, l;


  va_start(arp, str);

  while ((d = *str++) != 0) {
  80a5ac:	e0bfff17 	ldw	r2,-4(fp)
  80a5b0:	10c00044 	addi	r3,r2,1
  80a5b4:	e0ffff15 	stw	r3,-4(fp)
  80a5b8:	10800003 	ldbu	r2,0(r2)
  80a5bc:	e0bffc05 	stb	r2,-16(fp)
  80a5c0:	e0bffc07 	ldb	r2,-16(fp)
  80a5c4:	103f651e 	bne	r2,zero,80a35c <__alt_data_end+0xff80a35c>
        xitoa((long)va_arg(arp, int), r, w);
    }
  }

  va_end(arp);
}
  80a5c8:	e037883a 	mov	sp,fp
  80a5cc:	dfc00117 	ldw	ra,4(sp)
  80a5d0:	df000017 	ldw	fp,0(sp)
  80a5d4:	dec00504 	addi	sp,sp,20
  80a5d8:	f800283a 	ret

0080a5dc <put_dump>:




void put_dump (const unsigned char *buff, unsigned long ofs, int cnt)
{
  80a5dc:	defffa04 	addi	sp,sp,-24
  80a5e0:	dfc00515 	stw	ra,20(sp)
  80a5e4:	df000415 	stw	fp,16(sp)
  80a5e8:	df000404 	addi	fp,sp,16
  80a5ec:	e13ffd15 	stw	r4,-12(fp)
  80a5f0:	e17ffe15 	stw	r5,-8(fp)
  80a5f4:	e1bfff15 	stw	r6,-4(fp)
  unsigned char n;


  xprintf("%08lX ", ofs);
  80a5f8:	010020b4 	movhi	r4,130
  80a5fc:	21331704 	addi	r4,r4,-13220
  80a600:	e17ffe17 	ldw	r5,-8(fp)
  80a604:	080a3300 	call	80a330 <xprintf>
  for(n = 0; n < cnt; n++)
  80a608:	e03ffc05 	stb	zero,-16(fp)
  80a60c:	00000c06 	br	80a640 <put_dump+0x64>
    xprintf(" %02X", buff[n]);
  80a610:	e0bffc03 	ldbu	r2,-16(fp)
  80a614:	e0fffd17 	ldw	r3,-12(fp)
  80a618:	1885883a 	add	r2,r3,r2
  80a61c:	10800003 	ldbu	r2,0(r2)
  80a620:	10803fcc 	andi	r2,r2,255
  80a624:	010020b4 	movhi	r4,130
  80a628:	21331904 	addi	r4,r4,-13212
  80a62c:	100b883a 	mov	r5,r2
  80a630:	080a3300 	call	80a330 <xprintf>
{
  unsigned char n;


  xprintf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
  80a634:	e0bffc03 	ldbu	r2,-16(fp)
  80a638:	10800044 	addi	r2,r2,1
  80a63c:	e0bffc05 	stb	r2,-16(fp)
  80a640:	e0fffc03 	ldbu	r3,-16(fp)
  80a644:	e0bfff17 	ldw	r2,-4(fp)
  80a648:	18bff116 	blt	r3,r2,80a610 <__alt_data_end+0xff80a610>
    xprintf(" %02X", buff[n]);
  xputc(' ');
  80a64c:	01000804 	movi	r4,32
  80a650:	080a0c00 	call	80a0c0 <xputc>
  for(n = 0; n < cnt; n++) {
  80a654:	e03ffc05 	stb	zero,-16(fp)
  80a658:	00001d06 	br	80a6d0 <put_dump+0xf4>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
  80a65c:	e0bffc03 	ldbu	r2,-16(fp)
  80a660:	e0fffd17 	ldw	r3,-12(fp)
  80a664:	1885883a 	add	r2,r3,r2
  80a668:	10800003 	ldbu	r2,0(r2)
  80a66c:	10803fcc 	andi	r2,r2,255
  80a670:	10800830 	cmpltui	r2,r2,32
  80a674:	1000071e 	bne	r2,zero,80a694 <put_dump+0xb8>
  80a678:	e0bffc03 	ldbu	r2,-16(fp)
  80a67c:	e0fffd17 	ldw	r3,-12(fp)
  80a680:	1885883a 	add	r2,r3,r2
  80a684:	10800003 	ldbu	r2,0(r2)
  80a688:	10803fcc 	andi	r2,r2,255
  80a68c:	10801ff0 	cmpltui	r2,r2,127
  80a690:	1000031e 	bne	r2,zero,80a6a0 <put_dump+0xc4>
      xputc('.');
  80a694:	01000b84 	movi	r4,46
  80a698:	080a0c00 	call	80a0c0 <xputc>
  80a69c:	00000906 	br	80a6c4 <put_dump+0xe8>
    else
      xputc(buff[n]);
  80a6a0:	e0bffc03 	ldbu	r2,-16(fp)
  80a6a4:	e0fffd17 	ldw	r3,-12(fp)
  80a6a8:	1885883a 	add	r2,r3,r2
  80a6ac:	10800003 	ldbu	r2,0(r2)
  80a6b0:	10803fcc 	andi	r2,r2,255
  80a6b4:	1080201c 	xori	r2,r2,128
  80a6b8:	10bfe004 	addi	r2,r2,-128
  80a6bc:	1009883a 	mov	r4,r2
  80a6c0:	080a0c00 	call	80a0c0 <xputc>

  xprintf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
    xprintf(" %02X", buff[n]);
  xputc(' ');
  for(n = 0; n < cnt; n++) {
  80a6c4:	e0bffc03 	ldbu	r2,-16(fp)
  80a6c8:	10800044 	addi	r2,r2,1
  80a6cc:	e0bffc05 	stb	r2,-16(fp)
  80a6d0:	e0fffc03 	ldbu	r3,-16(fp)
  80a6d4:	e0bfff17 	ldw	r2,-4(fp)
  80a6d8:	18bfe016 	blt	r3,r2,80a65c <__alt_data_end+0xff80a65c>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
      xputc('.');
    else
      xputc(buff[n]);
  }
  xputc('\n');
  80a6dc:	01000284 	movi	r4,10
  80a6e0:	080a0c00 	call	80a0c0 <xputc>
}
  80a6e4:	e037883a 	mov	sp,fp
  80a6e8:	dfc00117 	ldw	ra,4(sp)
  80a6ec:	df000017 	ldw	fp,0(sp)
  80a6f0:	dec00204 	addi	sp,sp,8
  80a6f4:	f800283a 	ret

0080a6f8 <get_line>:




void get_line (char *buff, int len)
{
  80a6f8:	defffa04 	addi	sp,sp,-24
  80a6fc:	dfc00515 	stw	ra,20(sp)
  80a700:	df000415 	stw	fp,16(sp)
  80a704:	df000404 	addi	fp,sp,16
  80a708:	e13ffe15 	stw	r4,-8(fp)
  80a70c:	e17fff15 	stw	r5,-4(fp)
  char c;
  int idx = 0;
  80a710:	e03ffc15 	stw	zero,-16(fp)
//while(1);

  for (;;) {
    c = xgetc();
  80a714:	080a80c0 	call	80a80c <uart0_get>
  80a718:	e0bffd05 	stb	r2,-12(fp)
    //printf("%c",c);
    if (c == '\r')
  80a71c:	e0bffd07 	ldb	r2,-12(fp)
  80a720:	10800358 	cmpnei	r2,r2,13
  80a724:	1000011e 	bne	r2,zero,80a72c <get_line+0x34>
    	break;
  80a728:	00001906 	br	80a790 <get_line+0x98>
    if ((c == '\b') && idx) {
  80a72c:	e0bffd07 	ldb	r2,-12(fp)
  80a730:	10800218 	cmpnei	r2,r2,8
  80a734:	1000051e 	bne	r2,zero,80a74c <get_line+0x54>
  80a738:	e0bffc17 	ldw	r2,-16(fp)
  80a73c:	10000326 	beq	r2,zero,80a74c <get_line+0x54>
      idx--;
  80a740:	e0bffc17 	ldw	r2,-16(fp)
  80a744:	10bfffc4 	addi	r2,r2,-1
  80a748:	e0bffc15 	stw	r2,-16(fp)
    }
    if (((unsigned char)c >= ' ') && (idx < len - 1)) {
  80a74c:	e0bffd03 	ldbu	r2,-12(fp)
  80a750:	10803fcc 	andi	r2,r2,255
  80a754:	10800830 	cmpltui	r2,r2,32
  80a758:	10000c1e 	bne	r2,zero,80a78c <get_line+0x94>
  80a75c:	e0bfff17 	ldw	r2,-4(fp)
  80a760:	10bfffc4 	addi	r2,r2,-1
  80a764:	e0fffc17 	ldw	r3,-16(fp)
  80a768:	1880080e 	bge	r3,r2,80a78c <get_line+0x94>
    	//printf(" space ");
        buff[idx++] = c;
  80a76c:	e0bffc17 	ldw	r2,-16(fp)
  80a770:	10c00044 	addi	r3,r2,1
  80a774:	e0fffc15 	stw	r3,-16(fp)
  80a778:	1007883a 	mov	r3,r2
  80a77c:	e0bffe17 	ldw	r2,-8(fp)
  80a780:	10c5883a 	add	r2,r2,r3
  80a784:	e0fffd03 	ldbu	r3,-12(fp)
  80a788:	10c00005 	stb	r3,0(r2)
    }

  }
  80a78c:	003fe106 	br	80a714 <__alt_data_end+0xff80a714>
  buff[idx] = 0;
  80a790:	e0bffc17 	ldw	r2,-16(fp)
  80a794:	e0fffe17 	ldw	r3,-8(fp)
  80a798:	1885883a 	add	r2,r3,r2
  80a79c:	10000005 	stb	zero,0(r2)
  //xputc('\n');
}
  80a7a0:	e037883a 	mov	sp,fp
  80a7a4:	dfc00117 	ldw	ra,4(sp)
  80a7a8:	df000017 	ldw	fp,0(sp)
  80a7ac:	dec00204 	addi	sp,sp,8
  80a7b0:	f800283a 	ret

0080a7b4 <uart0_init>:
/*  In    : Baudrate                                                       */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void uart0_init (unsigned long Baudrate)
{
  80a7b4:	defffe04 	addi	sp,sp,-8
  80a7b8:	df000115 	stw	fp,4(sp)
  80a7bc:	df000104 	addi	fp,sp,4
  80a7c0:	e13fff15 	stw	r4,-4(fp)
//   /*
//    * Set baudrate
//    */
//   Divisor = (((UART_FREQ*10) / Baudrate) + 5) / 10;
//   IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, Divisor);
} /* uart0_init */
  80a7c4:	e037883a 	mov	sp,fp
  80a7c8:	df000017 	ldw	fp,0(sp)
  80a7cc:	dec00104 	addi	sp,sp,4
  80a7d0:	f800283a 	ret

0080a7d4 <uart0_put>:
/*  In    : Data                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void uart0_put (unsigned char ch)
{
  80a7d4:	defffd04 	addi	sp,sp,-12
  80a7d8:	dfc00215 	stw	ra,8(sp)
  80a7dc:	df000115 	stw	fp,4(sp)
  80a7e0:	df000104 	addi	fp,sp,4
  80a7e4:	2005883a 	mov	r2,r4
  80a7e8:	e0bfff05 	stb	r2,-4(fp)
//   {
//      status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
//   }
//   IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, ch);

		printf("%c",ch);
  80a7ec:	e0bfff03 	ldbu	r2,-4(fp)
  80a7f0:	1009883a 	mov	r4,r2
  80a7f4:	080c9f80 	call	80c9f8 <putchar>



} /* uart0_put */
  80a7f8:	e037883a 	mov	sp,fp
  80a7fc:	dfc00117 	ldw	ra,4(sp)
  80a800:	df000017 	ldw	fp,0(sp)
  80a804:	dec00204 	addi	sp,sp,8
  80a808:	f800283a 	ret

0080a80c <uart0_get>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
unsigned char uart0_get (void)
{
  80a80c:	defffd04 	addi	sp,sp,-12
  80a810:	dfc00215 	stw	ra,8(sp)
  80a814:	df000115 	stw	fp,4(sp)
  80a818:	df000104 	addi	fp,sp,4
//   //printf("%d",(char) data & 0xFF);
//
//      return ((char) data & 0xFF);


   ch = getc(stdin);
  80a81c:	008020b4 	movhi	r2,130
  80a820:	10bbcf04 	addi	r2,r2,-4292
  80a824:	10800017 	ldw	r2,0(r2)
  80a828:	10800117 	ldw	r2,4(r2)
  80a82c:	1009883a 	mov	r4,r2
  80a830:	080be200 	call	80be20 <getc>
  80a834:	e0bfff05 	stb	r2,-4(fp)
   if (ch == 10) ch = 13;
  80a838:	e0bfff07 	ldb	r2,-4(fp)
  80a83c:	10800298 	cmpnei	r2,r2,10
  80a840:	1000021e 	bne	r2,zero,80a84c <uart0_get+0x40>
  80a844:	00800344 	movi	r2,13
  80a848:	e0bfff05 	stb	r2,-4(fp)

   return(ch);
  80a84c:	e0bfff03 	ldbu	r2,-4(fp)

} /* uart0_get */
  80a850:	e037883a 	mov	sp,fp
  80a854:	dfc00117 	ldw	ra,4(sp)
  80a858:	df000017 	ldw	fp,0(sp)
  80a85c:	dec00204 	addi	sp,sp,8
  80a860:	f800283a 	ret

0080a864 <udivmodsi4>:
  80a864:	2900182e 	bgeu	r5,r4,80a8c8 <udivmodsi4+0x64>
  80a868:	28001716 	blt	r5,zero,80a8c8 <udivmodsi4+0x64>
  80a86c:	00800804 	movi	r2,32
  80a870:	00c00044 	movi	r3,1
  80a874:	00000206 	br	80a880 <udivmodsi4+0x1c>
  80a878:	10001126 	beq	r2,zero,80a8c0 <udivmodsi4+0x5c>
  80a87c:	28000516 	blt	r5,zero,80a894 <udivmodsi4+0x30>
  80a880:	294b883a 	add	r5,r5,r5
  80a884:	10bfffc4 	addi	r2,r2,-1
  80a888:	18c7883a 	add	r3,r3,r3
  80a88c:	293ffa36 	bltu	r5,r4,80a878 <__alt_data_end+0xff80a878>
  80a890:	18000b26 	beq	r3,zero,80a8c0 <udivmodsi4+0x5c>
  80a894:	0005883a 	mov	r2,zero
  80a898:	21400236 	bltu	r4,r5,80a8a4 <udivmodsi4+0x40>
  80a89c:	2149c83a 	sub	r4,r4,r5
  80a8a0:	10c4b03a 	or	r2,r2,r3
  80a8a4:	1806d07a 	srli	r3,r3,1
  80a8a8:	280ad07a 	srli	r5,r5,1
  80a8ac:	183ffa1e 	bne	r3,zero,80a898 <__alt_data_end+0xff80a898>
  80a8b0:	3000011e 	bne	r6,zero,80a8b8 <udivmodsi4+0x54>
  80a8b4:	f800283a 	ret
  80a8b8:	2005883a 	mov	r2,r4
  80a8bc:	f800283a 	ret
  80a8c0:	0005883a 	mov	r2,zero
  80a8c4:	003ffa06 	br	80a8b0 <__alt_data_end+0xff80a8b0>
  80a8c8:	00c00044 	movi	r3,1
  80a8cc:	003ff106 	br	80a894 <__alt_data_end+0xff80a894>

0080a8d0 <__divsi3>:
  80a8d0:	defffe04 	addi	sp,sp,-8
  80a8d4:	dfc00115 	stw	ra,4(sp)
  80a8d8:	dc000015 	stw	r16,0(sp)
  80a8dc:	20000b16 	blt	r4,zero,80a90c <__divsi3+0x3c>
  80a8e0:	0021883a 	mov	r16,zero
  80a8e4:	28000c16 	blt	r5,zero,80a918 <__divsi3+0x48>
  80a8e8:	000d883a 	mov	r6,zero
  80a8ec:	080a8640 	call	80a864 <udivmodsi4>
  80a8f0:	0407c83a 	sub	r3,zero,r16
  80a8f4:	1884f03a 	xor	r2,r3,r2
  80a8f8:	1405883a 	add	r2,r2,r16
  80a8fc:	dfc00117 	ldw	ra,4(sp)
  80a900:	dc000017 	ldw	r16,0(sp)
  80a904:	dec00204 	addi	sp,sp,8
  80a908:	f800283a 	ret
  80a90c:	0109c83a 	sub	r4,zero,r4
  80a910:	04000044 	movi	r16,1
  80a914:	283ff40e 	bge	r5,zero,80a8e8 <__alt_data_end+0xff80a8e8>
  80a918:	014bc83a 	sub	r5,zero,r5
  80a91c:	8400005c 	xori	r16,r16,1
  80a920:	003ff106 	br	80a8e8 <__alt_data_end+0xff80a8e8>

0080a924 <__modsi3>:
  80a924:	defffd04 	addi	sp,sp,-12
  80a928:	dfc00215 	stw	ra,8(sp)
  80a92c:	dc400115 	stw	r17,4(sp)
  80a930:	dc000015 	stw	r16,0(sp)
  80a934:	20000c16 	blt	r4,zero,80a968 <__modsi3+0x44>
  80a938:	0023883a 	mov	r17,zero
  80a93c:	0021883a 	mov	r16,zero
  80a940:	28000d16 	blt	r5,zero,80a978 <__modsi3+0x54>
  80a944:	01800044 	movi	r6,1
  80a948:	080a8640 	call	80a864 <udivmodsi4>
  80a94c:	1404f03a 	xor	r2,r2,r16
  80a950:	8885883a 	add	r2,r17,r2
  80a954:	dfc00217 	ldw	ra,8(sp)
  80a958:	dc400117 	ldw	r17,4(sp)
  80a95c:	dc000017 	ldw	r16,0(sp)
  80a960:	dec00304 	addi	sp,sp,12
  80a964:	f800283a 	ret
  80a968:	0109c83a 	sub	r4,zero,r4
  80a96c:	04400044 	movi	r17,1
  80a970:	043fffc4 	movi	r16,-1
  80a974:	283ff30e 	bge	r5,zero,80a944 <__alt_data_end+0xff80a944>
  80a978:	014bc83a 	sub	r5,zero,r5
  80a97c:	003ff106 	br	80a944 <__alt_data_end+0xff80a944>

0080a980 <__udivsi3>:
  80a980:	000d883a 	mov	r6,zero
  80a984:	080a8641 	jmpi	80a864 <udivmodsi4>

0080a988 <__umodsi3>:
  80a988:	01800044 	movi	r6,1
  80a98c:	080a8641 	jmpi	80a864 <udivmodsi4>

0080a990 <_fclose_r>:
  80a990:	28003926 	beq	r5,zero,80aa78 <_fclose_r+0xe8>
  80a994:	defffc04 	addi	sp,sp,-16
  80a998:	dc400115 	stw	r17,4(sp)
  80a99c:	dc000015 	stw	r16,0(sp)
  80a9a0:	dfc00315 	stw	ra,12(sp)
  80a9a4:	dc800215 	stw	r18,8(sp)
  80a9a8:	2023883a 	mov	r17,r4
  80a9ac:	2821883a 	mov	r16,r5
  80a9b0:	20000226 	beq	r4,zero,80a9bc <_fclose_r+0x2c>
  80a9b4:	20800e17 	ldw	r2,56(r4)
  80a9b8:	10002726 	beq	r2,zero,80aa58 <_fclose_r+0xc8>
  80a9bc:	8080030f 	ldh	r2,12(r16)
  80a9c0:	1000071e 	bne	r2,zero,80a9e0 <_fclose_r+0x50>
  80a9c4:	0005883a 	mov	r2,zero
  80a9c8:	dfc00317 	ldw	ra,12(sp)
  80a9cc:	dc800217 	ldw	r18,8(sp)
  80a9d0:	dc400117 	ldw	r17,4(sp)
  80a9d4:	dc000017 	ldw	r16,0(sp)
  80a9d8:	dec00404 	addi	sp,sp,16
  80a9dc:	f800283a 	ret
  80a9e0:	8809883a 	mov	r4,r17
  80a9e4:	800b883a 	mov	r5,r16
  80a9e8:	080aa940 	call	80aa94 <__sflush_r>
  80a9ec:	1025883a 	mov	r18,r2
  80a9f0:	80800b17 	ldw	r2,44(r16)
  80a9f4:	10000426 	beq	r2,zero,80aa08 <_fclose_r+0x78>
  80a9f8:	81400717 	ldw	r5,28(r16)
  80a9fc:	8809883a 	mov	r4,r17
  80aa00:	103ee83a 	callr	r2
  80aa04:	10001616 	blt	r2,zero,80aa60 <_fclose_r+0xd0>
  80aa08:	8080030b 	ldhu	r2,12(r16)
  80aa0c:	1080200c 	andi	r2,r2,128
  80aa10:	1000151e 	bne	r2,zero,80aa68 <_fclose_r+0xd8>
  80aa14:	81400c17 	ldw	r5,48(r16)
  80aa18:	28000526 	beq	r5,zero,80aa30 <_fclose_r+0xa0>
  80aa1c:	80801004 	addi	r2,r16,64
  80aa20:	28800226 	beq	r5,r2,80aa2c <_fclose_r+0x9c>
  80aa24:	8809883a 	mov	r4,r17
  80aa28:	080b3440 	call	80b344 <_free_r>
  80aa2c:	80000c15 	stw	zero,48(r16)
  80aa30:	81401117 	ldw	r5,68(r16)
  80aa34:	28000326 	beq	r5,zero,80aa44 <_fclose_r+0xb4>
  80aa38:	8809883a 	mov	r4,r17
  80aa3c:	080b3440 	call	80b344 <_free_r>
  80aa40:	80001115 	stw	zero,68(r16)
  80aa44:	080b0880 	call	80b088 <__sfp_lock_acquire>
  80aa48:	8000030d 	sth	zero,12(r16)
  80aa4c:	080b08c0 	call	80b08c <__sfp_lock_release>
  80aa50:	9005883a 	mov	r2,r18
  80aa54:	003fdc06 	br	80a9c8 <__alt_data_end+0xff80a9c8>
  80aa58:	080b0780 	call	80b078 <__sinit>
  80aa5c:	003fd706 	br	80a9bc <__alt_data_end+0xff80a9bc>
  80aa60:	04bfffc4 	movi	r18,-1
  80aa64:	003fe806 	br	80aa08 <__alt_data_end+0xff80aa08>
  80aa68:	81400417 	ldw	r5,16(r16)
  80aa6c:	8809883a 	mov	r4,r17
  80aa70:	080b3440 	call	80b344 <_free_r>
  80aa74:	003fe706 	br	80aa14 <__alt_data_end+0xff80aa14>
  80aa78:	0005883a 	mov	r2,zero
  80aa7c:	f800283a 	ret

0080aa80 <fclose>:
  80aa80:	008020b4 	movhi	r2,130
  80aa84:	10bbcf04 	addi	r2,r2,-4292
  80aa88:	200b883a 	mov	r5,r4
  80aa8c:	11000017 	ldw	r4,0(r2)
  80aa90:	080a9901 	jmpi	80a990 <_fclose_r>

0080aa94 <__sflush_r>:
  80aa94:	2880030b 	ldhu	r2,12(r5)
  80aa98:	defffb04 	addi	sp,sp,-20
  80aa9c:	dcc00315 	stw	r19,12(sp)
  80aaa0:	dc400115 	stw	r17,4(sp)
  80aaa4:	dfc00415 	stw	ra,16(sp)
  80aaa8:	dc800215 	stw	r18,8(sp)
  80aaac:	dc000015 	stw	r16,0(sp)
  80aab0:	10c0020c 	andi	r3,r2,8
  80aab4:	2823883a 	mov	r17,r5
  80aab8:	2027883a 	mov	r19,r4
  80aabc:	1800311e 	bne	r3,zero,80ab84 <__sflush_r+0xf0>
  80aac0:	28c00117 	ldw	r3,4(r5)
  80aac4:	10820014 	ori	r2,r2,2048
  80aac8:	2880030d 	sth	r2,12(r5)
  80aacc:	00c04b0e 	bge	zero,r3,80abfc <__sflush_r+0x168>
  80aad0:	8a000a17 	ldw	r8,40(r17)
  80aad4:	40002326 	beq	r8,zero,80ab64 <__sflush_r+0xd0>
  80aad8:	9c000017 	ldw	r16,0(r19)
  80aadc:	10c4000c 	andi	r3,r2,4096
  80aae0:	98000015 	stw	zero,0(r19)
  80aae4:	18004826 	beq	r3,zero,80ac08 <__sflush_r+0x174>
  80aae8:	89801417 	ldw	r6,80(r17)
  80aaec:	10c0010c 	andi	r3,r2,4
  80aaf0:	18000626 	beq	r3,zero,80ab0c <__sflush_r+0x78>
  80aaf4:	88c00117 	ldw	r3,4(r17)
  80aaf8:	88800c17 	ldw	r2,48(r17)
  80aafc:	30cdc83a 	sub	r6,r6,r3
  80ab00:	10000226 	beq	r2,zero,80ab0c <__sflush_r+0x78>
  80ab04:	88800f17 	ldw	r2,60(r17)
  80ab08:	308dc83a 	sub	r6,r6,r2
  80ab0c:	89400717 	ldw	r5,28(r17)
  80ab10:	9809883a 	mov	r4,r19
  80ab14:	000f883a 	mov	r7,zero
  80ab18:	403ee83a 	callr	r8
  80ab1c:	00ffffc4 	movi	r3,-1
  80ab20:	10c04426 	beq	r2,r3,80ac34 <__sflush_r+0x1a0>
  80ab24:	88c0030b 	ldhu	r3,12(r17)
  80ab28:	89000417 	ldw	r4,16(r17)
  80ab2c:	88000115 	stw	zero,4(r17)
  80ab30:	197dffcc 	andi	r5,r3,63487
  80ab34:	8940030d 	sth	r5,12(r17)
  80ab38:	89000015 	stw	r4,0(r17)
  80ab3c:	18c4000c 	andi	r3,r3,4096
  80ab40:	18002c1e 	bne	r3,zero,80abf4 <__sflush_r+0x160>
  80ab44:	89400c17 	ldw	r5,48(r17)
  80ab48:	9c000015 	stw	r16,0(r19)
  80ab4c:	28000526 	beq	r5,zero,80ab64 <__sflush_r+0xd0>
  80ab50:	88801004 	addi	r2,r17,64
  80ab54:	28800226 	beq	r5,r2,80ab60 <__sflush_r+0xcc>
  80ab58:	9809883a 	mov	r4,r19
  80ab5c:	080b3440 	call	80b344 <_free_r>
  80ab60:	88000c15 	stw	zero,48(r17)
  80ab64:	0005883a 	mov	r2,zero
  80ab68:	dfc00417 	ldw	ra,16(sp)
  80ab6c:	dcc00317 	ldw	r19,12(sp)
  80ab70:	dc800217 	ldw	r18,8(sp)
  80ab74:	dc400117 	ldw	r17,4(sp)
  80ab78:	dc000017 	ldw	r16,0(sp)
  80ab7c:	dec00504 	addi	sp,sp,20
  80ab80:	f800283a 	ret
  80ab84:	2c800417 	ldw	r18,16(r5)
  80ab88:	903ff626 	beq	r18,zero,80ab64 <__alt_data_end+0xff80ab64>
  80ab8c:	2c000017 	ldw	r16,0(r5)
  80ab90:	108000cc 	andi	r2,r2,3
  80ab94:	2c800015 	stw	r18,0(r5)
  80ab98:	84a1c83a 	sub	r16,r16,r18
  80ab9c:	1000131e 	bne	r2,zero,80abec <__sflush_r+0x158>
  80aba0:	28800517 	ldw	r2,20(r5)
  80aba4:	88800215 	stw	r2,8(r17)
  80aba8:	04000316 	blt	zero,r16,80abb8 <__sflush_r+0x124>
  80abac:	003fed06 	br	80ab64 <__alt_data_end+0xff80ab64>
  80abb0:	90a5883a 	add	r18,r18,r2
  80abb4:	043feb0e 	bge	zero,r16,80ab64 <__alt_data_end+0xff80ab64>
  80abb8:	88800917 	ldw	r2,36(r17)
  80abbc:	89400717 	ldw	r5,28(r17)
  80abc0:	800f883a 	mov	r7,r16
  80abc4:	900d883a 	mov	r6,r18
  80abc8:	9809883a 	mov	r4,r19
  80abcc:	103ee83a 	callr	r2
  80abd0:	80a1c83a 	sub	r16,r16,r2
  80abd4:	00bff616 	blt	zero,r2,80abb0 <__alt_data_end+0xff80abb0>
  80abd8:	88c0030b 	ldhu	r3,12(r17)
  80abdc:	00bfffc4 	movi	r2,-1
  80abe0:	18c01014 	ori	r3,r3,64
  80abe4:	88c0030d 	sth	r3,12(r17)
  80abe8:	003fdf06 	br	80ab68 <__alt_data_end+0xff80ab68>
  80abec:	0005883a 	mov	r2,zero
  80abf0:	003fec06 	br	80aba4 <__alt_data_end+0xff80aba4>
  80abf4:	88801415 	stw	r2,80(r17)
  80abf8:	003fd206 	br	80ab44 <__alt_data_end+0xff80ab44>
  80abfc:	28c00f17 	ldw	r3,60(r5)
  80ac00:	00ffb316 	blt	zero,r3,80aad0 <__alt_data_end+0xff80aad0>
  80ac04:	003fd706 	br	80ab64 <__alt_data_end+0xff80ab64>
  80ac08:	89400717 	ldw	r5,28(r17)
  80ac0c:	000d883a 	mov	r6,zero
  80ac10:	9809883a 	mov	r4,r19
  80ac14:	01c00044 	movi	r7,1
  80ac18:	403ee83a 	callr	r8
  80ac1c:	100d883a 	mov	r6,r2
  80ac20:	00bfffc4 	movi	r2,-1
  80ac24:	30801426 	beq	r6,r2,80ac78 <__sflush_r+0x1e4>
  80ac28:	8880030b 	ldhu	r2,12(r17)
  80ac2c:	8a000a17 	ldw	r8,40(r17)
  80ac30:	003fae06 	br	80aaec <__alt_data_end+0xff80aaec>
  80ac34:	98c00017 	ldw	r3,0(r19)
  80ac38:	183fba26 	beq	r3,zero,80ab24 <__alt_data_end+0xff80ab24>
  80ac3c:	01000744 	movi	r4,29
  80ac40:	19000626 	beq	r3,r4,80ac5c <__sflush_r+0x1c8>
  80ac44:	01000584 	movi	r4,22
  80ac48:	19000426 	beq	r3,r4,80ac5c <__sflush_r+0x1c8>
  80ac4c:	88c0030b 	ldhu	r3,12(r17)
  80ac50:	18c01014 	ori	r3,r3,64
  80ac54:	88c0030d 	sth	r3,12(r17)
  80ac58:	003fc306 	br	80ab68 <__alt_data_end+0xff80ab68>
  80ac5c:	8880030b 	ldhu	r2,12(r17)
  80ac60:	88c00417 	ldw	r3,16(r17)
  80ac64:	88000115 	stw	zero,4(r17)
  80ac68:	10bdffcc 	andi	r2,r2,63487
  80ac6c:	8880030d 	sth	r2,12(r17)
  80ac70:	88c00015 	stw	r3,0(r17)
  80ac74:	003fb306 	br	80ab44 <__alt_data_end+0xff80ab44>
  80ac78:	98800017 	ldw	r2,0(r19)
  80ac7c:	103fea26 	beq	r2,zero,80ac28 <__alt_data_end+0xff80ac28>
  80ac80:	00c00744 	movi	r3,29
  80ac84:	10c00226 	beq	r2,r3,80ac90 <__sflush_r+0x1fc>
  80ac88:	00c00584 	movi	r3,22
  80ac8c:	10ffd21e 	bne	r2,r3,80abd8 <__alt_data_end+0xff80abd8>
  80ac90:	9c000015 	stw	r16,0(r19)
  80ac94:	0005883a 	mov	r2,zero
  80ac98:	003fb306 	br	80ab68 <__alt_data_end+0xff80ab68>

0080ac9c <_fflush_r>:
  80ac9c:	defffd04 	addi	sp,sp,-12
  80aca0:	dc000115 	stw	r16,4(sp)
  80aca4:	dfc00215 	stw	ra,8(sp)
  80aca8:	2021883a 	mov	r16,r4
  80acac:	20000226 	beq	r4,zero,80acb8 <_fflush_r+0x1c>
  80acb0:	20800e17 	ldw	r2,56(r4)
  80acb4:	10000c26 	beq	r2,zero,80ace8 <_fflush_r+0x4c>
  80acb8:	2880030f 	ldh	r2,12(r5)
  80acbc:	1000051e 	bne	r2,zero,80acd4 <_fflush_r+0x38>
  80acc0:	0005883a 	mov	r2,zero
  80acc4:	dfc00217 	ldw	ra,8(sp)
  80acc8:	dc000117 	ldw	r16,4(sp)
  80accc:	dec00304 	addi	sp,sp,12
  80acd0:	f800283a 	ret
  80acd4:	8009883a 	mov	r4,r16
  80acd8:	dfc00217 	ldw	ra,8(sp)
  80acdc:	dc000117 	ldw	r16,4(sp)
  80ace0:	dec00304 	addi	sp,sp,12
  80ace4:	080aa941 	jmpi	80aa94 <__sflush_r>
  80ace8:	d9400015 	stw	r5,0(sp)
  80acec:	080b0780 	call	80b078 <__sinit>
  80acf0:	d9400017 	ldw	r5,0(sp)
  80acf4:	003ff006 	br	80acb8 <__alt_data_end+0xff80acb8>

0080acf8 <fflush>:
  80acf8:	20000526 	beq	r4,zero,80ad10 <fflush+0x18>
  80acfc:	008020b4 	movhi	r2,130
  80ad00:	10bbcf04 	addi	r2,r2,-4292
  80ad04:	200b883a 	mov	r5,r4
  80ad08:	11000017 	ldw	r4,0(r2)
  80ad0c:	080ac9c1 	jmpi	80ac9c <_fflush_r>
  80ad10:	008020b4 	movhi	r2,130
  80ad14:	10bbce04 	addi	r2,r2,-4296
  80ad18:	11000017 	ldw	r4,0(r2)
  80ad1c:	01402074 	movhi	r5,129
  80ad20:	296b2704 	addi	r5,r5,-21348
  80ad24:	080bbe01 	jmpi	80bbe0 <_fwalk_reent>

0080ad28 <__fp_lock>:
  80ad28:	0005883a 	mov	r2,zero
  80ad2c:	f800283a 	ret

0080ad30 <__fp_unlock>:
  80ad30:	0005883a 	mov	r2,zero
  80ad34:	f800283a 	ret

0080ad38 <_cleanup_r>:
  80ad38:	01402074 	movhi	r5,129
  80ad3c:	296a6404 	addi	r5,r5,-22128
  80ad40:	080bbe01 	jmpi	80bbe0 <_fwalk_reent>

0080ad44 <__sinit.part.1>:
  80ad44:	defff704 	addi	sp,sp,-36
  80ad48:	00c02074 	movhi	r3,129
  80ad4c:	dfc00815 	stw	ra,32(sp)
  80ad50:	ddc00715 	stw	r23,28(sp)
  80ad54:	dd800615 	stw	r22,24(sp)
  80ad58:	dd400515 	stw	r21,20(sp)
  80ad5c:	dd000415 	stw	r20,16(sp)
  80ad60:	dcc00315 	stw	r19,12(sp)
  80ad64:	dc800215 	stw	r18,8(sp)
  80ad68:	dc400115 	stw	r17,4(sp)
  80ad6c:	dc000015 	stw	r16,0(sp)
  80ad70:	18eb4e04 	addi	r3,r3,-21192
  80ad74:	24000117 	ldw	r16,4(r4)
  80ad78:	20c00f15 	stw	r3,60(r4)
  80ad7c:	2080bb04 	addi	r2,r4,748
  80ad80:	00c000c4 	movi	r3,3
  80ad84:	20c0b915 	stw	r3,740(r4)
  80ad88:	2080ba15 	stw	r2,744(r4)
  80ad8c:	2000b815 	stw	zero,736(r4)
  80ad90:	05c00204 	movi	r23,8
  80ad94:	00800104 	movi	r2,4
  80ad98:	2025883a 	mov	r18,r4
  80ad9c:	b80d883a 	mov	r6,r23
  80ada0:	81001704 	addi	r4,r16,92
  80ada4:	000b883a 	mov	r5,zero
  80ada8:	80000015 	stw	zero,0(r16)
  80adac:	80000115 	stw	zero,4(r16)
  80adb0:	80000215 	stw	zero,8(r16)
  80adb4:	8080030d 	sth	r2,12(r16)
  80adb8:	80001915 	stw	zero,100(r16)
  80adbc:	8000038d 	sth	zero,14(r16)
  80adc0:	80000415 	stw	zero,16(r16)
  80adc4:	80000515 	stw	zero,20(r16)
  80adc8:	80000615 	stw	zero,24(r16)
  80adcc:	080c8080 	call	80c808 <memset>
  80add0:	05802074 	movhi	r22,129
  80add4:	94400217 	ldw	r17,8(r18)
  80add8:	05402074 	movhi	r21,129
  80addc:	05002074 	movhi	r20,129
  80ade0:	04c02074 	movhi	r19,129
  80ade4:	b5b36604 	addi	r22,r22,-12904
  80ade8:	ad737d04 	addi	r21,r21,-12812
  80adec:	a5339c04 	addi	r20,r20,-12688
  80adf0:	9cf3b304 	addi	r19,r19,-12596
  80adf4:	85800815 	stw	r22,32(r16)
  80adf8:	85400915 	stw	r21,36(r16)
  80adfc:	85000a15 	stw	r20,40(r16)
  80ae00:	84c00b15 	stw	r19,44(r16)
  80ae04:	84000715 	stw	r16,28(r16)
  80ae08:	00800284 	movi	r2,10
  80ae0c:	8880030d 	sth	r2,12(r17)
  80ae10:	00800044 	movi	r2,1
  80ae14:	89001704 	addi	r4,r17,92
  80ae18:	b80d883a 	mov	r6,r23
  80ae1c:	000b883a 	mov	r5,zero
  80ae20:	88000015 	stw	zero,0(r17)
  80ae24:	88000115 	stw	zero,4(r17)
  80ae28:	88000215 	stw	zero,8(r17)
  80ae2c:	88001915 	stw	zero,100(r17)
  80ae30:	8880038d 	sth	r2,14(r17)
  80ae34:	88000415 	stw	zero,16(r17)
  80ae38:	88000515 	stw	zero,20(r17)
  80ae3c:	88000615 	stw	zero,24(r17)
  80ae40:	080c8080 	call	80c808 <memset>
  80ae44:	94000317 	ldw	r16,12(r18)
  80ae48:	00800484 	movi	r2,18
  80ae4c:	8c400715 	stw	r17,28(r17)
  80ae50:	8d800815 	stw	r22,32(r17)
  80ae54:	8d400915 	stw	r21,36(r17)
  80ae58:	8d000a15 	stw	r20,40(r17)
  80ae5c:	8cc00b15 	stw	r19,44(r17)
  80ae60:	8080030d 	sth	r2,12(r16)
  80ae64:	00800084 	movi	r2,2
  80ae68:	80000015 	stw	zero,0(r16)
  80ae6c:	80000115 	stw	zero,4(r16)
  80ae70:	80000215 	stw	zero,8(r16)
  80ae74:	80001915 	stw	zero,100(r16)
  80ae78:	8080038d 	sth	r2,14(r16)
  80ae7c:	80000415 	stw	zero,16(r16)
  80ae80:	80000515 	stw	zero,20(r16)
  80ae84:	80000615 	stw	zero,24(r16)
  80ae88:	81001704 	addi	r4,r16,92
  80ae8c:	000b883a 	mov	r5,zero
  80ae90:	b80d883a 	mov	r6,r23
  80ae94:	080c8080 	call	80c808 <memset>
  80ae98:	00800044 	movi	r2,1
  80ae9c:	84000715 	stw	r16,28(r16)
  80aea0:	85800815 	stw	r22,32(r16)
  80aea4:	85400915 	stw	r21,36(r16)
  80aea8:	85000a15 	stw	r20,40(r16)
  80aeac:	84c00b15 	stw	r19,44(r16)
  80aeb0:	90800e15 	stw	r2,56(r18)
  80aeb4:	dfc00817 	ldw	ra,32(sp)
  80aeb8:	ddc00717 	ldw	r23,28(sp)
  80aebc:	dd800617 	ldw	r22,24(sp)
  80aec0:	dd400517 	ldw	r21,20(sp)
  80aec4:	dd000417 	ldw	r20,16(sp)
  80aec8:	dcc00317 	ldw	r19,12(sp)
  80aecc:	dc800217 	ldw	r18,8(sp)
  80aed0:	dc400117 	ldw	r17,4(sp)
  80aed4:	dc000017 	ldw	r16,0(sp)
  80aed8:	dec00904 	addi	sp,sp,36
  80aedc:	f800283a 	ret

0080aee0 <__sfmoreglue>:
  80aee0:	defffc04 	addi	sp,sp,-16
  80aee4:	dc400115 	stw	r17,4(sp)
  80aee8:	2c7fffc4 	addi	r17,r5,-1
  80aeec:	8c401a24 	muli	r17,r17,104
  80aef0:	dc800215 	stw	r18,8(sp)
  80aef4:	2825883a 	mov	r18,r5
  80aef8:	89401d04 	addi	r5,r17,116
  80aefc:	dc000015 	stw	r16,0(sp)
  80af00:	dfc00315 	stw	ra,12(sp)
  80af04:	080c0600 	call	80c060 <_malloc_r>
  80af08:	1021883a 	mov	r16,r2
  80af0c:	10000726 	beq	r2,zero,80af2c <__sfmoreglue+0x4c>
  80af10:	11000304 	addi	r4,r2,12
  80af14:	10000015 	stw	zero,0(r2)
  80af18:	14800115 	stw	r18,4(r2)
  80af1c:	11000215 	stw	r4,8(r2)
  80af20:	000b883a 	mov	r5,zero
  80af24:	89801a04 	addi	r6,r17,104
  80af28:	080c8080 	call	80c808 <memset>
  80af2c:	8005883a 	mov	r2,r16
  80af30:	dfc00317 	ldw	ra,12(sp)
  80af34:	dc800217 	ldw	r18,8(sp)
  80af38:	dc400117 	ldw	r17,4(sp)
  80af3c:	dc000017 	ldw	r16,0(sp)
  80af40:	dec00404 	addi	sp,sp,16
  80af44:	f800283a 	ret

0080af48 <__sfp>:
  80af48:	008020b4 	movhi	r2,130
  80af4c:	defffb04 	addi	sp,sp,-20
  80af50:	10bbce04 	addi	r2,r2,-4296
  80af54:	dc800215 	stw	r18,8(sp)
  80af58:	14800017 	ldw	r18,0(r2)
  80af5c:	dcc00315 	stw	r19,12(sp)
  80af60:	dfc00415 	stw	ra,16(sp)
  80af64:	90800e17 	ldw	r2,56(r18)
  80af68:	dc400115 	stw	r17,4(sp)
  80af6c:	dc000015 	stw	r16,0(sp)
  80af70:	2027883a 	mov	r19,r4
  80af74:	1000021e 	bne	r2,zero,80af80 <__sfp+0x38>
  80af78:	9009883a 	mov	r4,r18
  80af7c:	080ad440 	call	80ad44 <__sinit.part.1>
  80af80:	9480b804 	addi	r18,r18,736
  80af84:	047fffc4 	movi	r17,-1
  80af88:	91400117 	ldw	r5,4(r18)
  80af8c:	94000217 	ldw	r16,8(r18)
  80af90:	297fffc4 	addi	r5,r5,-1
  80af94:	28000a16 	blt	r5,zero,80afc0 <__sfp+0x78>
  80af98:	8080030f 	ldh	r2,12(r16)
  80af9c:	10000c26 	beq	r2,zero,80afd0 <__sfp+0x88>
  80afa0:	80c01d04 	addi	r3,r16,116
  80afa4:	00000206 	br	80afb0 <__sfp+0x68>
  80afa8:	18bfe60f 	ldh	r2,-104(r3)
  80afac:	10000826 	beq	r2,zero,80afd0 <__sfp+0x88>
  80afb0:	297fffc4 	addi	r5,r5,-1
  80afb4:	1c3ffd04 	addi	r16,r3,-12
  80afb8:	18c01a04 	addi	r3,r3,104
  80afbc:	2c7ffa1e 	bne	r5,r17,80afa8 <__alt_data_end+0xff80afa8>
  80afc0:	90800017 	ldw	r2,0(r18)
  80afc4:	10001d26 	beq	r2,zero,80b03c <__sfp+0xf4>
  80afc8:	1025883a 	mov	r18,r2
  80afcc:	003fee06 	br	80af88 <__alt_data_end+0xff80af88>
  80afd0:	00bfffc4 	movi	r2,-1
  80afd4:	8080038d 	sth	r2,14(r16)
  80afd8:	00800044 	movi	r2,1
  80afdc:	8080030d 	sth	r2,12(r16)
  80afe0:	80001915 	stw	zero,100(r16)
  80afe4:	80000015 	stw	zero,0(r16)
  80afe8:	80000215 	stw	zero,8(r16)
  80afec:	80000115 	stw	zero,4(r16)
  80aff0:	80000415 	stw	zero,16(r16)
  80aff4:	80000515 	stw	zero,20(r16)
  80aff8:	80000615 	stw	zero,24(r16)
  80affc:	81001704 	addi	r4,r16,92
  80b000:	000b883a 	mov	r5,zero
  80b004:	01800204 	movi	r6,8
  80b008:	080c8080 	call	80c808 <memset>
  80b00c:	8005883a 	mov	r2,r16
  80b010:	80000c15 	stw	zero,48(r16)
  80b014:	80000d15 	stw	zero,52(r16)
  80b018:	80001115 	stw	zero,68(r16)
  80b01c:	80001215 	stw	zero,72(r16)
  80b020:	dfc00417 	ldw	ra,16(sp)
  80b024:	dcc00317 	ldw	r19,12(sp)
  80b028:	dc800217 	ldw	r18,8(sp)
  80b02c:	dc400117 	ldw	r17,4(sp)
  80b030:	dc000017 	ldw	r16,0(sp)
  80b034:	dec00504 	addi	sp,sp,20
  80b038:	f800283a 	ret
  80b03c:	9809883a 	mov	r4,r19
  80b040:	01400104 	movi	r5,4
  80b044:	080aee00 	call	80aee0 <__sfmoreglue>
  80b048:	90800015 	stw	r2,0(r18)
  80b04c:	103fde1e 	bne	r2,zero,80afc8 <__alt_data_end+0xff80afc8>
  80b050:	00800304 	movi	r2,12
  80b054:	98800015 	stw	r2,0(r19)
  80b058:	0005883a 	mov	r2,zero
  80b05c:	003ff006 	br	80b020 <__alt_data_end+0xff80b020>

0080b060 <_cleanup>:
  80b060:	008020b4 	movhi	r2,130
  80b064:	10bbce04 	addi	r2,r2,-4296
  80b068:	11000017 	ldw	r4,0(r2)
  80b06c:	01402074 	movhi	r5,129
  80b070:	296a6404 	addi	r5,r5,-22128
  80b074:	080bbe01 	jmpi	80bbe0 <_fwalk_reent>

0080b078 <__sinit>:
  80b078:	20800e17 	ldw	r2,56(r4)
  80b07c:	10000126 	beq	r2,zero,80b084 <__sinit+0xc>
  80b080:	f800283a 	ret
  80b084:	080ad441 	jmpi	80ad44 <__sinit.part.1>

0080b088 <__sfp_lock_acquire>:
  80b088:	f800283a 	ret

0080b08c <__sfp_lock_release>:
  80b08c:	f800283a 	ret

0080b090 <__sinit_lock_acquire>:
  80b090:	f800283a 	ret

0080b094 <__sinit_lock_release>:
  80b094:	f800283a 	ret

0080b098 <__fp_lock_all>:
  80b098:	008020b4 	movhi	r2,130
  80b09c:	10bbcf04 	addi	r2,r2,-4292
  80b0a0:	11000017 	ldw	r4,0(r2)
  80b0a4:	01402074 	movhi	r5,129
  80b0a8:	296b4a04 	addi	r5,r5,-21208
  80b0ac:	080bb1c1 	jmpi	80bb1c <_fwalk>

0080b0b0 <__fp_unlock_all>:
  80b0b0:	008020b4 	movhi	r2,130
  80b0b4:	10bbcf04 	addi	r2,r2,-4292
  80b0b8:	11000017 	ldw	r4,0(r2)
  80b0bc:	01402074 	movhi	r5,129
  80b0c0:	296b4c04 	addi	r5,r5,-21200
  80b0c4:	080bb1c1 	jmpi	80bb1c <_fwalk>

0080b0c8 <_fopen_r>:
  80b0c8:	defffa04 	addi	sp,sp,-24
  80b0cc:	dcc00415 	stw	r19,16(sp)
  80b0d0:	2827883a 	mov	r19,r5
  80b0d4:	300b883a 	mov	r5,r6
  80b0d8:	d80d883a 	mov	r6,sp
  80b0dc:	dc800315 	stw	r18,12(sp)
  80b0e0:	dc400215 	stw	r17,8(sp)
  80b0e4:	dfc00515 	stw	ra,20(sp)
  80b0e8:	dc000115 	stw	r16,4(sp)
  80b0ec:	2025883a 	mov	r18,r4
  80b0f0:	0810b580 	call	810b58 <__sflags>
  80b0f4:	1023883a 	mov	r17,r2
  80b0f8:	10002626 	beq	r2,zero,80b194 <_fopen_r+0xcc>
  80b0fc:	9009883a 	mov	r4,r18
  80b100:	080af480 	call	80af48 <__sfp>
  80b104:	1021883a 	mov	r16,r2
  80b108:	10002226 	beq	r2,zero,80b194 <_fopen_r+0xcc>
  80b10c:	d9800017 	ldw	r6,0(sp)
  80b110:	9009883a 	mov	r4,r18
  80b114:	980b883a 	mov	r5,r19
  80b118:	01c06d84 	movi	r7,438
  80b11c:	080c92c0 	call	80c92c <_open_r>
  80b120:	10001916 	blt	r2,zero,80b188 <_fopen_r+0xc0>
  80b124:	8080038d 	sth	r2,14(r16)
  80b128:	00802074 	movhi	r2,129
  80b12c:	10b36604 	addi	r2,r2,-12904
  80b130:	80800815 	stw	r2,32(r16)
  80b134:	00802074 	movhi	r2,129
  80b138:	10b37d04 	addi	r2,r2,-12812
  80b13c:	80800915 	stw	r2,36(r16)
  80b140:	00802074 	movhi	r2,129
  80b144:	10b39c04 	addi	r2,r2,-12688
  80b148:	80800a15 	stw	r2,40(r16)
  80b14c:	00802074 	movhi	r2,129
  80b150:	10b3b304 	addi	r2,r2,-12596
  80b154:	8440030d 	sth	r17,12(r16)
  80b158:	84000715 	stw	r16,28(r16)
  80b15c:	80800b15 	stw	r2,44(r16)
  80b160:	8c40400c 	andi	r17,r17,256
  80b164:	88000d1e 	bne	r17,zero,80b19c <_fopen_r+0xd4>
  80b168:	8005883a 	mov	r2,r16
  80b16c:	dfc00517 	ldw	ra,20(sp)
  80b170:	dcc00417 	ldw	r19,16(sp)
  80b174:	dc800317 	ldw	r18,12(sp)
  80b178:	dc400217 	ldw	r17,8(sp)
  80b17c:	dc000117 	ldw	r16,4(sp)
  80b180:	dec00604 	addi	sp,sp,24
  80b184:	f800283a 	ret
  80b188:	080b0880 	call	80b088 <__sfp_lock_acquire>
  80b18c:	8000030d 	sth	zero,12(r16)
  80b190:	080b08c0 	call	80b08c <__sfp_lock_release>
  80b194:	0005883a 	mov	r2,zero
  80b198:	003ff406 	br	80b16c <__alt_data_end+0xff80b16c>
  80b19c:	9009883a 	mov	r4,r18
  80b1a0:	800b883a 	mov	r5,r16
  80b1a4:	000d883a 	mov	r6,zero
  80b1a8:	01c00084 	movi	r7,2
  80b1ac:	080b6340 	call	80b634 <_fseek_r>
  80b1b0:	8005883a 	mov	r2,r16
  80b1b4:	003fed06 	br	80b16c <__alt_data_end+0xff80b16c>

0080b1b8 <fopen>:
  80b1b8:	00c020b4 	movhi	r3,130
  80b1bc:	18fbcf04 	addi	r3,r3,-4292
  80b1c0:	2005883a 	mov	r2,r4
  80b1c4:	19000017 	ldw	r4,0(r3)
  80b1c8:	280d883a 	mov	r6,r5
  80b1cc:	100b883a 	mov	r5,r2
  80b1d0:	080b0c81 	jmpi	80b0c8 <_fopen_r>

0080b1d4 <_fprintf_r>:
  80b1d4:	defffe04 	addi	sp,sp,-8
  80b1d8:	2809883a 	mov	r4,r5
  80b1dc:	dfc00015 	stw	ra,0(sp)
  80b1e0:	d9c00115 	stw	r7,4(sp)
  80b1e4:	300b883a 	mov	r5,r6
  80b1e8:	d9800104 	addi	r6,sp,4
  80b1ec:	080ef4c0 	call	80ef4c <__vfprintf_internal>
  80b1f0:	dfc00017 	ldw	ra,0(sp)
  80b1f4:	dec00204 	addi	sp,sp,8
  80b1f8:	f800283a 	ret

0080b1fc <fprintf>:
  80b1fc:	defffd04 	addi	sp,sp,-12
  80b200:	dfc00015 	stw	ra,0(sp)
  80b204:	d9800115 	stw	r6,4(sp)
  80b208:	d9c00215 	stw	r7,8(sp)
  80b20c:	d9800104 	addi	r6,sp,4
  80b210:	080ef4c0 	call	80ef4c <__vfprintf_internal>
  80b214:	dfc00017 	ldw	ra,0(sp)
  80b218:	dec00304 	addi	sp,sp,12
  80b21c:	f800283a 	ret

0080b220 <_malloc_trim_r>:
  80b220:	defffb04 	addi	sp,sp,-20
  80b224:	dcc00315 	stw	r19,12(sp)
  80b228:	04c020b4 	movhi	r19,130
  80b22c:	dc800215 	stw	r18,8(sp)
  80b230:	dc400115 	stw	r17,4(sp)
  80b234:	dc000015 	stw	r16,0(sp)
  80b238:	dfc00415 	stw	ra,16(sp)
  80b23c:	2821883a 	mov	r16,r5
  80b240:	9cf59604 	addi	r19,r19,-10664
  80b244:	2025883a 	mov	r18,r4
  80b248:	081825c0 	call	81825c <__malloc_lock>
  80b24c:	98800217 	ldw	r2,8(r19)
  80b250:	14400117 	ldw	r17,4(r2)
  80b254:	00bfff04 	movi	r2,-4
  80b258:	88a2703a 	and	r17,r17,r2
  80b25c:	8c21c83a 	sub	r16,r17,r16
  80b260:	8403fbc4 	addi	r16,r16,4079
  80b264:	8020d33a 	srli	r16,r16,12
  80b268:	0083ffc4 	movi	r2,4095
  80b26c:	843fffc4 	addi	r16,r16,-1
  80b270:	8020933a 	slli	r16,r16,12
  80b274:	1400060e 	bge	r2,r16,80b290 <_malloc_trim_r+0x70>
  80b278:	9009883a 	mov	r4,r18
  80b27c:	000b883a 	mov	r5,zero
  80b280:	080cd440 	call	80cd44 <_sbrk_r>
  80b284:	98c00217 	ldw	r3,8(r19)
  80b288:	1c47883a 	add	r3,r3,r17
  80b28c:	10c00a26 	beq	r2,r3,80b2b8 <_malloc_trim_r+0x98>
  80b290:	9009883a 	mov	r4,r18
  80b294:	081827c0 	call	81827c <__malloc_unlock>
  80b298:	0005883a 	mov	r2,zero
  80b29c:	dfc00417 	ldw	ra,16(sp)
  80b2a0:	dcc00317 	ldw	r19,12(sp)
  80b2a4:	dc800217 	ldw	r18,8(sp)
  80b2a8:	dc400117 	ldw	r17,4(sp)
  80b2ac:	dc000017 	ldw	r16,0(sp)
  80b2b0:	dec00504 	addi	sp,sp,20
  80b2b4:	f800283a 	ret
  80b2b8:	9009883a 	mov	r4,r18
  80b2bc:	040bc83a 	sub	r5,zero,r16
  80b2c0:	080cd440 	call	80cd44 <_sbrk_r>
  80b2c4:	00ffffc4 	movi	r3,-1
  80b2c8:	10c00d26 	beq	r2,r3,80b300 <_malloc_trim_r+0xe0>
  80b2cc:	00c020b4 	movhi	r3,130
  80b2d0:	18c35804 	addi	r3,r3,3424
  80b2d4:	18800017 	ldw	r2,0(r3)
  80b2d8:	99000217 	ldw	r4,8(r19)
  80b2dc:	8c23c83a 	sub	r17,r17,r16
  80b2e0:	8c400054 	ori	r17,r17,1
  80b2e4:	1421c83a 	sub	r16,r2,r16
  80b2e8:	24400115 	stw	r17,4(r4)
  80b2ec:	9009883a 	mov	r4,r18
  80b2f0:	1c000015 	stw	r16,0(r3)
  80b2f4:	081827c0 	call	81827c <__malloc_unlock>
  80b2f8:	00800044 	movi	r2,1
  80b2fc:	003fe706 	br	80b29c <__alt_data_end+0xff80b29c>
  80b300:	9009883a 	mov	r4,r18
  80b304:	000b883a 	mov	r5,zero
  80b308:	080cd440 	call	80cd44 <_sbrk_r>
  80b30c:	99000217 	ldw	r4,8(r19)
  80b310:	014003c4 	movi	r5,15
  80b314:	1107c83a 	sub	r3,r2,r4
  80b318:	28ffdd0e 	bge	r5,r3,80b290 <__alt_data_end+0xff80b290>
  80b31c:	014020b4 	movhi	r5,130
  80b320:	297bd004 	addi	r5,r5,-4288
  80b324:	29400017 	ldw	r5,0(r5)
  80b328:	18c00054 	ori	r3,r3,1
  80b32c:	20c00115 	stw	r3,4(r4)
  80b330:	00c020b4 	movhi	r3,130
  80b334:	1145c83a 	sub	r2,r2,r5
  80b338:	18c35804 	addi	r3,r3,3424
  80b33c:	18800015 	stw	r2,0(r3)
  80b340:	003fd306 	br	80b290 <__alt_data_end+0xff80b290>

0080b344 <_free_r>:
  80b344:	28004c26 	beq	r5,zero,80b478 <_free_r+0x134>
  80b348:	defffd04 	addi	sp,sp,-12
  80b34c:	dc400115 	stw	r17,4(sp)
  80b350:	dc000015 	stw	r16,0(sp)
  80b354:	2023883a 	mov	r17,r4
  80b358:	2821883a 	mov	r16,r5
  80b35c:	dfc00215 	stw	ra,8(sp)
  80b360:	081825c0 	call	81825c <__malloc_lock>
  80b364:	813fff17 	ldw	r4,-4(r16)
  80b368:	00bfff84 	movi	r2,-2
  80b36c:	024020b4 	movhi	r9,130
  80b370:	81bffe04 	addi	r6,r16,-8
  80b374:	2084703a 	and	r2,r4,r2
  80b378:	4a759604 	addi	r9,r9,-10664
  80b37c:	308b883a 	add	r5,r6,r2
  80b380:	2a000117 	ldw	r8,4(r5)
  80b384:	49c00217 	ldw	r7,8(r9)
  80b388:	00ffff04 	movi	r3,-4
  80b38c:	40c6703a 	and	r3,r8,r3
  80b390:	39405326 	beq	r7,r5,80b4e0 <_free_r+0x19c>
  80b394:	28c00115 	stw	r3,4(r5)
  80b398:	2100004c 	andi	r4,r4,1
  80b39c:	2000091e 	bne	r4,zero,80b3c4 <_free_r+0x80>
  80b3a0:	81fffe17 	ldw	r7,-8(r16)
  80b3a4:	4a000204 	addi	r8,r9,8
  80b3a8:	31cdc83a 	sub	r6,r6,r7
  80b3ac:	31000217 	ldw	r4,8(r6)
  80b3b0:	11c5883a 	add	r2,r2,r7
  80b3b4:	22006126 	beq	r4,r8,80b53c <_free_r+0x1f8>
  80b3b8:	31c00317 	ldw	r7,12(r6)
  80b3bc:	21c00315 	stw	r7,12(r4)
  80b3c0:	39000215 	stw	r4,8(r7)
  80b3c4:	28c9883a 	add	r4,r5,r3
  80b3c8:	21c00117 	ldw	r7,4(r4)
  80b3cc:	39c0004c 	andi	r7,r7,1
  80b3d0:	38000d1e 	bne	r7,zero,80b408 <_free_r+0xc4>
  80b3d4:	29000217 	ldw	r4,8(r5)
  80b3d8:	10c5883a 	add	r2,r2,r3
  80b3dc:	00c020b4 	movhi	r3,130
  80b3e0:	18f59804 	addi	r3,r3,-10656
  80b3e4:	20c07526 	beq	r4,r3,80b5bc <_free_r+0x278>
  80b3e8:	29c00317 	ldw	r7,12(r5)
  80b3ec:	11400054 	ori	r5,r2,1
  80b3f0:	3087883a 	add	r3,r6,r2
  80b3f4:	21c00315 	stw	r7,12(r4)
  80b3f8:	39000215 	stw	r4,8(r7)
  80b3fc:	31400115 	stw	r5,4(r6)
  80b400:	18800015 	stw	r2,0(r3)
  80b404:	00000406 	br	80b418 <_free_r+0xd4>
  80b408:	10c00054 	ori	r3,r2,1
  80b40c:	30c00115 	stw	r3,4(r6)
  80b410:	3087883a 	add	r3,r6,r2
  80b414:	18800015 	stw	r2,0(r3)
  80b418:	00c07fc4 	movi	r3,511
  80b41c:	18801736 	bltu	r3,r2,80b47c <_free_r+0x138>
  80b420:	1004d0fa 	srli	r2,r2,3
  80b424:	01400044 	movi	r5,1
  80b428:	49000117 	ldw	r4,4(r9)
  80b42c:	1087883a 	add	r3,r2,r2
  80b430:	18c7883a 	add	r3,r3,r3
  80b434:	1005d0ba 	srai	r2,r2,2
  80b438:	18c7883a 	add	r3,r3,r3
  80b43c:	1a47883a 	add	r3,r3,r9
  80b440:	19c00217 	ldw	r7,8(r3)
  80b444:	2884983a 	sll	r2,r5,r2
  80b448:	30c00315 	stw	r3,12(r6)
  80b44c:	31c00215 	stw	r7,8(r6)
  80b450:	1104b03a 	or	r2,r2,r4
  80b454:	19800215 	stw	r6,8(r3)
  80b458:	48800115 	stw	r2,4(r9)
  80b45c:	39800315 	stw	r6,12(r7)
  80b460:	8809883a 	mov	r4,r17
  80b464:	dfc00217 	ldw	ra,8(sp)
  80b468:	dc400117 	ldw	r17,4(sp)
  80b46c:	dc000017 	ldw	r16,0(sp)
  80b470:	dec00304 	addi	sp,sp,12
  80b474:	081827c1 	jmpi	81827c <__malloc_unlock>
  80b478:	f800283a 	ret
  80b47c:	1006d27a 	srli	r3,r2,9
  80b480:	01000104 	movi	r4,4
  80b484:	20c04036 	bltu	r4,r3,80b588 <_free_r+0x244>
  80b488:	1006d1ba 	srli	r3,r2,6
  80b48c:	19400e04 	addi	r5,r3,56
  80b490:	2947883a 	add	r3,r5,r5
  80b494:	18c7883a 	add	r3,r3,r3
  80b498:	18c7883a 	add	r3,r3,r3
  80b49c:	1a49883a 	add	r4,r3,r9
  80b4a0:	20c00217 	ldw	r3,8(r4)
  80b4a4:	01c020b4 	movhi	r7,130
  80b4a8:	39f59604 	addi	r7,r7,-10664
  80b4ac:	19003b26 	beq	r3,r4,80b59c <_free_r+0x258>
  80b4b0:	01ffff04 	movi	r7,-4
  80b4b4:	19400117 	ldw	r5,4(r3)
  80b4b8:	29ca703a 	and	r5,r5,r7
  80b4bc:	1140022e 	bgeu	r2,r5,80b4c8 <_free_r+0x184>
  80b4c0:	18c00217 	ldw	r3,8(r3)
  80b4c4:	20fffb1e 	bne	r4,r3,80b4b4 <__alt_data_end+0xff80b4b4>
  80b4c8:	18800317 	ldw	r2,12(r3)
  80b4cc:	30800315 	stw	r2,12(r6)
  80b4d0:	30c00215 	stw	r3,8(r6)
  80b4d4:	11800215 	stw	r6,8(r2)
  80b4d8:	19800315 	stw	r6,12(r3)
  80b4dc:	003fe006 	br	80b460 <__alt_data_end+0xff80b460>
  80b4e0:	2100004c 	andi	r4,r4,1
  80b4e4:	1885883a 	add	r2,r3,r2
  80b4e8:	2000071e 	bne	r4,zero,80b508 <_free_r+0x1c4>
  80b4ec:	817ffe17 	ldw	r5,-8(r16)
  80b4f0:	314dc83a 	sub	r6,r6,r5
  80b4f4:	30c00317 	ldw	r3,12(r6)
  80b4f8:	31000217 	ldw	r4,8(r6)
  80b4fc:	1145883a 	add	r2,r2,r5
  80b500:	20c00315 	stw	r3,12(r4)
  80b504:	19000215 	stw	r4,8(r3)
  80b508:	10c00054 	ori	r3,r2,1
  80b50c:	30c00115 	stw	r3,4(r6)
  80b510:	00c020b4 	movhi	r3,130
  80b514:	18fbd104 	addi	r3,r3,-4284
  80b518:	18c00017 	ldw	r3,0(r3)
  80b51c:	49800215 	stw	r6,8(r9)
  80b520:	10ffcf36 	bltu	r2,r3,80b460 <__alt_data_end+0xff80b460>
  80b524:	008020b4 	movhi	r2,130
  80b528:	10834704 	addi	r2,r2,3356
  80b52c:	11400017 	ldw	r5,0(r2)
  80b530:	8809883a 	mov	r4,r17
  80b534:	080b2200 	call	80b220 <_malloc_trim_r>
  80b538:	003fc906 	br	80b460 <__alt_data_end+0xff80b460>
  80b53c:	28c9883a 	add	r4,r5,r3
  80b540:	21000117 	ldw	r4,4(r4)
  80b544:	2100004c 	andi	r4,r4,1
  80b548:	20000a1e 	bne	r4,zero,80b574 <_free_r+0x230>
  80b54c:	29000317 	ldw	r4,12(r5)
  80b550:	29400217 	ldw	r5,8(r5)
  80b554:	10c5883a 	add	r2,r2,r3
  80b558:	10c00054 	ori	r3,r2,1
  80b55c:	29000315 	stw	r4,12(r5)
  80b560:	21400215 	stw	r5,8(r4)
  80b564:	30c00115 	stw	r3,4(r6)
  80b568:	308d883a 	add	r6,r6,r2
  80b56c:	30800015 	stw	r2,0(r6)
  80b570:	003fbb06 	br	80b460 <__alt_data_end+0xff80b460>
  80b574:	10c00054 	ori	r3,r2,1
  80b578:	30c00115 	stw	r3,4(r6)
  80b57c:	308d883a 	add	r6,r6,r2
  80b580:	30800015 	stw	r2,0(r6)
  80b584:	003fb606 	br	80b460 <__alt_data_end+0xff80b460>
  80b588:	01000504 	movi	r4,20
  80b58c:	20c01436 	bltu	r4,r3,80b5e0 <_free_r+0x29c>
  80b590:	194016c4 	addi	r5,r3,91
  80b594:	2947883a 	add	r3,r5,r5
  80b598:	003fbe06 	br	80b494 <__alt_data_end+0xff80b494>
  80b59c:	280bd0ba 	srai	r5,r5,2
  80b5a0:	00800044 	movi	r2,1
  80b5a4:	39000117 	ldw	r4,4(r7)
  80b5a8:	114a983a 	sll	r5,r2,r5
  80b5ac:	1805883a 	mov	r2,r3
  80b5b0:	2908b03a 	or	r4,r5,r4
  80b5b4:	39000115 	stw	r4,4(r7)
  80b5b8:	003fc406 	br	80b4cc <__alt_data_end+0xff80b4cc>
  80b5bc:	49800515 	stw	r6,20(r9)
  80b5c0:	49800415 	stw	r6,16(r9)
  80b5c4:	10c00054 	ori	r3,r2,1
  80b5c8:	31000315 	stw	r4,12(r6)
  80b5cc:	31000215 	stw	r4,8(r6)
  80b5d0:	30c00115 	stw	r3,4(r6)
  80b5d4:	308d883a 	add	r6,r6,r2
  80b5d8:	30800015 	stw	r2,0(r6)
  80b5dc:	003fa006 	br	80b460 <__alt_data_end+0xff80b460>
  80b5e0:	01001504 	movi	r4,84
  80b5e4:	20c00436 	bltu	r4,r3,80b5f8 <_free_r+0x2b4>
  80b5e8:	1006d33a 	srli	r3,r2,12
  80b5ec:	19401b84 	addi	r5,r3,110
  80b5f0:	2947883a 	add	r3,r5,r5
  80b5f4:	003fa706 	br	80b494 <__alt_data_end+0xff80b494>
  80b5f8:	01005504 	movi	r4,340
  80b5fc:	20c00436 	bltu	r4,r3,80b610 <_free_r+0x2cc>
  80b600:	1006d3fa 	srli	r3,r2,15
  80b604:	19401dc4 	addi	r5,r3,119
  80b608:	2947883a 	add	r3,r5,r5
  80b60c:	003fa106 	br	80b494 <__alt_data_end+0xff80b494>
  80b610:	01015504 	movi	r4,1364
  80b614:	20c00436 	bltu	r4,r3,80b628 <_free_r+0x2e4>
  80b618:	1006d4ba 	srli	r3,r2,18
  80b61c:	19401f04 	addi	r5,r3,124
  80b620:	2947883a 	add	r3,r5,r5
  80b624:	003f9b06 	br	80b494 <__alt_data_end+0xff80b494>
  80b628:	00c03f04 	movi	r3,252
  80b62c:	01401f84 	movi	r5,126
  80b630:	003f9806 	br	80b494 <__alt_data_end+0xff80b494>

0080b634 <_fseek_r>:
  80b634:	080b65c1 	jmpi	80b65c <_fseeko_r>

0080b638 <fseek>:
  80b638:	2007883a 	mov	r3,r4
  80b63c:	010020b4 	movhi	r4,130
  80b640:	213bcf04 	addi	r4,r4,-4292
  80b644:	21000017 	ldw	r4,0(r4)
  80b648:	2805883a 	mov	r2,r5
  80b64c:	300f883a 	mov	r7,r6
  80b650:	180b883a 	mov	r5,r3
  80b654:	100d883a 	mov	r6,r2
  80b658:	080b65c1 	jmpi	80b65c <_fseeko_r>

0080b65c <_fseeko_r>:
  80b65c:	deffe804 	addi	sp,sp,-96
  80b660:	dd401415 	stw	r21,80(sp)
  80b664:	dc801115 	stw	r18,68(sp)
  80b668:	dc401015 	stw	r17,64(sp)
  80b66c:	dc000f15 	stw	r16,60(sp)
  80b670:	dfc01715 	stw	ra,92(sp)
  80b674:	ddc01615 	stw	r23,88(sp)
  80b678:	dd801515 	stw	r22,84(sp)
  80b67c:	dd001315 	stw	r20,76(sp)
  80b680:	dcc01215 	stw	r19,72(sp)
  80b684:	2023883a 	mov	r17,r4
  80b688:	2821883a 	mov	r16,r5
  80b68c:	302b883a 	mov	r21,r6
  80b690:	3825883a 	mov	r18,r7
  80b694:	20000226 	beq	r4,zero,80b6a0 <_fseeko_r+0x44>
  80b698:	20800e17 	ldw	r2,56(r4)
  80b69c:	10005a26 	beq	r2,zero,80b808 <_fseeko_r+0x1ac>
  80b6a0:	8080030b 	ldhu	r2,12(r16)
  80b6a4:	00c04204 	movi	r3,264
  80b6a8:	1080420c 	andi	r2,r2,264
  80b6ac:	10c05b26 	beq	r2,r3,80b81c <_fseeko_r+0x1c0>
  80b6b0:	85000a17 	ldw	r20,40(r16)
  80b6b4:	a000f626 	beq	r20,zero,80ba90 <_fseeko_r+0x434>
  80b6b8:	00800044 	movi	r2,1
  80b6bc:	90803e26 	beq	r18,r2,80b7b8 <_fseeko_r+0x15c>
  80b6c0:	00800084 	movi	r2,2
  80b6c4:	90801026 	beq	r18,r2,80b708 <_fseeko_r+0xac>
  80b6c8:	90000f26 	beq	r18,zero,80b708 <_fseeko_r+0xac>
  80b6cc:	00800584 	movi	r2,22
  80b6d0:	88800015 	stw	r2,0(r17)
  80b6d4:	04ffffc4 	movi	r19,-1
  80b6d8:	9805883a 	mov	r2,r19
  80b6dc:	dfc01717 	ldw	ra,92(sp)
  80b6e0:	ddc01617 	ldw	r23,88(sp)
  80b6e4:	dd801517 	ldw	r22,84(sp)
  80b6e8:	dd401417 	ldw	r21,80(sp)
  80b6ec:	dd001317 	ldw	r20,76(sp)
  80b6f0:	dcc01217 	ldw	r19,72(sp)
  80b6f4:	dc801117 	ldw	r18,68(sp)
  80b6f8:	dc401017 	ldw	r17,64(sp)
  80b6fc:	dc000f17 	ldw	r16,60(sp)
  80b700:	dec01804 	addi	sp,sp,96
  80b704:	f800283a 	ret
  80b708:	80800417 	ldw	r2,16(r16)
  80b70c:	002f883a 	mov	r23,zero
  80b710:	0027883a 	mov	r19,zero
  80b714:	1000cb26 	beq	r2,zero,80ba44 <_fseeko_r+0x3e8>
  80b718:	8080030b 	ldhu	r2,12(r16)
  80b71c:	10c2068c 	andi	r3,r2,2074
  80b720:	1800071e 	bne	r3,zero,80b740 <_fseeko_r+0xe4>
  80b724:	10c1000c 	andi	r3,r2,1024
  80b728:	1800451e 	bne	r3,zero,80b840 <_fseeko_r+0x1e4>
  80b72c:	00c02074 	movhi	r3,129
  80b730:	18f39c04 	addi	r3,r3,-12688
  80b734:	a0c0b726 	beq	r20,r3,80ba14 <_fseeko_r+0x3b8>
  80b738:	10820014 	ori	r2,r2,2048
  80b73c:	8080030d 	sth	r2,12(r16)
  80b740:	8809883a 	mov	r4,r17
  80b744:	800b883a 	mov	r5,r16
  80b748:	080ac9c0 	call	80ac9c <_fflush_r>
  80b74c:	1027883a 	mov	r19,r2
  80b750:	103fe01e 	bne	r2,zero,80b6d4 <__alt_data_end+0xff80b6d4>
  80b754:	81400717 	ldw	r5,28(r16)
  80b758:	8809883a 	mov	r4,r17
  80b75c:	a80d883a 	mov	r6,r21
  80b760:	900f883a 	mov	r7,r18
  80b764:	a03ee83a 	callr	r20
  80b768:	00ffffc4 	movi	r3,-1
  80b76c:	10ffd926 	beq	r2,r3,80b6d4 <__alt_data_end+0xff80b6d4>
  80b770:	81400c17 	ldw	r5,48(r16)
  80b774:	28000526 	beq	r5,zero,80b78c <_fseeko_r+0x130>
  80b778:	80801004 	addi	r2,r16,64
  80b77c:	28800226 	beq	r5,r2,80b788 <_fseeko_r+0x12c>
  80b780:	8809883a 	mov	r4,r17
  80b784:	080b3440 	call	80b344 <_free_r>
  80b788:	80000c15 	stw	zero,48(r16)
  80b78c:	8080030b 	ldhu	r2,12(r16)
  80b790:	80c00417 	ldw	r3,16(r16)
  80b794:	80000115 	stw	zero,4(r16)
  80b798:	10bdf7cc 	andi	r2,r2,63455
  80b79c:	80c00015 	stw	r3,0(r16)
  80b7a0:	8080030d 	sth	r2,12(r16)
  80b7a4:	81001704 	addi	r4,r16,92
  80b7a8:	000b883a 	mov	r5,zero
  80b7ac:	01800204 	movi	r6,8
  80b7b0:	080c8080 	call	80c808 <memset>
  80b7b4:	003fc806 	br	80b6d8 <__alt_data_end+0xff80b6d8>
  80b7b8:	8809883a 	mov	r4,r17
  80b7bc:	800b883a 	mov	r5,r16
  80b7c0:	080ac9c0 	call	80ac9c <_fflush_r>
  80b7c4:	8080030b 	ldhu	r2,12(r16)
  80b7c8:	10c4000c 	andi	r3,r2,4096
  80b7cc:	18008726 	beq	r3,zero,80b9ec <_fseeko_r+0x390>
  80b7d0:	84c01417 	ldw	r19,80(r16)
  80b7d4:	10c0010c 	andi	r3,r2,4
  80b7d8:	1800431e 	bne	r3,zero,80b8e8 <_fseeko_r+0x28c>
  80b7dc:	1080020c 	andi	r2,r2,8
  80b7e0:	10008026 	beq	r2,zero,80b9e4 <_fseeko_r+0x388>
  80b7e4:	80c00017 	ldw	r3,0(r16)
  80b7e8:	80800417 	ldw	r2,16(r16)
  80b7ec:	18000226 	beq	r3,zero,80b7f8 <_fseeko_r+0x19c>
  80b7f0:	1887c83a 	sub	r3,r3,r2
  80b7f4:	98e7883a 	add	r19,r19,r3
  80b7f8:	aceb883a 	add	r21,r21,r19
  80b7fc:	05c00044 	movi	r23,1
  80b800:	0025883a 	mov	r18,zero
  80b804:	003fc306 	br	80b714 <__alt_data_end+0xff80b714>
  80b808:	080b0780 	call	80b078 <__sinit>
  80b80c:	8080030b 	ldhu	r2,12(r16)
  80b810:	00c04204 	movi	r3,264
  80b814:	1080420c 	andi	r2,r2,264
  80b818:	10ffa51e 	bne	r2,r3,80b6b0 <__alt_data_end+0xff80b6b0>
  80b81c:	8809883a 	mov	r4,r17
  80b820:	800b883a 	mov	r5,r16
  80b824:	080ac9c0 	call	80ac9c <_fflush_r>
  80b828:	003fa106 	br	80b6b0 <__alt_data_end+0xff80b6b0>
  80b82c:	8080030b 	ldhu	r2,12(r16)
  80b830:	00c10004 	movi	r3,1024
  80b834:	80c01315 	stw	r3,76(r16)
  80b838:	10c4b03a 	or	r2,r2,r3
  80b83c:	8080030d 	sth	r2,12(r16)
  80b840:	9000311e 	bne	r18,zero,80b908 <_fseeko_r+0x2ac>
  80b844:	a82d883a 	mov	r22,r21
  80b848:	b800371e 	bne	r23,zero,80b928 <_fseeko_r+0x2cc>
  80b84c:	8080030b 	ldhu	r2,12(r16)
  80b850:	1084000c 	andi	r2,r2,4096
  80b854:	10007f26 	beq	r2,zero,80ba54 <_fseeko_r+0x3f8>
  80b858:	80801417 	ldw	r2,80(r16)
  80b85c:	81800117 	ldw	r6,4(r16)
  80b860:	81400c17 	ldw	r5,48(r16)
  80b864:	11a7c83a 	sub	r19,r2,r6
  80b868:	28008226 	beq	r5,zero,80ba74 <_fseeko_r+0x418>
  80b86c:	81c00f17 	ldw	r7,60(r16)
  80b870:	99e7c83a 	sub	r19,r19,r7
  80b874:	81000e17 	ldw	r4,56(r16)
  80b878:	80800417 	ldw	r2,16(r16)
  80b87c:	99a7883a 	add	r19,r19,r6
  80b880:	2087c83a 	sub	r3,r4,r2
  80b884:	98e7c83a 	sub	r19,r19,r3
  80b888:	38c7883a 	add	r3,r7,r3
  80b88c:	b4c02b16 	blt	r22,r19,80b93c <_fseeko_r+0x2e0>
  80b890:	98c9883a 	add	r4,r19,r3
  80b894:	b100292e 	bgeu	r22,r4,80b93c <_fseeko_r+0x2e0>
  80b898:	b4e7c83a 	sub	r19,r22,r19
  80b89c:	14c5883a 	add	r2,r2,r19
  80b8a0:	1ce7c83a 	sub	r19,r3,r19
  80b8a4:	80800015 	stw	r2,0(r16)
  80b8a8:	84c00115 	stw	r19,4(r16)
  80b8ac:	28000526 	beq	r5,zero,80b8c4 <_fseeko_r+0x268>
  80b8b0:	80801004 	addi	r2,r16,64
  80b8b4:	28800226 	beq	r5,r2,80b8c0 <_fseeko_r+0x264>
  80b8b8:	8809883a 	mov	r4,r17
  80b8bc:	080b3440 	call	80b344 <_free_r>
  80b8c0:	80000c15 	stw	zero,48(r16)
  80b8c4:	8080030b 	ldhu	r2,12(r16)
  80b8c8:	81001704 	addi	r4,r16,92
  80b8cc:	000b883a 	mov	r5,zero
  80b8d0:	10bff7cc 	andi	r2,r2,65503
  80b8d4:	8080030d 	sth	r2,12(r16)
  80b8d8:	01800204 	movi	r6,8
  80b8dc:	080c8080 	call	80c808 <memset>
  80b8e0:	0027883a 	mov	r19,zero
  80b8e4:	003f7c06 	br	80b6d8 <__alt_data_end+0xff80b6d8>
  80b8e8:	80c00117 	ldw	r3,4(r16)
  80b8ec:	80800c17 	ldw	r2,48(r16)
  80b8f0:	98e7c83a 	sub	r19,r19,r3
  80b8f4:	10003b26 	beq	r2,zero,80b9e4 <_fseeko_r+0x388>
  80b8f8:	80c00f17 	ldw	r3,60(r16)
  80b8fc:	80800417 	ldw	r2,16(r16)
  80b900:	98e7c83a 	sub	r19,r19,r3
  80b904:	003fbc06 	br	80b7f8 <__alt_data_end+0xff80b7f8>
  80b908:	8140038f 	ldh	r5,14(r16)
  80b90c:	8809883a 	mov	r4,r17
  80b910:	d80d883a 	mov	r6,sp
  80b914:	080bac40 	call	80bac4 <_fstat_r>
  80b918:	103f891e 	bne	r2,zero,80b740 <__alt_data_end+0xff80b740>
  80b91c:	dd800417 	ldw	r22,16(sp)
  80b920:	adad883a 	add	r22,r21,r22
  80b924:	b83fc926 	beq	r23,zero,80b84c <__alt_data_end+0xff80b84c>
  80b928:	81400c17 	ldw	r5,48(r16)
  80b92c:	81800117 	ldw	r6,4(r16)
  80b930:	28005026 	beq	r5,zero,80ba74 <_fseeko_r+0x418>
  80b934:	81c00f17 	ldw	r7,60(r16)
  80b938:	003fce06 	br	80b874 <__alt_data_end+0xff80b874>
  80b93c:	84c01317 	ldw	r19,76(r16)
  80b940:	81400717 	ldw	r5,28(r16)
  80b944:	8809883a 	mov	r4,r17
  80b948:	04e7c83a 	sub	r19,zero,r19
  80b94c:	b4e6703a 	and	r19,r22,r19
  80b950:	980d883a 	mov	r6,r19
  80b954:	000f883a 	mov	r7,zero
  80b958:	a03ee83a 	callr	r20
  80b95c:	00ffffc4 	movi	r3,-1
  80b960:	10ff7726 	beq	r2,r3,80b740 <__alt_data_end+0xff80b740>
  80b964:	80800417 	ldw	r2,16(r16)
  80b968:	81400c17 	ldw	r5,48(r16)
  80b96c:	80000115 	stw	zero,4(r16)
  80b970:	80800015 	stw	r2,0(r16)
  80b974:	28000526 	beq	r5,zero,80b98c <_fseeko_r+0x330>
  80b978:	80801004 	addi	r2,r16,64
  80b97c:	28800226 	beq	r5,r2,80b988 <_fseeko_r+0x32c>
  80b980:	8809883a 	mov	r4,r17
  80b984:	080b3440 	call	80b344 <_free_r>
  80b988:	80000c15 	stw	zero,48(r16)
  80b98c:	8080030b 	ldhu	r2,12(r16)
  80b990:	b4e7c83a 	sub	r19,r22,r19
  80b994:	10bff7cc 	andi	r2,r2,65503
  80b998:	8080030d 	sth	r2,12(r16)
  80b99c:	98000b26 	beq	r19,zero,80b9cc <_fseeko_r+0x370>
  80b9a0:	8809883a 	mov	r4,r17
  80b9a4:	800b883a 	mov	r5,r16
  80b9a8:	080cae80 	call	80cae8 <__srefill_r>
  80b9ac:	103f641e 	bne	r2,zero,80b740 <__alt_data_end+0xff80b740>
  80b9b0:	80800117 	ldw	r2,4(r16)
  80b9b4:	14ff6236 	bltu	r2,r19,80b740 <__alt_data_end+0xff80b740>
  80b9b8:	80c00017 	ldw	r3,0(r16)
  80b9bc:	14c5c83a 	sub	r2,r2,r19
  80b9c0:	80800115 	stw	r2,4(r16)
  80b9c4:	1ce7883a 	add	r19,r3,r19
  80b9c8:	84c00015 	stw	r19,0(r16)
  80b9cc:	81001704 	addi	r4,r16,92
  80b9d0:	000b883a 	mov	r5,zero
  80b9d4:	01800204 	movi	r6,8
  80b9d8:	080c8080 	call	80c808 <memset>
  80b9dc:	0027883a 	mov	r19,zero
  80b9e0:	003f3d06 	br	80b6d8 <__alt_data_end+0xff80b6d8>
  80b9e4:	80800417 	ldw	r2,16(r16)
  80b9e8:	003f8306 	br	80b7f8 <__alt_data_end+0xff80b7f8>
  80b9ec:	81400717 	ldw	r5,28(r16)
  80b9f0:	8809883a 	mov	r4,r17
  80b9f4:	000d883a 	mov	r6,zero
  80b9f8:	900f883a 	mov	r7,r18
  80b9fc:	a03ee83a 	callr	r20
  80ba00:	1027883a 	mov	r19,r2
  80ba04:	00bfffc4 	movi	r2,-1
  80ba08:	98bf3226 	beq	r19,r2,80b6d4 <__alt_data_end+0xff80b6d4>
  80ba0c:	8080030b 	ldhu	r2,12(r16)
  80ba10:	003f7006 	br	80b7d4 <__alt_data_end+0xff80b7d4>
  80ba14:	8140038f 	ldh	r5,14(r16)
  80ba18:	283f4716 	blt	r5,zero,80b738 <__alt_data_end+0xff80b738>
  80ba1c:	8809883a 	mov	r4,r17
  80ba20:	d80d883a 	mov	r6,sp
  80ba24:	080bac40 	call	80bac4 <_fstat_r>
  80ba28:	1000041e 	bne	r2,zero,80ba3c <_fseeko_r+0x3e0>
  80ba2c:	d8800117 	ldw	r2,4(sp)
  80ba30:	00e00014 	movui	r3,32768
  80ba34:	10bc000c 	andi	r2,r2,61440
  80ba38:	10ff7c26 	beq	r2,r3,80b82c <__alt_data_end+0xff80b82c>
  80ba3c:	8080030b 	ldhu	r2,12(r16)
  80ba40:	003f3d06 	br	80b738 <__alt_data_end+0xff80b738>
  80ba44:	8809883a 	mov	r4,r17
  80ba48:	800b883a 	mov	r5,r16
  80ba4c:	080bea80 	call	80bea8 <__smakebuf_r>
  80ba50:	003f3106 	br	80b718 <__alt_data_end+0xff80b718>
  80ba54:	81400717 	ldw	r5,28(r16)
  80ba58:	8809883a 	mov	r4,r17
  80ba5c:	000d883a 	mov	r6,zero
  80ba60:	01c00044 	movi	r7,1
  80ba64:	a03ee83a 	callr	r20
  80ba68:	00ffffc4 	movi	r3,-1
  80ba6c:	10ff7b1e 	bne	r2,r3,80b85c <__alt_data_end+0xff80b85c>
  80ba70:	003f3306 	br	80b740 <__alt_data_end+0xff80b740>
  80ba74:	80c00017 	ldw	r3,0(r16)
  80ba78:	80800417 	ldw	r2,16(r16)
  80ba7c:	000b883a 	mov	r5,zero
  80ba80:	1887c83a 	sub	r3,r3,r2
  80ba84:	98e7c83a 	sub	r19,r19,r3
  80ba88:	30c7883a 	add	r3,r6,r3
  80ba8c:	003f7f06 	br	80b88c <__alt_data_end+0xff80b88c>
  80ba90:	00800744 	movi	r2,29
  80ba94:	88800015 	stw	r2,0(r17)
  80ba98:	04ffffc4 	movi	r19,-1
  80ba9c:	003f0e06 	br	80b6d8 <__alt_data_end+0xff80b6d8>

0080baa0 <fseeko>:
  80baa0:	2007883a 	mov	r3,r4
  80baa4:	010020b4 	movhi	r4,130
  80baa8:	213bcf04 	addi	r4,r4,-4292
  80baac:	21000017 	ldw	r4,0(r4)
  80bab0:	2805883a 	mov	r2,r5
  80bab4:	300f883a 	mov	r7,r6
  80bab8:	180b883a 	mov	r5,r3
  80babc:	100d883a 	mov	r6,r2
  80bac0:	080b65c1 	jmpi	80b65c <_fseeko_r>

0080bac4 <_fstat_r>:
  80bac4:	defffd04 	addi	sp,sp,-12
  80bac8:	dc000015 	stw	r16,0(sp)
  80bacc:	040020b4 	movhi	r16,130
  80bad0:	dc400115 	stw	r17,4(sp)
  80bad4:	84034404 	addi	r16,r16,3344
  80bad8:	2023883a 	mov	r17,r4
  80badc:	2809883a 	mov	r4,r5
  80bae0:	300b883a 	mov	r5,r6
  80bae4:	dfc00215 	stw	ra,8(sp)
  80bae8:	80000015 	stw	zero,0(r16)
  80baec:	0817c880 	call	817c88 <fstat>
  80baf0:	00ffffc4 	movi	r3,-1
  80baf4:	10c00526 	beq	r2,r3,80bb0c <_fstat_r+0x48>
  80baf8:	dfc00217 	ldw	ra,8(sp)
  80bafc:	dc400117 	ldw	r17,4(sp)
  80bb00:	dc000017 	ldw	r16,0(sp)
  80bb04:	dec00304 	addi	sp,sp,12
  80bb08:	f800283a 	ret
  80bb0c:	80c00017 	ldw	r3,0(r16)
  80bb10:	183ff926 	beq	r3,zero,80baf8 <__alt_data_end+0xff80baf8>
  80bb14:	88c00015 	stw	r3,0(r17)
  80bb18:	003ff706 	br	80baf8 <__alt_data_end+0xff80baf8>

0080bb1c <_fwalk>:
  80bb1c:	defff704 	addi	sp,sp,-36
  80bb20:	dd000415 	stw	r20,16(sp)
  80bb24:	dfc00815 	stw	ra,32(sp)
  80bb28:	ddc00715 	stw	r23,28(sp)
  80bb2c:	dd800615 	stw	r22,24(sp)
  80bb30:	dd400515 	stw	r21,20(sp)
  80bb34:	dcc00315 	stw	r19,12(sp)
  80bb38:	dc800215 	stw	r18,8(sp)
  80bb3c:	dc400115 	stw	r17,4(sp)
  80bb40:	dc000015 	stw	r16,0(sp)
  80bb44:	2500b804 	addi	r20,r4,736
  80bb48:	a0002326 	beq	r20,zero,80bbd8 <_fwalk+0xbc>
  80bb4c:	282b883a 	mov	r21,r5
  80bb50:	002f883a 	mov	r23,zero
  80bb54:	05800044 	movi	r22,1
  80bb58:	04ffffc4 	movi	r19,-1
  80bb5c:	a4400117 	ldw	r17,4(r20)
  80bb60:	a4800217 	ldw	r18,8(r20)
  80bb64:	8c7fffc4 	addi	r17,r17,-1
  80bb68:	88000d16 	blt	r17,zero,80bba0 <_fwalk+0x84>
  80bb6c:	94000304 	addi	r16,r18,12
  80bb70:	94800384 	addi	r18,r18,14
  80bb74:	80c0000b 	ldhu	r3,0(r16)
  80bb78:	8c7fffc4 	addi	r17,r17,-1
  80bb7c:	813ffd04 	addi	r4,r16,-12
  80bb80:	b0c0042e 	bgeu	r22,r3,80bb94 <_fwalk+0x78>
  80bb84:	90c0000f 	ldh	r3,0(r18)
  80bb88:	1cc00226 	beq	r3,r19,80bb94 <_fwalk+0x78>
  80bb8c:	a83ee83a 	callr	r21
  80bb90:	b8aeb03a 	or	r23,r23,r2
  80bb94:	84001a04 	addi	r16,r16,104
  80bb98:	94801a04 	addi	r18,r18,104
  80bb9c:	8cfff51e 	bne	r17,r19,80bb74 <__alt_data_end+0xff80bb74>
  80bba0:	a5000017 	ldw	r20,0(r20)
  80bba4:	a03fed1e 	bne	r20,zero,80bb5c <__alt_data_end+0xff80bb5c>
  80bba8:	b805883a 	mov	r2,r23
  80bbac:	dfc00817 	ldw	ra,32(sp)
  80bbb0:	ddc00717 	ldw	r23,28(sp)
  80bbb4:	dd800617 	ldw	r22,24(sp)
  80bbb8:	dd400517 	ldw	r21,20(sp)
  80bbbc:	dd000417 	ldw	r20,16(sp)
  80bbc0:	dcc00317 	ldw	r19,12(sp)
  80bbc4:	dc800217 	ldw	r18,8(sp)
  80bbc8:	dc400117 	ldw	r17,4(sp)
  80bbcc:	dc000017 	ldw	r16,0(sp)
  80bbd0:	dec00904 	addi	sp,sp,36
  80bbd4:	f800283a 	ret
  80bbd8:	002f883a 	mov	r23,zero
  80bbdc:	003ff206 	br	80bba8 <__alt_data_end+0xff80bba8>

0080bbe0 <_fwalk_reent>:
  80bbe0:	defff704 	addi	sp,sp,-36
  80bbe4:	dd400515 	stw	r21,20(sp)
  80bbe8:	dfc00815 	stw	ra,32(sp)
  80bbec:	ddc00715 	stw	r23,28(sp)
  80bbf0:	dd800615 	stw	r22,24(sp)
  80bbf4:	dd000415 	stw	r20,16(sp)
  80bbf8:	dcc00315 	stw	r19,12(sp)
  80bbfc:	dc800215 	stw	r18,8(sp)
  80bc00:	dc400115 	stw	r17,4(sp)
  80bc04:	dc000015 	stw	r16,0(sp)
  80bc08:	2540b804 	addi	r21,r4,736
  80bc0c:	a8002326 	beq	r21,zero,80bc9c <_fwalk_reent+0xbc>
  80bc10:	2829883a 	mov	r20,r5
  80bc14:	202d883a 	mov	r22,r4
  80bc18:	002f883a 	mov	r23,zero
  80bc1c:	04c00044 	movi	r19,1
  80bc20:	04bfffc4 	movi	r18,-1
  80bc24:	ac400117 	ldw	r17,4(r21)
  80bc28:	ac000217 	ldw	r16,8(r21)
  80bc2c:	8c7fffc4 	addi	r17,r17,-1
  80bc30:	88000c16 	blt	r17,zero,80bc64 <_fwalk_reent+0x84>
  80bc34:	84000304 	addi	r16,r16,12
  80bc38:	80c0000b 	ldhu	r3,0(r16)
  80bc3c:	8c7fffc4 	addi	r17,r17,-1
  80bc40:	817ffd04 	addi	r5,r16,-12
  80bc44:	98c0052e 	bgeu	r19,r3,80bc5c <_fwalk_reent+0x7c>
  80bc48:	80c0008f 	ldh	r3,2(r16)
  80bc4c:	b009883a 	mov	r4,r22
  80bc50:	1c800226 	beq	r3,r18,80bc5c <_fwalk_reent+0x7c>
  80bc54:	a03ee83a 	callr	r20
  80bc58:	b8aeb03a 	or	r23,r23,r2
  80bc5c:	84001a04 	addi	r16,r16,104
  80bc60:	8cbff51e 	bne	r17,r18,80bc38 <__alt_data_end+0xff80bc38>
  80bc64:	ad400017 	ldw	r21,0(r21)
  80bc68:	a83fee1e 	bne	r21,zero,80bc24 <__alt_data_end+0xff80bc24>
  80bc6c:	b805883a 	mov	r2,r23
  80bc70:	dfc00817 	ldw	ra,32(sp)
  80bc74:	ddc00717 	ldw	r23,28(sp)
  80bc78:	dd800617 	ldw	r22,24(sp)
  80bc7c:	dd400517 	ldw	r21,20(sp)
  80bc80:	dd000417 	ldw	r20,16(sp)
  80bc84:	dcc00317 	ldw	r19,12(sp)
  80bc88:	dc800217 	ldw	r18,8(sp)
  80bc8c:	dc400117 	ldw	r17,4(sp)
  80bc90:	dc000017 	ldw	r16,0(sp)
  80bc94:	dec00904 	addi	sp,sp,36
  80bc98:	f800283a 	ret
  80bc9c:	002f883a 	mov	r23,zero
  80bca0:	003ff206 	br	80bc6c <__alt_data_end+0xff80bc6c>

0080bca4 <_fwrite_r>:
  80bca4:	defff504 	addi	sp,sp,-44
  80bca8:	dcc00815 	stw	r19,32(sp)
  80bcac:	39a7383a 	mul	r19,r7,r6
  80bcb0:	d8800304 	addi	r2,sp,12
  80bcb4:	d8800015 	stw	r2,0(sp)
  80bcb8:	00800044 	movi	r2,1
  80bcbc:	dd000915 	stw	r20,36(sp)
  80bcc0:	dc800715 	stw	r18,28(sp)
  80bcc4:	dc400615 	stw	r17,24(sp)
  80bcc8:	d9400315 	stw	r5,12(sp)
  80bccc:	dfc00a15 	stw	ra,40(sp)
  80bcd0:	dcc00415 	stw	r19,16(sp)
  80bcd4:	dcc00215 	stw	r19,8(sp)
  80bcd8:	d8800115 	stw	r2,4(sp)
  80bcdc:	3029883a 	mov	r20,r6
  80bce0:	3823883a 	mov	r17,r7
  80bce4:	2025883a 	mov	r18,r4
  80bce8:	d9400b17 	ldw	r5,44(sp)
  80bcec:	20000226 	beq	r4,zero,80bcf8 <_fwrite_r+0x54>
  80bcf0:	20800e17 	ldw	r2,56(r4)
  80bcf4:	10001a26 	beq	r2,zero,80bd60 <_fwrite_r+0xbc>
  80bcf8:	2880030b 	ldhu	r2,12(r5)
  80bcfc:	10c8000c 	andi	r3,r2,8192
  80bd00:	1800061e 	bne	r3,zero,80bd1c <_fwrite_r+0x78>
  80bd04:	29001917 	ldw	r4,100(r5)
  80bd08:	00f7ffc4 	movi	r3,-8193
  80bd0c:	10880014 	ori	r2,r2,8192
  80bd10:	20c6703a 	and	r3,r4,r3
  80bd14:	2880030d 	sth	r2,12(r5)
  80bd18:	28c01915 	stw	r3,100(r5)
  80bd1c:	9009883a 	mov	r4,r18
  80bd20:	d80d883a 	mov	r6,sp
  80bd24:	0810c040 	call	810c04 <__sfvwrite_r>
  80bd28:	10000b26 	beq	r2,zero,80bd58 <_fwrite_r+0xb4>
  80bd2c:	d9000217 	ldw	r4,8(sp)
  80bd30:	a00b883a 	mov	r5,r20
  80bd34:	9909c83a 	sub	r4,r19,r4
  80bd38:	080a9800 	call	80a980 <__udivsi3>
  80bd3c:	dfc00a17 	ldw	ra,40(sp)
  80bd40:	dd000917 	ldw	r20,36(sp)
  80bd44:	dcc00817 	ldw	r19,32(sp)
  80bd48:	dc800717 	ldw	r18,28(sp)
  80bd4c:	dc400617 	ldw	r17,24(sp)
  80bd50:	dec00b04 	addi	sp,sp,44
  80bd54:	f800283a 	ret
  80bd58:	8805883a 	mov	r2,r17
  80bd5c:	003ff706 	br	80bd3c <__alt_data_end+0xff80bd3c>
  80bd60:	d9400515 	stw	r5,20(sp)
  80bd64:	080b0780 	call	80b078 <__sinit>
  80bd68:	d9400517 	ldw	r5,20(sp)
  80bd6c:	003fe206 	br	80bcf8 <__alt_data_end+0xff80bcf8>

0080bd70 <fwrite>:
  80bd70:	008020b4 	movhi	r2,130
  80bd74:	10bbcf04 	addi	r2,r2,-4292
  80bd78:	2011883a 	mov	r8,r4
  80bd7c:	11000017 	ldw	r4,0(r2)
  80bd80:	defffe04 	addi	sp,sp,-8
  80bd84:	2807883a 	mov	r3,r5
  80bd88:	3005883a 	mov	r2,r6
  80bd8c:	d9c00015 	stw	r7,0(sp)
  80bd90:	400b883a 	mov	r5,r8
  80bd94:	180d883a 	mov	r6,r3
  80bd98:	100f883a 	mov	r7,r2
  80bd9c:	dfc00115 	stw	ra,4(sp)
  80bda0:	080bca40 	call	80bca4 <_fwrite_r>
  80bda4:	dfc00117 	ldw	ra,4(sp)
  80bda8:	dec00204 	addi	sp,sp,8
  80bdac:	f800283a 	ret

0080bdb0 <_getc_r>:
  80bdb0:	defffd04 	addi	sp,sp,-12
  80bdb4:	dc000115 	stw	r16,4(sp)
  80bdb8:	dfc00215 	stw	ra,8(sp)
  80bdbc:	2021883a 	mov	r16,r4
  80bdc0:	20000226 	beq	r4,zero,80bdcc <_getc_r+0x1c>
  80bdc4:	20800e17 	ldw	r2,56(r4)
  80bdc8:	10000c26 	beq	r2,zero,80bdfc <_getc_r+0x4c>
  80bdcc:	28800117 	ldw	r2,4(r5)
  80bdd0:	10bfffc4 	addi	r2,r2,-1
  80bdd4:	28800115 	stw	r2,4(r5)
  80bdd8:	10000c16 	blt	r2,zero,80be0c <_getc_r+0x5c>
  80bddc:	28800017 	ldw	r2,0(r5)
  80bde0:	10c00044 	addi	r3,r2,1
  80bde4:	28c00015 	stw	r3,0(r5)
  80bde8:	10800003 	ldbu	r2,0(r2)
  80bdec:	dfc00217 	ldw	ra,8(sp)
  80bdf0:	dc000117 	ldw	r16,4(sp)
  80bdf4:	dec00304 	addi	sp,sp,12
  80bdf8:	f800283a 	ret
  80bdfc:	d9400015 	stw	r5,0(sp)
  80be00:	080b0780 	call	80b078 <__sinit>
  80be04:	d9400017 	ldw	r5,0(sp)
  80be08:	003ff006 	br	80bdcc <__alt_data_end+0xff80bdcc>
  80be0c:	8009883a 	mov	r4,r16
  80be10:	dfc00217 	ldw	ra,8(sp)
  80be14:	dc000117 	ldw	r16,4(sp)
  80be18:	dec00304 	addi	sp,sp,12
  80be1c:	080ccbc1 	jmpi	80ccbc <__srget_r>

0080be20 <getc>:
  80be20:	008020b4 	movhi	r2,130
  80be24:	defffd04 	addi	sp,sp,-12
  80be28:	10bbcf04 	addi	r2,r2,-4292
  80be2c:	dc400115 	stw	r17,4(sp)
  80be30:	14400017 	ldw	r17,0(r2)
  80be34:	dc000015 	stw	r16,0(sp)
  80be38:	dfc00215 	stw	ra,8(sp)
  80be3c:	2021883a 	mov	r16,r4
  80be40:	88000226 	beq	r17,zero,80be4c <getc+0x2c>
  80be44:	88800e17 	ldw	r2,56(r17)
  80be48:	10000d26 	beq	r2,zero,80be80 <getc+0x60>
  80be4c:	80800117 	ldw	r2,4(r16)
  80be50:	10bfffc4 	addi	r2,r2,-1
  80be54:	80800115 	stw	r2,4(r16)
  80be58:	10000c16 	blt	r2,zero,80be8c <getc+0x6c>
  80be5c:	80800017 	ldw	r2,0(r16)
  80be60:	10c00044 	addi	r3,r2,1
  80be64:	80c00015 	stw	r3,0(r16)
  80be68:	10800003 	ldbu	r2,0(r2)
  80be6c:	dfc00217 	ldw	ra,8(sp)
  80be70:	dc400117 	ldw	r17,4(sp)
  80be74:	dc000017 	ldw	r16,0(sp)
  80be78:	dec00304 	addi	sp,sp,12
  80be7c:	f800283a 	ret
  80be80:	8809883a 	mov	r4,r17
  80be84:	080b0780 	call	80b078 <__sinit>
  80be88:	003ff006 	br	80be4c <__alt_data_end+0xff80be4c>
  80be8c:	8809883a 	mov	r4,r17
  80be90:	800b883a 	mov	r5,r16
  80be94:	dfc00217 	ldw	ra,8(sp)
  80be98:	dc400117 	ldw	r17,4(sp)
  80be9c:	dc000017 	ldw	r16,0(sp)
  80bea0:	dec00304 	addi	sp,sp,12
  80bea4:	080ccbc1 	jmpi	80ccbc <__srget_r>

0080bea8 <__smakebuf_r>:
  80bea8:	2880030b 	ldhu	r2,12(r5)
  80beac:	10c0008c 	andi	r3,r2,2
  80beb0:	1800401e 	bne	r3,zero,80bfb4 <__smakebuf_r+0x10c>
  80beb4:	deffec04 	addi	sp,sp,-80
  80beb8:	dc000f15 	stw	r16,60(sp)
  80bebc:	2821883a 	mov	r16,r5
  80bec0:	2940038f 	ldh	r5,14(r5)
  80bec4:	dc401015 	stw	r17,64(sp)
  80bec8:	dfc01315 	stw	ra,76(sp)
  80becc:	dcc01215 	stw	r19,72(sp)
  80bed0:	dc801115 	stw	r18,68(sp)
  80bed4:	2023883a 	mov	r17,r4
  80bed8:	28001b16 	blt	r5,zero,80bf48 <__smakebuf_r+0xa0>
  80bedc:	d80d883a 	mov	r6,sp
  80bee0:	080bac40 	call	80bac4 <_fstat_r>
  80bee4:	10001716 	blt	r2,zero,80bf44 <__smakebuf_r+0x9c>
  80bee8:	d8800117 	ldw	r2,4(sp)
  80beec:	00e00014 	movui	r3,32768
  80bef0:	10bc000c 	andi	r2,r2,61440
  80bef4:	10c03726 	beq	r2,r3,80bfd4 <__smakebuf_r+0x12c>
  80bef8:	80c0030b 	ldhu	r3,12(r16)
  80befc:	18c20014 	ori	r3,r3,2048
  80bf00:	80c0030d 	sth	r3,12(r16)
  80bf04:	00c80004 	movi	r3,8192
  80bf08:	10c03c1e 	bne	r2,r3,80bffc <__smakebuf_r+0x154>
  80bf0c:	8140038f 	ldh	r5,14(r16)
  80bf10:	8809883a 	mov	r4,r17
  80bf14:	08110c40 	call	8110c4 <_isatty_r>
  80bf18:	10004e26 	beq	r2,zero,80c054 <__smakebuf_r+0x1ac>
  80bf1c:	8080030b 	ldhu	r2,12(r16)
  80bf20:	04c00044 	movi	r19,1
  80bf24:	80c010c4 	addi	r3,r16,67
  80bf28:	14c4b03a 	or	r2,r2,r19
  80bf2c:	8080030d 	sth	r2,12(r16)
  80bf30:	80c00015 	stw	r3,0(r16)
  80bf34:	80c00415 	stw	r3,16(r16)
  80bf38:	84c00515 	stw	r19,20(r16)
  80bf3c:	04810004 	movi	r18,1024
  80bf40:	00000706 	br	80bf60 <__smakebuf_r+0xb8>
  80bf44:	8080030b 	ldhu	r2,12(r16)
  80bf48:	10c0200c 	andi	r3,r2,128
  80bf4c:	18001f1e 	bne	r3,zero,80bfcc <__smakebuf_r+0x124>
  80bf50:	04810004 	movi	r18,1024
  80bf54:	10820014 	ori	r2,r2,2048
  80bf58:	8080030d 	sth	r2,12(r16)
  80bf5c:	0027883a 	mov	r19,zero
  80bf60:	8809883a 	mov	r4,r17
  80bf64:	900b883a 	mov	r5,r18
  80bf68:	080c0600 	call	80c060 <_malloc_r>
  80bf6c:	10002e26 	beq	r2,zero,80c028 <__smakebuf_r+0x180>
  80bf70:	80c0030b 	ldhu	r3,12(r16)
  80bf74:	01002074 	movhi	r4,129
  80bf78:	212b4e04 	addi	r4,r4,-21192
  80bf7c:	89000f15 	stw	r4,60(r17)
  80bf80:	18c02014 	ori	r3,r3,128
  80bf84:	80c0030d 	sth	r3,12(r16)
  80bf88:	80800015 	stw	r2,0(r16)
  80bf8c:	80800415 	stw	r2,16(r16)
  80bf90:	84800515 	stw	r18,20(r16)
  80bf94:	98001c1e 	bne	r19,zero,80c008 <__smakebuf_r+0x160>
  80bf98:	dfc01317 	ldw	ra,76(sp)
  80bf9c:	dcc01217 	ldw	r19,72(sp)
  80bfa0:	dc801117 	ldw	r18,68(sp)
  80bfa4:	dc401017 	ldw	r17,64(sp)
  80bfa8:	dc000f17 	ldw	r16,60(sp)
  80bfac:	dec01404 	addi	sp,sp,80
  80bfb0:	f800283a 	ret
  80bfb4:	288010c4 	addi	r2,r5,67
  80bfb8:	28800015 	stw	r2,0(r5)
  80bfbc:	28800415 	stw	r2,16(r5)
  80bfc0:	00800044 	movi	r2,1
  80bfc4:	28800515 	stw	r2,20(r5)
  80bfc8:	f800283a 	ret
  80bfcc:	04801004 	movi	r18,64
  80bfd0:	003fe006 	br	80bf54 <__alt_data_end+0xff80bf54>
  80bfd4:	81000a17 	ldw	r4,40(r16)
  80bfd8:	00c02074 	movhi	r3,129
  80bfdc:	18f39c04 	addi	r3,r3,-12688
  80bfe0:	20ffc51e 	bne	r4,r3,80bef8 <__alt_data_end+0xff80bef8>
  80bfe4:	80c0030b 	ldhu	r3,12(r16)
  80bfe8:	01010004 	movi	r4,1024
  80bfec:	81001315 	stw	r4,76(r16)
  80bff0:	1906b03a 	or	r3,r3,r4
  80bff4:	80c0030d 	sth	r3,12(r16)
  80bff8:	003fc206 	br	80bf04 <__alt_data_end+0xff80bf04>
  80bffc:	0027883a 	mov	r19,zero
  80c000:	04810004 	movi	r18,1024
  80c004:	003fd606 	br	80bf60 <__alt_data_end+0xff80bf60>
  80c008:	8140038f 	ldh	r5,14(r16)
  80c00c:	8809883a 	mov	r4,r17
  80c010:	08110c40 	call	8110c4 <_isatty_r>
  80c014:	103fe026 	beq	r2,zero,80bf98 <__alt_data_end+0xff80bf98>
  80c018:	8080030b 	ldhu	r2,12(r16)
  80c01c:	10800054 	ori	r2,r2,1
  80c020:	8080030d 	sth	r2,12(r16)
  80c024:	003fdc06 	br	80bf98 <__alt_data_end+0xff80bf98>
  80c028:	8080030b 	ldhu	r2,12(r16)
  80c02c:	10c0800c 	andi	r3,r2,512
  80c030:	183fd91e 	bne	r3,zero,80bf98 <__alt_data_end+0xff80bf98>
  80c034:	10800094 	ori	r2,r2,2
  80c038:	80c010c4 	addi	r3,r16,67
  80c03c:	8080030d 	sth	r2,12(r16)
  80c040:	00800044 	movi	r2,1
  80c044:	80c00015 	stw	r3,0(r16)
  80c048:	80c00415 	stw	r3,16(r16)
  80c04c:	80800515 	stw	r2,20(r16)
  80c050:	003fd106 	br	80bf98 <__alt_data_end+0xff80bf98>
  80c054:	04c00044 	movi	r19,1
  80c058:	04810004 	movi	r18,1024
  80c05c:	003fc006 	br	80bf60 <__alt_data_end+0xff80bf60>

0080c060 <_malloc_r>:
  80c060:	defff504 	addi	sp,sp,-44
  80c064:	dc800315 	stw	r18,12(sp)
  80c068:	dfc00a15 	stw	ra,40(sp)
  80c06c:	df000915 	stw	fp,36(sp)
  80c070:	ddc00815 	stw	r23,32(sp)
  80c074:	dd800715 	stw	r22,28(sp)
  80c078:	dd400615 	stw	r21,24(sp)
  80c07c:	dd000515 	stw	r20,20(sp)
  80c080:	dcc00415 	stw	r19,16(sp)
  80c084:	dc400215 	stw	r17,8(sp)
  80c088:	dc000115 	stw	r16,4(sp)
  80c08c:	288002c4 	addi	r2,r5,11
  80c090:	00c00584 	movi	r3,22
  80c094:	2025883a 	mov	r18,r4
  80c098:	18802a2e 	bgeu	r3,r2,80c144 <_malloc_r+0xe4>
  80c09c:	047ffe04 	movi	r17,-8
  80c0a0:	1462703a 	and	r17,r2,r17
  80c0a4:	88009e16 	blt	r17,zero,80c320 <_malloc_r+0x2c0>
  80c0a8:	89409d36 	bltu	r17,r5,80c320 <_malloc_r+0x2c0>
  80c0ac:	081825c0 	call	81825c <__malloc_lock>
  80c0b0:	00807dc4 	movi	r2,503
  80c0b4:	14402736 	bltu	r2,r17,80c154 <_malloc_r+0xf4>
  80c0b8:	8806d0fa 	srli	r3,r17,3
  80c0bc:	04c020b4 	movhi	r19,130
  80c0c0:	9cf59604 	addi	r19,r19,-10664
  80c0c4:	18c5883a 	add	r2,r3,r3
  80c0c8:	1085883a 	add	r2,r2,r2
  80c0cc:	1085883a 	add	r2,r2,r2
  80c0d0:	9885883a 	add	r2,r19,r2
  80c0d4:	14000317 	ldw	r16,12(r2)
  80c0d8:	80814a26 	beq	r16,r2,80c604 <_malloc_r+0x5a4>
  80c0dc:	80c00117 	ldw	r3,4(r16)
  80c0e0:	81000317 	ldw	r4,12(r16)
  80c0e4:	00bfff04 	movi	r2,-4
  80c0e8:	1884703a 	and	r2,r3,r2
  80c0ec:	81400217 	ldw	r5,8(r16)
  80c0f0:	8085883a 	add	r2,r16,r2
  80c0f4:	10c00117 	ldw	r3,4(r2)
  80c0f8:	29000315 	stw	r4,12(r5)
  80c0fc:	21400215 	stw	r5,8(r4)
  80c100:	18c00054 	ori	r3,r3,1
  80c104:	10c00115 	stw	r3,4(r2)
  80c108:	9009883a 	mov	r4,r18
  80c10c:	081827c0 	call	81827c <__malloc_unlock>
  80c110:	80800204 	addi	r2,r16,8
  80c114:	dfc00a17 	ldw	ra,40(sp)
  80c118:	df000917 	ldw	fp,36(sp)
  80c11c:	ddc00817 	ldw	r23,32(sp)
  80c120:	dd800717 	ldw	r22,28(sp)
  80c124:	dd400617 	ldw	r21,24(sp)
  80c128:	dd000517 	ldw	r20,20(sp)
  80c12c:	dcc00417 	ldw	r19,16(sp)
  80c130:	dc800317 	ldw	r18,12(sp)
  80c134:	dc400217 	ldw	r17,8(sp)
  80c138:	dc000117 	ldw	r16,4(sp)
  80c13c:	dec00b04 	addi	sp,sp,44
  80c140:	f800283a 	ret
  80c144:	04400404 	movi	r17,16
  80c148:	89407536 	bltu	r17,r5,80c320 <_malloc_r+0x2c0>
  80c14c:	081825c0 	call	81825c <__malloc_lock>
  80c150:	003fd906 	br	80c0b8 <__alt_data_end+0xff80c0b8>
  80c154:	8806d27a 	srli	r3,r17,9
  80c158:	18007526 	beq	r3,zero,80c330 <_malloc_r+0x2d0>
  80c15c:	00800104 	movi	r2,4
  80c160:	10c0ef36 	bltu	r2,r3,80c520 <_malloc_r+0x4c0>
  80c164:	8806d1ba 	srli	r3,r17,6
  80c168:	19c00e04 	addi	r7,r3,56
  80c16c:	39cb883a 	add	r5,r7,r7
  80c170:	04c020b4 	movhi	r19,130
  80c174:	294b883a 	add	r5,r5,r5
  80c178:	9cf59604 	addi	r19,r19,-10664
  80c17c:	294b883a 	add	r5,r5,r5
  80c180:	994b883a 	add	r5,r19,r5
  80c184:	2c000317 	ldw	r16,12(r5)
  80c188:	2c000e26 	beq	r5,r16,80c1c4 <_malloc_r+0x164>
  80c18c:	80800117 	ldw	r2,4(r16)
  80c190:	01bfff04 	movi	r6,-4
  80c194:	010003c4 	movi	r4,15
  80c198:	1184703a 	and	r2,r2,r6
  80c19c:	1447c83a 	sub	r3,r2,r17
  80c1a0:	20c00716 	blt	r4,r3,80c1c0 <_malloc_r+0x160>
  80c1a4:	1800650e 	bge	r3,zero,80c33c <_malloc_r+0x2dc>
  80c1a8:	84000317 	ldw	r16,12(r16)
  80c1ac:	2c000526 	beq	r5,r16,80c1c4 <_malloc_r+0x164>
  80c1b0:	80800117 	ldw	r2,4(r16)
  80c1b4:	1184703a 	and	r2,r2,r6
  80c1b8:	1447c83a 	sub	r3,r2,r17
  80c1bc:	20fff90e 	bge	r4,r3,80c1a4 <__alt_data_end+0xff80c1a4>
  80c1c0:	39ffffc4 	addi	r7,r7,-1
  80c1c4:	38c00044 	addi	r3,r7,1
  80c1c8:	018020b4 	movhi	r6,130
  80c1cc:	9c000417 	ldw	r16,16(r19)
  80c1d0:	31b59604 	addi	r6,r6,-10664
  80c1d4:	32400204 	addi	r9,r6,8
  80c1d8:	82410326 	beq	r16,r9,80c5e8 <_malloc_r+0x588>
  80c1dc:	81000117 	ldw	r4,4(r16)
  80c1e0:	00bfff04 	movi	r2,-4
  80c1e4:	208e703a 	and	r7,r4,r2
  80c1e8:	3c45c83a 	sub	r2,r7,r17
  80c1ec:	010003c4 	movi	r4,15
  80c1f0:	2080ee16 	blt	r4,r2,80c5ac <_malloc_r+0x54c>
  80c1f4:	32400515 	stw	r9,20(r6)
  80c1f8:	32400415 	stw	r9,16(r6)
  80c1fc:	1000510e 	bge	r2,zero,80c344 <_malloc_r+0x2e4>
  80c200:	00807fc4 	movi	r2,511
  80c204:	11c0ce36 	bltu	r2,r7,80c540 <_malloc_r+0x4e0>
  80c208:	3808d0fa 	srli	r4,r7,3
  80c20c:	01c00044 	movi	r7,1
  80c210:	30800117 	ldw	r2,4(r6)
  80c214:	210b883a 	add	r5,r4,r4
  80c218:	294b883a 	add	r5,r5,r5
  80c21c:	2009d0ba 	srai	r4,r4,2
  80c220:	294b883a 	add	r5,r5,r5
  80c224:	298b883a 	add	r5,r5,r6
  80c228:	2a000217 	ldw	r8,8(r5)
  80c22c:	3908983a 	sll	r4,r7,r4
  80c230:	81400315 	stw	r5,12(r16)
  80c234:	82000215 	stw	r8,8(r16)
  80c238:	2088b03a 	or	r4,r4,r2
  80c23c:	2c000215 	stw	r16,8(r5)
  80c240:	31000115 	stw	r4,4(r6)
  80c244:	44000315 	stw	r16,12(r8)
  80c248:	1805d0ba 	srai	r2,r3,2
  80c24c:	01400044 	movi	r5,1
  80c250:	288a983a 	sll	r5,r5,r2
  80c254:	21404336 	bltu	r4,r5,80c364 <_malloc_r+0x304>
  80c258:	2144703a 	and	r2,r4,r5
  80c25c:	10000a1e 	bne	r2,zero,80c288 <_malloc_r+0x228>
  80c260:	00bfff04 	movi	r2,-4
  80c264:	294b883a 	add	r5,r5,r5
  80c268:	1886703a 	and	r3,r3,r2
  80c26c:	2144703a 	and	r2,r4,r5
  80c270:	18c00104 	addi	r3,r3,4
  80c274:	1000041e 	bne	r2,zero,80c288 <_malloc_r+0x228>
  80c278:	294b883a 	add	r5,r5,r5
  80c27c:	2144703a 	and	r2,r4,r5
  80c280:	18c00104 	addi	r3,r3,4
  80c284:	103ffc26 	beq	r2,zero,80c278 <__alt_data_end+0xff80c278>
  80c288:	023fff04 	movi	r8,-4
  80c28c:	01c003c4 	movi	r7,15
  80c290:	18c5883a 	add	r2,r3,r3
  80c294:	1085883a 	add	r2,r2,r2
  80c298:	1085883a 	add	r2,r2,r2
  80c29c:	9895883a 	add	r10,r19,r2
  80c2a0:	52c00304 	addi	r11,r10,12
  80c2a4:	1819883a 	mov	r12,r3
  80c2a8:	5c000017 	ldw	r16,0(r11)
  80c2ac:	59bffd04 	addi	r6,r11,-12
  80c2b0:	8180041e 	bne	r16,r6,80c2c4 <_malloc_r+0x264>
  80c2b4:	0000ce06 	br	80c5f0 <_malloc_r+0x590>
  80c2b8:	2000d70e 	bge	r4,zero,80c618 <_malloc_r+0x5b8>
  80c2bc:	84000317 	ldw	r16,12(r16)
  80c2c0:	8180cb26 	beq	r16,r6,80c5f0 <_malloc_r+0x590>
  80c2c4:	80800117 	ldw	r2,4(r16)
  80c2c8:	1204703a 	and	r2,r2,r8
  80c2cc:	1449c83a 	sub	r4,r2,r17
  80c2d0:	393ff90e 	bge	r7,r4,80c2b8 <__alt_data_end+0xff80c2b8>
  80c2d4:	80800317 	ldw	r2,12(r16)
  80c2d8:	80c00217 	ldw	r3,8(r16)
  80c2dc:	89400054 	ori	r5,r17,1
  80c2e0:	81400115 	stw	r5,4(r16)
  80c2e4:	18800315 	stw	r2,12(r3)
  80c2e8:	10c00215 	stw	r3,8(r2)
  80c2ec:	8463883a 	add	r17,r16,r17
  80c2f0:	9c400515 	stw	r17,20(r19)
  80c2f4:	9c400415 	stw	r17,16(r19)
  80c2f8:	20800054 	ori	r2,r4,1
  80c2fc:	88800115 	stw	r2,4(r17)
  80c300:	8a400315 	stw	r9,12(r17)
  80c304:	8a400215 	stw	r9,8(r17)
  80c308:	8923883a 	add	r17,r17,r4
  80c30c:	89000015 	stw	r4,0(r17)
  80c310:	9009883a 	mov	r4,r18
  80c314:	081827c0 	call	81827c <__malloc_unlock>
  80c318:	80800204 	addi	r2,r16,8
  80c31c:	003f7d06 	br	80c114 <__alt_data_end+0xff80c114>
  80c320:	00800304 	movi	r2,12
  80c324:	90800015 	stw	r2,0(r18)
  80c328:	0005883a 	mov	r2,zero
  80c32c:	003f7906 	br	80c114 <__alt_data_end+0xff80c114>
  80c330:	01401f84 	movi	r5,126
  80c334:	01c00fc4 	movi	r7,63
  80c338:	003f8d06 	br	80c170 <__alt_data_end+0xff80c170>
  80c33c:	81000317 	ldw	r4,12(r16)
  80c340:	003f6a06 	br	80c0ec <__alt_data_end+0xff80c0ec>
  80c344:	81c5883a 	add	r2,r16,r7
  80c348:	10c00117 	ldw	r3,4(r2)
  80c34c:	9009883a 	mov	r4,r18
  80c350:	18c00054 	ori	r3,r3,1
  80c354:	10c00115 	stw	r3,4(r2)
  80c358:	081827c0 	call	81827c <__malloc_unlock>
  80c35c:	80800204 	addi	r2,r16,8
  80c360:	003f6c06 	br	80c114 <__alt_data_end+0xff80c114>
  80c364:	9c000217 	ldw	r16,8(r19)
  80c368:	00bfff04 	movi	r2,-4
  80c36c:	85800117 	ldw	r22,4(r16)
  80c370:	b0ac703a 	and	r22,r22,r2
  80c374:	b4400336 	bltu	r22,r17,80c384 <_malloc_r+0x324>
  80c378:	b445c83a 	sub	r2,r22,r17
  80c37c:	00c003c4 	movi	r3,15
  80c380:	18805d16 	blt	r3,r2,80c4f8 <_malloc_r+0x498>
  80c384:	05c020b4 	movhi	r23,130
  80c388:	008020b4 	movhi	r2,130
  80c38c:	bdfbd004 	addi	r23,r23,-4288
  80c390:	10834704 	addi	r2,r2,3356
  80c394:	15400017 	ldw	r21,0(r2)
  80c398:	b9000017 	ldw	r4,0(r23)
  80c39c:	00ffffc4 	movi	r3,-1
  80c3a0:	858d883a 	add	r6,r16,r22
  80c3a4:	8d6b883a 	add	r21,r17,r21
  80c3a8:	20c0e426 	beq	r4,r3,80c73c <_malloc_r+0x6dc>
  80c3ac:	ad4403c4 	addi	r21,r21,4111
  80c3b0:	00fc0004 	movi	r3,-4096
  80c3b4:	a8ea703a 	and	r21,r21,r3
  80c3b8:	9009883a 	mov	r4,r18
  80c3bc:	a80b883a 	mov	r5,r21
  80c3c0:	d9800015 	stw	r6,0(sp)
  80c3c4:	080cd440 	call	80cd44 <_sbrk_r>
  80c3c8:	00ffffc4 	movi	r3,-1
  80c3cc:	1029883a 	mov	r20,r2
  80c3d0:	d9800017 	ldw	r6,0(sp)
  80c3d4:	10c0a426 	beq	r2,r3,80c668 <_malloc_r+0x608>
  80c3d8:	1180a236 	bltu	r2,r6,80c664 <_malloc_r+0x604>
  80c3dc:	070020b4 	movhi	fp,130
  80c3e0:	e7035804 	addi	fp,fp,3424
  80c3e4:	e0c00017 	ldw	r3,0(fp)
  80c3e8:	a8c7883a 	add	r3,r21,r3
  80c3ec:	e0c00015 	stw	r3,0(fp)
  80c3f0:	3500da26 	beq	r6,r20,80c75c <_malloc_r+0x6fc>
  80c3f4:	b9000017 	ldw	r4,0(r23)
  80c3f8:	00bfffc4 	movi	r2,-1
  80c3fc:	2080e426 	beq	r4,r2,80c790 <_malloc_r+0x730>
  80c400:	a185c83a 	sub	r2,r20,r6
  80c404:	1885883a 	add	r2,r3,r2
  80c408:	e0800015 	stw	r2,0(fp)
  80c40c:	a0c001cc 	andi	r3,r20,7
  80c410:	1800b526 	beq	r3,zero,80c6e8 <_malloc_r+0x688>
  80c414:	a0e9c83a 	sub	r20,r20,r3
  80c418:	00840204 	movi	r2,4104
  80c41c:	a5000204 	addi	r20,r20,8
  80c420:	10c7c83a 	sub	r3,r2,r3
  80c424:	a545883a 	add	r2,r20,r21
  80c428:	1083ffcc 	andi	r2,r2,4095
  80c42c:	18abc83a 	sub	r21,r3,r2
  80c430:	9009883a 	mov	r4,r18
  80c434:	a80b883a 	mov	r5,r21
  80c438:	080cd440 	call	80cd44 <_sbrk_r>
  80c43c:	00ffffc4 	movi	r3,-1
  80c440:	10c0d026 	beq	r2,r3,80c784 <_malloc_r+0x724>
  80c444:	1507c83a 	sub	r3,r2,r20
  80c448:	a8c7883a 	add	r3,r21,r3
  80c44c:	18c00054 	ori	r3,r3,1
  80c450:	e0800017 	ldw	r2,0(fp)
  80c454:	9d000215 	stw	r20,8(r19)
  80c458:	a0c00115 	stw	r3,4(r20)
  80c45c:	a887883a 	add	r3,r21,r2
  80c460:	e0c00015 	stw	r3,0(fp)
  80c464:	84c00e26 	beq	r16,r19,80c4a0 <_malloc_r+0x440>
  80c468:	018003c4 	movi	r6,15
  80c46c:	3580a02e 	bgeu	r6,r22,80c6f0 <_malloc_r+0x690>
  80c470:	81400117 	ldw	r5,4(r16)
  80c474:	013ffe04 	movi	r4,-8
  80c478:	b0bffd04 	addi	r2,r22,-12
  80c47c:	1104703a 	and	r2,r2,r4
  80c480:	2900004c 	andi	r4,r5,1
  80c484:	1108b03a 	or	r4,r2,r4
  80c488:	81000115 	stw	r4,4(r16)
  80c48c:	01400144 	movi	r5,5
  80c490:	8089883a 	add	r4,r16,r2
  80c494:	21400115 	stw	r5,4(r4)
  80c498:	21400215 	stw	r5,8(r4)
  80c49c:	3080c036 	bltu	r6,r2,80c7a0 <_malloc_r+0x740>
  80c4a0:	008020b4 	movhi	r2,130
  80c4a4:	10834604 	addi	r2,r2,3352
  80c4a8:	11000017 	ldw	r4,0(r2)
  80c4ac:	20c0012e 	bgeu	r4,r3,80c4b4 <_malloc_r+0x454>
  80c4b0:	10c00015 	stw	r3,0(r2)
  80c4b4:	008020b4 	movhi	r2,130
  80c4b8:	10834504 	addi	r2,r2,3348
  80c4bc:	11000017 	ldw	r4,0(r2)
  80c4c0:	9c000217 	ldw	r16,8(r19)
  80c4c4:	20c0012e 	bgeu	r4,r3,80c4cc <_malloc_r+0x46c>
  80c4c8:	10c00015 	stw	r3,0(r2)
  80c4cc:	80c00117 	ldw	r3,4(r16)
  80c4d0:	00bfff04 	movi	r2,-4
  80c4d4:	1886703a 	and	r3,r3,r2
  80c4d8:	1c45c83a 	sub	r2,r3,r17
  80c4dc:	1c400236 	bltu	r3,r17,80c4e8 <_malloc_r+0x488>
  80c4e0:	00c003c4 	movi	r3,15
  80c4e4:	18800416 	blt	r3,r2,80c4f8 <_malloc_r+0x498>
  80c4e8:	9009883a 	mov	r4,r18
  80c4ec:	081827c0 	call	81827c <__malloc_unlock>
  80c4f0:	0005883a 	mov	r2,zero
  80c4f4:	003f0706 	br	80c114 <__alt_data_end+0xff80c114>
  80c4f8:	88c00054 	ori	r3,r17,1
  80c4fc:	80c00115 	stw	r3,4(r16)
  80c500:	8463883a 	add	r17,r16,r17
  80c504:	10800054 	ori	r2,r2,1
  80c508:	9c400215 	stw	r17,8(r19)
  80c50c:	88800115 	stw	r2,4(r17)
  80c510:	9009883a 	mov	r4,r18
  80c514:	081827c0 	call	81827c <__malloc_unlock>
  80c518:	80800204 	addi	r2,r16,8
  80c51c:	003efd06 	br	80c114 <__alt_data_end+0xff80c114>
  80c520:	00800504 	movi	r2,20
  80c524:	10c0482e 	bgeu	r2,r3,80c648 <_malloc_r+0x5e8>
  80c528:	00801504 	movi	r2,84
  80c52c:	10c06836 	bltu	r2,r3,80c6d0 <_malloc_r+0x670>
  80c530:	8806d33a 	srli	r3,r17,12
  80c534:	19c01b84 	addi	r7,r3,110
  80c538:	39cb883a 	add	r5,r7,r7
  80c53c:	003f0c06 	br	80c170 <__alt_data_end+0xff80c170>
  80c540:	3804d27a 	srli	r2,r7,9
  80c544:	01000104 	movi	r4,4
  80c548:	2080422e 	bgeu	r4,r2,80c654 <_malloc_r+0x5f4>
  80c54c:	01000504 	movi	r4,20
  80c550:	20807c36 	bltu	r4,r2,80c744 <_malloc_r+0x6e4>
  80c554:	110016c4 	addi	r4,r2,91
  80c558:	210b883a 	add	r5,r4,r4
  80c55c:	294b883a 	add	r5,r5,r5
  80c560:	294b883a 	add	r5,r5,r5
  80c564:	994b883a 	add	r5,r19,r5
  80c568:	28800217 	ldw	r2,8(r5)
  80c56c:	020020b4 	movhi	r8,130
  80c570:	42359604 	addi	r8,r8,-10664
  80c574:	11406326 	beq	r2,r5,80c704 <_malloc_r+0x6a4>
  80c578:	01bfff04 	movi	r6,-4
  80c57c:	11000117 	ldw	r4,4(r2)
  80c580:	2188703a 	and	r4,r4,r6
  80c584:	3900022e 	bgeu	r7,r4,80c590 <_malloc_r+0x530>
  80c588:	10800217 	ldw	r2,8(r2)
  80c58c:	28bffb1e 	bne	r5,r2,80c57c <__alt_data_end+0xff80c57c>
  80c590:	11800317 	ldw	r6,12(r2)
  80c594:	99000117 	ldw	r4,4(r19)
  80c598:	81800315 	stw	r6,12(r16)
  80c59c:	80800215 	stw	r2,8(r16)
  80c5a0:	34000215 	stw	r16,8(r6)
  80c5a4:	14000315 	stw	r16,12(r2)
  80c5a8:	003f2706 	br	80c248 <__alt_data_end+0xff80c248>
  80c5ac:	88c00054 	ori	r3,r17,1
  80c5b0:	80c00115 	stw	r3,4(r16)
  80c5b4:	8463883a 	add	r17,r16,r17
  80c5b8:	34400515 	stw	r17,20(r6)
  80c5bc:	34400415 	stw	r17,16(r6)
  80c5c0:	10c00054 	ori	r3,r2,1
  80c5c4:	8a400315 	stw	r9,12(r17)
  80c5c8:	8a400215 	stw	r9,8(r17)
  80c5cc:	88c00115 	stw	r3,4(r17)
  80c5d0:	88a3883a 	add	r17,r17,r2
  80c5d4:	88800015 	stw	r2,0(r17)
  80c5d8:	9009883a 	mov	r4,r18
  80c5dc:	081827c0 	call	81827c <__malloc_unlock>
  80c5e0:	80800204 	addi	r2,r16,8
  80c5e4:	003ecb06 	br	80c114 <__alt_data_end+0xff80c114>
  80c5e8:	31000117 	ldw	r4,4(r6)
  80c5ec:	003f1606 	br	80c248 <__alt_data_end+0xff80c248>
  80c5f0:	63000044 	addi	r12,r12,1
  80c5f4:	608000cc 	andi	r2,r12,3
  80c5f8:	5ac00204 	addi	r11,r11,8
  80c5fc:	103f2a1e 	bne	r2,zero,80c2a8 <__alt_data_end+0xff80c2a8>
  80c600:	00002106 	br	80c688 <_malloc_r+0x628>
  80c604:	80800204 	addi	r2,r16,8
  80c608:	84000517 	ldw	r16,20(r16)
  80c60c:	143eb31e 	bne	r2,r16,80c0dc <__alt_data_end+0xff80c0dc>
  80c610:	18c00084 	addi	r3,r3,2
  80c614:	003eec06 	br	80c1c8 <__alt_data_end+0xff80c1c8>
  80c618:	8085883a 	add	r2,r16,r2
  80c61c:	10c00117 	ldw	r3,4(r2)
  80c620:	81000317 	ldw	r4,12(r16)
  80c624:	81400217 	ldw	r5,8(r16)
  80c628:	18c00054 	ori	r3,r3,1
  80c62c:	10c00115 	stw	r3,4(r2)
  80c630:	29000315 	stw	r4,12(r5)
  80c634:	21400215 	stw	r5,8(r4)
  80c638:	9009883a 	mov	r4,r18
  80c63c:	081827c0 	call	81827c <__malloc_unlock>
  80c640:	80800204 	addi	r2,r16,8
  80c644:	003eb306 	br	80c114 <__alt_data_end+0xff80c114>
  80c648:	19c016c4 	addi	r7,r3,91
  80c64c:	39cb883a 	add	r5,r7,r7
  80c650:	003ec706 	br	80c170 <__alt_data_end+0xff80c170>
  80c654:	3804d1ba 	srli	r2,r7,6
  80c658:	11000e04 	addi	r4,r2,56
  80c65c:	210b883a 	add	r5,r4,r4
  80c660:	003fbe06 	br	80c55c <__alt_data_end+0xff80c55c>
  80c664:	84ff5d26 	beq	r16,r19,80c3dc <__alt_data_end+0xff80c3dc>
  80c668:	9c000217 	ldw	r16,8(r19)
  80c66c:	00bfff04 	movi	r2,-4
  80c670:	80c00117 	ldw	r3,4(r16)
  80c674:	1886703a 	and	r3,r3,r2
  80c678:	003f9706 	br	80c4d8 <__alt_data_end+0xff80c4d8>
  80c67c:	52800017 	ldw	r10,0(r10)
  80c680:	18ffffc4 	addi	r3,r3,-1
  80c684:	50805c1e 	bne	r10,r2,80c7f8 <_malloc_r+0x798>
  80c688:	190000cc 	andi	r4,r3,3
  80c68c:	50bffe04 	addi	r2,r10,-8
  80c690:	203ffa1e 	bne	r4,zero,80c67c <__alt_data_end+0xff80c67c>
  80c694:	98800117 	ldw	r2,4(r19)
  80c698:	0146303a 	nor	r3,zero,r5
  80c69c:	1884703a 	and	r2,r3,r2
  80c6a0:	98800115 	stw	r2,4(r19)
  80c6a4:	294b883a 	add	r5,r5,r5
  80c6a8:	117f2e36 	bltu	r2,r5,80c364 <__alt_data_end+0xff80c364>
  80c6ac:	283f2d26 	beq	r5,zero,80c364 <__alt_data_end+0xff80c364>
  80c6b0:	1146703a 	and	r3,r2,r5
  80c6b4:	1800521e 	bne	r3,zero,80c800 <_malloc_r+0x7a0>
  80c6b8:	6007883a 	mov	r3,r12
  80c6bc:	294b883a 	add	r5,r5,r5
  80c6c0:	1148703a 	and	r4,r2,r5
  80c6c4:	18c00104 	addi	r3,r3,4
  80c6c8:	203ffc26 	beq	r4,zero,80c6bc <__alt_data_end+0xff80c6bc>
  80c6cc:	003ef006 	br	80c290 <__alt_data_end+0xff80c290>
  80c6d0:	00805504 	movi	r2,340
  80c6d4:	10c01336 	bltu	r2,r3,80c724 <_malloc_r+0x6c4>
  80c6d8:	8806d3fa 	srli	r3,r17,15
  80c6dc:	19c01dc4 	addi	r7,r3,119
  80c6e0:	39cb883a 	add	r5,r7,r7
  80c6e4:	003ea206 	br	80c170 <__alt_data_end+0xff80c170>
  80c6e8:	00c40004 	movi	r3,4096
  80c6ec:	003f4d06 	br	80c424 <__alt_data_end+0xff80c424>
  80c6f0:	00800044 	movi	r2,1
  80c6f4:	a0800115 	stw	r2,4(r20)
  80c6f8:	a021883a 	mov	r16,r20
  80c6fc:	0007883a 	mov	r3,zero
  80c700:	003f7506 	br	80c4d8 <__alt_data_end+0xff80c4d8>
  80c704:	200bd0ba 	srai	r5,r4,2
  80c708:	01800044 	movi	r6,1
  80c70c:	41000117 	ldw	r4,4(r8)
  80c710:	314a983a 	sll	r5,r6,r5
  80c714:	100d883a 	mov	r6,r2
  80c718:	2908b03a 	or	r4,r5,r4
  80c71c:	41000115 	stw	r4,4(r8)
  80c720:	003f9d06 	br	80c598 <__alt_data_end+0xff80c598>
  80c724:	00815504 	movi	r2,1364
  80c728:	10c01336 	bltu	r2,r3,80c778 <_malloc_r+0x718>
  80c72c:	8806d4ba 	srli	r3,r17,18
  80c730:	19c01f04 	addi	r7,r3,124
  80c734:	39cb883a 	add	r5,r7,r7
  80c738:	003e8d06 	br	80c170 <__alt_data_end+0xff80c170>
  80c73c:	ad400404 	addi	r21,r21,16
  80c740:	003f1d06 	br	80c3b8 <__alt_data_end+0xff80c3b8>
  80c744:	01001504 	movi	r4,84
  80c748:	20801c36 	bltu	r4,r2,80c7bc <_malloc_r+0x75c>
  80c74c:	3804d33a 	srli	r2,r7,12
  80c750:	11001b84 	addi	r4,r2,110
  80c754:	210b883a 	add	r5,r4,r4
  80c758:	003f8006 	br	80c55c <__alt_data_end+0xff80c55c>
  80c75c:	3083ffcc 	andi	r2,r6,4095
  80c760:	103f241e 	bne	r2,zero,80c3f4 <__alt_data_end+0xff80c3f4>
  80c764:	99000217 	ldw	r4,8(r19)
  80c768:	ad85883a 	add	r2,r21,r22
  80c76c:	10800054 	ori	r2,r2,1
  80c770:	20800115 	stw	r2,4(r4)
  80c774:	003f4a06 	br	80c4a0 <__alt_data_end+0xff80c4a0>
  80c778:	01403f04 	movi	r5,252
  80c77c:	01c01f84 	movi	r7,126
  80c780:	003e7b06 	br	80c170 <__alt_data_end+0xff80c170>
  80c784:	00c00044 	movi	r3,1
  80c788:	002b883a 	mov	r21,zero
  80c78c:	003f3006 	br	80c450 <__alt_data_end+0xff80c450>
  80c790:	008020b4 	movhi	r2,130
  80c794:	10bbd004 	addi	r2,r2,-4288
  80c798:	15000015 	stw	r20,0(r2)
  80c79c:	003f1b06 	br	80c40c <__alt_data_end+0xff80c40c>
  80c7a0:	9009883a 	mov	r4,r18
  80c7a4:	81400204 	addi	r5,r16,8
  80c7a8:	080b3440 	call	80b344 <_free_r>
  80c7ac:	008020b4 	movhi	r2,130
  80c7b0:	10835804 	addi	r2,r2,3424
  80c7b4:	10c00017 	ldw	r3,0(r2)
  80c7b8:	003f3906 	br	80c4a0 <__alt_data_end+0xff80c4a0>
  80c7bc:	01005504 	movi	r4,340
  80c7c0:	20800436 	bltu	r4,r2,80c7d4 <_malloc_r+0x774>
  80c7c4:	3804d3fa 	srli	r2,r7,15
  80c7c8:	11001dc4 	addi	r4,r2,119
  80c7cc:	210b883a 	add	r5,r4,r4
  80c7d0:	003f6206 	br	80c55c <__alt_data_end+0xff80c55c>
  80c7d4:	01015504 	movi	r4,1364
  80c7d8:	20800436 	bltu	r4,r2,80c7ec <_malloc_r+0x78c>
  80c7dc:	3804d4ba 	srli	r2,r7,18
  80c7e0:	11001f04 	addi	r4,r2,124
  80c7e4:	210b883a 	add	r5,r4,r4
  80c7e8:	003f5c06 	br	80c55c <__alt_data_end+0xff80c55c>
  80c7ec:	01403f04 	movi	r5,252
  80c7f0:	01001f84 	movi	r4,126
  80c7f4:	003f5906 	br	80c55c <__alt_data_end+0xff80c55c>
  80c7f8:	98800117 	ldw	r2,4(r19)
  80c7fc:	003fa906 	br	80c6a4 <__alt_data_end+0xff80c6a4>
  80c800:	6007883a 	mov	r3,r12
  80c804:	003ea206 	br	80c290 <__alt_data_end+0xff80c290>

0080c808 <memset>:
  80c808:	20c000cc 	andi	r3,r4,3
  80c80c:	2005883a 	mov	r2,r4
  80c810:	18004326 	beq	r3,zero,80c920 <memset+0x118>
  80c814:	31ffffc4 	addi	r7,r6,-1
  80c818:	30004026 	beq	r6,zero,80c91c <memset+0x114>
  80c81c:	2813883a 	mov	r9,r5
  80c820:	200d883a 	mov	r6,r4
  80c824:	2007883a 	mov	r3,r4
  80c828:	00000406 	br	80c83c <memset+0x34>
  80c82c:	3a3fffc4 	addi	r8,r7,-1
  80c830:	31800044 	addi	r6,r6,1
  80c834:	38003926 	beq	r7,zero,80c91c <memset+0x114>
  80c838:	400f883a 	mov	r7,r8
  80c83c:	18c00044 	addi	r3,r3,1
  80c840:	32400005 	stb	r9,0(r6)
  80c844:	1a0000cc 	andi	r8,r3,3
  80c848:	403ff81e 	bne	r8,zero,80c82c <__alt_data_end+0xff80c82c>
  80c84c:	010000c4 	movi	r4,3
  80c850:	21c02d2e 	bgeu	r4,r7,80c908 <memset+0x100>
  80c854:	29803fcc 	andi	r6,r5,255
  80c858:	3008923a 	slli	r4,r6,8
  80c85c:	218cb03a 	or	r6,r4,r6
  80c860:	3008943a 	slli	r4,r6,16
  80c864:	218cb03a 	or	r6,r4,r6
  80c868:	010003c4 	movi	r4,15
  80c86c:	21c0182e 	bgeu	r4,r7,80c8d0 <memset+0xc8>
  80c870:	3b3ffc04 	addi	r12,r7,-16
  80c874:	6018d13a 	srli	r12,r12,4
  80c878:	1a000104 	addi	r8,r3,4
  80c87c:	1ac00204 	addi	r11,r3,8
  80c880:	6008913a 	slli	r4,r12,4
  80c884:	1a800304 	addi	r10,r3,12
  80c888:	1813883a 	mov	r9,r3
  80c88c:	21000504 	addi	r4,r4,20
  80c890:	1909883a 	add	r4,r3,r4
  80c894:	49800015 	stw	r6,0(r9)
  80c898:	41800015 	stw	r6,0(r8)
  80c89c:	59800015 	stw	r6,0(r11)
  80c8a0:	51800015 	stw	r6,0(r10)
  80c8a4:	42000404 	addi	r8,r8,16
  80c8a8:	4a400404 	addi	r9,r9,16
  80c8ac:	5ac00404 	addi	r11,r11,16
  80c8b0:	52800404 	addi	r10,r10,16
  80c8b4:	413ff71e 	bne	r8,r4,80c894 <__alt_data_end+0xff80c894>
  80c8b8:	63000044 	addi	r12,r12,1
  80c8bc:	6018913a 	slli	r12,r12,4
  80c8c0:	39c003cc 	andi	r7,r7,15
  80c8c4:	010000c4 	movi	r4,3
  80c8c8:	1b07883a 	add	r3,r3,r12
  80c8cc:	21c00e2e 	bgeu	r4,r7,80c908 <memset+0x100>
  80c8d0:	1813883a 	mov	r9,r3
  80c8d4:	3811883a 	mov	r8,r7
  80c8d8:	010000c4 	movi	r4,3
  80c8dc:	49800015 	stw	r6,0(r9)
  80c8e0:	423fff04 	addi	r8,r8,-4
  80c8e4:	4a400104 	addi	r9,r9,4
  80c8e8:	223ffc36 	bltu	r4,r8,80c8dc <__alt_data_end+0xff80c8dc>
  80c8ec:	393fff04 	addi	r4,r7,-4
  80c8f0:	2008d0ba 	srli	r4,r4,2
  80c8f4:	39c000cc 	andi	r7,r7,3
  80c8f8:	21000044 	addi	r4,r4,1
  80c8fc:	2109883a 	add	r4,r4,r4
  80c900:	2109883a 	add	r4,r4,r4
  80c904:	1907883a 	add	r3,r3,r4
  80c908:	38000426 	beq	r7,zero,80c91c <memset+0x114>
  80c90c:	19cf883a 	add	r7,r3,r7
  80c910:	19400005 	stb	r5,0(r3)
  80c914:	18c00044 	addi	r3,r3,1
  80c918:	19fffd1e 	bne	r3,r7,80c910 <__alt_data_end+0xff80c910>
  80c91c:	f800283a 	ret
  80c920:	2007883a 	mov	r3,r4
  80c924:	300f883a 	mov	r7,r6
  80c928:	003fc806 	br	80c84c <__alt_data_end+0xff80c84c>

0080c92c <_open_r>:
  80c92c:	defffd04 	addi	sp,sp,-12
  80c930:	dc000015 	stw	r16,0(sp)
  80c934:	040020b4 	movhi	r16,130
  80c938:	dc400115 	stw	r17,4(sp)
  80c93c:	84034404 	addi	r16,r16,3344
  80c940:	2023883a 	mov	r17,r4
  80c944:	2809883a 	mov	r4,r5
  80c948:	300b883a 	mov	r5,r6
  80c94c:	380d883a 	mov	r6,r7
  80c950:	dfc00215 	stw	ra,8(sp)
  80c954:	80000015 	stw	zero,0(r16)
  80c958:	08183b80 	call	8183b8 <open>
  80c95c:	00ffffc4 	movi	r3,-1
  80c960:	10c00526 	beq	r2,r3,80c978 <_open_r+0x4c>
  80c964:	dfc00217 	ldw	ra,8(sp)
  80c968:	dc400117 	ldw	r17,4(sp)
  80c96c:	dc000017 	ldw	r16,0(sp)
  80c970:	dec00304 	addi	sp,sp,12
  80c974:	f800283a 	ret
  80c978:	80c00017 	ldw	r3,0(r16)
  80c97c:	183ff926 	beq	r3,zero,80c964 <__alt_data_end+0xff80c964>
  80c980:	88c00015 	stw	r3,0(r17)
  80c984:	003ff706 	br	80c964 <__alt_data_end+0xff80c964>

0080c988 <_printf_r>:
  80c988:	defffd04 	addi	sp,sp,-12
  80c98c:	dfc00015 	stw	ra,0(sp)
  80c990:	d9800115 	stw	r6,4(sp)
  80c994:	d9c00215 	stw	r7,8(sp)
  80c998:	280d883a 	mov	r6,r5
  80c99c:	21400217 	ldw	r5,8(r4)
  80c9a0:	d9c00104 	addi	r7,sp,4
  80c9a4:	080cffc0 	call	80cffc <___vfprintf_internal_r>
  80c9a8:	dfc00017 	ldw	ra,0(sp)
  80c9ac:	dec00304 	addi	sp,sp,12
  80c9b0:	f800283a 	ret

0080c9b4 <printf>:
  80c9b4:	defffc04 	addi	sp,sp,-16
  80c9b8:	dfc00015 	stw	ra,0(sp)
  80c9bc:	d9400115 	stw	r5,4(sp)
  80c9c0:	d9800215 	stw	r6,8(sp)
  80c9c4:	d9c00315 	stw	r7,12(sp)
  80c9c8:	008020b4 	movhi	r2,130
  80c9cc:	10bbcf04 	addi	r2,r2,-4292
  80c9d0:	10800017 	ldw	r2,0(r2)
  80c9d4:	200b883a 	mov	r5,r4
  80c9d8:	d9800104 	addi	r6,sp,4
  80c9dc:	11000217 	ldw	r4,8(r2)
  80c9e0:	080ef4c0 	call	80ef4c <__vfprintf_internal>
  80c9e4:	dfc00017 	ldw	ra,0(sp)
  80c9e8:	dec00404 	addi	sp,sp,16
  80c9ec:	f800283a 	ret

0080c9f0 <_putchar_r>:
  80c9f0:	21800217 	ldw	r6,8(r4)
  80c9f4:	08125701 	jmpi	812570 <_putc_r>

0080c9f8 <putchar>:
  80c9f8:	008020b4 	movhi	r2,130
  80c9fc:	10bbcf04 	addi	r2,r2,-4292
  80ca00:	200b883a 	mov	r5,r4
  80ca04:	11000017 	ldw	r4,0(r2)
  80ca08:	21800217 	ldw	r6,8(r4)
  80ca0c:	08125701 	jmpi	812570 <_putc_r>

0080ca10 <_puts_r>:
  80ca10:	defff604 	addi	sp,sp,-40
  80ca14:	dc000715 	stw	r16,28(sp)
  80ca18:	2021883a 	mov	r16,r4
  80ca1c:	2809883a 	mov	r4,r5
  80ca20:	dc400815 	stw	r17,32(sp)
  80ca24:	dfc00915 	stw	ra,36(sp)
  80ca28:	2823883a 	mov	r17,r5
  80ca2c:	080cf640 	call	80cf64 <strlen>
  80ca30:	81400217 	ldw	r5,8(r16)
  80ca34:	11000044 	addi	r4,r2,1
  80ca38:	d8800115 	stw	r2,4(sp)
  80ca3c:	008020b4 	movhi	r2,130
  80ca40:	2980030b 	ldhu	r6,12(r5)
  80ca44:	10b31c04 	addi	r2,r2,-13200
  80ca48:	d8800215 	stw	r2,8(sp)
  80ca4c:	00800044 	movi	r2,1
  80ca50:	d8800315 	stw	r2,12(sp)
  80ca54:	00800084 	movi	r2,2
  80ca58:	d8800515 	stw	r2,20(sp)
  80ca5c:	dc400015 	stw	r17,0(sp)
  80ca60:	d9000615 	stw	r4,24(sp)
  80ca64:	dec00415 	stw	sp,16(sp)
  80ca68:	3088000c 	andi	r2,r6,8192
  80ca6c:	1000061e 	bne	r2,zero,80ca88 <_puts_r+0x78>
  80ca70:	29001917 	ldw	r4,100(r5)
  80ca74:	00b7ffc4 	movi	r2,-8193
  80ca78:	31880014 	ori	r6,r6,8192
  80ca7c:	2084703a 	and	r2,r4,r2
  80ca80:	2980030d 	sth	r6,12(r5)
  80ca84:	28801915 	stw	r2,100(r5)
  80ca88:	8009883a 	mov	r4,r16
  80ca8c:	d9800404 	addi	r6,sp,16
  80ca90:	0810c040 	call	810c04 <__sfvwrite_r>
  80ca94:	1000061e 	bne	r2,zero,80cab0 <_puts_r+0xa0>
  80ca98:	00800284 	movi	r2,10
  80ca9c:	dfc00917 	ldw	ra,36(sp)
  80caa0:	dc400817 	ldw	r17,32(sp)
  80caa4:	dc000717 	ldw	r16,28(sp)
  80caa8:	dec00a04 	addi	sp,sp,40
  80caac:	f800283a 	ret
  80cab0:	00bfffc4 	movi	r2,-1
  80cab4:	003ff906 	br	80ca9c <__alt_data_end+0xff80ca9c>

0080cab8 <puts>:
  80cab8:	008020b4 	movhi	r2,130
  80cabc:	10bbcf04 	addi	r2,r2,-4292
  80cac0:	200b883a 	mov	r5,r4
  80cac4:	11000017 	ldw	r4,0(r2)
  80cac8:	080ca101 	jmpi	80ca10 <_puts_r>

0080cacc <lflush>:
  80cacc:	2080030b 	ldhu	r2,12(r4)
  80cad0:	00c00244 	movi	r3,9
  80cad4:	1080024c 	andi	r2,r2,9
  80cad8:	10c00226 	beq	r2,r3,80cae4 <lflush+0x18>
  80cadc:	0005883a 	mov	r2,zero
  80cae0:	f800283a 	ret
  80cae4:	080acf81 	jmpi	80acf8 <fflush>

0080cae8 <__srefill_r>:
  80cae8:	defffc04 	addi	sp,sp,-16
  80caec:	dc400115 	stw	r17,4(sp)
  80caf0:	dc000015 	stw	r16,0(sp)
  80caf4:	dfc00315 	stw	ra,12(sp)
  80caf8:	dc800215 	stw	r18,8(sp)
  80cafc:	2023883a 	mov	r17,r4
  80cb00:	2821883a 	mov	r16,r5
  80cb04:	20000226 	beq	r4,zero,80cb10 <__srefill_r+0x28>
  80cb08:	20800e17 	ldw	r2,56(r4)
  80cb0c:	10003c26 	beq	r2,zero,80cc00 <__srefill_r+0x118>
  80cb10:	80c0030b 	ldhu	r3,12(r16)
  80cb14:	1908000c 	andi	r4,r3,8192
  80cb18:	1805883a 	mov	r2,r3
  80cb1c:	2000071e 	bne	r4,zero,80cb3c <__srefill_r+0x54>
  80cb20:	81001917 	ldw	r4,100(r16)
  80cb24:	18880014 	ori	r2,r3,8192
  80cb28:	00f7ffc4 	movi	r3,-8193
  80cb2c:	20c8703a 	and	r4,r4,r3
  80cb30:	8080030d 	sth	r2,12(r16)
  80cb34:	1007883a 	mov	r3,r2
  80cb38:	81001915 	stw	r4,100(r16)
  80cb3c:	80000115 	stw	zero,4(r16)
  80cb40:	1100080c 	andi	r4,r2,32
  80cb44:	2000571e 	bne	r4,zero,80cca4 <__srefill_r+0x1bc>
  80cb48:	1100010c 	andi	r4,r2,4
  80cb4c:	20001f26 	beq	r4,zero,80cbcc <__srefill_r+0xe4>
  80cb50:	81400c17 	ldw	r5,48(r16)
  80cb54:	28000826 	beq	r5,zero,80cb78 <__srefill_r+0x90>
  80cb58:	80801004 	addi	r2,r16,64
  80cb5c:	28800226 	beq	r5,r2,80cb68 <__srefill_r+0x80>
  80cb60:	8809883a 	mov	r4,r17
  80cb64:	080b3440 	call	80b344 <_free_r>
  80cb68:	80800f17 	ldw	r2,60(r16)
  80cb6c:	80000c15 	stw	zero,48(r16)
  80cb70:	80800115 	stw	r2,4(r16)
  80cb74:	1000391e 	bne	r2,zero,80cc5c <__srefill_r+0x174>
  80cb78:	80800417 	ldw	r2,16(r16)
  80cb7c:	10004b26 	beq	r2,zero,80ccac <__srefill_r+0x1c4>
  80cb80:	8480030b 	ldhu	r18,12(r16)
  80cb84:	908000cc 	andi	r2,r18,3
  80cb88:	10001f1e 	bne	r2,zero,80cc08 <__srefill_r+0x120>
  80cb8c:	81800417 	ldw	r6,16(r16)
  80cb90:	80800817 	ldw	r2,32(r16)
  80cb94:	81400717 	ldw	r5,28(r16)
  80cb98:	81c00517 	ldw	r7,20(r16)
  80cb9c:	81800015 	stw	r6,0(r16)
  80cba0:	8809883a 	mov	r4,r17
  80cba4:	103ee83a 	callr	r2
  80cba8:	80800115 	stw	r2,4(r16)
  80cbac:	00800e0e 	bge	zero,r2,80cbe8 <__srefill_r+0x100>
  80cbb0:	0005883a 	mov	r2,zero
  80cbb4:	dfc00317 	ldw	ra,12(sp)
  80cbb8:	dc800217 	ldw	r18,8(sp)
  80cbbc:	dc400117 	ldw	r17,4(sp)
  80cbc0:	dc000017 	ldw	r16,0(sp)
  80cbc4:	dec00404 	addi	sp,sp,16
  80cbc8:	f800283a 	ret
  80cbcc:	1100040c 	andi	r4,r2,16
  80cbd0:	20003026 	beq	r4,zero,80cc94 <__srefill_r+0x1ac>
  80cbd4:	1080020c 	andi	r2,r2,8
  80cbd8:	1000241e 	bne	r2,zero,80cc6c <__srefill_r+0x184>
  80cbdc:	18c00114 	ori	r3,r3,4
  80cbe0:	80c0030d 	sth	r3,12(r16)
  80cbe4:	003fe406 	br	80cb78 <__alt_data_end+0xff80cb78>
  80cbe8:	80c0030b 	ldhu	r3,12(r16)
  80cbec:	1000161e 	bne	r2,zero,80cc48 <__srefill_r+0x160>
  80cbf0:	18c00814 	ori	r3,r3,32
  80cbf4:	00bfffc4 	movi	r2,-1
  80cbf8:	80c0030d 	sth	r3,12(r16)
  80cbfc:	003fed06 	br	80cbb4 <__alt_data_end+0xff80cbb4>
  80cc00:	080b0780 	call	80b078 <__sinit>
  80cc04:	003fc206 	br	80cb10 <__alt_data_end+0xff80cb10>
  80cc08:	008020b4 	movhi	r2,130
  80cc0c:	10bbce04 	addi	r2,r2,-4296
  80cc10:	11000017 	ldw	r4,0(r2)
  80cc14:	01402074 	movhi	r5,129
  80cc18:	00800044 	movi	r2,1
  80cc1c:	2972b304 	addi	r5,r5,-13620
  80cc20:	8080030d 	sth	r2,12(r16)
  80cc24:	080bb1c0 	call	80bb1c <_fwalk>
  80cc28:	00800244 	movi	r2,9
  80cc2c:	8480030d 	sth	r18,12(r16)
  80cc30:	9480024c 	andi	r18,r18,9
  80cc34:	90bfd51e 	bne	r18,r2,80cb8c <__alt_data_end+0xff80cb8c>
  80cc38:	8809883a 	mov	r4,r17
  80cc3c:	800b883a 	mov	r5,r16
  80cc40:	080aa940 	call	80aa94 <__sflush_r>
  80cc44:	003fd106 	br	80cb8c <__alt_data_end+0xff80cb8c>
  80cc48:	18c01014 	ori	r3,r3,64
  80cc4c:	80000115 	stw	zero,4(r16)
  80cc50:	00bfffc4 	movi	r2,-1
  80cc54:	80c0030d 	sth	r3,12(r16)
  80cc58:	003fd606 	br	80cbb4 <__alt_data_end+0xff80cbb4>
  80cc5c:	80c00e17 	ldw	r3,56(r16)
  80cc60:	0005883a 	mov	r2,zero
  80cc64:	80c00015 	stw	r3,0(r16)
  80cc68:	003fd206 	br	80cbb4 <__alt_data_end+0xff80cbb4>
  80cc6c:	8809883a 	mov	r4,r17
  80cc70:	800b883a 	mov	r5,r16
  80cc74:	080ac9c0 	call	80ac9c <_fflush_r>
  80cc78:	10000a1e 	bne	r2,zero,80cca4 <__srefill_r+0x1bc>
  80cc7c:	8080030b 	ldhu	r2,12(r16)
  80cc80:	00fffdc4 	movi	r3,-9
  80cc84:	80000215 	stw	zero,8(r16)
  80cc88:	1886703a 	and	r3,r3,r2
  80cc8c:	80000615 	stw	zero,24(r16)
  80cc90:	003fd206 	br	80cbdc <__alt_data_end+0xff80cbdc>
  80cc94:	00800244 	movi	r2,9
  80cc98:	88800015 	stw	r2,0(r17)
  80cc9c:	18c01014 	ori	r3,r3,64
  80cca0:	80c0030d 	sth	r3,12(r16)
  80cca4:	00bfffc4 	movi	r2,-1
  80cca8:	003fc206 	br	80cbb4 <__alt_data_end+0xff80cbb4>
  80ccac:	8809883a 	mov	r4,r17
  80ccb0:	800b883a 	mov	r5,r16
  80ccb4:	080bea80 	call	80bea8 <__smakebuf_r>
  80ccb8:	003fb106 	br	80cb80 <__alt_data_end+0xff80cb80>

0080ccbc <__srget_r>:
  80ccbc:	defffd04 	addi	sp,sp,-12
  80ccc0:	dc400115 	stw	r17,4(sp)
  80ccc4:	dc000015 	stw	r16,0(sp)
  80ccc8:	dfc00215 	stw	ra,8(sp)
  80cccc:	2023883a 	mov	r17,r4
  80ccd0:	2821883a 	mov	r16,r5
  80ccd4:	20000226 	beq	r4,zero,80cce0 <__srget_r+0x24>
  80ccd8:	20800e17 	ldw	r2,56(r4)
  80ccdc:	10001026 	beq	r2,zero,80cd20 <__srget_r+0x64>
  80cce0:	8809883a 	mov	r4,r17
  80cce4:	800b883a 	mov	r5,r16
  80cce8:	080cae80 	call	80cae8 <__srefill_r>
  80ccec:	10000e1e 	bne	r2,zero,80cd28 <__srget_r+0x6c>
  80ccf0:	80c00017 	ldw	r3,0(r16)
  80ccf4:	80800117 	ldw	r2,4(r16)
  80ccf8:	19000044 	addi	r4,r3,1
  80ccfc:	10bfffc4 	addi	r2,r2,-1
  80cd00:	80800115 	stw	r2,4(r16)
  80cd04:	81000015 	stw	r4,0(r16)
  80cd08:	18800003 	ldbu	r2,0(r3)
  80cd0c:	dfc00217 	ldw	ra,8(sp)
  80cd10:	dc400117 	ldw	r17,4(sp)
  80cd14:	dc000017 	ldw	r16,0(sp)
  80cd18:	dec00304 	addi	sp,sp,12
  80cd1c:	f800283a 	ret
  80cd20:	080b0780 	call	80b078 <__sinit>
  80cd24:	003fee06 	br	80cce0 <__alt_data_end+0xff80cce0>
  80cd28:	00bfffc4 	movi	r2,-1
  80cd2c:	003ff706 	br	80cd0c <__alt_data_end+0xff80cd0c>

0080cd30 <__srget>:
  80cd30:	008020b4 	movhi	r2,130
  80cd34:	10bbcf04 	addi	r2,r2,-4292
  80cd38:	200b883a 	mov	r5,r4
  80cd3c:	11000017 	ldw	r4,0(r2)
  80cd40:	080ccbc1 	jmpi	80ccbc <__srget_r>

0080cd44 <_sbrk_r>:
  80cd44:	defffd04 	addi	sp,sp,-12
  80cd48:	dc000015 	stw	r16,0(sp)
  80cd4c:	040020b4 	movhi	r16,130
  80cd50:	dc400115 	stw	r17,4(sp)
  80cd54:	84034404 	addi	r16,r16,3344
  80cd58:	2023883a 	mov	r17,r4
  80cd5c:	2809883a 	mov	r4,r5
  80cd60:	dfc00215 	stw	ra,8(sp)
  80cd64:	80000015 	stw	zero,0(r16)
  80cd68:	08189280 	call	818928 <sbrk>
  80cd6c:	00ffffc4 	movi	r3,-1
  80cd70:	10c00526 	beq	r2,r3,80cd88 <_sbrk_r+0x44>
  80cd74:	dfc00217 	ldw	ra,8(sp)
  80cd78:	dc400117 	ldw	r17,4(sp)
  80cd7c:	dc000017 	ldw	r16,0(sp)
  80cd80:	dec00304 	addi	sp,sp,12
  80cd84:	f800283a 	ret
  80cd88:	80c00017 	ldw	r3,0(r16)
  80cd8c:	183ff926 	beq	r3,zero,80cd74 <__alt_data_end+0xff80cd74>
  80cd90:	88c00015 	stw	r3,0(r17)
  80cd94:	003ff706 	br	80cd74 <__alt_data_end+0xff80cd74>

0080cd98 <__sread>:
  80cd98:	defffe04 	addi	sp,sp,-8
  80cd9c:	dc000015 	stw	r16,0(sp)
  80cda0:	2821883a 	mov	r16,r5
  80cda4:	2940038f 	ldh	r5,14(r5)
  80cda8:	dfc00115 	stw	ra,4(sp)
  80cdac:	08126dc0 	call	8126dc <_read_r>
  80cdb0:	10000716 	blt	r2,zero,80cdd0 <__sread+0x38>
  80cdb4:	80c01417 	ldw	r3,80(r16)
  80cdb8:	1887883a 	add	r3,r3,r2
  80cdbc:	80c01415 	stw	r3,80(r16)
  80cdc0:	dfc00117 	ldw	ra,4(sp)
  80cdc4:	dc000017 	ldw	r16,0(sp)
  80cdc8:	dec00204 	addi	sp,sp,8
  80cdcc:	f800283a 	ret
  80cdd0:	80c0030b 	ldhu	r3,12(r16)
  80cdd4:	18fbffcc 	andi	r3,r3,61439
  80cdd8:	80c0030d 	sth	r3,12(r16)
  80cddc:	dfc00117 	ldw	ra,4(sp)
  80cde0:	dc000017 	ldw	r16,0(sp)
  80cde4:	dec00204 	addi	sp,sp,8
  80cde8:	f800283a 	ret

0080cdec <__seofread>:
  80cdec:	0005883a 	mov	r2,zero
  80cdf0:	f800283a 	ret

0080cdf4 <__swrite>:
  80cdf4:	2880030b 	ldhu	r2,12(r5)
  80cdf8:	defffb04 	addi	sp,sp,-20
  80cdfc:	dcc00315 	stw	r19,12(sp)
  80ce00:	dc800215 	stw	r18,8(sp)
  80ce04:	dc400115 	stw	r17,4(sp)
  80ce08:	dc000015 	stw	r16,0(sp)
  80ce0c:	dfc00415 	stw	ra,16(sp)
  80ce10:	10c0400c 	andi	r3,r2,256
  80ce14:	2821883a 	mov	r16,r5
  80ce18:	2027883a 	mov	r19,r4
  80ce1c:	3025883a 	mov	r18,r6
  80ce20:	3823883a 	mov	r17,r7
  80ce24:	18000526 	beq	r3,zero,80ce3c <__swrite+0x48>
  80ce28:	2940038f 	ldh	r5,14(r5)
  80ce2c:	000d883a 	mov	r6,zero
  80ce30:	01c00084 	movi	r7,2
  80ce34:	08111f80 	call	8111f8 <_lseek_r>
  80ce38:	8080030b 	ldhu	r2,12(r16)
  80ce3c:	8140038f 	ldh	r5,14(r16)
  80ce40:	10bbffcc 	andi	r2,r2,61439
  80ce44:	9809883a 	mov	r4,r19
  80ce48:	900d883a 	mov	r6,r18
  80ce4c:	880f883a 	mov	r7,r17
  80ce50:	8080030d 	sth	r2,12(r16)
  80ce54:	dfc00417 	ldw	ra,16(sp)
  80ce58:	dcc00317 	ldw	r19,12(sp)
  80ce5c:	dc800217 	ldw	r18,8(sp)
  80ce60:	dc400117 	ldw	r17,4(sp)
  80ce64:	dc000017 	ldw	r16,0(sp)
  80ce68:	dec00504 	addi	sp,sp,20
  80ce6c:	080f02c1 	jmpi	80f02c <_write_r>

0080ce70 <__sseek>:
  80ce70:	defffe04 	addi	sp,sp,-8
  80ce74:	dc000015 	stw	r16,0(sp)
  80ce78:	2821883a 	mov	r16,r5
  80ce7c:	2940038f 	ldh	r5,14(r5)
  80ce80:	dfc00115 	stw	ra,4(sp)
  80ce84:	08111f80 	call	8111f8 <_lseek_r>
  80ce88:	00ffffc4 	movi	r3,-1
  80ce8c:	10c00826 	beq	r2,r3,80ceb0 <__sseek+0x40>
  80ce90:	80c0030b 	ldhu	r3,12(r16)
  80ce94:	80801415 	stw	r2,80(r16)
  80ce98:	18c40014 	ori	r3,r3,4096
  80ce9c:	80c0030d 	sth	r3,12(r16)
  80cea0:	dfc00117 	ldw	ra,4(sp)
  80cea4:	dc000017 	ldw	r16,0(sp)
  80cea8:	dec00204 	addi	sp,sp,8
  80ceac:	f800283a 	ret
  80ceb0:	80c0030b 	ldhu	r3,12(r16)
  80ceb4:	18fbffcc 	andi	r3,r3,61439
  80ceb8:	80c0030d 	sth	r3,12(r16)
  80cebc:	dfc00117 	ldw	ra,4(sp)
  80cec0:	dc000017 	ldw	r16,0(sp)
  80cec4:	dec00204 	addi	sp,sp,8
  80cec8:	f800283a 	ret

0080cecc <__sclose>:
  80cecc:	2940038f 	ldh	r5,14(r5)
  80ced0:	080f1dc1 	jmpi	80f1dc <_close_r>

0080ced4 <strcpy>:
  80ced4:	2906b03a 	or	r3,r5,r4
  80ced8:	18c000cc 	andi	r3,r3,3
  80cedc:	2005883a 	mov	r2,r4
  80cee0:	1800161e 	bne	r3,zero,80cf3c <strcpy+0x68>
  80cee4:	29c00017 	ldw	r7,0(r5)
  80cee8:	02ffbff4 	movhi	r11,65279
  80ceec:	5affbfc4 	addi	r11,r11,-257
  80cef0:	02a02074 	movhi	r10,32897
  80cef4:	01c8303a 	nor	r4,zero,r7
  80cef8:	3ac7883a 	add	r3,r7,r11
  80cefc:	52a02004 	addi	r10,r10,-32640
  80cf00:	20c6703a 	and	r3,r4,r3
  80cf04:	1a86703a 	and	r3,r3,r10
  80cf08:	18000c1e 	bne	r3,zero,80cf3c <strcpy+0x68>
  80cf0c:	1011883a 	mov	r8,r2
  80cf10:	41c00015 	stw	r7,0(r8)
  80cf14:	29400104 	addi	r5,r5,4
  80cf18:	29c00017 	ldw	r7,0(r5)
  80cf1c:	41800104 	addi	r6,r8,4
  80cf20:	3011883a 	mov	r8,r6
  80cf24:	01d2303a 	nor	r9,zero,r7
  80cf28:	3ac7883a 	add	r3,r7,r11
  80cf2c:	48c6703a 	and	r3,r9,r3
  80cf30:	1a86703a 	and	r3,r3,r10
  80cf34:	183ff626 	beq	r3,zero,80cf10 <__alt_data_end+0xff80cf10>
  80cf38:	00000106 	br	80cf40 <strcpy+0x6c>
  80cf3c:	100d883a 	mov	r6,r2
  80cf40:	28c00003 	ldbu	r3,0(r5)
  80cf44:	31800044 	addi	r6,r6,1
  80cf48:	29400044 	addi	r5,r5,1
  80cf4c:	30ffffc5 	stb	r3,-1(r6)
  80cf50:	18c03fcc 	andi	r3,r3,255
  80cf54:	18c0201c 	xori	r3,r3,128
  80cf58:	18ffe004 	addi	r3,r3,-128
  80cf5c:	183ff81e 	bne	r3,zero,80cf40 <__alt_data_end+0xff80cf40>
  80cf60:	f800283a 	ret

0080cf64 <strlen>:
  80cf64:	208000cc 	andi	r2,r4,3
  80cf68:	10002026 	beq	r2,zero,80cfec <strlen+0x88>
  80cf6c:	20800007 	ldb	r2,0(r4)
  80cf70:	10002026 	beq	r2,zero,80cff4 <strlen+0x90>
  80cf74:	2005883a 	mov	r2,r4
  80cf78:	00000206 	br	80cf84 <strlen+0x20>
  80cf7c:	10c00007 	ldb	r3,0(r2)
  80cf80:	18001826 	beq	r3,zero,80cfe4 <strlen+0x80>
  80cf84:	10800044 	addi	r2,r2,1
  80cf88:	10c000cc 	andi	r3,r2,3
  80cf8c:	183ffb1e 	bne	r3,zero,80cf7c <__alt_data_end+0xff80cf7c>
  80cf90:	10c00017 	ldw	r3,0(r2)
  80cf94:	01ffbff4 	movhi	r7,65279
  80cf98:	39ffbfc4 	addi	r7,r7,-257
  80cf9c:	00ca303a 	nor	r5,zero,r3
  80cfa0:	01a02074 	movhi	r6,32897
  80cfa4:	19c7883a 	add	r3,r3,r7
  80cfa8:	31a02004 	addi	r6,r6,-32640
  80cfac:	1946703a 	and	r3,r3,r5
  80cfb0:	1986703a 	and	r3,r3,r6
  80cfb4:	1800091e 	bne	r3,zero,80cfdc <strlen+0x78>
  80cfb8:	10800104 	addi	r2,r2,4
  80cfbc:	10c00017 	ldw	r3,0(r2)
  80cfc0:	19cb883a 	add	r5,r3,r7
  80cfc4:	00c6303a 	nor	r3,zero,r3
  80cfc8:	28c6703a 	and	r3,r5,r3
  80cfcc:	1986703a 	and	r3,r3,r6
  80cfd0:	183ff926 	beq	r3,zero,80cfb8 <__alt_data_end+0xff80cfb8>
  80cfd4:	00000106 	br	80cfdc <strlen+0x78>
  80cfd8:	10800044 	addi	r2,r2,1
  80cfdc:	10c00007 	ldb	r3,0(r2)
  80cfe0:	183ffd1e 	bne	r3,zero,80cfd8 <__alt_data_end+0xff80cfd8>
  80cfe4:	1105c83a 	sub	r2,r2,r4
  80cfe8:	f800283a 	ret
  80cfec:	2005883a 	mov	r2,r4
  80cff0:	003fe706 	br	80cf90 <__alt_data_end+0xff80cf90>
  80cff4:	0005883a 	mov	r2,zero
  80cff8:	f800283a 	ret

0080cffc <___vfprintf_internal_r>:
  80cffc:	deffb604 	addi	sp,sp,-296
  80d000:	dfc04915 	stw	ra,292(sp)
  80d004:	ddc04715 	stw	r23,284(sp)
  80d008:	dd804615 	stw	r22,280(sp)
  80d00c:	282f883a 	mov	r23,r5
  80d010:	202d883a 	mov	r22,r4
  80d014:	d9802a15 	stw	r6,168(sp)
  80d018:	d9c02d15 	stw	r7,180(sp)
  80d01c:	df004815 	stw	fp,288(sp)
  80d020:	dd404515 	stw	r21,276(sp)
  80d024:	dd004415 	stw	r20,272(sp)
  80d028:	dcc04315 	stw	r19,268(sp)
  80d02c:	dc804215 	stw	r18,264(sp)
  80d030:	dc404115 	stw	r17,260(sp)
  80d034:	dc004015 	stw	r16,256(sp)
  80d038:	08111c40 	call	8111c4 <_localeconv_r>
  80d03c:	10800017 	ldw	r2,0(r2)
  80d040:	1009883a 	mov	r4,r2
  80d044:	d8803515 	stw	r2,212(sp)
  80d048:	080cf640 	call	80cf64 <strlen>
  80d04c:	d8803815 	stw	r2,224(sp)
  80d050:	b0000226 	beq	r22,zero,80d05c <___vfprintf_internal_r+0x60>
  80d054:	b0800e17 	ldw	r2,56(r22)
  80d058:	1000e126 	beq	r2,zero,80d3e0 <___vfprintf_internal_r+0x3e4>
  80d05c:	b880030b 	ldhu	r2,12(r23)
  80d060:	10c8000c 	andi	r3,r2,8192
  80d064:	1800061e 	bne	r3,zero,80d080 <___vfprintf_internal_r+0x84>
  80d068:	b9001917 	ldw	r4,100(r23)
  80d06c:	00f7ffc4 	movi	r3,-8193
  80d070:	10880014 	ori	r2,r2,8192
  80d074:	20c6703a 	and	r3,r4,r3
  80d078:	b880030d 	sth	r2,12(r23)
  80d07c:	b8c01915 	stw	r3,100(r23)
  80d080:	10c0020c 	andi	r3,r2,8
  80d084:	1800a726 	beq	r3,zero,80d324 <___vfprintf_internal_r+0x328>
  80d088:	b8c00417 	ldw	r3,16(r23)
  80d08c:	1800a526 	beq	r3,zero,80d324 <___vfprintf_internal_r+0x328>
  80d090:	1080068c 	andi	r2,r2,26
  80d094:	00c00284 	movi	r3,10
  80d098:	10c0aa26 	beq	r2,r3,80d344 <___vfprintf_internal_r+0x348>
  80d09c:	dac01e04 	addi	r11,sp,120
  80d0a0:	db001dc4 	addi	r12,sp,119
  80d0a4:	d8800404 	addi	r2,sp,16
  80d0a8:	050020b4 	movhi	r20,130
  80d0ac:	dac02815 	stw	r11,160(sp)
  80d0b0:	5b17c83a 	sub	r11,r11,r12
  80d0b4:	a5332d84 	addi	r20,r20,-13130
  80d0b8:	db002915 	stw	r12,164(sp)
  80d0bc:	d8801e15 	stw	r2,120(sp)
  80d0c0:	d8002015 	stw	zero,128(sp)
  80d0c4:	d8001f15 	stw	zero,124(sp)
  80d0c8:	d8003315 	stw	zero,204(sp)
  80d0cc:	d8003715 	stw	zero,220(sp)
  80d0d0:	d8003915 	stw	zero,228(sp)
  80d0d4:	1011883a 	mov	r8,r2
  80d0d8:	d8003b15 	stw	zero,236(sp)
  80d0dc:	d8003a15 	stw	zero,232(sp)
  80d0e0:	d8002f15 	stw	zero,188(sp)
  80d0e4:	dac03c15 	stw	r11,240(sp)
  80d0e8:	db002a17 	ldw	r12,168(sp)
  80d0ec:	60800007 	ldb	r2,0(r12)
  80d0f0:	1000be26 	beq	r2,zero,80d3ec <___vfprintf_internal_r+0x3f0>
  80d0f4:	00c00944 	movi	r3,37
  80d0f8:	10c0bc26 	beq	r2,r3,80d3ec <___vfprintf_internal_r+0x3f0>
  80d0fc:	6021883a 	mov	r16,r12
  80d100:	00000106 	br	80d108 <___vfprintf_internal_r+0x10c>
  80d104:	10c08426 	beq	r2,r3,80d318 <___vfprintf_internal_r+0x31c>
  80d108:	84000044 	addi	r16,r16,1
  80d10c:	80800007 	ldb	r2,0(r16)
  80d110:	103ffc1e 	bne	r2,zero,80d104 <__alt_data_end+0xff80d104>
  80d114:	dac02a17 	ldw	r11,168(sp)
  80d118:	82e3c83a 	sub	r17,r16,r11
  80d11c:	88000f26 	beq	r17,zero,80d15c <___vfprintf_internal_r+0x160>
  80d120:	d8c02017 	ldw	r3,128(sp)
  80d124:	d8801f17 	ldw	r2,124(sp)
  80d128:	dac02a17 	ldw	r11,168(sp)
  80d12c:	1c47883a 	add	r3,r3,r17
  80d130:	10800044 	addi	r2,r2,1
  80d134:	d8c02015 	stw	r3,128(sp)
  80d138:	42c00015 	stw	r11,0(r8)
  80d13c:	44400115 	stw	r17,4(r8)
  80d140:	d8801f15 	stw	r2,124(sp)
  80d144:	00c001c4 	movi	r3,7
  80d148:	18809316 	blt	r3,r2,80d398 <___vfprintf_internal_r+0x39c>
  80d14c:	42000204 	addi	r8,r8,8
  80d150:	db002f17 	ldw	r12,188(sp)
  80d154:	6459883a 	add	r12,r12,r17
  80d158:	db002f15 	stw	r12,188(sp)
  80d15c:	80800007 	ldb	r2,0(r16)
  80d160:	10009426 	beq	r2,zero,80d3b4 <___vfprintf_internal_r+0x3b8>
  80d164:	80800044 	addi	r2,r16,1
  80d168:	84000047 	ldb	r16,1(r16)
  80d16c:	d8002785 	stb	zero,158(sp)
  80d170:	000d883a 	mov	r6,zero
  80d174:	027fffc4 	movi	r9,-1
  80d178:	d8002e15 	stw	zero,184(sp)
  80d17c:	0023883a 	mov	r17,zero
  80d180:	01001604 	movi	r4,88
  80d184:	01400244 	movi	r5,9
  80d188:	02800a84 	movi	r10,42
  80d18c:	01c01b04 	movi	r7,108
  80d190:	10c00044 	addi	r3,r2,1
  80d194:	80bff804 	addi	r2,r16,-32
  80d198:	2082cd36 	bltu	r4,r2,80dcd0 <___vfprintf_internal_r+0xcd4>
  80d19c:	100490ba 	slli	r2,r2,2
  80d1a0:	02c02074 	movhi	r11,129
  80d1a4:	5af46d04 	addi	r11,r11,-11852
  80d1a8:	12c5883a 	add	r2,r2,r11
  80d1ac:	10800017 	ldw	r2,0(r2)
  80d1b0:	1000683a 	jmp	r2
  80d1b4:	0080dae8 	cmpgeui	r2,zero,875
  80d1b8:	0080dcd0 	cmplti	r2,zero,883
  80d1bc:	0080dcd0 	cmplti	r2,zero,883
  80d1c0:	0080dc38 	rdprs	r2,zero,880
  80d1c4:	0080dcd0 	cmplti	r2,zero,883
  80d1c8:	0080dcd0 	cmplti	r2,zero,883
  80d1cc:	0080dcd0 	cmplti	r2,zero,883
  80d1d0:	0080dcd0 	cmplti	r2,zero,883
  80d1d4:	0080dcd0 	cmplti	r2,zero,883
  80d1d8:	0080dcd0 	cmplti	r2,zero,883
  80d1dc:	0080db08 	cmpgei	r2,zero,876
  80d1e0:	0080db34 	movhi	r2,876
  80d1e4:	0080dcd0 	cmplti	r2,zero,883
  80d1e8:	0080d3f4 	movhi	r2,847
  80d1ec:	0080d404 	movi	r2,848
  80d1f0:	0080dcd0 	cmplti	r2,zero,883
  80d1f4:	0080d444 	movi	r2,849
  80d1f8:	0080d454 	movui	r2,849
  80d1fc:	0080d454 	movui	r2,849
  80d200:	0080d454 	movui	r2,849
  80d204:	0080d454 	movui	r2,849
  80d208:	0080d454 	movui	r2,849
  80d20c:	0080d454 	movui	r2,849
  80d210:	0080d454 	movui	r2,849
  80d214:	0080d454 	movui	r2,849
  80d218:	0080d454 	movui	r2,849
  80d21c:	0080dcd0 	cmplti	r2,zero,883
  80d220:	0080dcd0 	cmplti	r2,zero,883
  80d224:	0080dcd0 	cmplti	r2,zero,883
  80d228:	0080dcd0 	cmplti	r2,zero,883
  80d22c:	0080dcd0 	cmplti	r2,zero,883
  80d230:	0080dcd0 	cmplti	r2,zero,883
  80d234:	0080dcd0 	cmplti	r2,zero,883
  80d238:	0080dcd0 	cmplti	r2,zero,883
  80d23c:	0080dcd0 	cmplti	r2,zero,883
  80d240:	0080dcd0 	cmplti	r2,zero,883
  80d244:	0080d488 	cmpgei	r2,zero,850
  80d248:	0080d8f8 	rdprs	r2,zero,867
  80d24c:	0080dcd0 	cmplti	r2,zero,883
  80d250:	0080d8f8 	rdprs	r2,zero,867
  80d254:	0080dcd0 	cmplti	r2,zero,883
  80d258:	0080dcd0 	cmplti	r2,zero,883
  80d25c:	0080dcd0 	cmplti	r2,zero,883
  80d260:	0080dcd0 	cmplti	r2,zero,883
  80d264:	0080d9e4 	muli	r2,zero,871
  80d268:	0080dcd0 	cmplti	r2,zero,883
  80d26c:	0080dcd0 	cmplti	r2,zero,883
  80d270:	0080d88c 	andi	r2,zero,866
  80d274:	0080dcd0 	cmplti	r2,zero,883
  80d278:	0080dcd0 	cmplti	r2,zero,883
  80d27c:	0080dcd0 	cmplti	r2,zero,883
  80d280:	0080dcd0 	cmplti	r2,zero,883
  80d284:	0080dcd0 	cmplti	r2,zero,883
  80d288:	0080d8c8 	cmpgei	r2,zero,867
  80d28c:	0080dcd0 	cmplti	r2,zero,883
  80d290:	0080dcd0 	cmplti	r2,zero,883
  80d294:	0080da8c 	andi	r2,zero,874
  80d298:	0080dcd0 	cmplti	r2,zero,883
  80d29c:	0080dcd0 	cmplti	r2,zero,883
  80d2a0:	0080dcd0 	cmplti	r2,zero,883
  80d2a4:	0080dcd0 	cmplti	r2,zero,883
  80d2a8:	0080dcd0 	cmplti	r2,zero,883
  80d2ac:	0080dcd0 	cmplti	r2,zero,883
  80d2b0:	0080dcd0 	cmplti	r2,zero,883
  80d2b4:	0080dcd0 	cmplti	r2,zero,883
  80d2b8:	0080dcd0 	cmplti	r2,zero,883
  80d2bc:	0080dcd0 	cmplti	r2,zero,883
  80d2c0:	0080db44 	movi	r2,877
  80d2c4:	0080d9f4 	movhi	r2,871
  80d2c8:	0080d8f8 	rdprs	r2,zero,867
  80d2cc:	0080d8f8 	rdprs	r2,zero,867
  80d2d0:	0080d8f8 	rdprs	r2,zero,867
  80d2d4:	0080da34 	movhi	r2,872
  80d2d8:	0080d9f4 	movhi	r2,871
  80d2dc:	0080dcd0 	cmplti	r2,zero,883
  80d2e0:	0080dcd0 	cmplti	r2,zero,883
  80d2e4:	0080da44 	movi	r2,873
  80d2e8:	0080dcd0 	cmplti	r2,zero,883
  80d2ec:	0080da58 	cmpnei	r2,zero,873
  80d2f0:	0080dc94 	movui	r2,882
  80d2f4:	0080d99c 	xori	r2,zero,870
  80d2f8:	0080dc48 	cmpgei	r2,zero,881
  80d2fc:	0080dcd0 	cmplti	r2,zero,883
  80d300:	0080db84 	movi	r2,878
  80d304:	0080dcd0 	cmplti	r2,zero,883
  80d308:	0080dc58 	cmpnei	r2,zero,881
  80d30c:	0080dcd0 	cmplti	r2,zero,883
  80d310:	0080dcd0 	cmplti	r2,zero,883
  80d314:	0080dbf8 	rdprs	r2,zero,879
  80d318:	db002a17 	ldw	r12,168(sp)
  80d31c:	8323c83a 	sub	r17,r16,r12
  80d320:	003f7e06 	br	80d11c <__alt_data_end+0xff80d11c>
  80d324:	b009883a 	mov	r4,r22
  80d328:	b80b883a 	mov	r5,r23
  80d32c:	080f0880 	call	80f088 <__swsetup_r>
  80d330:	10000c1e 	bne	r2,zero,80d364 <___vfprintf_internal_r+0x368>
  80d334:	b880030b 	ldhu	r2,12(r23)
  80d338:	00c00284 	movi	r3,10
  80d33c:	1080068c 	andi	r2,r2,26
  80d340:	10ff561e 	bne	r2,r3,80d09c <__alt_data_end+0xff80d09c>
  80d344:	b880038f 	ldh	r2,14(r23)
  80d348:	103f5416 	blt	r2,zero,80d09c <__alt_data_end+0xff80d09c>
  80d34c:	d9802a17 	ldw	r6,168(sp)
  80d350:	d9c02d17 	ldw	r7,180(sp)
  80d354:	b009883a 	mov	r4,r22
  80d358:	b80b883a 	mov	r5,r23
  80d35c:	080ef700 	call	80ef70 <__sbprintf>
  80d360:	00000106 	br	80d368 <___vfprintf_internal_r+0x36c>
  80d364:	00bfffc4 	movi	r2,-1
  80d368:	dfc04917 	ldw	ra,292(sp)
  80d36c:	df004817 	ldw	fp,288(sp)
  80d370:	ddc04717 	ldw	r23,284(sp)
  80d374:	dd804617 	ldw	r22,280(sp)
  80d378:	dd404517 	ldw	r21,276(sp)
  80d37c:	dd004417 	ldw	r20,272(sp)
  80d380:	dcc04317 	ldw	r19,268(sp)
  80d384:	dc804217 	ldw	r18,264(sp)
  80d388:	dc404117 	ldw	r17,260(sp)
  80d38c:	dc004017 	ldw	r16,256(sp)
  80d390:	dec04a04 	addi	sp,sp,296
  80d394:	f800283a 	ret
  80d398:	b009883a 	mov	r4,r22
  80d39c:	b80b883a 	mov	r5,r23
  80d3a0:	d9801e04 	addi	r6,sp,120
  80d3a4:	0812eb40 	call	812eb4 <__sprint_r>
  80d3a8:	1000081e 	bne	r2,zero,80d3cc <___vfprintf_internal_r+0x3d0>
  80d3ac:	da000404 	addi	r8,sp,16
  80d3b0:	003f6706 	br	80d150 <__alt_data_end+0xff80d150>
  80d3b4:	d8802017 	ldw	r2,128(sp)
  80d3b8:	10000426 	beq	r2,zero,80d3cc <___vfprintf_internal_r+0x3d0>
  80d3bc:	b009883a 	mov	r4,r22
  80d3c0:	b80b883a 	mov	r5,r23
  80d3c4:	d9801e04 	addi	r6,sp,120
  80d3c8:	0812eb40 	call	812eb4 <__sprint_r>
  80d3cc:	b880030b 	ldhu	r2,12(r23)
  80d3d0:	1080100c 	andi	r2,r2,64
  80d3d4:	103fe31e 	bne	r2,zero,80d364 <__alt_data_end+0xff80d364>
  80d3d8:	d8802f17 	ldw	r2,188(sp)
  80d3dc:	003fe206 	br	80d368 <__alt_data_end+0xff80d368>
  80d3e0:	b009883a 	mov	r4,r22
  80d3e4:	080b0780 	call	80b078 <__sinit>
  80d3e8:	003f1c06 	br	80d05c <__alt_data_end+0xff80d05c>
  80d3ec:	dc002a17 	ldw	r16,168(sp)
  80d3f0:	003f5a06 	br	80d15c <__alt_data_end+0xff80d15c>
  80d3f4:	1805883a 	mov	r2,r3
  80d3f8:	8c400114 	ori	r17,r17,4
  80d3fc:	1c000007 	ldb	r16,0(r3)
  80d400:	003f6306 	br	80d190 <__alt_data_end+0xff80d190>
  80d404:	1c000007 	ldb	r16,0(r3)
  80d408:	18800044 	addi	r2,r3,1
  80d40c:	8286ad26 	beq	r16,r10,80eec4 <___vfprintf_internal_r+0x1ec8>
  80d410:	82fff404 	addi	r11,r16,-48
  80d414:	1007883a 	mov	r3,r2
  80d418:	0013883a 	mov	r9,zero
  80d41c:	2aff5d36 	bltu	r5,r11,80d194 <__alt_data_end+0xff80d194>
  80d420:	1c000007 	ldb	r16,0(r3)
  80d424:	4a4002a4 	muli	r9,r9,10
  80d428:	18c00044 	addi	r3,r3,1
  80d42c:	5a53883a 	add	r9,r11,r9
  80d430:	82fff404 	addi	r11,r16,-48
  80d434:	2afffa2e 	bgeu	r5,r11,80d420 <__alt_data_end+0xff80d420>
  80d438:	483f560e 	bge	r9,zero,80d194 <__alt_data_end+0xff80d194>
  80d43c:	027fffc4 	movi	r9,-1
  80d440:	003f5406 	br	80d194 <__alt_data_end+0xff80d194>
  80d444:	8c402014 	ori	r17,r17,128
  80d448:	1805883a 	mov	r2,r3
  80d44c:	1c000007 	ldb	r16,0(r3)
  80d450:	003f4f06 	br	80d190 <__alt_data_end+0xff80d190>
  80d454:	1805883a 	mov	r2,r3
  80d458:	d8002e15 	stw	zero,184(sp)
  80d45c:	82fff404 	addi	r11,r16,-48
  80d460:	0019883a 	mov	r12,zero
  80d464:	14000007 	ldb	r16,0(r2)
  80d468:	630002a4 	muli	r12,r12,10
  80d46c:	18c00044 	addi	r3,r3,1
  80d470:	1805883a 	mov	r2,r3
  80d474:	62d9883a 	add	r12,r12,r11
  80d478:	82fff404 	addi	r11,r16,-48
  80d47c:	2afff92e 	bgeu	r5,r11,80d464 <__alt_data_end+0xff80d464>
  80d480:	db002e15 	stw	r12,184(sp)
  80d484:	003f4306 	br	80d194 <__alt_data_end+0xff80d194>
  80d488:	8c400414 	ori	r17,r17,16
  80d48c:	d8c02a15 	stw	r3,168(sp)
  80d490:	d9802785 	stb	r6,158(sp)
  80d494:	8880080c 	andi	r2,r17,32
  80d498:	d8c02d17 	ldw	r3,180(sp)
  80d49c:	10015a26 	beq	r2,zero,80da08 <___vfprintf_internal_r+0xa0c>
  80d4a0:	db002d17 	ldw	r12,180(sp)
  80d4a4:	18800117 	ldw	r2,4(r3)
  80d4a8:	1cc00017 	ldw	r19,0(r3)
  80d4ac:	63000204 	addi	r12,r12,8
  80d4b0:	db002d15 	stw	r12,180(sp)
  80d4b4:	1039883a 	mov	fp,r2
  80d4b8:	10044516 	blt	r2,zero,80e5d0 <___vfprintf_internal_r+0x15d4>
  80d4bc:	dd402783 	ldbu	r21,158(sp)
  80d4c0:	da403215 	stw	r9,200(sp)
  80d4c4:	00800044 	movi	r2,1
  80d4c8:	9f06b03a 	or	r3,r19,fp
  80d4cc:	48000216 	blt	r9,zero,80d4d8 <___vfprintf_internal_r+0x4dc>
  80d4d0:	013fdfc4 	movi	r4,-129
  80d4d4:	8922703a 	and	r17,r17,r4
  80d4d8:	1802071e 	bne	r3,zero,80dcf8 <___vfprintf_internal_r+0xcfc>
  80d4dc:	4802fa26 	beq	r9,zero,80e0c8 <___vfprintf_internal_r+0x10cc>
  80d4e0:	10803fcc 	andi	r2,r2,255
  80d4e4:	00c00044 	movi	r3,1
  80d4e8:	10c22926 	beq	r2,r3,80dd90 <___vfprintf_internal_r+0xd94>
  80d4ec:	00c00084 	movi	r3,2
  80d4f0:	10c31726 	beq	r2,r3,80e150 <___vfprintf_internal_r+0x1154>
  80d4f4:	d8c01e04 	addi	r3,sp,120
  80d4f8:	9808d0fa 	srli	r4,r19,3
  80d4fc:	e00a977a 	slli	r5,fp,29
  80d500:	e038d0fa 	srli	fp,fp,3
  80d504:	9cc001cc 	andi	r19,r19,7
  80d508:	98800c04 	addi	r2,r19,48
  80d50c:	18ffffc4 	addi	r3,r3,-1
  80d510:	2926b03a 	or	r19,r5,r4
  80d514:	18800005 	stb	r2,0(r3)
  80d518:	9f08b03a 	or	r4,r19,fp
  80d51c:	203ff61e 	bne	r4,zero,80d4f8 <__alt_data_end+0xff80d4f8>
  80d520:	8900004c 	andi	r4,r17,1
  80d524:	d8c03115 	stw	r3,196(sp)
  80d528:	2003931e 	bne	r4,zero,80e378 <___vfprintf_internal_r+0x137c>
  80d52c:	dac02817 	ldw	r11,160(sp)
  80d530:	58e5c83a 	sub	r18,r11,r3
  80d534:	9005883a 	mov	r2,r18
  80d538:	9240010e 	bge	r18,r9,80d540 <___vfprintf_internal_r+0x544>
  80d53c:	4805883a 	mov	r2,r9
  80d540:	d8802b15 	stw	r2,172(sp)
  80d544:	d8003415 	stw	zero,208(sp)
  80d548:	a8803fcc 	andi	r2,r21,255
  80d54c:	1080201c 	xori	r2,r2,128
  80d550:	10bfe004 	addi	r2,r2,-128
  80d554:	10000326 	beq	r2,zero,80d564 <___vfprintf_internal_r+0x568>
  80d558:	db002b17 	ldw	r12,172(sp)
  80d55c:	63000044 	addi	r12,r12,1
  80d560:	db002b15 	stw	r12,172(sp)
  80d564:	88c0008c 	andi	r3,r17,2
  80d568:	d8c02c15 	stw	r3,176(sp)
  80d56c:	18000326 	beq	r3,zero,80d57c <___vfprintf_internal_r+0x580>
  80d570:	dac02b17 	ldw	r11,172(sp)
  80d574:	5ac00084 	addi	r11,r11,2
  80d578:	dac02b15 	stw	r11,172(sp)
  80d57c:	8b00210c 	andi	r12,r17,132
  80d580:	db003015 	stw	r12,192(sp)
  80d584:	6001da1e 	bne	r12,zero,80dcf0 <___vfprintf_internal_r+0xcf4>
  80d588:	dac02e17 	ldw	r11,184(sp)
  80d58c:	db002b17 	ldw	r12,172(sp)
  80d590:	5b39c83a 	sub	fp,r11,r12
  80d594:	0701d60e 	bge	zero,fp,80dcf0 <___vfprintf_internal_r+0xcf4>
  80d598:	02400404 	movi	r9,16
  80d59c:	d8c02017 	ldw	r3,128(sp)
  80d5a0:	d8801f17 	ldw	r2,124(sp)
  80d5a4:	4f053c0e 	bge	r9,fp,80ea98 <___vfprintf_internal_r+0x1a9c>
  80d5a8:	014020b4 	movhi	r5,130
  80d5ac:	29733184 	addi	r5,r5,-13114
  80d5b0:	d9403615 	stw	r5,216(sp)
  80d5b4:	482b883a 	mov	r21,r9
  80d5b8:	04c001c4 	movi	r19,7
  80d5bc:	00000306 	br	80d5cc <___vfprintf_internal_r+0x5d0>
  80d5c0:	e73ffc04 	addi	fp,fp,-16
  80d5c4:	42000204 	addi	r8,r8,8
  80d5c8:	af00130e 	bge	r21,fp,80d618 <___vfprintf_internal_r+0x61c>
  80d5cc:	02c020b4 	movhi	r11,130
  80d5d0:	18c00404 	addi	r3,r3,16
  80d5d4:	10800044 	addi	r2,r2,1
  80d5d8:	5af33184 	addi	r11,r11,-13114
  80d5dc:	42c00015 	stw	r11,0(r8)
  80d5e0:	45400115 	stw	r21,4(r8)
  80d5e4:	d8c02015 	stw	r3,128(sp)
  80d5e8:	d8801f15 	stw	r2,124(sp)
  80d5ec:	98bff40e 	bge	r19,r2,80d5c0 <__alt_data_end+0xff80d5c0>
  80d5f0:	b009883a 	mov	r4,r22
  80d5f4:	b80b883a 	mov	r5,r23
  80d5f8:	d9801e04 	addi	r6,sp,120
  80d5fc:	0812eb40 	call	812eb4 <__sprint_r>
  80d600:	103f721e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80d604:	e73ffc04 	addi	fp,fp,-16
  80d608:	d8c02017 	ldw	r3,128(sp)
  80d60c:	d8801f17 	ldw	r2,124(sp)
  80d610:	da000404 	addi	r8,sp,16
  80d614:	af3fed16 	blt	r21,fp,80d5cc <__alt_data_end+0xff80d5cc>
  80d618:	db003617 	ldw	r12,216(sp)
  80d61c:	e0c7883a 	add	r3,fp,r3
  80d620:	10800044 	addi	r2,r2,1
  80d624:	43000015 	stw	r12,0(r8)
  80d628:	47000115 	stw	fp,4(r8)
  80d62c:	d8c02015 	stw	r3,128(sp)
  80d630:	d8801f15 	stw	r2,124(sp)
  80d634:	010001c4 	movi	r4,7
  80d638:	20830e16 	blt	r4,r2,80e274 <___vfprintf_internal_r+0x1278>
  80d63c:	d8802787 	ldb	r2,158(sp)
  80d640:	42000204 	addi	r8,r8,8
  80d644:	10000c26 	beq	r2,zero,80d678 <___vfprintf_internal_r+0x67c>
  80d648:	d8801f17 	ldw	r2,124(sp)
  80d64c:	d9002784 	addi	r4,sp,158
  80d650:	18c00044 	addi	r3,r3,1
  80d654:	10800044 	addi	r2,r2,1
  80d658:	41000015 	stw	r4,0(r8)
  80d65c:	01000044 	movi	r4,1
  80d660:	41000115 	stw	r4,4(r8)
  80d664:	d8c02015 	stw	r3,128(sp)
  80d668:	d8801f15 	stw	r2,124(sp)
  80d66c:	010001c4 	movi	r4,7
  80d670:	2082a716 	blt	r4,r2,80e110 <___vfprintf_internal_r+0x1114>
  80d674:	42000204 	addi	r8,r8,8
  80d678:	dac02c17 	ldw	r11,176(sp)
  80d67c:	58000c26 	beq	r11,zero,80d6b0 <___vfprintf_internal_r+0x6b4>
  80d680:	d8801f17 	ldw	r2,124(sp)
  80d684:	d9002704 	addi	r4,sp,156
  80d688:	18c00084 	addi	r3,r3,2
  80d68c:	10800044 	addi	r2,r2,1
  80d690:	41000015 	stw	r4,0(r8)
  80d694:	01000084 	movi	r4,2
  80d698:	41000115 	stw	r4,4(r8)
  80d69c:	d8c02015 	stw	r3,128(sp)
  80d6a0:	d8801f15 	stw	r2,124(sp)
  80d6a4:	010001c4 	movi	r4,7
  80d6a8:	2082a116 	blt	r4,r2,80e130 <___vfprintf_internal_r+0x1134>
  80d6ac:	42000204 	addi	r8,r8,8
  80d6b0:	db003017 	ldw	r12,192(sp)
  80d6b4:	00802004 	movi	r2,128
  80d6b8:	60820326 	beq	r12,r2,80dec8 <___vfprintf_internal_r+0xecc>
  80d6bc:	db003217 	ldw	r12,200(sp)
  80d6c0:	64abc83a 	sub	r21,r12,r18
  80d6c4:	0540260e 	bge	zero,r21,80d760 <___vfprintf_internal_r+0x764>
  80d6c8:	07000404 	movi	fp,16
  80d6cc:	d8801f17 	ldw	r2,124(sp)
  80d6d0:	e544570e 	bge	fp,r21,80e830 <___vfprintf_internal_r+0x1834>
  80d6d4:	014020b4 	movhi	r5,130
  80d6d8:	29732d84 	addi	r5,r5,-13130
  80d6dc:	d9402c15 	stw	r5,176(sp)
  80d6e0:	04c001c4 	movi	r19,7
  80d6e4:	00000306 	br	80d6f4 <___vfprintf_internal_r+0x6f8>
  80d6e8:	ad7ffc04 	addi	r21,r21,-16
  80d6ec:	42000204 	addi	r8,r8,8
  80d6f0:	e540110e 	bge	fp,r21,80d738 <___vfprintf_internal_r+0x73c>
  80d6f4:	18c00404 	addi	r3,r3,16
  80d6f8:	10800044 	addi	r2,r2,1
  80d6fc:	45000015 	stw	r20,0(r8)
  80d700:	47000115 	stw	fp,4(r8)
  80d704:	d8c02015 	stw	r3,128(sp)
  80d708:	d8801f15 	stw	r2,124(sp)
  80d70c:	98bff60e 	bge	r19,r2,80d6e8 <__alt_data_end+0xff80d6e8>
  80d710:	b009883a 	mov	r4,r22
  80d714:	b80b883a 	mov	r5,r23
  80d718:	d9801e04 	addi	r6,sp,120
  80d71c:	0812eb40 	call	812eb4 <__sprint_r>
  80d720:	103f2a1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80d724:	ad7ffc04 	addi	r21,r21,-16
  80d728:	d8c02017 	ldw	r3,128(sp)
  80d72c:	d8801f17 	ldw	r2,124(sp)
  80d730:	da000404 	addi	r8,sp,16
  80d734:	e57fef16 	blt	fp,r21,80d6f4 <__alt_data_end+0xff80d6f4>
  80d738:	dac02c17 	ldw	r11,176(sp)
  80d73c:	1d47883a 	add	r3,r3,r21
  80d740:	10800044 	addi	r2,r2,1
  80d744:	42c00015 	stw	r11,0(r8)
  80d748:	45400115 	stw	r21,4(r8)
  80d74c:	d8c02015 	stw	r3,128(sp)
  80d750:	d8801f15 	stw	r2,124(sp)
  80d754:	010001c4 	movi	r4,7
  80d758:	20826516 	blt	r4,r2,80e0f0 <___vfprintf_internal_r+0x10f4>
  80d75c:	42000204 	addi	r8,r8,8
  80d760:	8880400c 	andi	r2,r17,256
  80d764:	1001901e 	bne	r2,zero,80dda8 <___vfprintf_internal_r+0xdac>
  80d768:	d8801f17 	ldw	r2,124(sp)
  80d76c:	db003117 	ldw	r12,196(sp)
  80d770:	1c87883a 	add	r3,r3,r18
  80d774:	10800044 	addi	r2,r2,1
  80d778:	43000015 	stw	r12,0(r8)
  80d77c:	44800115 	stw	r18,4(r8)
  80d780:	d8c02015 	stw	r3,128(sp)
  80d784:	d8801f15 	stw	r2,124(sp)
  80d788:	010001c4 	movi	r4,7
  80d78c:	20824016 	blt	r4,r2,80e090 <___vfprintf_internal_r+0x1094>
  80d790:	42000204 	addi	r8,r8,8
  80d794:	8c40010c 	andi	r17,r17,4
  80d798:	88003126 	beq	r17,zero,80d860 <___vfprintf_internal_r+0x864>
  80d79c:	db002e17 	ldw	r12,184(sp)
  80d7a0:	dac02b17 	ldw	r11,172(sp)
  80d7a4:	62e1c83a 	sub	r16,r12,r11
  80d7a8:	04002d0e 	bge	zero,r16,80d860 <___vfprintf_internal_r+0x864>
  80d7ac:	04400404 	movi	r17,16
  80d7b0:	d8801f17 	ldw	r2,124(sp)
  80d7b4:	8c05150e 	bge	r17,r16,80ec0c <___vfprintf_internal_r+0x1c10>
  80d7b8:	010020b4 	movhi	r4,130
  80d7bc:	21333184 	addi	r4,r4,-13114
  80d7c0:	d9003615 	stw	r4,216(sp)
  80d7c4:	048001c4 	movi	r18,7
  80d7c8:	00000306 	br	80d7d8 <___vfprintf_internal_r+0x7dc>
  80d7cc:	843ffc04 	addi	r16,r16,-16
  80d7d0:	42000204 	addi	r8,r8,8
  80d7d4:	8c00130e 	bge	r17,r16,80d824 <___vfprintf_internal_r+0x828>
  80d7d8:	014020b4 	movhi	r5,130
  80d7dc:	18c00404 	addi	r3,r3,16
  80d7e0:	10800044 	addi	r2,r2,1
  80d7e4:	29733184 	addi	r5,r5,-13114
  80d7e8:	41400015 	stw	r5,0(r8)
  80d7ec:	44400115 	stw	r17,4(r8)
  80d7f0:	d8c02015 	stw	r3,128(sp)
  80d7f4:	d8801f15 	stw	r2,124(sp)
  80d7f8:	90bff40e 	bge	r18,r2,80d7cc <__alt_data_end+0xff80d7cc>
  80d7fc:	b009883a 	mov	r4,r22
  80d800:	b80b883a 	mov	r5,r23
  80d804:	d9801e04 	addi	r6,sp,120
  80d808:	0812eb40 	call	812eb4 <__sprint_r>
  80d80c:	103eef1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80d810:	843ffc04 	addi	r16,r16,-16
  80d814:	d8c02017 	ldw	r3,128(sp)
  80d818:	d8801f17 	ldw	r2,124(sp)
  80d81c:	da000404 	addi	r8,sp,16
  80d820:	8c3fed16 	blt	r17,r16,80d7d8 <__alt_data_end+0xff80d7d8>
  80d824:	dac03617 	ldw	r11,216(sp)
  80d828:	1c07883a 	add	r3,r3,r16
  80d82c:	10800044 	addi	r2,r2,1
  80d830:	42c00015 	stw	r11,0(r8)
  80d834:	44000115 	stw	r16,4(r8)
  80d838:	d8c02015 	stw	r3,128(sp)
  80d83c:	d8801f15 	stw	r2,124(sp)
  80d840:	010001c4 	movi	r4,7
  80d844:	2080060e 	bge	r4,r2,80d860 <___vfprintf_internal_r+0x864>
  80d848:	b009883a 	mov	r4,r22
  80d84c:	b80b883a 	mov	r5,r23
  80d850:	d9801e04 	addi	r6,sp,120
  80d854:	0812eb40 	call	812eb4 <__sprint_r>
  80d858:	103edc1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80d85c:	d8c02017 	ldw	r3,128(sp)
  80d860:	d8802b17 	ldw	r2,172(sp)
  80d864:	db002e17 	ldw	r12,184(sp)
  80d868:	1300010e 	bge	r2,r12,80d870 <___vfprintf_internal_r+0x874>
  80d86c:	6005883a 	mov	r2,r12
  80d870:	dac02f17 	ldw	r11,188(sp)
  80d874:	5897883a 	add	r11,r11,r2
  80d878:	dac02f15 	stw	r11,188(sp)
  80d87c:	18020c1e 	bne	r3,zero,80e0b0 <___vfprintf_internal_r+0x10b4>
  80d880:	d8001f15 	stw	zero,124(sp)
  80d884:	da000404 	addi	r8,sp,16
  80d888:	003e1706 	br	80d0e8 <__alt_data_end+0xff80d0e8>
  80d88c:	8c400414 	ori	r17,r17,16
  80d890:	d8c02a15 	stw	r3,168(sp)
  80d894:	8880080c 	andi	r2,r17,32
  80d898:	10010126 	beq	r2,zero,80dca0 <___vfprintf_internal_r+0xca4>
  80d89c:	db002d17 	ldw	r12,180(sp)
  80d8a0:	0005883a 	mov	r2,zero
  80d8a4:	64c00017 	ldw	r19,0(r12)
  80d8a8:	67000117 	ldw	fp,4(r12)
  80d8ac:	63000204 	addi	r12,r12,8
  80d8b0:	db002d15 	stw	r12,180(sp)
  80d8b4:	9f06b03a 	or	r3,r19,fp
  80d8b8:	d8002785 	stb	zero,158(sp)
  80d8bc:	da403215 	stw	r9,200(sp)
  80d8c0:	002b883a 	mov	r21,zero
  80d8c4:	003f0106 	br	80d4cc <__alt_data_end+0xff80d4cc>
  80d8c8:	8c400414 	ori	r17,r17,16
  80d8cc:	d8c02a15 	stw	r3,168(sp)
  80d8d0:	8880080c 	andi	r2,r17,32
  80d8d4:	1000e326 	beq	r2,zero,80dc64 <___vfprintf_internal_r+0xc68>
  80d8d8:	dac02d17 	ldw	r11,180(sp)
  80d8dc:	00800044 	movi	r2,1
  80d8e0:	5cc00017 	ldw	r19,0(r11)
  80d8e4:	5f000117 	ldw	fp,4(r11)
  80d8e8:	5ac00204 	addi	r11,r11,8
  80d8ec:	dac02d15 	stw	r11,180(sp)
  80d8f0:	9f06b03a 	or	r3,r19,fp
  80d8f4:	003ff006 	br	80d8b8 <__alt_data_end+0xff80d8b8>
  80d8f8:	db002d17 	ldw	r12,180(sp)
  80d8fc:	dac02d17 	ldw	r11,180(sp)
  80d900:	d8c02a15 	stw	r3,168(sp)
  80d904:	63000017 	ldw	r12,0(r12)
  80d908:	5ac00117 	ldw	r11,4(r11)
  80d90c:	d9802785 	stb	r6,158(sp)
  80d910:	6009883a 	mov	r4,r12
  80d914:	580b883a 	mov	r5,r11
  80d918:	db003715 	stw	r12,220(sp)
  80d91c:	da003f15 	stw	r8,252(sp)
  80d920:	da403e15 	stw	r9,248(sp)
  80d924:	dac03915 	stw	r11,228(sp)
  80d928:	0812ca00 	call	812ca0 <__fpclassifyd>
  80d92c:	db002d17 	ldw	r12,180(sp)
  80d930:	04800044 	movi	r18,1
  80d934:	da003f17 	ldw	r8,252(sp)
  80d938:	64c00204 	addi	r19,r12,8
  80d93c:	da403e17 	ldw	r9,248(sp)
  80d940:	d9003717 	ldw	r4,220(sp)
  80d944:	d9403917 	ldw	r5,228(sp)
  80d948:	14832b1e 	bne	r2,r18,80e5f8 <___vfprintf_internal_r+0x15fc>
  80d94c:	000d883a 	mov	r6,zero
  80d950:	000f883a 	mov	r7,zero
  80d954:	08166780 	call	816678 <__ledf2>
  80d958:	da003f17 	ldw	r8,252(sp)
  80d95c:	1004b716 	blt	r2,zero,80ec3c <___vfprintf_internal_r+0x1c40>
  80d960:	dd402783 	ldbu	r21,158(sp)
  80d964:	008011c4 	movi	r2,71
  80d968:	14040e0e 	bge	r2,r16,80e9a4 <___vfprintf_internal_r+0x19a8>
  80d96c:	00c020b4 	movhi	r3,130
  80d970:	18f31e04 	addi	r3,r3,-13192
  80d974:	d8c03115 	stw	r3,196(sp)
  80d978:	02c000c4 	movi	r11,3
  80d97c:	00bfdfc4 	movi	r2,-129
  80d980:	dac02b15 	stw	r11,172(sp)
  80d984:	88a2703a 	and	r17,r17,r2
  80d988:	dcc02d15 	stw	r19,180(sp)
  80d98c:	5825883a 	mov	r18,r11
  80d990:	d8003215 	stw	zero,200(sp)
  80d994:	d8003415 	stw	zero,208(sp)
  80d998:	003eeb06 	br	80d548 <__alt_data_end+0xff80d548>
  80d99c:	db002d17 	ldw	r12,180(sp)
  80d9a0:	00800c04 	movi	r2,48
  80d9a4:	d8802705 	stb	r2,156(sp)
  80d9a8:	64c00017 	ldw	r19,0(r12)
  80d9ac:	00801e04 	movi	r2,120
  80d9b0:	d8802745 	stb	r2,157(sp)
  80d9b4:	008020b4 	movhi	r2,130
  80d9b8:	10b32604 	addi	r2,r2,-13160
  80d9bc:	63000104 	addi	r12,r12,4
  80d9c0:	d8c02a15 	stw	r3,168(sp)
  80d9c4:	d8803b15 	stw	r2,236(sp)
  80d9c8:	0039883a 	mov	fp,zero
  80d9cc:	8c400094 	ori	r17,r17,2
  80d9d0:	db002d15 	stw	r12,180(sp)
  80d9d4:	00800084 	movi	r2,2
  80d9d8:	04001e04 	movi	r16,120
  80d9dc:	9807883a 	mov	r3,r19
  80d9e0:	003fb506 	br	80d8b8 <__alt_data_end+0xff80d8b8>
  80d9e4:	8c400214 	ori	r17,r17,8
  80d9e8:	1805883a 	mov	r2,r3
  80d9ec:	1c000007 	ldb	r16,0(r3)
  80d9f0:	003de706 	br	80d190 <__alt_data_end+0xff80d190>
  80d9f4:	d8c02a15 	stw	r3,168(sp)
  80d9f8:	d9802785 	stb	r6,158(sp)
  80d9fc:	8880080c 	andi	r2,r17,32
  80da00:	d8c02d17 	ldw	r3,180(sp)
  80da04:	103ea61e 	bne	r2,zero,80d4a0 <__alt_data_end+0xff80d4a0>
  80da08:	8880040c 	andi	r2,r17,16
  80da0c:	1002221e 	bne	r2,zero,80e298 <___vfprintf_internal_r+0x129c>
  80da10:	8880100c 	andi	r2,r17,64
  80da14:	10022026 	beq	r2,zero,80e298 <___vfprintf_internal_r+0x129c>
  80da18:	1cc0000f 	ldh	r19,0(r3)
  80da1c:	db002d17 	ldw	r12,180(sp)
  80da20:	9839d7fa 	srai	fp,r19,31
  80da24:	63000104 	addi	r12,r12,4
  80da28:	db002d15 	stw	r12,180(sp)
  80da2c:	e005883a 	mov	r2,fp
  80da30:	003ea106 	br	80d4b8 <__alt_data_end+0xff80d4b8>
  80da34:	8c401014 	ori	r17,r17,64
  80da38:	1805883a 	mov	r2,r3
  80da3c:	1c000007 	ldb	r16,0(r3)
  80da40:	003dd306 	br	80d190 <__alt_data_end+0xff80d190>
  80da44:	1c000007 	ldb	r16,0(r3)
  80da48:	81c3e926 	beq	r16,r7,80e9f0 <___vfprintf_internal_r+0x19f4>
  80da4c:	8c400414 	ori	r17,r17,16
  80da50:	1805883a 	mov	r2,r3
  80da54:	003dce06 	br	80d190 <__alt_data_end+0xff80d190>
  80da58:	d8c02a15 	stw	r3,168(sp)
  80da5c:	d9802785 	stb	r6,158(sp)
  80da60:	8880080c 	andi	r2,r17,32
  80da64:	10034726 	beq	r2,zero,80e784 <___vfprintf_internal_r+0x1788>
  80da68:	db002d17 	ldw	r12,180(sp)
  80da6c:	dac02f17 	ldw	r11,188(sp)
  80da70:	60800017 	ldw	r2,0(r12)
  80da74:	5807d7fa 	srai	r3,r11,31
  80da78:	63000104 	addi	r12,r12,4
  80da7c:	db002d15 	stw	r12,180(sp)
  80da80:	12c00015 	stw	r11,0(r2)
  80da84:	10c00115 	stw	r3,4(r2)
  80da88:	003d9706 	br	80d0e8 <__alt_data_end+0xff80d0e8>
  80da8c:	030020b4 	movhi	r12,130
  80da90:	63332104 	addi	r12,r12,-13180
  80da94:	d8c02a15 	stw	r3,168(sp)
  80da98:	d9802785 	stb	r6,158(sp)
  80da9c:	db003b15 	stw	r12,236(sp)
  80daa0:	88c0080c 	andi	r3,r17,32
  80daa4:	d8802d17 	ldw	r2,180(sp)
  80daa8:	18005b26 	beq	r3,zero,80dc18 <___vfprintf_internal_r+0xc1c>
  80daac:	dac02d17 	ldw	r11,180(sp)
  80dab0:	14c00017 	ldw	r19,0(r2)
  80dab4:	17000117 	ldw	fp,4(r2)
  80dab8:	5ac00204 	addi	r11,r11,8
  80dabc:	dac02d15 	stw	r11,180(sp)
  80dac0:	8880004c 	andi	r2,r17,1
  80dac4:	10022926 	beq	r2,zero,80e36c <___vfprintf_internal_r+0x1370>
  80dac8:	9f06b03a 	or	r3,r19,fp
  80dacc:	18032b26 	beq	r3,zero,80e77c <___vfprintf_internal_r+0x1780>
  80dad0:	00800c04 	movi	r2,48
  80dad4:	d8802705 	stb	r2,156(sp)
  80dad8:	dc002745 	stb	r16,157(sp)
  80dadc:	8c400094 	ori	r17,r17,2
  80dae0:	00800084 	movi	r2,2
  80dae4:	003f7406 	br	80d8b8 <__alt_data_end+0xff80d8b8>
  80dae8:	30803fcc 	andi	r2,r6,255
  80daec:	1080201c 	xori	r2,r2,128
  80daf0:	10bfe004 	addi	r2,r2,-128
  80daf4:	1003351e 	bne	r2,zero,80e7cc <___vfprintf_internal_r+0x17d0>
  80daf8:	1805883a 	mov	r2,r3
  80dafc:	01800804 	movi	r6,32
  80db00:	1c000007 	ldb	r16,0(r3)
  80db04:	003da206 	br	80d190 <__alt_data_end+0xff80d190>
  80db08:	dac02d17 	ldw	r11,180(sp)
  80db0c:	db002d17 	ldw	r12,180(sp)
  80db10:	5ac00017 	ldw	r11,0(r11)
  80db14:	dac02e15 	stw	r11,184(sp)
  80db18:	62c00104 	addi	r11,r12,4
  80db1c:	db002e17 	ldw	r12,184(sp)
  80db20:	6003ad16 	blt	r12,zero,80e9d8 <___vfprintf_internal_r+0x19dc>
  80db24:	dac02d15 	stw	r11,180(sp)
  80db28:	1805883a 	mov	r2,r3
  80db2c:	1c000007 	ldb	r16,0(r3)
  80db30:	003d9706 	br	80d190 <__alt_data_end+0xff80d190>
  80db34:	1805883a 	mov	r2,r3
  80db38:	01800ac4 	movi	r6,43
  80db3c:	1c000007 	ldb	r16,0(r3)
  80db40:	003d9306 	br	80d190 <__alt_data_end+0xff80d190>
  80db44:	db002d17 	ldw	r12,180(sp)
  80db48:	d8c02a15 	stw	r3,168(sp)
  80db4c:	00c00044 	movi	r3,1
  80db50:	60800017 	ldw	r2,0(r12)
  80db54:	63000104 	addi	r12,r12,4
  80db58:	d8c02b15 	stw	r3,172(sp)
  80db5c:	d8002785 	stb	zero,158(sp)
  80db60:	d8801405 	stb	r2,80(sp)
  80db64:	db002d15 	stw	r12,180(sp)
  80db68:	dac01404 	addi	r11,sp,80
  80db6c:	1825883a 	mov	r18,r3
  80db70:	d8003215 	stw	zero,200(sp)
  80db74:	d8003415 	stw	zero,208(sp)
  80db78:	dac03115 	stw	r11,196(sp)
  80db7c:	0005883a 	mov	r2,zero
  80db80:	003e7806 	br	80d564 <__alt_data_end+0xff80d564>
  80db84:	dac02d17 	ldw	r11,180(sp)
  80db88:	db002d17 	ldw	r12,180(sp)
  80db8c:	d8c02a15 	stw	r3,168(sp)
  80db90:	5ac00017 	ldw	r11,0(r11)
  80db94:	d8002785 	stb	zero,158(sp)
  80db98:	64c00104 	addi	r19,r12,4
  80db9c:	dac03115 	stw	r11,196(sp)
  80dba0:	5803fe26 	beq	r11,zero,80eb9c <___vfprintf_internal_r+0x1ba0>
  80dba4:	d9003117 	ldw	r4,196(sp)
  80dba8:	4803b416 	blt	r9,zero,80ea7c <___vfprintf_internal_r+0x1a80>
  80dbac:	480d883a 	mov	r6,r9
  80dbb0:	000b883a 	mov	r5,zero
  80dbb4:	da003f15 	stw	r8,252(sp)
  80dbb8:	da403e15 	stw	r9,248(sp)
  80dbbc:	08112540 	call	811254 <memchr>
  80dbc0:	da003f17 	ldw	r8,252(sp)
  80dbc4:	da403e17 	ldw	r9,248(sp)
  80dbc8:	10043026 	beq	r2,zero,80ec8c <___vfprintf_internal_r+0x1c90>
  80dbcc:	d8c03117 	ldw	r3,196(sp)
  80dbd0:	10e5c83a 	sub	r18,r2,r3
  80dbd4:	4c836b16 	blt	r9,r18,80e984 <___vfprintf_internal_r+0x1988>
  80dbd8:	9005883a 	mov	r2,r18
  80dbdc:	9003ac16 	blt	r18,zero,80ea90 <___vfprintf_internal_r+0x1a94>
  80dbe0:	dd402783 	ldbu	r21,158(sp)
  80dbe4:	d8802b15 	stw	r2,172(sp)
  80dbe8:	dcc02d15 	stw	r19,180(sp)
  80dbec:	d8003215 	stw	zero,200(sp)
  80dbf0:	d8003415 	stw	zero,208(sp)
  80dbf4:	003e5406 	br	80d548 <__alt_data_end+0xff80d548>
  80dbf8:	008020b4 	movhi	r2,130
  80dbfc:	10b32604 	addi	r2,r2,-13160
  80dc00:	d8c02a15 	stw	r3,168(sp)
  80dc04:	d8803b15 	stw	r2,236(sp)
  80dc08:	d9802785 	stb	r6,158(sp)
  80dc0c:	88c0080c 	andi	r3,r17,32
  80dc10:	d8802d17 	ldw	r2,180(sp)
  80dc14:	183fa51e 	bne	r3,zero,80daac <__alt_data_end+0xff80daac>
  80dc18:	88c0040c 	andi	r3,r17,16
  80dc1c:	1802ee26 	beq	r3,zero,80e7d8 <___vfprintf_internal_r+0x17dc>
  80dc20:	db002d17 	ldw	r12,180(sp)
  80dc24:	14c00017 	ldw	r19,0(r2)
  80dc28:	0039883a 	mov	fp,zero
  80dc2c:	63000104 	addi	r12,r12,4
  80dc30:	db002d15 	stw	r12,180(sp)
  80dc34:	003fa206 	br	80dac0 <__alt_data_end+0xff80dac0>
  80dc38:	8c400054 	ori	r17,r17,1
  80dc3c:	1805883a 	mov	r2,r3
  80dc40:	1c000007 	ldb	r16,0(r3)
  80dc44:	003d5206 	br	80d190 <__alt_data_end+0xff80d190>
  80dc48:	8c400814 	ori	r17,r17,32
  80dc4c:	1805883a 	mov	r2,r3
  80dc50:	1c000007 	ldb	r16,0(r3)
  80dc54:	003d4e06 	br	80d190 <__alt_data_end+0xff80d190>
  80dc58:	d8c02a15 	stw	r3,168(sp)
  80dc5c:	8880080c 	andi	r2,r17,32
  80dc60:	103f1d1e 	bne	r2,zero,80d8d8 <__alt_data_end+0xff80d8d8>
  80dc64:	8880040c 	andi	r2,r17,16
  80dc68:	1001b81e 	bne	r2,zero,80e34c <___vfprintf_internal_r+0x1350>
  80dc6c:	8880100c 	andi	r2,r17,64
  80dc70:	1001b626 	beq	r2,zero,80e34c <___vfprintf_internal_r+0x1350>
  80dc74:	dac02d17 	ldw	r11,180(sp)
  80dc78:	0039883a 	mov	fp,zero
  80dc7c:	00800044 	movi	r2,1
  80dc80:	5cc0000b 	ldhu	r19,0(r11)
  80dc84:	5ac00104 	addi	r11,r11,4
  80dc88:	dac02d15 	stw	r11,180(sp)
  80dc8c:	9807883a 	mov	r3,r19
  80dc90:	003f0906 	br	80d8b8 <__alt_data_end+0xff80d8b8>
  80dc94:	d8c02a15 	stw	r3,168(sp)
  80dc98:	8880080c 	andi	r2,r17,32
  80dc9c:	103eff1e 	bne	r2,zero,80d89c <__alt_data_end+0xff80d89c>
  80dca0:	8880040c 	andi	r2,r17,16
  80dca4:	1001a11e 	bne	r2,zero,80e32c <___vfprintf_internal_r+0x1330>
  80dca8:	8880100c 	andi	r2,r17,64
  80dcac:	10019f26 	beq	r2,zero,80e32c <___vfprintf_internal_r+0x1330>
  80dcb0:	db002d17 	ldw	r12,180(sp)
  80dcb4:	0039883a 	mov	fp,zero
  80dcb8:	0005883a 	mov	r2,zero
  80dcbc:	64c0000b 	ldhu	r19,0(r12)
  80dcc0:	63000104 	addi	r12,r12,4
  80dcc4:	db002d15 	stw	r12,180(sp)
  80dcc8:	9807883a 	mov	r3,r19
  80dccc:	003efa06 	br	80d8b8 <__alt_data_end+0xff80d8b8>
  80dcd0:	d8c02a15 	stw	r3,168(sp)
  80dcd4:	d9802785 	stb	r6,158(sp)
  80dcd8:	803db626 	beq	r16,zero,80d3b4 <__alt_data_end+0xff80d3b4>
  80dcdc:	00c00044 	movi	r3,1
  80dce0:	d8c02b15 	stw	r3,172(sp)
  80dce4:	dc001405 	stb	r16,80(sp)
  80dce8:	d8002785 	stb	zero,158(sp)
  80dcec:	003f9e06 	br	80db68 <__alt_data_end+0xff80db68>
  80dcf0:	d8c02017 	ldw	r3,128(sp)
  80dcf4:	003e5306 	br	80d644 <__alt_data_end+0xff80d644>
  80dcf8:	10803fcc 	andi	r2,r2,255
  80dcfc:	00c00044 	movi	r3,1
  80dd00:	10fdfa1e 	bne	r2,r3,80d4ec <__alt_data_end+0xff80d4ec>
  80dd04:	e000021e 	bne	fp,zero,80dd10 <___vfprintf_internal_r+0xd14>
  80dd08:	00800244 	movi	r2,9
  80dd0c:	14c0202e 	bgeu	r2,r19,80dd90 <___vfprintf_internal_r+0xd94>
  80dd10:	dc002b15 	stw	r16,172(sp)
  80dd14:	dc402c15 	stw	r17,176(sp)
  80dd18:	9821883a 	mov	r16,r19
  80dd1c:	e023883a 	mov	r17,fp
  80dd20:	dc801e04 	addi	r18,sp,120
  80dd24:	4827883a 	mov	r19,r9
  80dd28:	4039883a 	mov	fp,r8
  80dd2c:	8009883a 	mov	r4,r16
  80dd30:	880b883a 	mov	r5,r17
  80dd34:	01800284 	movi	r6,10
  80dd38:	000f883a 	mov	r7,zero
  80dd3c:	0814e1c0 	call	814e1c <__umoddi3>
  80dd40:	10800c04 	addi	r2,r2,48
  80dd44:	94bfffc4 	addi	r18,r18,-1
  80dd48:	8009883a 	mov	r4,r16
  80dd4c:	880b883a 	mov	r5,r17
  80dd50:	01800284 	movi	r6,10
  80dd54:	000f883a 	mov	r7,zero
  80dd58:	90800005 	stb	r2,0(r18)
  80dd5c:	081485c0 	call	81485c <__udivdi3>
  80dd60:	1021883a 	mov	r16,r2
  80dd64:	10c4b03a 	or	r2,r2,r3
  80dd68:	1823883a 	mov	r17,r3
  80dd6c:	103fef1e 	bne	r2,zero,80dd2c <__alt_data_end+0xff80dd2c>
  80dd70:	dac02817 	ldw	r11,160(sp)
  80dd74:	dc803115 	stw	r18,196(sp)
  80dd78:	dc002b17 	ldw	r16,172(sp)
  80dd7c:	dc402c17 	ldw	r17,176(sp)
  80dd80:	9813883a 	mov	r9,r19
  80dd84:	e011883a 	mov	r8,fp
  80dd88:	5ca5c83a 	sub	r18,r11,r18
  80dd8c:	003de906 	br	80d534 <__alt_data_end+0xff80d534>
  80dd90:	9cc00c04 	addi	r19,r19,48
  80dd94:	d8c01dc4 	addi	r3,sp,119
  80dd98:	dcc01dc5 	stb	r19,119(sp)
  80dd9c:	dc803c17 	ldw	r18,240(sp)
  80dda0:	d8c03115 	stw	r3,196(sp)
  80dda4:	003de306 	br	80d534 <__alt_data_end+0xff80d534>
  80dda8:	00801944 	movi	r2,101
  80ddac:	1400710e 	bge	r2,r16,80df74 <___vfprintf_internal_r+0xf78>
  80ddb0:	d9003717 	ldw	r4,220(sp)
  80ddb4:	d9403917 	ldw	r5,228(sp)
  80ddb8:	000d883a 	mov	r6,zero
  80ddbc:	000f883a 	mov	r7,zero
  80ddc0:	d8c03d15 	stw	r3,244(sp)
  80ddc4:	da003f15 	stw	r8,252(sp)
  80ddc8:	08165140 	call	816514 <__eqdf2>
  80ddcc:	d8c03d17 	ldw	r3,244(sp)
  80ddd0:	da003f17 	ldw	r8,252(sp)
  80ddd4:	1000ef1e 	bne	r2,zero,80e194 <___vfprintf_internal_r+0x1198>
  80ddd8:	d8801f17 	ldw	r2,124(sp)
  80dddc:	010020b4 	movhi	r4,130
  80dde0:	21332d04 	addi	r4,r4,-13132
  80dde4:	18c00044 	addi	r3,r3,1
  80dde8:	10800044 	addi	r2,r2,1
  80ddec:	41000015 	stw	r4,0(r8)
  80ddf0:	01000044 	movi	r4,1
  80ddf4:	41000115 	stw	r4,4(r8)
  80ddf8:	d8c02015 	stw	r3,128(sp)
  80ddfc:	d8801f15 	stw	r2,124(sp)
  80de00:	010001c4 	movi	r4,7
  80de04:	20828e16 	blt	r4,r2,80e840 <___vfprintf_internal_r+0x1844>
  80de08:	42000204 	addi	r8,r8,8
  80de0c:	d8802617 	ldw	r2,152(sp)
  80de10:	dac03317 	ldw	r11,204(sp)
  80de14:	12c00216 	blt	r2,r11,80de20 <___vfprintf_internal_r+0xe24>
  80de18:	8880004c 	andi	r2,r17,1
  80de1c:	103e5d26 	beq	r2,zero,80d794 <__alt_data_end+0xff80d794>
  80de20:	db003817 	ldw	r12,224(sp)
  80de24:	d8801f17 	ldw	r2,124(sp)
  80de28:	dac03517 	ldw	r11,212(sp)
  80de2c:	1b07883a 	add	r3,r3,r12
  80de30:	10800044 	addi	r2,r2,1
  80de34:	42c00015 	stw	r11,0(r8)
  80de38:	43000115 	stw	r12,4(r8)
  80de3c:	d8c02015 	stw	r3,128(sp)
  80de40:	d8801f15 	stw	r2,124(sp)
  80de44:	010001c4 	movi	r4,7
  80de48:	2082ed16 	blt	r4,r2,80ea00 <___vfprintf_internal_r+0x1a04>
  80de4c:	42000204 	addi	r8,r8,8
  80de50:	db003317 	ldw	r12,204(sp)
  80de54:	643fffc4 	addi	r16,r12,-1
  80de58:	043e4e0e 	bge	zero,r16,80d794 <__alt_data_end+0xff80d794>
  80de5c:	04800404 	movi	r18,16
  80de60:	d8801f17 	ldw	r2,124(sp)
  80de64:	94007e0e 	bge	r18,r16,80e060 <___vfprintf_internal_r+0x1064>
  80de68:	014020b4 	movhi	r5,130
  80de6c:	29732d84 	addi	r5,r5,-13130
  80de70:	d9402c15 	stw	r5,176(sp)
  80de74:	054001c4 	movi	r21,7
  80de78:	00000306 	br	80de88 <___vfprintf_internal_r+0xe8c>
  80de7c:	42000204 	addi	r8,r8,8
  80de80:	843ffc04 	addi	r16,r16,-16
  80de84:	9400790e 	bge	r18,r16,80e06c <___vfprintf_internal_r+0x1070>
  80de88:	18c00404 	addi	r3,r3,16
  80de8c:	10800044 	addi	r2,r2,1
  80de90:	45000015 	stw	r20,0(r8)
  80de94:	44800115 	stw	r18,4(r8)
  80de98:	d8c02015 	stw	r3,128(sp)
  80de9c:	d8801f15 	stw	r2,124(sp)
  80dea0:	a8bff60e 	bge	r21,r2,80de7c <__alt_data_end+0xff80de7c>
  80dea4:	b009883a 	mov	r4,r22
  80dea8:	b80b883a 	mov	r5,r23
  80deac:	d9801e04 	addi	r6,sp,120
  80deb0:	0812eb40 	call	812eb4 <__sprint_r>
  80deb4:	103d451e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80deb8:	d8c02017 	ldw	r3,128(sp)
  80debc:	d8801f17 	ldw	r2,124(sp)
  80dec0:	da000404 	addi	r8,sp,16
  80dec4:	003fee06 	br	80de80 <__alt_data_end+0xff80de80>
  80dec8:	dac02e17 	ldw	r11,184(sp)
  80decc:	db002b17 	ldw	r12,172(sp)
  80ded0:	5b2bc83a 	sub	r21,r11,r12
  80ded4:	057df90e 	bge	zero,r21,80d6bc <__alt_data_end+0xff80d6bc>
  80ded8:	07000404 	movi	fp,16
  80dedc:	d8801f17 	ldw	r2,124(sp)
  80dee0:	e543640e 	bge	fp,r21,80ec74 <___vfprintf_internal_r+0x1c78>
  80dee4:	014020b4 	movhi	r5,130
  80dee8:	29732d84 	addi	r5,r5,-13130
  80deec:	d9402c15 	stw	r5,176(sp)
  80def0:	04c001c4 	movi	r19,7
  80def4:	00000306 	br	80df04 <___vfprintf_internal_r+0xf08>
  80def8:	ad7ffc04 	addi	r21,r21,-16
  80defc:	42000204 	addi	r8,r8,8
  80df00:	e540110e 	bge	fp,r21,80df48 <___vfprintf_internal_r+0xf4c>
  80df04:	18c00404 	addi	r3,r3,16
  80df08:	10800044 	addi	r2,r2,1
  80df0c:	45000015 	stw	r20,0(r8)
  80df10:	47000115 	stw	fp,4(r8)
  80df14:	d8c02015 	stw	r3,128(sp)
  80df18:	d8801f15 	stw	r2,124(sp)
  80df1c:	98bff60e 	bge	r19,r2,80def8 <__alt_data_end+0xff80def8>
  80df20:	b009883a 	mov	r4,r22
  80df24:	b80b883a 	mov	r5,r23
  80df28:	d9801e04 	addi	r6,sp,120
  80df2c:	0812eb40 	call	812eb4 <__sprint_r>
  80df30:	103d261e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80df34:	ad7ffc04 	addi	r21,r21,-16
  80df38:	d8c02017 	ldw	r3,128(sp)
  80df3c:	d8801f17 	ldw	r2,124(sp)
  80df40:	da000404 	addi	r8,sp,16
  80df44:	e57fef16 	blt	fp,r21,80df04 <__alt_data_end+0xff80df04>
  80df48:	dac02c17 	ldw	r11,176(sp)
  80df4c:	1d47883a 	add	r3,r3,r21
  80df50:	10800044 	addi	r2,r2,1
  80df54:	42c00015 	stw	r11,0(r8)
  80df58:	45400115 	stw	r21,4(r8)
  80df5c:	d8c02015 	stw	r3,128(sp)
  80df60:	d8801f15 	stw	r2,124(sp)
  80df64:	010001c4 	movi	r4,7
  80df68:	20819116 	blt	r4,r2,80e5b0 <___vfprintf_internal_r+0x15b4>
  80df6c:	42000204 	addi	r8,r8,8
  80df70:	003dd206 	br	80d6bc <__alt_data_end+0xff80d6bc>
  80df74:	db003317 	ldw	r12,204(sp)
  80df78:	00800044 	movi	r2,1
  80df7c:	18c00044 	addi	r3,r3,1
  80df80:	1301530e 	bge	r2,r12,80e4d0 <___vfprintf_internal_r+0x14d4>
  80df84:	dc001f17 	ldw	r16,124(sp)
  80df88:	dac03117 	ldw	r11,196(sp)
  80df8c:	00800044 	movi	r2,1
  80df90:	84000044 	addi	r16,r16,1
  80df94:	40800115 	stw	r2,4(r8)
  80df98:	42c00015 	stw	r11,0(r8)
  80df9c:	d8c02015 	stw	r3,128(sp)
  80dfa0:	dc001f15 	stw	r16,124(sp)
  80dfa4:	008001c4 	movi	r2,7
  80dfa8:	14016b16 	blt	r2,r16,80e558 <___vfprintf_internal_r+0x155c>
  80dfac:	42000204 	addi	r8,r8,8
  80dfb0:	db003817 	ldw	r12,224(sp)
  80dfb4:	dac03517 	ldw	r11,212(sp)
  80dfb8:	84000044 	addi	r16,r16,1
  80dfbc:	1b07883a 	add	r3,r3,r12
  80dfc0:	42c00015 	stw	r11,0(r8)
  80dfc4:	43000115 	stw	r12,4(r8)
  80dfc8:	d8c02015 	stw	r3,128(sp)
  80dfcc:	dc001f15 	stw	r16,124(sp)
  80dfd0:	008001c4 	movi	r2,7
  80dfd4:	14016916 	blt	r2,r16,80e57c <___vfprintf_internal_r+0x1580>
  80dfd8:	44800204 	addi	r18,r8,8
  80dfdc:	d9003717 	ldw	r4,220(sp)
  80dfe0:	d9403917 	ldw	r5,228(sp)
  80dfe4:	000d883a 	mov	r6,zero
  80dfe8:	000f883a 	mov	r7,zero
  80dfec:	d8c03d15 	stw	r3,244(sp)
  80dff0:	08165140 	call	816514 <__eqdf2>
  80dff4:	d8c03d17 	ldw	r3,244(sp)
  80dff8:	db003317 	ldw	r12,204(sp)
  80dffc:	1000ad26 	beq	r2,zero,80e2b4 <___vfprintf_internal_r+0x12b8>
  80e000:	dac03117 	ldw	r11,196(sp)
  80e004:	60bfffc4 	addi	r2,r12,-1
  80e008:	1887883a 	add	r3,r3,r2
  80e00c:	59000044 	addi	r4,r11,1
  80e010:	84000044 	addi	r16,r16,1
  80e014:	90800115 	stw	r2,4(r18)
  80e018:	91000015 	stw	r4,0(r18)
  80e01c:	d8c02015 	stw	r3,128(sp)
  80e020:	dc001f15 	stw	r16,124(sp)
  80e024:	008001c4 	movi	r2,7
  80e028:	14014216 	blt	r2,r16,80e534 <___vfprintf_internal_r+0x1538>
  80e02c:	94800204 	addi	r18,r18,8
  80e030:	dac03a17 	ldw	r11,232(sp)
  80e034:	dd4022c4 	addi	r21,sp,139
  80e038:	84000044 	addi	r16,r16,1
  80e03c:	1ac7883a 	add	r3,r3,r11
  80e040:	95400015 	stw	r21,0(r18)
  80e044:	92c00115 	stw	r11,4(r18)
  80e048:	d8c02015 	stw	r3,128(sp)
  80e04c:	dc001f15 	stw	r16,124(sp)
  80e050:	008001c4 	movi	r2,7
  80e054:	14000e16 	blt	r2,r16,80e090 <___vfprintf_internal_r+0x1094>
  80e058:	92000204 	addi	r8,r18,8
  80e05c:	003dcd06 	br	80d794 <__alt_data_end+0xff80d794>
  80e060:	010020b4 	movhi	r4,130
  80e064:	21332d84 	addi	r4,r4,-13130
  80e068:	d9002c15 	stw	r4,176(sp)
  80e06c:	dac02c17 	ldw	r11,176(sp)
  80e070:	1c07883a 	add	r3,r3,r16
  80e074:	44000115 	stw	r16,4(r8)
  80e078:	42c00015 	stw	r11,0(r8)
  80e07c:	10800044 	addi	r2,r2,1
  80e080:	d8c02015 	stw	r3,128(sp)
  80e084:	d8801f15 	stw	r2,124(sp)
  80e088:	010001c4 	movi	r4,7
  80e08c:	20bdc00e 	bge	r4,r2,80d790 <__alt_data_end+0xff80d790>
  80e090:	b009883a 	mov	r4,r22
  80e094:	b80b883a 	mov	r5,r23
  80e098:	d9801e04 	addi	r6,sp,120
  80e09c:	0812eb40 	call	812eb4 <__sprint_r>
  80e0a0:	103cca1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e0a4:	d8c02017 	ldw	r3,128(sp)
  80e0a8:	da000404 	addi	r8,sp,16
  80e0ac:	003db906 	br	80d794 <__alt_data_end+0xff80d794>
  80e0b0:	b009883a 	mov	r4,r22
  80e0b4:	b80b883a 	mov	r5,r23
  80e0b8:	d9801e04 	addi	r6,sp,120
  80e0bc:	0812eb40 	call	812eb4 <__sprint_r>
  80e0c0:	103def26 	beq	r2,zero,80d880 <__alt_data_end+0xff80d880>
  80e0c4:	003cc106 	br	80d3cc <__alt_data_end+0xff80d3cc>
  80e0c8:	10803fcc 	andi	r2,r2,255
  80e0cc:	1000651e 	bne	r2,zero,80e264 <___vfprintf_internal_r+0x1268>
  80e0d0:	8880004c 	andi	r2,r17,1
  80e0d4:	10013226 	beq	r2,zero,80e5a0 <___vfprintf_internal_r+0x15a4>
  80e0d8:	00800c04 	movi	r2,48
  80e0dc:	d8c01dc4 	addi	r3,sp,119
  80e0e0:	d8801dc5 	stb	r2,119(sp)
  80e0e4:	dc803c17 	ldw	r18,240(sp)
  80e0e8:	d8c03115 	stw	r3,196(sp)
  80e0ec:	003d1106 	br	80d534 <__alt_data_end+0xff80d534>
  80e0f0:	b009883a 	mov	r4,r22
  80e0f4:	b80b883a 	mov	r5,r23
  80e0f8:	d9801e04 	addi	r6,sp,120
  80e0fc:	0812eb40 	call	812eb4 <__sprint_r>
  80e100:	103cb21e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e104:	d8c02017 	ldw	r3,128(sp)
  80e108:	da000404 	addi	r8,sp,16
  80e10c:	003d9406 	br	80d760 <__alt_data_end+0xff80d760>
  80e110:	b009883a 	mov	r4,r22
  80e114:	b80b883a 	mov	r5,r23
  80e118:	d9801e04 	addi	r6,sp,120
  80e11c:	0812eb40 	call	812eb4 <__sprint_r>
  80e120:	103caa1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e124:	d8c02017 	ldw	r3,128(sp)
  80e128:	da000404 	addi	r8,sp,16
  80e12c:	003d5206 	br	80d678 <__alt_data_end+0xff80d678>
  80e130:	b009883a 	mov	r4,r22
  80e134:	b80b883a 	mov	r5,r23
  80e138:	d9801e04 	addi	r6,sp,120
  80e13c:	0812eb40 	call	812eb4 <__sprint_r>
  80e140:	103ca21e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e144:	d8c02017 	ldw	r3,128(sp)
  80e148:	da000404 	addi	r8,sp,16
  80e14c:	003d5806 	br	80d6b0 <__alt_data_end+0xff80d6b0>
  80e150:	d9403b17 	ldw	r5,236(sp)
  80e154:	d8c01e04 	addi	r3,sp,120
  80e158:	988003cc 	andi	r2,r19,15
  80e15c:	e008973a 	slli	r4,fp,28
  80e160:	2885883a 	add	r2,r5,r2
  80e164:	9826d13a 	srli	r19,r19,4
  80e168:	10800003 	ldbu	r2,0(r2)
  80e16c:	e038d13a 	srli	fp,fp,4
  80e170:	18ffffc4 	addi	r3,r3,-1
  80e174:	24e6b03a 	or	r19,r4,r19
  80e178:	18800005 	stb	r2,0(r3)
  80e17c:	9f04b03a 	or	r2,r19,fp
  80e180:	103ff51e 	bne	r2,zero,80e158 <__alt_data_end+0xff80e158>
  80e184:	db002817 	ldw	r12,160(sp)
  80e188:	d8c03115 	stw	r3,196(sp)
  80e18c:	60e5c83a 	sub	r18,r12,r3
  80e190:	003ce806 	br	80d534 <__alt_data_end+0xff80d534>
  80e194:	dc002617 	ldw	r16,152(sp)
  80e198:	0401b10e 	bge	zero,r16,80e860 <___vfprintf_internal_r+0x1864>
  80e19c:	db003117 	ldw	r12,196(sp)
  80e1a0:	dac03317 	ldw	r11,204(sp)
  80e1a4:	62e1883a 	add	r16,r12,r11
  80e1a8:	db003417 	ldw	r12,208(sp)
  80e1ac:	5825883a 	mov	r18,r11
  80e1b0:	62c0010e 	bge	r12,r11,80e1b8 <___vfprintf_internal_r+0x11bc>
  80e1b4:	6025883a 	mov	r18,r12
  80e1b8:	04800b0e 	bge	zero,r18,80e1e8 <___vfprintf_internal_r+0x11ec>
  80e1bc:	d8801f17 	ldw	r2,124(sp)
  80e1c0:	dac03117 	ldw	r11,196(sp)
  80e1c4:	1c87883a 	add	r3,r3,r18
  80e1c8:	10800044 	addi	r2,r2,1
  80e1cc:	42c00015 	stw	r11,0(r8)
  80e1d0:	44800115 	stw	r18,4(r8)
  80e1d4:	d8c02015 	stw	r3,128(sp)
  80e1d8:	d8801f15 	stw	r2,124(sp)
  80e1dc:	010001c4 	movi	r4,7
  80e1e0:	20824f16 	blt	r4,r2,80eb20 <___vfprintf_internal_r+0x1b24>
  80e1e4:	42000204 	addi	r8,r8,8
  80e1e8:	90024b16 	blt	r18,zero,80eb18 <___vfprintf_internal_r+0x1b1c>
  80e1ec:	db003417 	ldw	r12,208(sp)
  80e1f0:	64a5c83a 	sub	r18,r12,r18
  80e1f4:	0480730e 	bge	zero,r18,80e3c4 <___vfprintf_internal_r+0x13c8>
  80e1f8:	05400404 	movi	r21,16
  80e1fc:	d8801f17 	ldw	r2,124(sp)
  80e200:	ac817d0e 	bge	r21,r18,80e7f8 <___vfprintf_internal_r+0x17fc>
  80e204:	014020b4 	movhi	r5,130
  80e208:	29732d84 	addi	r5,r5,-13130
  80e20c:	d9402c15 	stw	r5,176(sp)
  80e210:	070001c4 	movi	fp,7
  80e214:	00000306 	br	80e224 <___vfprintf_internal_r+0x1228>
  80e218:	42000204 	addi	r8,r8,8
  80e21c:	94bffc04 	addi	r18,r18,-16
  80e220:	ac81780e 	bge	r21,r18,80e804 <___vfprintf_internal_r+0x1808>
  80e224:	18c00404 	addi	r3,r3,16
  80e228:	10800044 	addi	r2,r2,1
  80e22c:	45000015 	stw	r20,0(r8)
  80e230:	45400115 	stw	r21,4(r8)
  80e234:	d8c02015 	stw	r3,128(sp)
  80e238:	d8801f15 	stw	r2,124(sp)
  80e23c:	e0bff60e 	bge	fp,r2,80e218 <__alt_data_end+0xff80e218>
  80e240:	b009883a 	mov	r4,r22
  80e244:	b80b883a 	mov	r5,r23
  80e248:	d9801e04 	addi	r6,sp,120
  80e24c:	0812eb40 	call	812eb4 <__sprint_r>
  80e250:	103c5e1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e254:	d8c02017 	ldw	r3,128(sp)
  80e258:	d8801f17 	ldw	r2,124(sp)
  80e25c:	da000404 	addi	r8,sp,16
  80e260:	003fee06 	br	80e21c <__alt_data_end+0xff80e21c>
  80e264:	dac01e04 	addi	r11,sp,120
  80e268:	0025883a 	mov	r18,zero
  80e26c:	dac03115 	stw	r11,196(sp)
  80e270:	003cb006 	br	80d534 <__alt_data_end+0xff80d534>
  80e274:	b009883a 	mov	r4,r22
  80e278:	b80b883a 	mov	r5,r23
  80e27c:	d9801e04 	addi	r6,sp,120
  80e280:	0812eb40 	call	812eb4 <__sprint_r>
  80e284:	103c511e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e288:	d8c02017 	ldw	r3,128(sp)
  80e28c:	d8802787 	ldb	r2,158(sp)
  80e290:	da000404 	addi	r8,sp,16
  80e294:	003ceb06 	br	80d644 <__alt_data_end+0xff80d644>
  80e298:	1cc00017 	ldw	r19,0(r3)
  80e29c:	dac02d17 	ldw	r11,180(sp)
  80e2a0:	9839d7fa 	srai	fp,r19,31
  80e2a4:	5ac00104 	addi	r11,r11,4
  80e2a8:	dac02d15 	stw	r11,180(sp)
  80e2ac:	e005883a 	mov	r2,fp
  80e2b0:	003c8106 	br	80d4b8 <__alt_data_end+0xff80d4b8>
  80e2b4:	657fffc4 	addi	r21,r12,-1
  80e2b8:	057f5d0e 	bge	zero,r21,80e030 <__alt_data_end+0xff80e030>
  80e2bc:	07000404 	movi	fp,16
  80e2c0:	e540900e 	bge	fp,r21,80e504 <___vfprintf_internal_r+0x1508>
  80e2c4:	010020b4 	movhi	r4,130
  80e2c8:	21332d84 	addi	r4,r4,-13130
  80e2cc:	d9002c15 	stw	r4,176(sp)
  80e2d0:	01c001c4 	movi	r7,7
  80e2d4:	00000306 	br	80e2e4 <___vfprintf_internal_r+0x12e8>
  80e2d8:	94800204 	addi	r18,r18,8
  80e2dc:	ad7ffc04 	addi	r21,r21,-16
  80e2e0:	e5408b0e 	bge	fp,r21,80e510 <___vfprintf_internal_r+0x1514>
  80e2e4:	18c00404 	addi	r3,r3,16
  80e2e8:	84000044 	addi	r16,r16,1
  80e2ec:	95000015 	stw	r20,0(r18)
  80e2f0:	97000115 	stw	fp,4(r18)
  80e2f4:	d8c02015 	stw	r3,128(sp)
  80e2f8:	dc001f15 	stw	r16,124(sp)
  80e2fc:	3c3ff60e 	bge	r7,r16,80e2d8 <__alt_data_end+0xff80e2d8>
  80e300:	b009883a 	mov	r4,r22
  80e304:	b80b883a 	mov	r5,r23
  80e308:	d9801e04 	addi	r6,sp,120
  80e30c:	d9c03d15 	stw	r7,244(sp)
  80e310:	0812eb40 	call	812eb4 <__sprint_r>
  80e314:	d9c03d17 	ldw	r7,244(sp)
  80e318:	103c2c1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e31c:	d8c02017 	ldw	r3,128(sp)
  80e320:	dc001f17 	ldw	r16,124(sp)
  80e324:	dc800404 	addi	r18,sp,16
  80e328:	003fec06 	br	80e2dc <__alt_data_end+0xff80e2dc>
  80e32c:	dac02d17 	ldw	r11,180(sp)
  80e330:	0039883a 	mov	fp,zero
  80e334:	0005883a 	mov	r2,zero
  80e338:	5cc00017 	ldw	r19,0(r11)
  80e33c:	5ac00104 	addi	r11,r11,4
  80e340:	dac02d15 	stw	r11,180(sp)
  80e344:	9807883a 	mov	r3,r19
  80e348:	003d5b06 	br	80d8b8 <__alt_data_end+0xff80d8b8>
  80e34c:	db002d17 	ldw	r12,180(sp)
  80e350:	0039883a 	mov	fp,zero
  80e354:	00800044 	movi	r2,1
  80e358:	64c00017 	ldw	r19,0(r12)
  80e35c:	63000104 	addi	r12,r12,4
  80e360:	db002d15 	stw	r12,180(sp)
  80e364:	9807883a 	mov	r3,r19
  80e368:	003d5306 	br	80d8b8 <__alt_data_end+0xff80d8b8>
  80e36c:	00800084 	movi	r2,2
  80e370:	9f06b03a 	or	r3,r19,fp
  80e374:	003d5006 	br	80d8b8 <__alt_data_end+0xff80d8b8>
  80e378:	10803fcc 	andi	r2,r2,255
  80e37c:	1080201c 	xori	r2,r2,128
  80e380:	10bfe004 	addi	r2,r2,-128
  80e384:	01000c04 	movi	r4,48
  80e388:	1101a526 	beq	r2,r4,80ea20 <___vfprintf_internal_r+0x1a24>
  80e38c:	dac03117 	ldw	r11,196(sp)
  80e390:	db002817 	ldw	r12,160(sp)
  80e394:	193fffc5 	stb	r4,-1(r3)
  80e398:	5affffc4 	addi	r11,r11,-1
  80e39c:	dac03115 	stw	r11,196(sp)
  80e3a0:	62e5c83a 	sub	r18,r12,r11
  80e3a4:	003c6306 	br	80d534 <__alt_data_end+0xff80d534>
  80e3a8:	b009883a 	mov	r4,r22
  80e3ac:	b80b883a 	mov	r5,r23
  80e3b0:	d9801e04 	addi	r6,sp,120
  80e3b4:	0812eb40 	call	812eb4 <__sprint_r>
  80e3b8:	103c041e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e3bc:	d8c02017 	ldw	r3,128(sp)
  80e3c0:	da000404 	addi	r8,sp,16
  80e3c4:	db003117 	ldw	r12,196(sp)
  80e3c8:	dac03417 	ldw	r11,208(sp)
  80e3cc:	d8802617 	ldw	r2,152(sp)
  80e3d0:	62e5883a 	add	r18,r12,r11
  80e3d4:	db003317 	ldw	r12,204(sp)
  80e3d8:	13000216 	blt	r2,r12,80e3e4 <___vfprintf_internal_r+0x13e8>
  80e3dc:	8900004c 	andi	r4,r17,1
  80e3e0:	20000c26 	beq	r4,zero,80e414 <___vfprintf_internal_r+0x1418>
  80e3e4:	dac03817 	ldw	r11,224(sp)
  80e3e8:	d9001f17 	ldw	r4,124(sp)
  80e3ec:	db003517 	ldw	r12,212(sp)
  80e3f0:	1ac7883a 	add	r3,r3,r11
  80e3f4:	21000044 	addi	r4,r4,1
  80e3f8:	43000015 	stw	r12,0(r8)
  80e3fc:	42c00115 	stw	r11,4(r8)
  80e400:	d8c02015 	stw	r3,128(sp)
  80e404:	d9001f15 	stw	r4,124(sp)
  80e408:	014001c4 	movi	r5,7
  80e40c:	2901cc16 	blt	r5,r4,80eb40 <___vfprintf_internal_r+0x1b44>
  80e410:	42000204 	addi	r8,r8,8
  80e414:	dac03317 	ldw	r11,204(sp)
  80e418:	8489c83a 	sub	r4,r16,r18
  80e41c:	5885c83a 	sub	r2,r11,r2
  80e420:	1021883a 	mov	r16,r2
  80e424:	2080010e 	bge	r4,r2,80e42c <___vfprintf_internal_r+0x1430>
  80e428:	2021883a 	mov	r16,r4
  80e42c:	04000a0e 	bge	zero,r16,80e458 <___vfprintf_internal_r+0x145c>
  80e430:	d9001f17 	ldw	r4,124(sp)
  80e434:	1c07883a 	add	r3,r3,r16
  80e438:	44800015 	stw	r18,0(r8)
  80e43c:	21000044 	addi	r4,r4,1
  80e440:	44000115 	stw	r16,4(r8)
  80e444:	d8c02015 	stw	r3,128(sp)
  80e448:	d9001f15 	stw	r4,124(sp)
  80e44c:	014001c4 	movi	r5,7
  80e450:	2901e316 	blt	r5,r4,80ebe0 <___vfprintf_internal_r+0x1be4>
  80e454:	42000204 	addi	r8,r8,8
  80e458:	8001df16 	blt	r16,zero,80ebd8 <___vfprintf_internal_r+0x1bdc>
  80e45c:	1421c83a 	sub	r16,r2,r16
  80e460:	043ccc0e 	bge	zero,r16,80d794 <__alt_data_end+0xff80d794>
  80e464:	04800404 	movi	r18,16
  80e468:	d8801f17 	ldw	r2,124(sp)
  80e46c:	943efc0e 	bge	r18,r16,80e060 <__alt_data_end+0xff80e060>
  80e470:	014020b4 	movhi	r5,130
  80e474:	29732d84 	addi	r5,r5,-13130
  80e478:	d9402c15 	stw	r5,176(sp)
  80e47c:	054001c4 	movi	r21,7
  80e480:	00000306 	br	80e490 <___vfprintf_internal_r+0x1494>
  80e484:	42000204 	addi	r8,r8,8
  80e488:	843ffc04 	addi	r16,r16,-16
  80e48c:	943ef70e 	bge	r18,r16,80e06c <__alt_data_end+0xff80e06c>
  80e490:	18c00404 	addi	r3,r3,16
  80e494:	10800044 	addi	r2,r2,1
  80e498:	45000015 	stw	r20,0(r8)
  80e49c:	44800115 	stw	r18,4(r8)
  80e4a0:	d8c02015 	stw	r3,128(sp)
  80e4a4:	d8801f15 	stw	r2,124(sp)
  80e4a8:	a8bff60e 	bge	r21,r2,80e484 <__alt_data_end+0xff80e484>
  80e4ac:	b009883a 	mov	r4,r22
  80e4b0:	b80b883a 	mov	r5,r23
  80e4b4:	d9801e04 	addi	r6,sp,120
  80e4b8:	0812eb40 	call	812eb4 <__sprint_r>
  80e4bc:	103bc31e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e4c0:	d8c02017 	ldw	r3,128(sp)
  80e4c4:	d8801f17 	ldw	r2,124(sp)
  80e4c8:	da000404 	addi	r8,sp,16
  80e4cc:	003fee06 	br	80e488 <__alt_data_end+0xff80e488>
  80e4d0:	8888703a 	and	r4,r17,r2
  80e4d4:	203eab1e 	bne	r4,zero,80df84 <__alt_data_end+0xff80df84>
  80e4d8:	dc001f17 	ldw	r16,124(sp)
  80e4dc:	db003117 	ldw	r12,196(sp)
  80e4e0:	40800115 	stw	r2,4(r8)
  80e4e4:	84000044 	addi	r16,r16,1
  80e4e8:	43000015 	stw	r12,0(r8)
  80e4ec:	d8c02015 	stw	r3,128(sp)
  80e4f0:	dc001f15 	stw	r16,124(sp)
  80e4f4:	008001c4 	movi	r2,7
  80e4f8:	14000e16 	blt	r2,r16,80e534 <___vfprintf_internal_r+0x1538>
  80e4fc:	44800204 	addi	r18,r8,8
  80e500:	003ecb06 	br	80e030 <__alt_data_end+0xff80e030>
  80e504:	008020b4 	movhi	r2,130
  80e508:	10b32d84 	addi	r2,r2,-13130
  80e50c:	d8802c15 	stw	r2,176(sp)
  80e510:	dac02c17 	ldw	r11,176(sp)
  80e514:	1d47883a 	add	r3,r3,r21
  80e518:	84000044 	addi	r16,r16,1
  80e51c:	92c00015 	stw	r11,0(r18)
  80e520:	95400115 	stw	r21,4(r18)
  80e524:	d8c02015 	stw	r3,128(sp)
  80e528:	dc001f15 	stw	r16,124(sp)
  80e52c:	008001c4 	movi	r2,7
  80e530:	143ebe0e 	bge	r2,r16,80e02c <__alt_data_end+0xff80e02c>
  80e534:	b009883a 	mov	r4,r22
  80e538:	b80b883a 	mov	r5,r23
  80e53c:	d9801e04 	addi	r6,sp,120
  80e540:	0812eb40 	call	812eb4 <__sprint_r>
  80e544:	103ba11e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e548:	d8c02017 	ldw	r3,128(sp)
  80e54c:	dc001f17 	ldw	r16,124(sp)
  80e550:	dc800404 	addi	r18,sp,16
  80e554:	003eb606 	br	80e030 <__alt_data_end+0xff80e030>
  80e558:	b009883a 	mov	r4,r22
  80e55c:	b80b883a 	mov	r5,r23
  80e560:	d9801e04 	addi	r6,sp,120
  80e564:	0812eb40 	call	812eb4 <__sprint_r>
  80e568:	103b981e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e56c:	d8c02017 	ldw	r3,128(sp)
  80e570:	dc001f17 	ldw	r16,124(sp)
  80e574:	da000404 	addi	r8,sp,16
  80e578:	003e8d06 	br	80dfb0 <__alt_data_end+0xff80dfb0>
  80e57c:	b009883a 	mov	r4,r22
  80e580:	b80b883a 	mov	r5,r23
  80e584:	d9801e04 	addi	r6,sp,120
  80e588:	0812eb40 	call	812eb4 <__sprint_r>
  80e58c:	103b8f1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e590:	d8c02017 	ldw	r3,128(sp)
  80e594:	dc001f17 	ldw	r16,124(sp)
  80e598:	dc800404 	addi	r18,sp,16
  80e59c:	003e8f06 	br	80dfdc <__alt_data_end+0xff80dfdc>
  80e5a0:	db001e04 	addi	r12,sp,120
  80e5a4:	0025883a 	mov	r18,zero
  80e5a8:	db003115 	stw	r12,196(sp)
  80e5ac:	003be106 	br	80d534 <__alt_data_end+0xff80d534>
  80e5b0:	b009883a 	mov	r4,r22
  80e5b4:	b80b883a 	mov	r5,r23
  80e5b8:	d9801e04 	addi	r6,sp,120
  80e5bc:	0812eb40 	call	812eb4 <__sprint_r>
  80e5c0:	103b821e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e5c4:	d8c02017 	ldw	r3,128(sp)
  80e5c8:	da000404 	addi	r8,sp,16
  80e5cc:	003c3b06 	br	80d6bc <__alt_data_end+0xff80d6bc>
  80e5d0:	04e7c83a 	sub	r19,zero,r19
  80e5d4:	9804c03a 	cmpne	r2,r19,zero
  80e5d8:	0739c83a 	sub	fp,zero,fp
  80e5dc:	e0b9c83a 	sub	fp,fp,r2
  80e5e0:	05400b44 	movi	r21,45
  80e5e4:	dd402785 	stb	r21,158(sp)
  80e5e8:	da403215 	stw	r9,200(sp)
  80e5ec:	00800044 	movi	r2,1
  80e5f0:	9f06b03a 	or	r3,r19,fp
  80e5f4:	003bb506 	br	80d4cc <__alt_data_end+0xff80d4cc>
  80e5f8:	da003f15 	stw	r8,252(sp)
  80e5fc:	da403e15 	stw	r9,248(sp)
  80e600:	0812ca00 	call	812ca0 <__fpclassifyd>
  80e604:	da003f17 	ldw	r8,252(sp)
  80e608:	da403e17 	ldw	r9,248(sp)
  80e60c:	1000ce26 	beq	r2,zero,80e948 <___vfprintf_internal_r+0x194c>
  80e610:	057ff7c4 	movi	r21,-33
  80e614:	00bfffc4 	movi	r2,-1
  80e618:	856a703a 	and	r21,r16,r21
  80e61c:	4881e826 	beq	r9,r2,80edc0 <___vfprintf_internal_r+0x1dc4>
  80e620:	008011c4 	movi	r2,71
  80e624:	a881e326 	beq	r21,r2,80edb4 <___vfprintf_internal_r+0x1db8>
  80e628:	db003917 	ldw	r12,228(sp)
  80e62c:	8ac04014 	ori	r11,r17,256
  80e630:	dac02d15 	stw	r11,180(sp)
  80e634:	6001ed16 	blt	r12,zero,80edec <___vfprintf_internal_r+0x1df0>
  80e638:	dc803917 	ldw	r18,228(sp)
  80e63c:	d8002b05 	stb	zero,172(sp)
  80e640:	00801984 	movi	r2,102
  80e644:	80811826 	beq	r16,r2,80eaa8 <___vfprintf_internal_r+0x1aac>
  80e648:	00801184 	movi	r2,70
  80e64c:	80811626 	beq	r16,r2,80eaa8 <___vfprintf_internal_r+0x1aac>
  80e650:	00801144 	movi	r2,69
  80e654:	a881e926 	beq	r21,r2,80edfc <___vfprintf_internal_r+0x1e00>
  80e658:	4839883a 	mov	fp,r9
  80e65c:	d8802604 	addi	r2,sp,152
  80e660:	d8800115 	stw	r2,4(sp)
  80e664:	d9403717 	ldw	r5,220(sp)
  80e668:	d8802504 	addi	r2,sp,148
  80e66c:	d8800215 	stw	r2,8(sp)
  80e670:	d8802104 	addi	r2,sp,132
  80e674:	df000015 	stw	fp,0(sp)
  80e678:	d8800315 	stw	r2,12(sp)
  80e67c:	b009883a 	mov	r4,r22
  80e680:	900d883a 	mov	r6,r18
  80e684:	01c00084 	movi	r7,2
  80e688:	da003f15 	stw	r8,252(sp)
  80e68c:	da403e15 	stw	r9,248(sp)
  80e690:	080f4300 	call	80f430 <_dtoa_r>
  80e694:	d8803115 	stw	r2,196(sp)
  80e698:	008019c4 	movi	r2,103
  80e69c:	da003f17 	ldw	r8,252(sp)
  80e6a0:	da403e17 	ldw	r9,248(sp)
  80e6a4:	80800226 	beq	r16,r2,80e6b0 <___vfprintf_internal_r+0x16b4>
  80e6a8:	008011c4 	movi	r2,71
  80e6ac:	8081101e 	bne	r16,r2,80eaf0 <___vfprintf_internal_r+0x1af4>
  80e6b0:	8880004c 	andi	r2,r17,1
  80e6b4:	1001dd26 	beq	r2,zero,80ee2c <___vfprintf_internal_r+0x1e30>
  80e6b8:	db003117 	ldw	r12,196(sp)
  80e6bc:	6715883a 	add	r10,r12,fp
  80e6c0:	d9003717 	ldw	r4,220(sp)
  80e6c4:	900b883a 	mov	r5,r18
  80e6c8:	000d883a 	mov	r6,zero
  80e6cc:	000f883a 	mov	r7,zero
  80e6d0:	da003f15 	stw	r8,252(sp)
  80e6d4:	da403e15 	stw	r9,248(sp)
  80e6d8:	da803d15 	stw	r10,244(sp)
  80e6dc:	08165140 	call	816514 <__eqdf2>
  80e6e0:	da003f17 	ldw	r8,252(sp)
  80e6e4:	da403e17 	ldw	r9,248(sp)
  80e6e8:	da803d17 	ldw	r10,244(sp)
  80e6ec:	10016526 	beq	r2,zero,80ec84 <___vfprintf_internal_r+0x1c88>
  80e6f0:	d8802117 	ldw	r2,132(sp)
  80e6f4:	1280062e 	bgeu	r2,r10,80e710 <___vfprintf_internal_r+0x1714>
  80e6f8:	01000c04 	movi	r4,48
  80e6fc:	10c00044 	addi	r3,r2,1
  80e700:	d8c02115 	stw	r3,132(sp)
  80e704:	11000005 	stb	r4,0(r2)
  80e708:	d8802117 	ldw	r2,132(sp)
  80e70c:	12bffb36 	bltu	r2,r10,80e6fc <__alt_data_end+0xff80e6fc>
  80e710:	db003117 	ldw	r12,196(sp)
  80e714:	1305c83a 	sub	r2,r2,r12
  80e718:	d8803315 	stw	r2,204(sp)
  80e71c:	008011c4 	movi	r2,71
  80e720:	a8814d26 	beq	r21,r2,80ec58 <___vfprintf_internal_r+0x1c5c>
  80e724:	00801944 	movi	r2,101
  80e728:	1402060e 	bge	r2,r16,80ef44 <___vfprintf_internal_r+0x1f48>
  80e72c:	00801984 	movi	r2,102
  80e730:	8081b426 	beq	r16,r2,80ee04 <___vfprintf_internal_r+0x1e08>
  80e734:	db002617 	ldw	r12,152(sp)
  80e738:	db003415 	stw	r12,208(sp)
  80e73c:	db003417 	ldw	r12,208(sp)
  80e740:	dac03317 	ldw	r11,204(sp)
  80e744:	62c1a016 	blt	r12,r11,80edc8 <___vfprintf_internal_r+0x1dcc>
  80e748:	8c40004c 	andi	r17,r17,1
  80e74c:	8801bf1e 	bne	r17,zero,80ee4c <___vfprintf_internal_r+0x1e50>
  80e750:	6005883a 	mov	r2,r12
  80e754:	6001b316 	blt	r12,zero,80ee24 <___vfprintf_internal_r+0x1e28>
  80e758:	dc803417 	ldw	r18,208(sp)
  80e75c:	df002b07 	ldb	fp,172(sp)
  80e760:	e0012e1e 	bne	fp,zero,80ec1c <___vfprintf_internal_r+0x1c20>
  80e764:	dc402d17 	ldw	r17,180(sp)
  80e768:	dd402783 	ldbu	r21,158(sp)
  80e76c:	d8802b15 	stw	r2,172(sp)
  80e770:	dcc02d15 	stw	r19,180(sp)
  80e774:	d8003215 	stw	zero,200(sp)
  80e778:	003b7306 	br	80d548 <__alt_data_end+0xff80d548>
  80e77c:	00800084 	movi	r2,2
  80e780:	003c4d06 	br	80d8b8 <__alt_data_end+0xff80d8b8>
  80e784:	8880040c 	andi	r2,r17,16
  80e788:	1000091e 	bne	r2,zero,80e7b0 <___vfprintf_internal_r+0x17b4>
  80e78c:	8c40100c 	andi	r17,r17,64
  80e790:	88000726 	beq	r17,zero,80e7b0 <___vfprintf_internal_r+0x17b4>
  80e794:	db002d17 	ldw	r12,180(sp)
  80e798:	dac02f17 	ldw	r11,188(sp)
  80e79c:	60800017 	ldw	r2,0(r12)
  80e7a0:	63000104 	addi	r12,r12,4
  80e7a4:	db002d15 	stw	r12,180(sp)
  80e7a8:	12c0000d 	sth	r11,0(r2)
  80e7ac:	003a4e06 	br	80d0e8 <__alt_data_end+0xff80d0e8>
  80e7b0:	db002d17 	ldw	r12,180(sp)
  80e7b4:	dac02f17 	ldw	r11,188(sp)
  80e7b8:	60800017 	ldw	r2,0(r12)
  80e7bc:	63000104 	addi	r12,r12,4
  80e7c0:	db002d15 	stw	r12,180(sp)
  80e7c4:	12c00015 	stw	r11,0(r2)
  80e7c8:	003a4706 	br	80d0e8 <__alt_data_end+0xff80d0e8>
  80e7cc:	1c000007 	ldb	r16,0(r3)
  80e7d0:	1805883a 	mov	r2,r3
  80e7d4:	003a6e06 	br	80d190 <__alt_data_end+0xff80d190>
  80e7d8:	88c0100c 	andi	r3,r17,64
  80e7dc:	18006b26 	beq	r3,zero,80e98c <___vfprintf_internal_r+0x1990>
  80e7e0:	dac02d17 	ldw	r11,180(sp)
  80e7e4:	14c0000b 	ldhu	r19,0(r2)
  80e7e8:	0039883a 	mov	fp,zero
  80e7ec:	5ac00104 	addi	r11,r11,4
  80e7f0:	dac02d15 	stw	r11,180(sp)
  80e7f4:	003cb206 	br	80dac0 <__alt_data_end+0xff80dac0>
  80e7f8:	010020b4 	movhi	r4,130
  80e7fc:	21332d84 	addi	r4,r4,-13130
  80e800:	d9002c15 	stw	r4,176(sp)
  80e804:	dac02c17 	ldw	r11,176(sp)
  80e808:	1c87883a 	add	r3,r3,r18
  80e80c:	10800044 	addi	r2,r2,1
  80e810:	42c00015 	stw	r11,0(r8)
  80e814:	44800115 	stw	r18,4(r8)
  80e818:	d8c02015 	stw	r3,128(sp)
  80e81c:	d8801f15 	stw	r2,124(sp)
  80e820:	010001c4 	movi	r4,7
  80e824:	20bee016 	blt	r4,r2,80e3a8 <__alt_data_end+0xff80e3a8>
  80e828:	42000204 	addi	r8,r8,8
  80e82c:	003ee506 	br	80e3c4 <__alt_data_end+0xff80e3c4>
  80e830:	010020b4 	movhi	r4,130
  80e834:	21332d84 	addi	r4,r4,-13130
  80e838:	d9002c15 	stw	r4,176(sp)
  80e83c:	003bbe06 	br	80d738 <__alt_data_end+0xff80d738>
  80e840:	b009883a 	mov	r4,r22
  80e844:	b80b883a 	mov	r5,r23
  80e848:	d9801e04 	addi	r6,sp,120
  80e84c:	0812eb40 	call	812eb4 <__sprint_r>
  80e850:	103ade1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e854:	d8c02017 	ldw	r3,128(sp)
  80e858:	da000404 	addi	r8,sp,16
  80e85c:	003d6b06 	br	80de0c <__alt_data_end+0xff80de0c>
  80e860:	d8801f17 	ldw	r2,124(sp)
  80e864:	030020b4 	movhi	r12,130
  80e868:	01000044 	movi	r4,1
  80e86c:	18c00044 	addi	r3,r3,1
  80e870:	10800044 	addi	r2,r2,1
  80e874:	63332d04 	addi	r12,r12,-13132
  80e878:	41000115 	stw	r4,4(r8)
  80e87c:	43000015 	stw	r12,0(r8)
  80e880:	d8c02015 	stw	r3,128(sp)
  80e884:	d8801f15 	stw	r2,124(sp)
  80e888:	010001c4 	movi	r4,7
  80e88c:	20804916 	blt	r4,r2,80e9b4 <___vfprintf_internal_r+0x19b8>
  80e890:	42000204 	addi	r8,r8,8
  80e894:	8000041e 	bne	r16,zero,80e8a8 <___vfprintf_internal_r+0x18ac>
  80e898:	dac03317 	ldw	r11,204(sp)
  80e89c:	5800021e 	bne	r11,zero,80e8a8 <___vfprintf_internal_r+0x18ac>
  80e8a0:	8880004c 	andi	r2,r17,1
  80e8a4:	103bbb26 	beq	r2,zero,80d794 <__alt_data_end+0xff80d794>
  80e8a8:	db003817 	ldw	r12,224(sp)
  80e8ac:	d8801f17 	ldw	r2,124(sp)
  80e8b0:	dac03517 	ldw	r11,212(sp)
  80e8b4:	1b07883a 	add	r3,r3,r12
  80e8b8:	10800044 	addi	r2,r2,1
  80e8bc:	42c00015 	stw	r11,0(r8)
  80e8c0:	43000115 	stw	r12,4(r8)
  80e8c4:	d8c02015 	stw	r3,128(sp)
  80e8c8:	d8801f15 	stw	r2,124(sp)
  80e8cc:	010001c4 	movi	r4,7
  80e8d0:	20812e16 	blt	r4,r2,80ed8c <___vfprintf_internal_r+0x1d90>
  80e8d4:	42000204 	addi	r8,r8,8
  80e8d8:	0421c83a 	sub	r16,zero,r16
  80e8dc:	04005c0e 	bge	zero,r16,80ea50 <___vfprintf_internal_r+0x1a54>
  80e8e0:	04800404 	movi	r18,16
  80e8e4:	94009f0e 	bge	r18,r16,80eb64 <___vfprintf_internal_r+0x1b68>
  80e8e8:	010020b4 	movhi	r4,130
  80e8ec:	21332d84 	addi	r4,r4,-13130
  80e8f0:	d9002c15 	stw	r4,176(sp)
  80e8f4:	054001c4 	movi	r21,7
  80e8f8:	00000306 	br	80e908 <___vfprintf_internal_r+0x190c>
  80e8fc:	42000204 	addi	r8,r8,8
  80e900:	843ffc04 	addi	r16,r16,-16
  80e904:	94009a0e 	bge	r18,r16,80eb70 <___vfprintf_internal_r+0x1b74>
  80e908:	18c00404 	addi	r3,r3,16
  80e90c:	10800044 	addi	r2,r2,1
  80e910:	45000015 	stw	r20,0(r8)
  80e914:	44800115 	stw	r18,4(r8)
  80e918:	d8c02015 	stw	r3,128(sp)
  80e91c:	d8801f15 	stw	r2,124(sp)
  80e920:	a8bff60e 	bge	r21,r2,80e8fc <__alt_data_end+0xff80e8fc>
  80e924:	b009883a 	mov	r4,r22
  80e928:	b80b883a 	mov	r5,r23
  80e92c:	d9801e04 	addi	r6,sp,120
  80e930:	0812eb40 	call	812eb4 <__sprint_r>
  80e934:	103aa51e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e938:	d8c02017 	ldw	r3,128(sp)
  80e93c:	d8801f17 	ldw	r2,124(sp)
  80e940:	da000404 	addi	r8,sp,16
  80e944:	003fee06 	br	80e900 <__alt_data_end+0xff80e900>
  80e948:	008011c4 	movi	r2,71
  80e94c:	1400be16 	blt	r2,r16,80ec48 <___vfprintf_internal_r+0x1c4c>
  80e950:	030020b4 	movhi	r12,130
  80e954:	63331f04 	addi	r12,r12,-13188
  80e958:	db003115 	stw	r12,196(sp)
  80e95c:	00c000c4 	movi	r3,3
  80e960:	00bfdfc4 	movi	r2,-129
  80e964:	d8c02b15 	stw	r3,172(sp)
  80e968:	88a2703a 	and	r17,r17,r2
  80e96c:	dd402783 	ldbu	r21,158(sp)
  80e970:	dcc02d15 	stw	r19,180(sp)
  80e974:	1825883a 	mov	r18,r3
  80e978:	d8003215 	stw	zero,200(sp)
  80e97c:	d8003415 	stw	zero,208(sp)
  80e980:	003af106 	br	80d548 <__alt_data_end+0xff80d548>
  80e984:	4825883a 	mov	r18,r9
  80e988:	003c9306 	br	80dbd8 <__alt_data_end+0xff80dbd8>
  80e98c:	db002d17 	ldw	r12,180(sp)
  80e990:	14c00017 	ldw	r19,0(r2)
  80e994:	0039883a 	mov	fp,zero
  80e998:	63000104 	addi	r12,r12,4
  80e99c:	db002d15 	stw	r12,180(sp)
  80e9a0:	003c4706 	br	80dac0 <__alt_data_end+0xff80dac0>
  80e9a4:	008020b4 	movhi	r2,130
  80e9a8:	10b31d04 	addi	r2,r2,-13196
  80e9ac:	d8803115 	stw	r2,196(sp)
  80e9b0:	003bf106 	br	80d978 <__alt_data_end+0xff80d978>
  80e9b4:	b009883a 	mov	r4,r22
  80e9b8:	b80b883a 	mov	r5,r23
  80e9bc:	d9801e04 	addi	r6,sp,120
  80e9c0:	0812eb40 	call	812eb4 <__sprint_r>
  80e9c4:	103a811e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80e9c8:	dc002617 	ldw	r16,152(sp)
  80e9cc:	d8c02017 	ldw	r3,128(sp)
  80e9d0:	da000404 	addi	r8,sp,16
  80e9d4:	003faf06 	br	80e894 <__alt_data_end+0xff80e894>
  80e9d8:	db002e17 	ldw	r12,184(sp)
  80e9dc:	1805883a 	mov	r2,r3
  80e9e0:	dac02d15 	stw	r11,180(sp)
  80e9e4:	0319c83a 	sub	r12,zero,r12
  80e9e8:	db002e15 	stw	r12,184(sp)
  80e9ec:	003a8206 	br	80d3f8 <__alt_data_end+0xff80d3f8>
  80e9f0:	18800044 	addi	r2,r3,1
  80e9f4:	8c400814 	ori	r17,r17,32
  80e9f8:	1c000047 	ldb	r16,1(r3)
  80e9fc:	0039e406 	br	80d190 <__alt_data_end+0xff80d190>
  80ea00:	b009883a 	mov	r4,r22
  80ea04:	b80b883a 	mov	r5,r23
  80ea08:	d9801e04 	addi	r6,sp,120
  80ea0c:	0812eb40 	call	812eb4 <__sprint_r>
  80ea10:	103a6e1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80ea14:	d8c02017 	ldw	r3,128(sp)
  80ea18:	da000404 	addi	r8,sp,16
  80ea1c:	003d0c06 	br	80de50 <__alt_data_end+0xff80de50>
  80ea20:	db002817 	ldw	r12,160(sp)
  80ea24:	d8c03117 	ldw	r3,196(sp)
  80ea28:	60e5c83a 	sub	r18,r12,r3
  80ea2c:	003ac106 	br	80d534 <__alt_data_end+0xff80d534>
  80ea30:	b009883a 	mov	r4,r22
  80ea34:	b80b883a 	mov	r5,r23
  80ea38:	d9801e04 	addi	r6,sp,120
  80ea3c:	0812eb40 	call	812eb4 <__sprint_r>
  80ea40:	103a621e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80ea44:	d8c02017 	ldw	r3,128(sp)
  80ea48:	d8801f17 	ldw	r2,124(sp)
  80ea4c:	da000404 	addi	r8,sp,16
  80ea50:	db003317 	ldw	r12,204(sp)
  80ea54:	dac03117 	ldw	r11,196(sp)
  80ea58:	10800044 	addi	r2,r2,1
  80ea5c:	1b07883a 	add	r3,r3,r12
  80ea60:	42c00015 	stw	r11,0(r8)
  80ea64:	43000115 	stw	r12,4(r8)
  80ea68:	d8c02015 	stw	r3,128(sp)
  80ea6c:	d8801f15 	stw	r2,124(sp)
  80ea70:	010001c4 	movi	r4,7
  80ea74:	20bb460e 	bge	r4,r2,80d790 <__alt_data_end+0xff80d790>
  80ea78:	003d8506 	br	80e090 <__alt_data_end+0xff80e090>
  80ea7c:	da003f15 	stw	r8,252(sp)
  80ea80:	080cf640 	call	80cf64 <strlen>
  80ea84:	1025883a 	mov	r18,r2
  80ea88:	da003f17 	ldw	r8,252(sp)
  80ea8c:	903c540e 	bge	r18,zero,80dbe0 <__alt_data_end+0xff80dbe0>
  80ea90:	0005883a 	mov	r2,zero
  80ea94:	003c5206 	br	80dbe0 <__alt_data_end+0xff80dbe0>
  80ea98:	010020b4 	movhi	r4,130
  80ea9c:	21333184 	addi	r4,r4,-13114
  80eaa0:	d9003615 	stw	r4,216(sp)
  80eaa4:	003adc06 	br	80d618 <__alt_data_end+0xff80d618>
  80eaa8:	d8802604 	addi	r2,sp,152
  80eaac:	d8800115 	stw	r2,4(sp)
  80eab0:	d9403717 	ldw	r5,220(sp)
  80eab4:	d8802504 	addi	r2,sp,148
  80eab8:	d8800215 	stw	r2,8(sp)
  80eabc:	d8802104 	addi	r2,sp,132
  80eac0:	da400015 	stw	r9,0(sp)
  80eac4:	d8800315 	stw	r2,12(sp)
  80eac8:	b009883a 	mov	r4,r22
  80eacc:	900d883a 	mov	r6,r18
  80ead0:	01c000c4 	movi	r7,3
  80ead4:	da003f15 	stw	r8,252(sp)
  80ead8:	da403e15 	stw	r9,248(sp)
  80eadc:	080f4300 	call	80f430 <_dtoa_r>
  80eae0:	da403e17 	ldw	r9,248(sp)
  80eae4:	da003f17 	ldw	r8,252(sp)
  80eae8:	d8803115 	stw	r2,196(sp)
  80eaec:	4839883a 	mov	fp,r9
  80eaf0:	dac03117 	ldw	r11,196(sp)
  80eaf4:	00801184 	movi	r2,70
  80eaf8:	5f15883a 	add	r10,r11,fp
  80eafc:	a8bef01e 	bne	r21,r2,80e6c0 <__alt_data_end+0xff80e6c0>
  80eb00:	59000007 	ldb	r4,0(r11)
  80eb04:	00800c04 	movi	r2,48
  80eb08:	2080d526 	beq	r4,r2,80ee60 <___vfprintf_internal_r+0x1e64>
  80eb0c:	d8c02617 	ldw	r3,152(sp)
  80eb10:	50d5883a 	add	r10,r10,r3
  80eb14:	003eea06 	br	80e6c0 <__alt_data_end+0xff80e6c0>
  80eb18:	0025883a 	mov	r18,zero
  80eb1c:	003db306 	br	80e1ec <__alt_data_end+0xff80e1ec>
  80eb20:	b009883a 	mov	r4,r22
  80eb24:	b80b883a 	mov	r5,r23
  80eb28:	d9801e04 	addi	r6,sp,120
  80eb2c:	0812eb40 	call	812eb4 <__sprint_r>
  80eb30:	103a261e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80eb34:	d8c02017 	ldw	r3,128(sp)
  80eb38:	da000404 	addi	r8,sp,16
  80eb3c:	003daa06 	br	80e1e8 <__alt_data_end+0xff80e1e8>
  80eb40:	b009883a 	mov	r4,r22
  80eb44:	b80b883a 	mov	r5,r23
  80eb48:	d9801e04 	addi	r6,sp,120
  80eb4c:	0812eb40 	call	812eb4 <__sprint_r>
  80eb50:	103a1e1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80eb54:	d8802617 	ldw	r2,152(sp)
  80eb58:	d8c02017 	ldw	r3,128(sp)
  80eb5c:	da000404 	addi	r8,sp,16
  80eb60:	003e2c06 	br	80e414 <__alt_data_end+0xff80e414>
  80eb64:	030020b4 	movhi	r12,130
  80eb68:	63332d84 	addi	r12,r12,-13130
  80eb6c:	db002c15 	stw	r12,176(sp)
  80eb70:	dac02c17 	ldw	r11,176(sp)
  80eb74:	1c07883a 	add	r3,r3,r16
  80eb78:	10800044 	addi	r2,r2,1
  80eb7c:	42c00015 	stw	r11,0(r8)
  80eb80:	44000115 	stw	r16,4(r8)
  80eb84:	d8c02015 	stw	r3,128(sp)
  80eb88:	d8801f15 	stw	r2,124(sp)
  80eb8c:	010001c4 	movi	r4,7
  80eb90:	20bfa716 	blt	r4,r2,80ea30 <__alt_data_end+0xff80ea30>
  80eb94:	42000204 	addi	r8,r8,8
  80eb98:	003fad06 	br	80ea50 <__alt_data_end+0xff80ea50>
  80eb9c:	00800184 	movi	r2,6
  80eba0:	1240012e 	bgeu	r2,r9,80eba8 <___vfprintf_internal_r+0x1bac>
  80eba4:	1013883a 	mov	r9,r2
  80eba8:	4825883a 	mov	r18,r9
  80ebac:	4805883a 	mov	r2,r9
  80ebb0:	4800c216 	blt	r9,zero,80eebc <___vfprintf_internal_r+0x1ec0>
  80ebb4:	d8802b15 	stw	r2,172(sp)
  80ebb8:	008020b4 	movhi	r2,130
  80ebbc:	10b32b04 	addi	r2,r2,-13140
  80ebc0:	d8803115 	stw	r2,196(sp)
  80ebc4:	dcc02d15 	stw	r19,180(sp)
  80ebc8:	d8003215 	stw	zero,200(sp)
  80ebcc:	d8003415 	stw	zero,208(sp)
  80ebd0:	0005883a 	mov	r2,zero
  80ebd4:	003a6306 	br	80d564 <__alt_data_end+0xff80d564>
  80ebd8:	0021883a 	mov	r16,zero
  80ebdc:	003e1f06 	br	80e45c <__alt_data_end+0xff80e45c>
  80ebe0:	b009883a 	mov	r4,r22
  80ebe4:	b80b883a 	mov	r5,r23
  80ebe8:	d9801e04 	addi	r6,sp,120
  80ebec:	0812eb40 	call	812eb4 <__sprint_r>
  80ebf0:	1039f61e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80ebf4:	d8802617 	ldw	r2,152(sp)
  80ebf8:	db003317 	ldw	r12,204(sp)
  80ebfc:	d8c02017 	ldw	r3,128(sp)
  80ec00:	da000404 	addi	r8,sp,16
  80ec04:	6085c83a 	sub	r2,r12,r2
  80ec08:	003e1306 	br	80e458 <__alt_data_end+0xff80e458>
  80ec0c:	030020b4 	movhi	r12,130
  80ec10:	63333184 	addi	r12,r12,-13114
  80ec14:	db003615 	stw	r12,216(sp)
  80ec18:	003b0206 	br	80d824 <__alt_data_end+0xff80d824>
  80ec1c:	00c00b44 	movi	r3,45
  80ec20:	d8802b15 	stw	r2,172(sp)
  80ec24:	dc402d17 	ldw	r17,180(sp)
  80ec28:	d8c02785 	stb	r3,158(sp)
  80ec2c:	dcc02d15 	stw	r19,180(sp)
  80ec30:	d8003215 	stw	zero,200(sp)
  80ec34:	00800b44 	movi	r2,45
  80ec38:	003a4706 	br	80d558 <__alt_data_end+0xff80d558>
  80ec3c:	05400b44 	movi	r21,45
  80ec40:	dd402785 	stb	r21,158(sp)
  80ec44:	003b4706 	br	80d964 <__alt_data_end+0xff80d964>
  80ec48:	008020b4 	movhi	r2,130
  80ec4c:	10b32004 	addi	r2,r2,-13184
  80ec50:	d8803115 	stw	r2,196(sp)
  80ec54:	003f4106 	br	80e95c <__alt_data_end+0xff80e95c>
  80ec58:	d8c02617 	ldw	r3,152(sp)
  80ec5c:	00bfff44 	movi	r2,-3
  80ec60:	18801116 	blt	r3,r2,80eca8 <___vfprintf_internal_r+0x1cac>
  80ec64:	48c01016 	blt	r9,r3,80eca8 <___vfprintf_internal_r+0x1cac>
  80ec68:	d8c03415 	stw	r3,208(sp)
  80ec6c:	040019c4 	movi	r16,103
  80ec70:	003eb206 	br	80e73c <__alt_data_end+0xff80e73c>
  80ec74:	010020b4 	movhi	r4,130
  80ec78:	21332d84 	addi	r4,r4,-13130
  80ec7c:	d9002c15 	stw	r4,176(sp)
  80ec80:	003cb106 	br	80df48 <__alt_data_end+0xff80df48>
  80ec84:	5005883a 	mov	r2,r10
  80ec88:	003ea106 	br	80e710 <__alt_data_end+0xff80e710>
  80ec8c:	da402b15 	stw	r9,172(sp)
  80ec90:	dd402783 	ldbu	r21,158(sp)
  80ec94:	4825883a 	mov	r18,r9
  80ec98:	dcc02d15 	stw	r19,180(sp)
  80ec9c:	d8003215 	stw	zero,200(sp)
  80eca0:	d8003415 	stw	zero,208(sp)
  80eca4:	003a2806 	br	80d548 <__alt_data_end+0xff80d548>
  80eca8:	843fff84 	addi	r16,r16,-2
  80ecac:	1f3fffc4 	addi	fp,r3,-1
  80ecb0:	df002615 	stw	fp,152(sp)
  80ecb4:	dc0022c5 	stb	r16,139(sp)
  80ecb8:	e0009816 	blt	fp,zero,80ef1c <___vfprintf_internal_r+0x1f20>
  80ecbc:	00800ac4 	movi	r2,43
  80ecc0:	d8802305 	stb	r2,140(sp)
  80ecc4:	00800244 	movi	r2,9
  80ecc8:	1700750e 	bge	r2,fp,80eea0 <___vfprintf_internal_r+0x1ea4>
  80eccc:	dd4022c4 	addi	r21,sp,139
  80ecd0:	dc002c15 	stw	r16,176(sp)
  80ecd4:	4025883a 	mov	r18,r8
  80ecd8:	a821883a 	mov	r16,r21
  80ecdc:	e009883a 	mov	r4,fp
  80ece0:	01400284 	movi	r5,10
  80ece4:	080a9240 	call	80a924 <__modsi3>
  80ece8:	10800c04 	addi	r2,r2,48
  80ecec:	843fffc4 	addi	r16,r16,-1
  80ecf0:	e009883a 	mov	r4,fp
  80ecf4:	01400284 	movi	r5,10
  80ecf8:	80800005 	stb	r2,0(r16)
  80ecfc:	080a8d00 	call	80a8d0 <__divsi3>
  80ed00:	1039883a 	mov	fp,r2
  80ed04:	00800244 	movi	r2,9
  80ed08:	173ff416 	blt	r2,fp,80ecdc <__alt_data_end+0xff80ecdc>
  80ed0c:	9011883a 	mov	r8,r18
  80ed10:	e0800c04 	addi	r2,fp,48
  80ed14:	8025883a 	mov	r18,r16
  80ed18:	913fffc4 	addi	r4,r18,-1
  80ed1c:	90bfffc5 	stb	r2,-1(r18)
  80ed20:	dc002c17 	ldw	r16,176(sp)
  80ed24:	2540852e 	bgeu	r4,r21,80ef3c <___vfprintf_internal_r+0x1f40>
  80ed28:	d9402384 	addi	r5,sp,142
  80ed2c:	2c8bc83a 	sub	r5,r5,r18
  80ed30:	d8c02344 	addi	r3,sp,141
  80ed34:	a94b883a 	add	r5,r21,r5
  80ed38:	00000106 	br	80ed40 <___vfprintf_internal_r+0x1d44>
  80ed3c:	20800003 	ldbu	r2,0(r4)
  80ed40:	18800005 	stb	r2,0(r3)
  80ed44:	18c00044 	addi	r3,r3,1
  80ed48:	21000044 	addi	r4,r4,1
  80ed4c:	197ffb1e 	bne	r3,r5,80ed3c <__alt_data_end+0xff80ed3c>
  80ed50:	d8802304 	addi	r2,sp,140
  80ed54:	1485c83a 	sub	r2,r2,r18
  80ed58:	d8c02344 	addi	r3,sp,141
  80ed5c:	1885883a 	add	r2,r3,r2
  80ed60:	dac03317 	ldw	r11,204(sp)
  80ed64:	156bc83a 	sub	r21,r2,r21
  80ed68:	dd403a15 	stw	r21,232(sp)
  80ed6c:	00800044 	movi	r2,1
  80ed70:	5d65883a 	add	r18,r11,r21
  80ed74:	12c0660e 	bge	r2,r11,80ef10 <___vfprintf_internal_r+0x1f14>
  80ed78:	94800044 	addi	r18,r18,1
  80ed7c:	9005883a 	mov	r2,r18
  80ed80:	90006116 	blt	r18,zero,80ef08 <___vfprintf_internal_r+0x1f0c>
  80ed84:	d8003415 	stw	zero,208(sp)
  80ed88:	003e7406 	br	80e75c <__alt_data_end+0xff80e75c>
  80ed8c:	b009883a 	mov	r4,r22
  80ed90:	b80b883a 	mov	r5,r23
  80ed94:	d9801e04 	addi	r6,sp,120
  80ed98:	0812eb40 	call	812eb4 <__sprint_r>
  80ed9c:	10398b1e 	bne	r2,zero,80d3cc <__alt_data_end+0xff80d3cc>
  80eda0:	dc002617 	ldw	r16,152(sp)
  80eda4:	d8c02017 	ldw	r3,128(sp)
  80eda8:	d8801f17 	ldw	r2,124(sp)
  80edac:	da000404 	addi	r8,sp,16
  80edb0:	003ec906 	br	80e8d8 <__alt_data_end+0xff80e8d8>
  80edb4:	483e1c1e 	bne	r9,zero,80e628 <__alt_data_end+0xff80e628>
  80edb8:	9013883a 	mov	r9,r18
  80edbc:	003e1a06 	br	80e628 <__alt_data_end+0xff80e628>
  80edc0:	02400184 	movi	r9,6
  80edc4:	003e1806 	br	80e628 <__alt_data_end+0xff80e628>
  80edc8:	d8c03417 	ldw	r3,208(sp)
  80edcc:	00c04b0e 	bge	zero,r3,80eefc <___vfprintf_internal_r+0x1f00>
  80edd0:	04800044 	movi	r18,1
  80edd4:	dac03317 	ldw	r11,204(sp)
  80edd8:	92e5883a 	add	r18,r18,r11
  80eddc:	9005883a 	mov	r2,r18
  80ede0:	903e5e0e 	bge	r18,zero,80e75c <__alt_data_end+0xff80e75c>
  80ede4:	0005883a 	mov	r2,zero
  80ede8:	003e5c06 	br	80e75c <__alt_data_end+0xff80e75c>
  80edec:	00c00b44 	movi	r3,45
  80edf0:	64a0003c 	xorhi	r18,r12,32768
  80edf4:	d8c02b05 	stb	r3,172(sp)
  80edf8:	003e1106 	br	80e640 <__alt_data_end+0xff80e640>
  80edfc:	4f000044 	addi	fp,r9,1
  80ee00:	003e1606 	br	80e65c <__alt_data_end+0xff80e65c>
  80ee04:	d8c02617 	ldw	r3,152(sp)
  80ee08:	d8c03415 	stw	r3,208(sp)
  80ee0c:	00c0350e 	bge	zero,r3,80eee4 <___vfprintf_internal_r+0x1ee8>
  80ee10:	4800081e 	bne	r9,zero,80ee34 <___vfprintf_internal_r+0x1e38>
  80ee14:	8c40004c 	andi	r17,r17,1
  80ee18:	8800061e 	bne	r17,zero,80ee34 <___vfprintf_internal_r+0x1e38>
  80ee1c:	1805883a 	mov	r2,r3
  80ee20:	183e4d0e 	bge	r3,zero,80e758 <__alt_data_end+0xff80e758>
  80ee24:	0005883a 	mov	r2,zero
  80ee28:	003e4b06 	br	80e758 <__alt_data_end+0xff80e758>
  80ee2c:	d8802117 	ldw	r2,132(sp)
  80ee30:	003e3706 	br	80e710 <__alt_data_end+0xff80e710>
  80ee34:	dac03417 	ldw	r11,208(sp)
  80ee38:	4a400044 	addi	r9,r9,1
  80ee3c:	5a65883a 	add	r18,r11,r9
  80ee40:	9005883a 	mov	r2,r18
  80ee44:	903e450e 	bge	r18,zero,80e75c <__alt_data_end+0xff80e75c>
  80ee48:	003fe606 	br	80ede4 <__alt_data_end+0xff80ede4>
  80ee4c:	db003417 	ldw	r12,208(sp)
  80ee50:	64800044 	addi	r18,r12,1
  80ee54:	9005883a 	mov	r2,r18
  80ee58:	903e400e 	bge	r18,zero,80e75c <__alt_data_end+0xff80e75c>
  80ee5c:	003fe106 	br	80ede4 <__alt_data_end+0xff80ede4>
  80ee60:	d9003717 	ldw	r4,220(sp)
  80ee64:	900b883a 	mov	r5,r18
  80ee68:	000d883a 	mov	r6,zero
  80ee6c:	000f883a 	mov	r7,zero
  80ee70:	da003f15 	stw	r8,252(sp)
  80ee74:	da403e15 	stw	r9,248(sp)
  80ee78:	da803d15 	stw	r10,244(sp)
  80ee7c:	08165140 	call	816514 <__eqdf2>
  80ee80:	da003f17 	ldw	r8,252(sp)
  80ee84:	da403e17 	ldw	r9,248(sp)
  80ee88:	da803d17 	ldw	r10,244(sp)
  80ee8c:	103f1f26 	beq	r2,zero,80eb0c <__alt_data_end+0xff80eb0c>
  80ee90:	00800044 	movi	r2,1
  80ee94:	1707c83a 	sub	r3,r2,fp
  80ee98:	d8c02615 	stw	r3,152(sp)
  80ee9c:	003f1c06 	br	80eb10 <__alt_data_end+0xff80eb10>
  80eea0:	00800c04 	movi	r2,48
  80eea4:	e0c00c04 	addi	r3,fp,48
  80eea8:	d8802345 	stb	r2,141(sp)
  80eeac:	d8c02385 	stb	r3,142(sp)
  80eeb0:	d88023c4 	addi	r2,sp,143
  80eeb4:	dd4022c4 	addi	r21,sp,139
  80eeb8:	003fa906 	br	80ed60 <__alt_data_end+0xff80ed60>
  80eebc:	0005883a 	mov	r2,zero
  80eec0:	003f3c06 	br	80ebb4 <__alt_data_end+0xff80ebb4>
  80eec4:	dac02d17 	ldw	r11,180(sp)
  80eec8:	5a400017 	ldw	r9,0(r11)
  80eecc:	5ac00104 	addi	r11,r11,4
  80eed0:	dac02d15 	stw	r11,180(sp)
  80eed4:	483ec80e 	bge	r9,zero,80e9f8 <__alt_data_end+0xff80e9f8>
  80eed8:	027fffc4 	movi	r9,-1
  80eedc:	1c000047 	ldb	r16,1(r3)
  80eee0:	0038ab06 	br	80d190 <__alt_data_end+0xff80d190>
  80eee4:	4800111e 	bne	r9,zero,80ef2c <___vfprintf_internal_r+0x1f30>
  80eee8:	8c40004c 	andi	r17,r17,1
  80eeec:	88000f1e 	bne	r17,zero,80ef2c <___vfprintf_internal_r+0x1f30>
  80eef0:	00800044 	movi	r2,1
  80eef4:	1025883a 	mov	r18,r2
  80eef8:	003e1806 	br	80e75c <__alt_data_end+0xff80e75c>
  80eefc:	04800084 	movi	r18,2
  80ef00:	90e5c83a 	sub	r18,r18,r3
  80ef04:	003fb306 	br	80edd4 <__alt_data_end+0xff80edd4>
  80ef08:	0005883a 	mov	r2,zero
  80ef0c:	003f9d06 	br	80ed84 <__alt_data_end+0xff80ed84>
  80ef10:	88a2703a 	and	r17,r17,r2
  80ef14:	883f9926 	beq	r17,zero,80ed7c <__alt_data_end+0xff80ed7c>
  80ef18:	003f9706 	br	80ed78 <__alt_data_end+0xff80ed78>
  80ef1c:	00800b44 	movi	r2,45
  80ef20:	0739c83a 	sub	fp,zero,fp
  80ef24:	d8802305 	stb	r2,140(sp)
  80ef28:	003f6606 	br	80ecc4 <__alt_data_end+0xff80ecc4>
  80ef2c:	4c800084 	addi	r18,r9,2
  80ef30:	9005883a 	mov	r2,r18
  80ef34:	903e090e 	bge	r18,zero,80e75c <__alt_data_end+0xff80e75c>
  80ef38:	003faa06 	br	80ede4 <__alt_data_end+0xff80ede4>
  80ef3c:	d8802344 	addi	r2,sp,141
  80ef40:	003f8706 	br	80ed60 <__alt_data_end+0xff80ed60>
  80ef44:	d8c02617 	ldw	r3,152(sp)
  80ef48:	003f5806 	br	80ecac <__alt_data_end+0xff80ecac>

0080ef4c <__vfprintf_internal>:
  80ef4c:	2007883a 	mov	r3,r4
  80ef50:	010020b4 	movhi	r4,130
  80ef54:	213bcf04 	addi	r4,r4,-4292
  80ef58:	21000017 	ldw	r4,0(r4)
  80ef5c:	2805883a 	mov	r2,r5
  80ef60:	300f883a 	mov	r7,r6
  80ef64:	180b883a 	mov	r5,r3
  80ef68:	100d883a 	mov	r6,r2
  80ef6c:	080cffc1 	jmpi	80cffc <___vfprintf_internal_r>

0080ef70 <__sbprintf>:
  80ef70:	2880030b 	ldhu	r2,12(r5)
  80ef74:	2ac01917 	ldw	r11,100(r5)
  80ef78:	2a80038b 	ldhu	r10,14(r5)
  80ef7c:	2a400717 	ldw	r9,28(r5)
  80ef80:	2a000917 	ldw	r8,36(r5)
  80ef84:	defee204 	addi	sp,sp,-1144
  80ef88:	00c10004 	movi	r3,1024
  80ef8c:	dc011a15 	stw	r16,1128(sp)
  80ef90:	10bfff4c 	andi	r2,r2,65533
  80ef94:	2821883a 	mov	r16,r5
  80ef98:	d8cb883a 	add	r5,sp,r3
  80ef9c:	dc811c15 	stw	r18,1136(sp)
  80efa0:	dc411b15 	stw	r17,1132(sp)
  80efa4:	dfc11d15 	stw	ra,1140(sp)
  80efa8:	2025883a 	mov	r18,r4
  80efac:	d881030d 	sth	r2,1036(sp)
  80efb0:	dac11915 	stw	r11,1124(sp)
  80efb4:	da81038d 	sth	r10,1038(sp)
  80efb8:	da410715 	stw	r9,1052(sp)
  80efbc:	da010915 	stw	r8,1060(sp)
  80efc0:	dec10015 	stw	sp,1024(sp)
  80efc4:	dec10415 	stw	sp,1040(sp)
  80efc8:	d8c10215 	stw	r3,1032(sp)
  80efcc:	d8c10515 	stw	r3,1044(sp)
  80efd0:	d8010615 	stw	zero,1048(sp)
  80efd4:	080cffc0 	call	80cffc <___vfprintf_internal_r>
  80efd8:	1023883a 	mov	r17,r2
  80efdc:	10000416 	blt	r2,zero,80eff0 <__sbprintf+0x80>
  80efe0:	9009883a 	mov	r4,r18
  80efe4:	d9410004 	addi	r5,sp,1024
  80efe8:	080ac9c0 	call	80ac9c <_fflush_r>
  80efec:	10000d1e 	bne	r2,zero,80f024 <__sbprintf+0xb4>
  80eff0:	d8c1030b 	ldhu	r3,1036(sp)
  80eff4:	18c0100c 	andi	r3,r3,64
  80eff8:	18000326 	beq	r3,zero,80f008 <__sbprintf+0x98>
  80effc:	8080030b 	ldhu	r2,12(r16)
  80f000:	10801014 	ori	r2,r2,64
  80f004:	8080030d 	sth	r2,12(r16)
  80f008:	8805883a 	mov	r2,r17
  80f00c:	dfc11d17 	ldw	ra,1140(sp)
  80f010:	dc811c17 	ldw	r18,1136(sp)
  80f014:	dc411b17 	ldw	r17,1132(sp)
  80f018:	dc011a17 	ldw	r16,1128(sp)
  80f01c:	dec11e04 	addi	sp,sp,1144
  80f020:	f800283a 	ret
  80f024:	047fffc4 	movi	r17,-1
  80f028:	003ff106 	br	80eff0 <__alt_data_end+0xff80eff0>

0080f02c <_write_r>:
  80f02c:	defffd04 	addi	sp,sp,-12
  80f030:	dc000015 	stw	r16,0(sp)
  80f034:	040020b4 	movhi	r16,130
  80f038:	dc400115 	stw	r17,4(sp)
  80f03c:	84034404 	addi	r16,r16,3344
  80f040:	2023883a 	mov	r17,r4
  80f044:	2809883a 	mov	r4,r5
  80f048:	300b883a 	mov	r5,r6
  80f04c:	380d883a 	mov	r6,r7
  80f050:	dfc00215 	stw	ra,8(sp)
  80f054:	80000015 	stw	zero,0(r16)
  80f058:	0818bc40 	call	818bc4 <write>
  80f05c:	00ffffc4 	movi	r3,-1
  80f060:	10c00526 	beq	r2,r3,80f078 <_write_r+0x4c>
  80f064:	dfc00217 	ldw	ra,8(sp)
  80f068:	dc400117 	ldw	r17,4(sp)
  80f06c:	dc000017 	ldw	r16,0(sp)
  80f070:	dec00304 	addi	sp,sp,12
  80f074:	f800283a 	ret
  80f078:	80c00017 	ldw	r3,0(r16)
  80f07c:	183ff926 	beq	r3,zero,80f064 <__alt_data_end+0xff80f064>
  80f080:	88c00015 	stw	r3,0(r17)
  80f084:	003ff706 	br	80f064 <__alt_data_end+0xff80f064>

0080f088 <__swsetup_r>:
  80f088:	008020b4 	movhi	r2,130
  80f08c:	defffd04 	addi	sp,sp,-12
  80f090:	10bbcf04 	addi	r2,r2,-4292
  80f094:	dc400115 	stw	r17,4(sp)
  80f098:	2023883a 	mov	r17,r4
  80f09c:	11000017 	ldw	r4,0(r2)
  80f0a0:	dc000015 	stw	r16,0(sp)
  80f0a4:	dfc00215 	stw	ra,8(sp)
  80f0a8:	2821883a 	mov	r16,r5
  80f0ac:	20000226 	beq	r4,zero,80f0b8 <__swsetup_r+0x30>
  80f0b0:	20c00e17 	ldw	r3,56(r4)
  80f0b4:	18003126 	beq	r3,zero,80f17c <__swsetup_r+0xf4>
  80f0b8:	8080030b 	ldhu	r2,12(r16)
  80f0bc:	10c0020c 	andi	r3,r2,8
  80f0c0:	100d883a 	mov	r6,r2
  80f0c4:	18000f26 	beq	r3,zero,80f104 <__swsetup_r+0x7c>
  80f0c8:	80c00417 	ldw	r3,16(r16)
  80f0cc:	18001526 	beq	r3,zero,80f124 <__swsetup_r+0x9c>
  80f0d0:	1100004c 	andi	r4,r2,1
  80f0d4:	20001c1e 	bne	r4,zero,80f148 <__swsetup_r+0xc0>
  80f0d8:	1080008c 	andi	r2,r2,2
  80f0dc:	1000291e 	bne	r2,zero,80f184 <__swsetup_r+0xfc>
  80f0e0:	80800517 	ldw	r2,20(r16)
  80f0e4:	80800215 	stw	r2,8(r16)
  80f0e8:	18001c26 	beq	r3,zero,80f15c <__swsetup_r+0xd4>
  80f0ec:	0005883a 	mov	r2,zero
  80f0f0:	dfc00217 	ldw	ra,8(sp)
  80f0f4:	dc400117 	ldw	r17,4(sp)
  80f0f8:	dc000017 	ldw	r16,0(sp)
  80f0fc:	dec00304 	addi	sp,sp,12
  80f100:	f800283a 	ret
  80f104:	3080040c 	andi	r2,r6,16
  80f108:	10002e26 	beq	r2,zero,80f1c4 <__swsetup_r+0x13c>
  80f10c:	3080010c 	andi	r2,r6,4
  80f110:	10001e1e 	bne	r2,zero,80f18c <__swsetup_r+0x104>
  80f114:	80c00417 	ldw	r3,16(r16)
  80f118:	30800214 	ori	r2,r6,8
  80f11c:	8080030d 	sth	r2,12(r16)
  80f120:	183feb1e 	bne	r3,zero,80f0d0 <__alt_data_end+0xff80f0d0>
  80f124:	1140a00c 	andi	r5,r2,640
  80f128:	01008004 	movi	r4,512
  80f12c:	293fe826 	beq	r5,r4,80f0d0 <__alt_data_end+0xff80f0d0>
  80f130:	8809883a 	mov	r4,r17
  80f134:	800b883a 	mov	r5,r16
  80f138:	080bea80 	call	80bea8 <__smakebuf_r>
  80f13c:	8080030b 	ldhu	r2,12(r16)
  80f140:	80c00417 	ldw	r3,16(r16)
  80f144:	003fe206 	br	80f0d0 <__alt_data_end+0xff80f0d0>
  80f148:	80800517 	ldw	r2,20(r16)
  80f14c:	80000215 	stw	zero,8(r16)
  80f150:	0085c83a 	sub	r2,zero,r2
  80f154:	80800615 	stw	r2,24(r16)
  80f158:	183fe41e 	bne	r3,zero,80f0ec <__alt_data_end+0xff80f0ec>
  80f15c:	80c0030b 	ldhu	r3,12(r16)
  80f160:	0005883a 	mov	r2,zero
  80f164:	1900200c 	andi	r4,r3,128
  80f168:	203fe126 	beq	r4,zero,80f0f0 <__alt_data_end+0xff80f0f0>
  80f16c:	18c01014 	ori	r3,r3,64
  80f170:	80c0030d 	sth	r3,12(r16)
  80f174:	00bfffc4 	movi	r2,-1
  80f178:	003fdd06 	br	80f0f0 <__alt_data_end+0xff80f0f0>
  80f17c:	080b0780 	call	80b078 <__sinit>
  80f180:	003fcd06 	br	80f0b8 <__alt_data_end+0xff80f0b8>
  80f184:	0005883a 	mov	r2,zero
  80f188:	003fd606 	br	80f0e4 <__alt_data_end+0xff80f0e4>
  80f18c:	81400c17 	ldw	r5,48(r16)
  80f190:	28000626 	beq	r5,zero,80f1ac <__swsetup_r+0x124>
  80f194:	80801004 	addi	r2,r16,64
  80f198:	28800326 	beq	r5,r2,80f1a8 <__swsetup_r+0x120>
  80f19c:	8809883a 	mov	r4,r17
  80f1a0:	080b3440 	call	80b344 <_free_r>
  80f1a4:	8180030b 	ldhu	r6,12(r16)
  80f1a8:	80000c15 	stw	zero,48(r16)
  80f1ac:	80c00417 	ldw	r3,16(r16)
  80f1b0:	00bff6c4 	movi	r2,-37
  80f1b4:	118c703a 	and	r6,r2,r6
  80f1b8:	80000115 	stw	zero,4(r16)
  80f1bc:	80c00015 	stw	r3,0(r16)
  80f1c0:	003fd506 	br	80f118 <__alt_data_end+0xff80f118>
  80f1c4:	00800244 	movi	r2,9
  80f1c8:	88800015 	stw	r2,0(r17)
  80f1cc:	30801014 	ori	r2,r6,64
  80f1d0:	8080030d 	sth	r2,12(r16)
  80f1d4:	00bfffc4 	movi	r2,-1
  80f1d8:	003fc506 	br	80f0f0 <__alt_data_end+0xff80f0f0>

0080f1dc <_close_r>:
  80f1dc:	defffd04 	addi	sp,sp,-12
  80f1e0:	dc000015 	stw	r16,0(sp)
  80f1e4:	040020b4 	movhi	r16,130
  80f1e8:	dc400115 	stw	r17,4(sp)
  80f1ec:	84034404 	addi	r16,r16,3344
  80f1f0:	2023883a 	mov	r17,r4
  80f1f4:	2809883a 	mov	r4,r5
  80f1f8:	dfc00215 	stw	ra,8(sp)
  80f1fc:	80000015 	stw	zero,0(r16)
  80f200:	0817b3c0 	call	817b3c <close>
  80f204:	00ffffc4 	movi	r3,-1
  80f208:	10c00526 	beq	r2,r3,80f220 <_close_r+0x44>
  80f20c:	dfc00217 	ldw	ra,8(sp)
  80f210:	dc400117 	ldw	r17,4(sp)
  80f214:	dc000017 	ldw	r16,0(sp)
  80f218:	dec00304 	addi	sp,sp,12
  80f21c:	f800283a 	ret
  80f220:	80c00017 	ldw	r3,0(r16)
  80f224:	183ff926 	beq	r3,zero,80f20c <__alt_data_end+0xff80f20c>
  80f228:	88c00015 	stw	r3,0(r17)
  80f22c:	003ff706 	br	80f20c <__alt_data_end+0xff80f20c>

0080f230 <quorem>:
  80f230:	defff704 	addi	sp,sp,-36
  80f234:	dc800215 	stw	r18,8(sp)
  80f238:	20800417 	ldw	r2,16(r4)
  80f23c:	2c800417 	ldw	r18,16(r5)
  80f240:	dfc00815 	stw	ra,32(sp)
  80f244:	ddc00715 	stw	r23,28(sp)
  80f248:	dd800615 	stw	r22,24(sp)
  80f24c:	dd400515 	stw	r21,20(sp)
  80f250:	dd000415 	stw	r20,16(sp)
  80f254:	dcc00315 	stw	r19,12(sp)
  80f258:	dc400115 	stw	r17,4(sp)
  80f25c:	dc000015 	stw	r16,0(sp)
  80f260:	14807116 	blt	r2,r18,80f428 <quorem+0x1f8>
  80f264:	94bfffc4 	addi	r18,r18,-1
  80f268:	94ad883a 	add	r22,r18,r18
  80f26c:	b5ad883a 	add	r22,r22,r22
  80f270:	2c400504 	addi	r17,r5,20
  80f274:	8da9883a 	add	r20,r17,r22
  80f278:	25400504 	addi	r21,r4,20
  80f27c:	282f883a 	mov	r23,r5
  80f280:	adad883a 	add	r22,r21,r22
  80f284:	a1400017 	ldw	r5,0(r20)
  80f288:	2021883a 	mov	r16,r4
  80f28c:	b1000017 	ldw	r4,0(r22)
  80f290:	29400044 	addi	r5,r5,1
  80f294:	080a9800 	call	80a980 <__udivsi3>
  80f298:	1027883a 	mov	r19,r2
  80f29c:	10002c26 	beq	r2,zero,80f350 <quorem+0x120>
  80f2a0:	a813883a 	mov	r9,r21
  80f2a4:	8811883a 	mov	r8,r17
  80f2a8:	0009883a 	mov	r4,zero
  80f2ac:	000d883a 	mov	r6,zero
  80f2b0:	41c00017 	ldw	r7,0(r8)
  80f2b4:	49400017 	ldw	r5,0(r9)
  80f2b8:	42000104 	addi	r8,r8,4
  80f2bc:	38bfffcc 	andi	r2,r7,65535
  80f2c0:	14c5383a 	mul	r2,r2,r19
  80f2c4:	380ed43a 	srli	r7,r7,16
  80f2c8:	28ffffcc 	andi	r3,r5,65535
  80f2cc:	2085883a 	add	r2,r4,r2
  80f2d0:	1008d43a 	srli	r4,r2,16
  80f2d4:	3ccf383a 	mul	r7,r7,r19
  80f2d8:	198d883a 	add	r6,r3,r6
  80f2dc:	10ffffcc 	andi	r3,r2,65535
  80f2e0:	30c7c83a 	sub	r3,r6,r3
  80f2e4:	280ad43a 	srli	r5,r5,16
  80f2e8:	21c9883a 	add	r4,r4,r7
  80f2ec:	180dd43a 	srai	r6,r3,16
  80f2f0:	20bfffcc 	andi	r2,r4,65535
  80f2f4:	288bc83a 	sub	r5,r5,r2
  80f2f8:	298b883a 	add	r5,r5,r6
  80f2fc:	280e943a 	slli	r7,r5,16
  80f300:	18ffffcc 	andi	r3,r3,65535
  80f304:	2008d43a 	srli	r4,r4,16
  80f308:	38ceb03a 	or	r7,r7,r3
  80f30c:	49c00015 	stw	r7,0(r9)
  80f310:	280dd43a 	srai	r6,r5,16
  80f314:	4a400104 	addi	r9,r9,4
  80f318:	a23fe52e 	bgeu	r20,r8,80f2b0 <__alt_data_end+0xff80f2b0>
  80f31c:	b0800017 	ldw	r2,0(r22)
  80f320:	10000b1e 	bne	r2,zero,80f350 <quorem+0x120>
  80f324:	b0bfff04 	addi	r2,r22,-4
  80f328:	a880082e 	bgeu	r21,r2,80f34c <quorem+0x11c>
  80f32c:	b0ffff17 	ldw	r3,-4(r22)
  80f330:	18000326 	beq	r3,zero,80f340 <quorem+0x110>
  80f334:	00000506 	br	80f34c <quorem+0x11c>
  80f338:	10c00017 	ldw	r3,0(r2)
  80f33c:	1800031e 	bne	r3,zero,80f34c <quorem+0x11c>
  80f340:	10bfff04 	addi	r2,r2,-4
  80f344:	94bfffc4 	addi	r18,r18,-1
  80f348:	a8bffb36 	bltu	r21,r2,80f338 <__alt_data_end+0xff80f338>
  80f34c:	84800415 	stw	r18,16(r16)
  80f350:	8009883a 	mov	r4,r16
  80f354:	b80b883a 	mov	r5,r23
  80f358:	0811ea40 	call	811ea4 <__mcmp>
  80f35c:	10002616 	blt	r2,zero,80f3f8 <quorem+0x1c8>
  80f360:	9cc00044 	addi	r19,r19,1
  80f364:	a80d883a 	mov	r6,r21
  80f368:	000b883a 	mov	r5,zero
  80f36c:	31000017 	ldw	r4,0(r6)
  80f370:	88800017 	ldw	r2,0(r17)
  80f374:	31800104 	addi	r6,r6,4
  80f378:	20ffffcc 	andi	r3,r4,65535
  80f37c:	194b883a 	add	r5,r3,r5
  80f380:	10ffffcc 	andi	r3,r2,65535
  80f384:	28c7c83a 	sub	r3,r5,r3
  80f388:	1004d43a 	srli	r2,r2,16
  80f38c:	2008d43a 	srli	r4,r4,16
  80f390:	180bd43a 	srai	r5,r3,16
  80f394:	18ffffcc 	andi	r3,r3,65535
  80f398:	2089c83a 	sub	r4,r4,r2
  80f39c:	2149883a 	add	r4,r4,r5
  80f3a0:	2004943a 	slli	r2,r4,16
  80f3a4:	8c400104 	addi	r17,r17,4
  80f3a8:	200bd43a 	srai	r5,r4,16
  80f3ac:	10c6b03a 	or	r3,r2,r3
  80f3b0:	30ffff15 	stw	r3,-4(r6)
  80f3b4:	a47fed2e 	bgeu	r20,r17,80f36c <__alt_data_end+0xff80f36c>
  80f3b8:	9485883a 	add	r2,r18,r18
  80f3bc:	1085883a 	add	r2,r2,r2
  80f3c0:	a887883a 	add	r3,r21,r2
  80f3c4:	18800017 	ldw	r2,0(r3)
  80f3c8:	10000b1e 	bne	r2,zero,80f3f8 <quorem+0x1c8>
  80f3cc:	18bfff04 	addi	r2,r3,-4
  80f3d0:	a880082e 	bgeu	r21,r2,80f3f4 <quorem+0x1c4>
  80f3d4:	18ffff17 	ldw	r3,-4(r3)
  80f3d8:	18000326 	beq	r3,zero,80f3e8 <quorem+0x1b8>
  80f3dc:	00000506 	br	80f3f4 <quorem+0x1c4>
  80f3e0:	10c00017 	ldw	r3,0(r2)
  80f3e4:	1800031e 	bne	r3,zero,80f3f4 <quorem+0x1c4>
  80f3e8:	10bfff04 	addi	r2,r2,-4
  80f3ec:	94bfffc4 	addi	r18,r18,-1
  80f3f0:	a8bffb36 	bltu	r21,r2,80f3e0 <__alt_data_end+0xff80f3e0>
  80f3f4:	84800415 	stw	r18,16(r16)
  80f3f8:	9805883a 	mov	r2,r19
  80f3fc:	dfc00817 	ldw	ra,32(sp)
  80f400:	ddc00717 	ldw	r23,28(sp)
  80f404:	dd800617 	ldw	r22,24(sp)
  80f408:	dd400517 	ldw	r21,20(sp)
  80f40c:	dd000417 	ldw	r20,16(sp)
  80f410:	dcc00317 	ldw	r19,12(sp)
  80f414:	dc800217 	ldw	r18,8(sp)
  80f418:	dc400117 	ldw	r17,4(sp)
  80f41c:	dc000017 	ldw	r16,0(sp)
  80f420:	dec00904 	addi	sp,sp,36
  80f424:	f800283a 	ret
  80f428:	0005883a 	mov	r2,zero
  80f42c:	003ff306 	br	80f3fc <__alt_data_end+0xff80f3fc>

0080f430 <_dtoa_r>:
  80f430:	20801017 	ldw	r2,64(r4)
  80f434:	deffde04 	addi	sp,sp,-136
  80f438:	dd401d15 	stw	r21,116(sp)
  80f43c:	dcc01b15 	stw	r19,108(sp)
  80f440:	dc801a15 	stw	r18,104(sp)
  80f444:	dc401915 	stw	r17,100(sp)
  80f448:	dc001815 	stw	r16,96(sp)
  80f44c:	dfc02115 	stw	ra,132(sp)
  80f450:	df002015 	stw	fp,128(sp)
  80f454:	ddc01f15 	stw	r23,124(sp)
  80f458:	dd801e15 	stw	r22,120(sp)
  80f45c:	dd001c15 	stw	r20,112(sp)
  80f460:	d9c00315 	stw	r7,12(sp)
  80f464:	2021883a 	mov	r16,r4
  80f468:	302b883a 	mov	r21,r6
  80f46c:	2825883a 	mov	r18,r5
  80f470:	dc402417 	ldw	r17,144(sp)
  80f474:	3027883a 	mov	r19,r6
  80f478:	10000826 	beq	r2,zero,80f49c <_dtoa_r+0x6c>
  80f47c:	21801117 	ldw	r6,68(r4)
  80f480:	00c00044 	movi	r3,1
  80f484:	100b883a 	mov	r5,r2
  80f488:	1986983a 	sll	r3,r3,r6
  80f48c:	11800115 	stw	r6,4(r2)
  80f490:	10c00215 	stw	r3,8(r2)
  80f494:	08116780 	call	811678 <_Bfree>
  80f498:	80001015 	stw	zero,64(r16)
  80f49c:	a8002d16 	blt	r21,zero,80f554 <_dtoa_r+0x124>
  80f4a0:	88000015 	stw	zero,0(r17)
  80f4a4:	a8dffc2c 	andhi	r3,r21,32752
  80f4a8:	009ffc34 	movhi	r2,32752
  80f4ac:	18801b26 	beq	r3,r2,80f51c <_dtoa_r+0xec>
  80f4b0:	9009883a 	mov	r4,r18
  80f4b4:	980b883a 	mov	r5,r19
  80f4b8:	000d883a 	mov	r6,zero
  80f4bc:	000f883a 	mov	r7,zero
  80f4c0:	08165140 	call	816514 <__eqdf2>
  80f4c4:	10002a1e 	bne	r2,zero,80f570 <_dtoa_r+0x140>
  80f4c8:	d8c02317 	ldw	r3,140(sp)
  80f4cc:	d9002517 	ldw	r4,148(sp)
  80f4d0:	00800044 	movi	r2,1
  80f4d4:	18800015 	stw	r2,0(r3)
  80f4d8:	2001a226 	beq	r4,zero,80fb64 <_dtoa_r+0x734>
  80f4dc:	008020b4 	movhi	r2,130
  80f4e0:	10b32d44 	addi	r2,r2,-13131
  80f4e4:	20800015 	stw	r2,0(r4)
  80f4e8:	10bfffc4 	addi	r2,r2,-1
  80f4ec:	dfc02117 	ldw	ra,132(sp)
  80f4f0:	df002017 	ldw	fp,128(sp)
  80f4f4:	ddc01f17 	ldw	r23,124(sp)
  80f4f8:	dd801e17 	ldw	r22,120(sp)
  80f4fc:	dd401d17 	ldw	r21,116(sp)
  80f500:	dd001c17 	ldw	r20,112(sp)
  80f504:	dcc01b17 	ldw	r19,108(sp)
  80f508:	dc801a17 	ldw	r18,104(sp)
  80f50c:	dc401917 	ldw	r17,100(sp)
  80f510:	dc001817 	ldw	r16,96(sp)
  80f514:	dec02204 	addi	sp,sp,136
  80f518:	f800283a 	ret
  80f51c:	d8c02317 	ldw	r3,140(sp)
  80f520:	0089c3c4 	movi	r2,9999
  80f524:	18800015 	stw	r2,0(r3)
  80f528:	90017c26 	beq	r18,zero,80fb1c <_dtoa_r+0x6ec>
  80f52c:	008020b4 	movhi	r2,130
  80f530:	10b33904 	addi	r2,r2,-13084
  80f534:	d9002517 	ldw	r4,148(sp)
  80f538:	203fec26 	beq	r4,zero,80f4ec <__alt_data_end+0xff80f4ec>
  80f53c:	10c000c7 	ldb	r3,3(r2)
  80f540:	18017d1e 	bne	r3,zero,80fb38 <_dtoa_r+0x708>
  80f544:	10c000c4 	addi	r3,r2,3
  80f548:	d9802517 	ldw	r6,148(sp)
  80f54c:	30c00015 	stw	r3,0(r6)
  80f550:	003fe606 	br	80f4ec <__alt_data_end+0xff80f4ec>
  80f554:	04e00034 	movhi	r19,32768
  80f558:	9cffffc4 	addi	r19,r19,-1
  80f55c:	00800044 	movi	r2,1
  80f560:	ace6703a 	and	r19,r21,r19
  80f564:	88800015 	stw	r2,0(r17)
  80f568:	982b883a 	mov	r21,r19
  80f56c:	003fcd06 	br	80f4a4 <__alt_data_end+0xff80f4a4>
  80f570:	d8800204 	addi	r2,sp,8
  80f574:	a822d53a 	srli	r17,r21,20
  80f578:	d8800015 	stw	r2,0(sp)
  80f57c:	8009883a 	mov	r4,r16
  80f580:	900b883a 	mov	r5,r18
  80f584:	980d883a 	mov	r6,r19
  80f588:	d9c00104 	addi	r7,sp,4
  80f58c:	08122180 	call	812218 <__d2b>
  80f590:	1039883a 	mov	fp,r2
  80f594:	88016a1e 	bne	r17,zero,80fb40 <_dtoa_r+0x710>
  80f598:	dd000217 	ldw	r20,8(sp)
  80f59c:	dc400117 	ldw	r17,4(sp)
  80f5a0:	00befbc4 	movi	r2,-1041
  80f5a4:	a463883a 	add	r17,r20,r17
  80f5a8:	8882ea16 	blt	r17,r2,810154 <_dtoa_r+0xd24>
  80f5ac:	00bf0384 	movi	r2,-1010
  80f5b0:	1445c83a 	sub	r2,r2,r17
  80f5b4:	89010484 	addi	r4,r17,1042
  80f5b8:	a8aa983a 	sll	r21,r21,r2
  80f5bc:	9108d83a 	srl	r4,r18,r4
  80f5c0:	a908b03a 	or	r4,r21,r4
  80f5c4:	08178a40 	call	8178a4 <__floatunsidf>
  80f5c8:	017f8434 	movhi	r5,65040
  80f5cc:	01800044 	movi	r6,1
  80f5d0:	1009883a 	mov	r4,r2
  80f5d4:	194b883a 	add	r5,r3,r5
  80f5d8:	8c7fffc4 	addi	r17,r17,-1
  80f5dc:	d9800f15 	stw	r6,60(sp)
  80f5e0:	000d883a 	mov	r6,zero
  80f5e4:	01cffe34 	movhi	r7,16376
  80f5e8:	0816e7c0 	call	816e7c <__subdf3>
  80f5ec:	0198dbf4 	movhi	r6,25455
  80f5f0:	01cff4f4 	movhi	r7,16339
  80f5f4:	1009883a 	mov	r4,r2
  80f5f8:	180b883a 	mov	r5,r3
  80f5fc:	3190d844 	addi	r6,r6,17249
  80f600:	39e1e9c4 	addi	r7,r7,-30809
  80f604:	08167580 	call	816758 <__muldf3>
  80f608:	01a2d874 	movhi	r6,35681
  80f60c:	01cff1f4 	movhi	r7,16327
  80f610:	180b883a 	mov	r5,r3
  80f614:	31b22cc4 	addi	r6,r6,-14157
  80f618:	39e28a04 	addi	r7,r7,-30168
  80f61c:	1009883a 	mov	r4,r2
  80f620:	08153ac0 	call	8153ac <__adddf3>
  80f624:	8809883a 	mov	r4,r17
  80f628:	102d883a 	mov	r22,r2
  80f62c:	182b883a 	mov	r21,r3
  80f630:	08177d40 	call	8177d4 <__floatsidf>
  80f634:	019427f4 	movhi	r6,20639
  80f638:	01cff4f4 	movhi	r7,16339
  80f63c:	1009883a 	mov	r4,r2
  80f640:	180b883a 	mov	r5,r3
  80f644:	319e7ec4 	addi	r6,r6,31227
  80f648:	39d104c4 	addi	r7,r7,17427
  80f64c:	08167580 	call	816758 <__muldf3>
  80f650:	b009883a 	mov	r4,r22
  80f654:	a80b883a 	mov	r5,r21
  80f658:	100d883a 	mov	r6,r2
  80f65c:	180f883a 	mov	r7,r3
  80f660:	08153ac0 	call	8153ac <__adddf3>
  80f664:	1009883a 	mov	r4,r2
  80f668:	180b883a 	mov	r5,r3
  80f66c:	102d883a 	mov	r22,r2
  80f670:	182b883a 	mov	r21,r3
  80f674:	081774c0 	call	81774c <__fixdfsi>
  80f678:	b009883a 	mov	r4,r22
  80f67c:	a80b883a 	mov	r5,r21
  80f680:	000d883a 	mov	r6,zero
  80f684:	000f883a 	mov	r7,zero
  80f688:	d8800515 	stw	r2,20(sp)
  80f68c:	08166780 	call	816678 <__ledf2>
  80f690:	10023116 	blt	r2,zero,80ff58 <_dtoa_r+0xb28>
  80f694:	d8c00517 	ldw	r3,20(sp)
  80f698:	00800584 	movi	r2,22
  80f69c:	10c21f36 	bltu	r2,r3,80ff1c <_dtoa_r+0xaec>
  80f6a0:	180490fa 	slli	r2,r3,3
  80f6a4:	00c020b4 	movhi	r3,130
  80f6a8:	18f35404 	addi	r3,r3,-12976
  80f6ac:	1885883a 	add	r2,r3,r2
  80f6b0:	11000017 	ldw	r4,0(r2)
  80f6b4:	11400117 	ldw	r5,4(r2)
  80f6b8:	900d883a 	mov	r6,r18
  80f6bc:	980f883a 	mov	r7,r19
  80f6c0:	08165980 	call	816598 <__gedf2>
  80f6c4:	0082a70e 	bge	zero,r2,810164 <_dtoa_r+0xd34>
  80f6c8:	d9000517 	ldw	r4,20(sp)
  80f6cc:	d8000d15 	stw	zero,52(sp)
  80f6d0:	213fffc4 	addi	r4,r4,-1
  80f6d4:	d9000515 	stw	r4,20(sp)
  80f6d8:	a463c83a 	sub	r17,r20,r17
  80f6dc:	8dbfffc4 	addi	r22,r17,-1
  80f6e0:	b0021916 	blt	r22,zero,80ff48 <_dtoa_r+0xb18>
  80f6e4:	d8000815 	stw	zero,32(sp)
  80f6e8:	d8800517 	ldw	r2,20(sp)
  80f6ec:	10020e16 	blt	r2,zero,80ff28 <_dtoa_r+0xaf8>
  80f6f0:	b0ad883a 	add	r22,r22,r2
  80f6f4:	d8800a15 	stw	r2,40(sp)
  80f6f8:	d8000915 	stw	zero,36(sp)
  80f6fc:	d8c00317 	ldw	r3,12(sp)
  80f700:	00800244 	movi	r2,9
  80f704:	10c11a36 	bltu	r2,r3,80fb70 <_dtoa_r+0x740>
  80f708:	00800144 	movi	r2,5
  80f70c:	10c4fc0e 	bge	r2,r3,810b00 <_dtoa_r+0x16d0>
  80f710:	18ffff04 	addi	r3,r3,-4
  80f714:	d8c00315 	stw	r3,12(sp)
  80f718:	0029883a 	mov	r20,zero
  80f71c:	d9800317 	ldw	r6,12(sp)
  80f720:	008000c4 	movi	r2,3
  80f724:	3083bd26 	beq	r6,r2,81061c <_dtoa_r+0x11ec>
  80f728:	1183670e 	bge	r2,r6,8104c8 <_dtoa_r+0x1098>
  80f72c:	d8c00317 	ldw	r3,12(sp)
  80f730:	00800104 	movi	r2,4
  80f734:	1882e726 	beq	r3,r2,8102d4 <_dtoa_r+0xea4>
  80f738:	00800144 	movi	r2,5
  80f73c:	1884f21e 	bne	r3,r2,810b08 <_dtoa_r+0x16d8>
  80f740:	00800044 	movi	r2,1
  80f744:	d8800b15 	stw	r2,44(sp)
  80f748:	d8c02217 	ldw	r3,136(sp)
  80f74c:	d9000517 	ldw	r4,20(sp)
  80f750:	1907883a 	add	r3,r3,r4
  80f754:	19800044 	addi	r6,r3,1
  80f758:	d8c00c15 	stw	r3,48(sp)
  80f75c:	d9800615 	stw	r6,24(sp)
  80f760:	0183c30e 	bge	zero,r6,810670 <_dtoa_r+0x1240>
  80f764:	d9800617 	ldw	r6,24(sp)
  80f768:	3023883a 	mov	r17,r6
  80f76c:	80001115 	stw	zero,68(r16)
  80f770:	008005c4 	movi	r2,23
  80f774:	1184f62e 	bgeu	r2,r6,810b50 <_dtoa_r+0x1720>
  80f778:	00c00044 	movi	r3,1
  80f77c:	00800104 	movi	r2,4
  80f780:	1085883a 	add	r2,r2,r2
  80f784:	11000504 	addi	r4,r2,20
  80f788:	180b883a 	mov	r5,r3
  80f78c:	18c00044 	addi	r3,r3,1
  80f790:	313ffb2e 	bgeu	r6,r4,80f780 <__alt_data_end+0xff80f780>
  80f794:	81401115 	stw	r5,68(r16)
  80f798:	8009883a 	mov	r4,r16
  80f79c:	08115d00 	call	8115d0 <_Balloc>
  80f7a0:	d8800715 	stw	r2,28(sp)
  80f7a4:	80801015 	stw	r2,64(r16)
  80f7a8:	00800384 	movi	r2,14
  80f7ac:	1440fd36 	bltu	r2,r17,80fba4 <_dtoa_r+0x774>
  80f7b0:	a000fc26 	beq	r20,zero,80fba4 <_dtoa_r+0x774>
  80f7b4:	d8800517 	ldw	r2,20(sp)
  80f7b8:	0083b90e 	bge	zero,r2,8106a0 <_dtoa_r+0x1270>
  80f7bc:	d8c00517 	ldw	r3,20(sp)
  80f7c0:	108003cc 	andi	r2,r2,15
  80f7c4:	100490fa 	slli	r2,r2,3
  80f7c8:	182fd13a 	srai	r23,r3,4
  80f7cc:	00c020b4 	movhi	r3,130
  80f7d0:	18f35404 	addi	r3,r3,-12976
  80f7d4:	1885883a 	add	r2,r3,r2
  80f7d8:	b8c0040c 	andi	r3,r23,16
  80f7dc:	12c00017 	ldw	r11,0(r2)
  80f7e0:	12800117 	ldw	r10,4(r2)
  80f7e4:	18039726 	beq	r3,zero,810644 <_dtoa_r+0x1214>
  80f7e8:	008020b4 	movhi	r2,130
  80f7ec:	10b34a04 	addi	r2,r2,-13016
  80f7f0:	11800817 	ldw	r6,32(r2)
  80f7f4:	11c00917 	ldw	r7,36(r2)
  80f7f8:	9009883a 	mov	r4,r18
  80f7fc:	980b883a 	mov	r5,r19
  80f800:	da801615 	stw	r10,88(sp)
  80f804:	dac01515 	stw	r11,84(sp)
  80f808:	0815c480 	call	815c48 <__divdf3>
  80f80c:	da801617 	ldw	r10,88(sp)
  80f810:	dac01517 	ldw	r11,84(sp)
  80f814:	bdc003cc 	andi	r23,r23,15
  80f818:	044000c4 	movi	r17,3
  80f81c:	d8800e15 	stw	r2,56(sp)
  80f820:	182b883a 	mov	r21,r3
  80f824:	b8001126 	beq	r23,zero,80f86c <_dtoa_r+0x43c>
  80f828:	050020b4 	movhi	r20,130
  80f82c:	a5334a04 	addi	r20,r20,-13016
  80f830:	5805883a 	mov	r2,r11
  80f834:	5007883a 	mov	r3,r10
  80f838:	b980004c 	andi	r6,r23,1
  80f83c:	1009883a 	mov	r4,r2
  80f840:	b82fd07a 	srai	r23,r23,1
  80f844:	180b883a 	mov	r5,r3
  80f848:	30000426 	beq	r6,zero,80f85c <_dtoa_r+0x42c>
  80f84c:	a1800017 	ldw	r6,0(r20)
  80f850:	a1c00117 	ldw	r7,4(r20)
  80f854:	8c400044 	addi	r17,r17,1
  80f858:	08167580 	call	816758 <__muldf3>
  80f85c:	a5000204 	addi	r20,r20,8
  80f860:	b83ff51e 	bne	r23,zero,80f838 <__alt_data_end+0xff80f838>
  80f864:	1017883a 	mov	r11,r2
  80f868:	1815883a 	mov	r10,r3
  80f86c:	d9000e17 	ldw	r4,56(sp)
  80f870:	a80b883a 	mov	r5,r21
  80f874:	580d883a 	mov	r6,r11
  80f878:	500f883a 	mov	r7,r10
  80f87c:	0815c480 	call	815c48 <__divdf3>
  80f880:	1029883a 	mov	r20,r2
  80f884:	182b883a 	mov	r21,r3
  80f888:	d9800d17 	ldw	r6,52(sp)
  80f88c:	30000626 	beq	r6,zero,80f8a8 <_dtoa_r+0x478>
  80f890:	a009883a 	mov	r4,r20
  80f894:	a80b883a 	mov	r5,r21
  80f898:	000d883a 	mov	r6,zero
  80f89c:	01cffc34 	movhi	r7,16368
  80f8a0:	08166780 	call	816678 <__ledf2>
  80f8a4:	10043216 	blt	r2,zero,810970 <_dtoa_r+0x1540>
  80f8a8:	8809883a 	mov	r4,r17
  80f8ac:	08177d40 	call	8177d4 <__floatsidf>
  80f8b0:	1009883a 	mov	r4,r2
  80f8b4:	180b883a 	mov	r5,r3
  80f8b8:	a00d883a 	mov	r6,r20
  80f8bc:	a80f883a 	mov	r7,r21
  80f8c0:	08167580 	call	816758 <__muldf3>
  80f8c4:	000d883a 	mov	r6,zero
  80f8c8:	1009883a 	mov	r4,r2
  80f8cc:	180b883a 	mov	r5,r3
  80f8d0:	01d00734 	movhi	r7,16412
  80f8d4:	08153ac0 	call	8153ac <__adddf3>
  80f8d8:	1023883a 	mov	r17,r2
  80f8dc:	d9800617 	ldw	r6,24(sp)
  80f8e0:	00bf3034 	movhi	r2,64704
  80f8e4:	1885883a 	add	r2,r3,r2
  80f8e8:	d8800e15 	stw	r2,56(sp)
  80f8ec:	30032e26 	beq	r6,zero,8105a8 <_dtoa_r+0x1178>
  80f8f0:	d8c00517 	ldw	r3,20(sp)
  80f8f4:	da800617 	ldw	r10,24(sp)
  80f8f8:	d8c01215 	stw	r3,72(sp)
  80f8fc:	d9000b17 	ldw	r4,44(sp)
  80f900:	2003b026 	beq	r4,zero,8107c4 <_dtoa_r+0x1394>
  80f904:	50bfffc4 	addi	r2,r10,-1
  80f908:	100490fa 	slli	r2,r2,3
  80f90c:	00c020b4 	movhi	r3,130
  80f910:	18f35404 	addi	r3,r3,-12976
  80f914:	1885883a 	add	r2,r3,r2
  80f918:	11800017 	ldw	r6,0(r2)
  80f91c:	11c00117 	ldw	r7,4(r2)
  80f920:	d8800717 	ldw	r2,28(sp)
  80f924:	0009883a 	mov	r4,zero
  80f928:	014ff834 	movhi	r5,16352
  80f92c:	da801615 	stw	r10,88(sp)
  80f930:	15c00044 	addi	r23,r2,1
  80f934:	0815c480 	call	815c48 <__divdf3>
  80f938:	d9c00e17 	ldw	r7,56(sp)
  80f93c:	880d883a 	mov	r6,r17
  80f940:	1009883a 	mov	r4,r2
  80f944:	180b883a 	mov	r5,r3
  80f948:	0816e7c0 	call	816e7c <__subdf3>
  80f94c:	a80b883a 	mov	r5,r21
  80f950:	a009883a 	mov	r4,r20
  80f954:	d8c01015 	stw	r3,64(sp)
  80f958:	d8800e15 	stw	r2,56(sp)
  80f95c:	081774c0 	call	81774c <__fixdfsi>
  80f960:	1009883a 	mov	r4,r2
  80f964:	d8801715 	stw	r2,92(sp)
  80f968:	08177d40 	call	8177d4 <__floatsidf>
  80f96c:	a009883a 	mov	r4,r20
  80f970:	a80b883a 	mov	r5,r21
  80f974:	100d883a 	mov	r6,r2
  80f978:	180f883a 	mov	r7,r3
  80f97c:	0816e7c0 	call	816e7c <__subdf3>
  80f980:	da001717 	ldw	r8,92(sp)
  80f984:	1829883a 	mov	r20,r3
  80f988:	d8c00717 	ldw	r3,28(sp)
  80f98c:	d9000e17 	ldw	r4,56(sp)
  80f990:	d9401017 	ldw	r5,64(sp)
  80f994:	42000c04 	addi	r8,r8,48
  80f998:	1023883a 	mov	r17,r2
  80f99c:	1a000005 	stb	r8,0(r3)
  80f9a0:	880d883a 	mov	r6,r17
  80f9a4:	a00f883a 	mov	r7,r20
  80f9a8:	402b883a 	mov	r21,r8
  80f9ac:	08165980 	call	816598 <__gedf2>
  80f9b0:	00844516 	blt	zero,r2,810ac8 <_dtoa_r+0x1698>
  80f9b4:	0009883a 	mov	r4,zero
  80f9b8:	014ffc34 	movhi	r5,16368
  80f9bc:	880d883a 	mov	r6,r17
  80f9c0:	a00f883a 	mov	r7,r20
  80f9c4:	0816e7c0 	call	816e7c <__subdf3>
  80f9c8:	d9000e17 	ldw	r4,56(sp)
  80f9cc:	d9401017 	ldw	r5,64(sp)
  80f9d0:	100d883a 	mov	r6,r2
  80f9d4:	180f883a 	mov	r7,r3
  80f9d8:	08165980 	call	816598 <__gedf2>
  80f9dc:	da801617 	ldw	r10,88(sp)
  80f9e0:	00843616 	blt	zero,r2,810abc <_dtoa_r+0x168c>
  80f9e4:	00800044 	movi	r2,1
  80f9e8:	12806e0e 	bge	r2,r10,80fba4 <_dtoa_r+0x774>
  80f9ec:	d9000717 	ldw	r4,28(sp)
  80f9f0:	dd801315 	stw	r22,76(sp)
  80f9f4:	dc001115 	stw	r16,68(sp)
  80f9f8:	2295883a 	add	r10,r4,r10
  80f9fc:	dcc01415 	stw	r19,80(sp)
  80fa00:	502d883a 	mov	r22,r10
  80fa04:	dcc01017 	ldw	r19,64(sp)
  80fa08:	b821883a 	mov	r16,r23
  80fa0c:	dc801015 	stw	r18,64(sp)
  80fa10:	dc800e17 	ldw	r18,56(sp)
  80fa14:	00000906 	br	80fa3c <_dtoa_r+0x60c>
  80fa18:	0816e7c0 	call	816e7c <__subdf3>
  80fa1c:	1009883a 	mov	r4,r2
  80fa20:	180b883a 	mov	r5,r3
  80fa24:	900d883a 	mov	r6,r18
  80fa28:	980f883a 	mov	r7,r19
  80fa2c:	08166780 	call	816678 <__ledf2>
  80fa30:	10040e16 	blt	r2,zero,810a6c <_dtoa_r+0x163c>
  80fa34:	b821883a 	mov	r16,r23
  80fa38:	bd841026 	beq	r23,r22,810a7c <_dtoa_r+0x164c>
  80fa3c:	9009883a 	mov	r4,r18
  80fa40:	980b883a 	mov	r5,r19
  80fa44:	000d883a 	mov	r6,zero
  80fa48:	01d00934 	movhi	r7,16420
  80fa4c:	08167580 	call	816758 <__muldf3>
  80fa50:	000d883a 	mov	r6,zero
  80fa54:	01d00934 	movhi	r7,16420
  80fa58:	8809883a 	mov	r4,r17
  80fa5c:	a00b883a 	mov	r5,r20
  80fa60:	1025883a 	mov	r18,r2
  80fa64:	1827883a 	mov	r19,r3
  80fa68:	08167580 	call	816758 <__muldf3>
  80fa6c:	180b883a 	mov	r5,r3
  80fa70:	1009883a 	mov	r4,r2
  80fa74:	1823883a 	mov	r17,r3
  80fa78:	1029883a 	mov	r20,r2
  80fa7c:	081774c0 	call	81774c <__fixdfsi>
  80fa80:	1009883a 	mov	r4,r2
  80fa84:	102b883a 	mov	r21,r2
  80fa88:	08177d40 	call	8177d4 <__floatsidf>
  80fa8c:	a009883a 	mov	r4,r20
  80fa90:	880b883a 	mov	r5,r17
  80fa94:	100d883a 	mov	r6,r2
  80fa98:	180f883a 	mov	r7,r3
  80fa9c:	0816e7c0 	call	816e7c <__subdf3>
  80faa0:	ad400c04 	addi	r21,r21,48
  80faa4:	1009883a 	mov	r4,r2
  80faa8:	180b883a 	mov	r5,r3
  80faac:	900d883a 	mov	r6,r18
  80fab0:	980f883a 	mov	r7,r19
  80fab4:	85400005 	stb	r21,0(r16)
  80fab8:	1023883a 	mov	r17,r2
  80fabc:	1829883a 	mov	r20,r3
  80fac0:	08166780 	call	816678 <__ledf2>
  80fac4:	bdc00044 	addi	r23,r23,1
  80fac8:	0009883a 	mov	r4,zero
  80facc:	014ffc34 	movhi	r5,16368
  80fad0:	880d883a 	mov	r6,r17
  80fad4:	a00f883a 	mov	r7,r20
  80fad8:	103fcf0e 	bge	r2,zero,80fa18 <__alt_data_end+0xff80fa18>
  80fadc:	d9801217 	ldw	r6,72(sp)
  80fae0:	dc001117 	ldw	r16,68(sp)
  80fae4:	d9800515 	stw	r6,20(sp)
  80fae8:	8009883a 	mov	r4,r16
  80faec:	e00b883a 	mov	r5,fp
  80faf0:	08116780 	call	811678 <_Bfree>
  80faf4:	d8c00517 	ldw	r3,20(sp)
  80faf8:	d9002317 	ldw	r4,140(sp)
  80fafc:	d9802517 	ldw	r6,148(sp)
  80fb00:	b8000005 	stb	zero,0(r23)
  80fb04:	18800044 	addi	r2,r3,1
  80fb08:	20800015 	stw	r2,0(r4)
  80fb0c:	30027226 	beq	r6,zero,8104d8 <_dtoa_r+0x10a8>
  80fb10:	35c00015 	stw	r23,0(r6)
  80fb14:	d8800717 	ldw	r2,28(sp)
  80fb18:	003e7406 	br	80f4ec <__alt_data_end+0xff80f4ec>
  80fb1c:	00800434 	movhi	r2,16
  80fb20:	10bfffc4 	addi	r2,r2,-1
  80fb24:	a8aa703a 	and	r21,r21,r2
  80fb28:	a83e801e 	bne	r21,zero,80f52c <__alt_data_end+0xff80f52c>
  80fb2c:	008020b4 	movhi	r2,130
  80fb30:	10b33604 	addi	r2,r2,-13096
  80fb34:	003e7f06 	br	80f534 <__alt_data_end+0xff80f534>
  80fb38:	10c00204 	addi	r3,r2,8
  80fb3c:	003e8206 	br	80f548 <__alt_data_end+0xff80f548>
  80fb40:	01400434 	movhi	r5,16
  80fb44:	297fffc4 	addi	r5,r5,-1
  80fb48:	994a703a 	and	r5,r19,r5
  80fb4c:	9009883a 	mov	r4,r18
  80fb50:	8c7f0044 	addi	r17,r17,-1023
  80fb54:	294ffc34 	orhi	r5,r5,16368
  80fb58:	dd000217 	ldw	r20,8(sp)
  80fb5c:	d8000f15 	stw	zero,60(sp)
  80fb60:	003e9f06 	br	80f5e0 <__alt_data_end+0xff80f5e0>
  80fb64:	008020b4 	movhi	r2,130
  80fb68:	10b32d04 	addi	r2,r2,-13132
  80fb6c:	003e5f06 	br	80f4ec <__alt_data_end+0xff80f4ec>
  80fb70:	80001115 	stw	zero,68(r16)
  80fb74:	8009883a 	mov	r4,r16
  80fb78:	000b883a 	mov	r5,zero
  80fb7c:	08115d00 	call	8115d0 <_Balloc>
  80fb80:	01bfffc4 	movi	r6,-1
  80fb84:	d8800715 	stw	r2,28(sp)
  80fb88:	80801015 	stw	r2,64(r16)
  80fb8c:	00800044 	movi	r2,1
  80fb90:	d9800c15 	stw	r6,48(sp)
  80fb94:	d8800b15 	stw	r2,44(sp)
  80fb98:	d9800615 	stw	r6,24(sp)
  80fb9c:	d8002215 	stw	zero,136(sp)
  80fba0:	d8000315 	stw	zero,12(sp)
  80fba4:	d8800117 	ldw	r2,4(sp)
  80fba8:	10008e16 	blt	r2,zero,80fde4 <_dtoa_r+0x9b4>
  80fbac:	d9000517 	ldw	r4,20(sp)
  80fbb0:	00c00384 	movi	r3,14
  80fbb4:	19008b16 	blt	r3,r4,80fde4 <_dtoa_r+0x9b4>
  80fbb8:	200490fa 	slli	r2,r4,3
  80fbbc:	00c020b4 	movhi	r3,130
  80fbc0:	d9802217 	ldw	r6,136(sp)
  80fbc4:	18f35404 	addi	r3,r3,-12976
  80fbc8:	1885883a 	add	r2,r3,r2
  80fbcc:	14400017 	ldw	r17,0(r2)
  80fbd0:	15000117 	ldw	r20,4(r2)
  80fbd4:	3001c716 	blt	r6,zero,8102f4 <_dtoa_r+0xec4>
  80fbd8:	880d883a 	mov	r6,r17
  80fbdc:	a00f883a 	mov	r7,r20
  80fbe0:	9009883a 	mov	r4,r18
  80fbe4:	980b883a 	mov	r5,r19
  80fbe8:	0815c480 	call	815c48 <__divdf3>
  80fbec:	180b883a 	mov	r5,r3
  80fbf0:	1009883a 	mov	r4,r2
  80fbf4:	081774c0 	call	81774c <__fixdfsi>
  80fbf8:	1009883a 	mov	r4,r2
  80fbfc:	102d883a 	mov	r22,r2
  80fc00:	08177d40 	call	8177d4 <__floatsidf>
  80fc04:	1009883a 	mov	r4,r2
  80fc08:	180b883a 	mov	r5,r3
  80fc0c:	880d883a 	mov	r6,r17
  80fc10:	a00f883a 	mov	r7,r20
  80fc14:	08167580 	call	816758 <__muldf3>
  80fc18:	9009883a 	mov	r4,r18
  80fc1c:	980b883a 	mov	r5,r19
  80fc20:	100d883a 	mov	r6,r2
  80fc24:	180f883a 	mov	r7,r3
  80fc28:	0816e7c0 	call	816e7c <__subdf3>
  80fc2c:	d9000717 	ldw	r4,28(sp)
  80fc30:	d9800617 	ldw	r6,24(sp)
  80fc34:	180b883a 	mov	r5,r3
  80fc38:	b0c00c04 	addi	r3,r22,48
  80fc3c:	20c00005 	stb	r3,0(r4)
  80fc40:	25c00044 	addi	r23,r4,1
  80fc44:	01000044 	movi	r4,1
  80fc48:	1011883a 	mov	r8,r2
  80fc4c:	2807883a 	mov	r3,r5
  80fc50:	31003d26 	beq	r6,r4,80fd48 <_dtoa_r+0x918>
  80fc54:	000d883a 	mov	r6,zero
  80fc58:	01d00934 	movhi	r7,16420
  80fc5c:	1009883a 	mov	r4,r2
  80fc60:	08167580 	call	816758 <__muldf3>
  80fc64:	1009883a 	mov	r4,r2
  80fc68:	180b883a 	mov	r5,r3
  80fc6c:	000d883a 	mov	r6,zero
  80fc70:	000f883a 	mov	r7,zero
  80fc74:	1027883a 	mov	r19,r2
  80fc78:	182b883a 	mov	r21,r3
  80fc7c:	08165140 	call	816514 <__eqdf2>
  80fc80:	103f9926 	beq	r2,zero,80fae8 <__alt_data_end+0xff80fae8>
  80fc84:	d8c00617 	ldw	r3,24(sp)
  80fc88:	d9000717 	ldw	r4,28(sp)
  80fc8c:	b825883a 	mov	r18,r23
  80fc90:	18bfffc4 	addi	r2,r3,-1
  80fc94:	20ad883a 	add	r22,r4,r2
  80fc98:	dc000315 	stw	r16,12(sp)
  80fc9c:	00000a06 	br	80fcc8 <_dtoa_r+0x898>
  80fca0:	08167580 	call	816758 <__muldf3>
  80fca4:	1009883a 	mov	r4,r2
  80fca8:	180b883a 	mov	r5,r3
  80fcac:	000d883a 	mov	r6,zero
  80fcb0:	000f883a 	mov	r7,zero
  80fcb4:	1027883a 	mov	r19,r2
  80fcb8:	182b883a 	mov	r21,r3
  80fcbc:	b825883a 	mov	r18,r23
  80fcc0:	08165140 	call	816514 <__eqdf2>
  80fcc4:	10022626 	beq	r2,zero,810560 <_dtoa_r+0x1130>
  80fcc8:	880d883a 	mov	r6,r17
  80fccc:	a00f883a 	mov	r7,r20
  80fcd0:	9809883a 	mov	r4,r19
  80fcd4:	a80b883a 	mov	r5,r21
  80fcd8:	0815c480 	call	815c48 <__divdf3>
  80fcdc:	180b883a 	mov	r5,r3
  80fce0:	1009883a 	mov	r4,r2
  80fce4:	081774c0 	call	81774c <__fixdfsi>
  80fce8:	1009883a 	mov	r4,r2
  80fcec:	1021883a 	mov	r16,r2
  80fcf0:	08177d40 	call	8177d4 <__floatsidf>
  80fcf4:	1009883a 	mov	r4,r2
  80fcf8:	180b883a 	mov	r5,r3
  80fcfc:	880d883a 	mov	r6,r17
  80fd00:	a00f883a 	mov	r7,r20
  80fd04:	08167580 	call	816758 <__muldf3>
  80fd08:	9809883a 	mov	r4,r19
  80fd0c:	a80b883a 	mov	r5,r21
  80fd10:	100d883a 	mov	r6,r2
  80fd14:	180f883a 	mov	r7,r3
  80fd18:	0816e7c0 	call	816e7c <__subdf3>
  80fd1c:	82000c04 	addi	r8,r16,48
  80fd20:	92000005 	stb	r8,0(r18)
  80fd24:	1009883a 	mov	r4,r2
  80fd28:	180b883a 	mov	r5,r3
  80fd2c:	000d883a 	mov	r6,zero
  80fd30:	01d00934 	movhi	r7,16420
  80fd34:	1011883a 	mov	r8,r2
  80fd38:	bdc00044 	addi	r23,r23,1
  80fd3c:	95bfd81e 	bne	r18,r22,80fca0 <__alt_data_end+0xff80fca0>
  80fd40:	802d883a 	mov	r22,r16
  80fd44:	dc000317 	ldw	r16,12(sp)
  80fd48:	4009883a 	mov	r4,r8
  80fd4c:	180b883a 	mov	r5,r3
  80fd50:	400d883a 	mov	r6,r8
  80fd54:	180f883a 	mov	r7,r3
  80fd58:	08153ac0 	call	8153ac <__adddf3>
  80fd5c:	8809883a 	mov	r4,r17
  80fd60:	a00b883a 	mov	r5,r20
  80fd64:	100d883a 	mov	r6,r2
  80fd68:	180f883a 	mov	r7,r3
  80fd6c:	1027883a 	mov	r19,r2
  80fd70:	1825883a 	mov	r18,r3
  80fd74:	08166780 	call	816678 <__ledf2>
  80fd78:	10000816 	blt	r2,zero,80fd9c <_dtoa_r+0x96c>
  80fd7c:	8809883a 	mov	r4,r17
  80fd80:	a00b883a 	mov	r5,r20
  80fd84:	980d883a 	mov	r6,r19
  80fd88:	900f883a 	mov	r7,r18
  80fd8c:	08165140 	call	816514 <__eqdf2>
  80fd90:	103f551e 	bne	r2,zero,80fae8 <__alt_data_end+0xff80fae8>
  80fd94:	b580004c 	andi	r22,r22,1
  80fd98:	b03f5326 	beq	r22,zero,80fae8 <__alt_data_end+0xff80fae8>
  80fd9c:	bd7fffc3 	ldbu	r21,-1(r23)
  80fda0:	b8bfffc4 	addi	r2,r23,-1
  80fda4:	1007883a 	mov	r3,r2
  80fda8:	01400e44 	movi	r5,57
  80fdac:	d9800717 	ldw	r6,28(sp)
  80fdb0:	00000506 	br	80fdc8 <_dtoa_r+0x998>
  80fdb4:	18ffffc4 	addi	r3,r3,-1
  80fdb8:	30825e26 	beq	r6,r2,810734 <_dtoa_r+0x1304>
  80fdbc:	1d400003 	ldbu	r21,0(r3)
  80fdc0:	102f883a 	mov	r23,r2
  80fdc4:	10bfffc4 	addi	r2,r2,-1
  80fdc8:	a9003fcc 	andi	r4,r21,255
  80fdcc:	2100201c 	xori	r4,r4,128
  80fdd0:	213fe004 	addi	r4,r4,-128
  80fdd4:	217ff726 	beq	r4,r5,80fdb4 <__alt_data_end+0xff80fdb4>
  80fdd8:	aa000044 	addi	r8,r21,1
  80fddc:	12000005 	stb	r8,0(r2)
  80fde0:	003f4106 	br	80fae8 <__alt_data_end+0xff80fae8>
  80fde4:	d8c00b17 	ldw	r3,44(sp)
  80fde8:	18006726 	beq	r3,zero,80ff88 <_dtoa_r+0xb58>
  80fdec:	d9000317 	ldw	r4,12(sp)
  80fdf0:	00c00044 	movi	r3,1
  80fdf4:	19016a0e 	bge	r3,r4,8103a0 <_dtoa_r+0xf70>
  80fdf8:	d8800617 	ldw	r2,24(sp)
  80fdfc:	d8c00917 	ldw	r3,36(sp)
  80fe00:	157fffc4 	addi	r21,r2,-1
  80fe04:	1d420716 	blt	r3,r21,810624 <_dtoa_r+0x11f4>
  80fe08:	1d6bc83a 	sub	r21,r3,r21
  80fe0c:	d8800617 	ldw	r2,24(sp)
  80fe10:	1002c716 	blt	r2,zero,810930 <_dtoa_r+0x1500>
  80fe14:	dd000817 	ldw	r20,32(sp)
  80fe18:	d8800617 	ldw	r2,24(sp)
  80fe1c:	d9800817 	ldw	r6,32(sp)
  80fe20:	8009883a 	mov	r4,r16
  80fe24:	01400044 	movi	r5,1
  80fe28:	308d883a 	add	r6,r6,r2
  80fe2c:	d9800815 	stw	r6,32(sp)
  80fe30:	b0ad883a 	add	r22,r22,r2
  80fe34:	08119dc0 	call	8119dc <__i2b>
  80fe38:	1023883a 	mov	r17,r2
  80fe3c:	a0000826 	beq	r20,zero,80fe60 <_dtoa_r+0xa30>
  80fe40:	0580070e 	bge	zero,r22,80fe60 <_dtoa_r+0xa30>
  80fe44:	b005883a 	mov	r2,r22
  80fe48:	a5812016 	blt	r20,r22,8102cc <_dtoa_r+0xe9c>
  80fe4c:	d8c00817 	ldw	r3,32(sp)
  80fe50:	a0a9c83a 	sub	r20,r20,r2
  80fe54:	b0adc83a 	sub	r22,r22,r2
  80fe58:	1887c83a 	sub	r3,r3,r2
  80fe5c:	d8c00815 	stw	r3,32(sp)
  80fe60:	d9000917 	ldw	r4,36(sp)
  80fe64:	0100140e 	bge	zero,r4,80feb8 <_dtoa_r+0xa88>
  80fe68:	d9800b17 	ldw	r6,44(sp)
  80fe6c:	3001e526 	beq	r6,zero,810604 <_dtoa_r+0x11d4>
  80fe70:	05400e0e 	bge	zero,r21,80feac <_dtoa_r+0xa7c>
  80fe74:	880b883a 	mov	r5,r17
  80fe78:	8009883a 	mov	r4,r16
  80fe7c:	a80d883a 	mov	r6,r21
  80fe80:	0811c140 	call	811c14 <__pow5mult>
  80fe84:	e00d883a 	mov	r6,fp
  80fe88:	8009883a 	mov	r4,r16
  80fe8c:	100b883a 	mov	r5,r2
  80fe90:	1023883a 	mov	r17,r2
  80fe94:	0811a180 	call	811a18 <__multiply>
  80fe98:	102f883a 	mov	r23,r2
  80fe9c:	e00b883a 	mov	r5,fp
  80fea0:	8009883a 	mov	r4,r16
  80fea4:	08116780 	call	811678 <_Bfree>
  80fea8:	b839883a 	mov	fp,r23
  80feac:	d8800917 	ldw	r2,36(sp)
  80feb0:	154dc83a 	sub	r6,r2,r21
  80feb4:	3001281e 	bne	r6,zero,810358 <_dtoa_r+0xf28>
  80feb8:	05c00044 	movi	r23,1
  80febc:	8009883a 	mov	r4,r16
  80fec0:	b80b883a 	mov	r5,r23
  80fec4:	08119dc0 	call	8119dc <__i2b>
  80fec8:	d8c00a17 	ldw	r3,40(sp)
  80fecc:	102b883a 	mov	r21,r2
  80fed0:	00c0310e 	bge	zero,r3,80ff98 <_dtoa_r+0xb68>
  80fed4:	8009883a 	mov	r4,r16
  80fed8:	100b883a 	mov	r5,r2
  80fedc:	180d883a 	mov	r6,r3
  80fee0:	0811c140 	call	811c14 <__pow5mult>
  80fee4:	d9000317 	ldw	r4,12(sp)
  80fee8:	102b883a 	mov	r21,r2
  80feec:	b9011f0e 	bge	r23,r4,81036c <_dtoa_r+0xf3c>
  80fef0:	0027883a 	mov	r19,zero
  80fef4:	a8800417 	ldw	r2,16(r21)
  80fef8:	10800104 	addi	r2,r2,4
  80fefc:	1085883a 	add	r2,r2,r2
  80ff00:	1085883a 	add	r2,r2,r2
  80ff04:	a885883a 	add	r2,r21,r2
  80ff08:	11000017 	ldw	r4,0(r2)
  80ff0c:	08118c40 	call	8118c4 <__hi0bits>
  80ff10:	00c00804 	movi	r3,32
  80ff14:	1885c83a 	sub	r2,r3,r2
  80ff18:	00002506 	br	80ffb0 <_dtoa_r+0xb80>
  80ff1c:	01800044 	movi	r6,1
  80ff20:	d9800d15 	stw	r6,52(sp)
  80ff24:	003dec06 	br	80f6d8 <__alt_data_end+0xff80f6d8>
  80ff28:	d8c00817 	ldw	r3,32(sp)
  80ff2c:	d9000517 	ldw	r4,20(sp)
  80ff30:	d8000a15 	stw	zero,40(sp)
  80ff34:	1907c83a 	sub	r3,r3,r4
  80ff38:	010dc83a 	sub	r6,zero,r4
  80ff3c:	d8c00815 	stw	r3,32(sp)
  80ff40:	d9800915 	stw	r6,36(sp)
  80ff44:	003ded06 	br	80f6fc <__alt_data_end+0xff80f6fc>
  80ff48:	05adc83a 	sub	r22,zero,r22
  80ff4c:	dd800815 	stw	r22,32(sp)
  80ff50:	002d883a 	mov	r22,zero
  80ff54:	003de406 	br	80f6e8 <__alt_data_end+0xff80f6e8>
  80ff58:	d9000517 	ldw	r4,20(sp)
  80ff5c:	08177d40 	call	8177d4 <__floatsidf>
  80ff60:	1009883a 	mov	r4,r2
  80ff64:	180b883a 	mov	r5,r3
  80ff68:	b00d883a 	mov	r6,r22
  80ff6c:	a80f883a 	mov	r7,r21
  80ff70:	08165140 	call	816514 <__eqdf2>
  80ff74:	103dc726 	beq	r2,zero,80f694 <__alt_data_end+0xff80f694>
  80ff78:	d8800517 	ldw	r2,20(sp)
  80ff7c:	10bfffc4 	addi	r2,r2,-1
  80ff80:	d8800515 	stw	r2,20(sp)
  80ff84:	003dc306 	br	80f694 <__alt_data_end+0xff80f694>
  80ff88:	dd400917 	ldw	r21,36(sp)
  80ff8c:	dd000817 	ldw	r20,32(sp)
  80ff90:	0023883a 	mov	r17,zero
  80ff94:	003fa906 	br	80fe3c <__alt_data_end+0xff80fe3c>
  80ff98:	d9800317 	ldw	r6,12(sp)
  80ff9c:	b981670e 	bge	r23,r6,81053c <_dtoa_r+0x110c>
  80ffa0:	0027883a 	mov	r19,zero
  80ffa4:	d8c00a17 	ldw	r3,40(sp)
  80ffa8:	183fd21e 	bne	r3,zero,80fef4 <__alt_data_end+0xff80fef4>
  80ffac:	00800044 	movi	r2,1
  80ffb0:	1585883a 	add	r2,r2,r22
  80ffb4:	108007cc 	andi	r2,r2,31
  80ffb8:	10005f26 	beq	r2,zero,810138 <_dtoa_r+0xd08>
  80ffbc:	00c00804 	movi	r3,32
  80ffc0:	1887c83a 	sub	r3,r3,r2
  80ffc4:	01000104 	movi	r4,4
  80ffc8:	20c2dd0e 	bge	r4,r3,810b40 <_dtoa_r+0x1710>
  80ffcc:	d9000817 	ldw	r4,32(sp)
  80ffd0:	00c00704 	movi	r3,28
  80ffd4:	1885c83a 	sub	r2,r3,r2
  80ffd8:	2089883a 	add	r4,r4,r2
  80ffdc:	d9000815 	stw	r4,32(sp)
  80ffe0:	a0a9883a 	add	r20,r20,r2
  80ffe4:	b0ad883a 	add	r22,r22,r2
  80ffe8:	d8800817 	ldw	r2,32(sp)
  80ffec:	0080050e 	bge	zero,r2,810004 <_dtoa_r+0xbd4>
  80fff0:	e00b883a 	mov	r5,fp
  80fff4:	8009883a 	mov	r4,r16
  80fff8:	100d883a 	mov	r6,r2
  80fffc:	0811d540 	call	811d54 <__lshift>
  810000:	1039883a 	mov	fp,r2
  810004:	0580050e 	bge	zero,r22,81001c <_dtoa_r+0xbec>
  810008:	a80b883a 	mov	r5,r21
  81000c:	8009883a 	mov	r4,r16
  810010:	b00d883a 	mov	r6,r22
  810014:	0811d540 	call	811d54 <__lshift>
  810018:	102b883a 	mov	r21,r2
  81001c:	d8c00d17 	ldw	r3,52(sp)
  810020:	1801161e 	bne	r3,zero,81047c <_dtoa_r+0x104c>
  810024:	d8c00617 	ldw	r3,24(sp)
  810028:	00c12d0e 	bge	zero,r3,8104e0 <_dtoa_r+0x10b0>
  81002c:	d8c00b17 	ldw	r3,44(sp)
  810030:	1800571e 	bne	r3,zero,810190 <_dtoa_r+0xd60>
  810034:	dc800717 	ldw	r18,28(sp)
  810038:	dcc00617 	ldw	r19,24(sp)
  81003c:	9029883a 	mov	r20,r18
  810040:	00000206 	br	81004c <_dtoa_r+0xc1c>
  810044:	08116a00 	call	8116a0 <__multadd>
  810048:	1039883a 	mov	fp,r2
  81004c:	e009883a 	mov	r4,fp
  810050:	a80b883a 	mov	r5,r21
  810054:	080f2300 	call	80f230 <quorem>
  810058:	10800c04 	addi	r2,r2,48
  81005c:	90800005 	stb	r2,0(r18)
  810060:	94800044 	addi	r18,r18,1
  810064:	9507c83a 	sub	r3,r18,r20
  810068:	8009883a 	mov	r4,r16
  81006c:	e00b883a 	mov	r5,fp
  810070:	01800284 	movi	r6,10
  810074:	000f883a 	mov	r7,zero
  810078:	1cfff216 	blt	r3,r19,810044 <__alt_data_end+0xff810044>
  81007c:	1011883a 	mov	r8,r2
  810080:	d8800617 	ldw	r2,24(sp)
  810084:	00822e0e 	bge	zero,r2,810940 <_dtoa_r+0x1510>
  810088:	d9000717 	ldw	r4,28(sp)
  81008c:	0025883a 	mov	r18,zero
  810090:	20af883a 	add	r23,r4,r2
  810094:	e00b883a 	mov	r5,fp
  810098:	01800044 	movi	r6,1
  81009c:	8009883a 	mov	r4,r16
  8100a0:	da001715 	stw	r8,92(sp)
  8100a4:	0811d540 	call	811d54 <__lshift>
  8100a8:	1009883a 	mov	r4,r2
  8100ac:	a80b883a 	mov	r5,r21
  8100b0:	1039883a 	mov	fp,r2
  8100b4:	0811ea40 	call	811ea4 <__mcmp>
  8100b8:	da001717 	ldw	r8,92(sp)
  8100bc:	00816e0e 	bge	zero,r2,810678 <_dtoa_r+0x1248>
  8100c0:	b93fffc3 	ldbu	r4,-1(r23)
  8100c4:	b8bfffc4 	addi	r2,r23,-1
  8100c8:	1007883a 	mov	r3,r2
  8100cc:	01800e44 	movi	r6,57
  8100d0:	d9c00717 	ldw	r7,28(sp)
  8100d4:	00000506 	br	8100ec <_dtoa_r+0xcbc>
  8100d8:	18ffffc4 	addi	r3,r3,-1
  8100dc:	38811926 	beq	r7,r2,810544 <_dtoa_r+0x1114>
  8100e0:	19000003 	ldbu	r4,0(r3)
  8100e4:	102f883a 	mov	r23,r2
  8100e8:	10bfffc4 	addi	r2,r2,-1
  8100ec:	21403fcc 	andi	r5,r4,255
  8100f0:	2940201c 	xori	r5,r5,128
  8100f4:	297fe004 	addi	r5,r5,-128
  8100f8:	29bff726 	beq	r5,r6,8100d8 <__alt_data_end+0xff8100d8>
  8100fc:	21000044 	addi	r4,r4,1
  810100:	11000005 	stb	r4,0(r2)
  810104:	8009883a 	mov	r4,r16
  810108:	a80b883a 	mov	r5,r21
  81010c:	08116780 	call	811678 <_Bfree>
  810110:	883e7526 	beq	r17,zero,80fae8 <__alt_data_end+0xff80fae8>
  810114:	90000426 	beq	r18,zero,810128 <_dtoa_r+0xcf8>
  810118:	94400326 	beq	r18,r17,810128 <_dtoa_r+0xcf8>
  81011c:	8009883a 	mov	r4,r16
  810120:	900b883a 	mov	r5,r18
  810124:	08116780 	call	811678 <_Bfree>
  810128:	8009883a 	mov	r4,r16
  81012c:	880b883a 	mov	r5,r17
  810130:	08116780 	call	811678 <_Bfree>
  810134:	003e6c06 	br	80fae8 <__alt_data_end+0xff80fae8>
  810138:	00800704 	movi	r2,28
  81013c:	d9800817 	ldw	r6,32(sp)
  810140:	a0a9883a 	add	r20,r20,r2
  810144:	b0ad883a 	add	r22,r22,r2
  810148:	308d883a 	add	r6,r6,r2
  81014c:	d9800815 	stw	r6,32(sp)
  810150:	003fa506 	br	80ffe8 <__alt_data_end+0xff80ffe8>
  810154:	013efb84 	movi	r4,-1042
  810158:	246bc83a 	sub	r21,r4,r17
  81015c:	9548983a 	sll	r4,r18,r21
  810160:	003d1806 	br	80f5c4 <__alt_data_end+0xff80f5c4>
  810164:	d8000d15 	stw	zero,52(sp)
  810168:	003d5b06 	br	80f6d8 <__alt_data_end+0xff80f6d8>
  81016c:	880b883a 	mov	r5,r17
  810170:	8009883a 	mov	r4,r16
  810174:	01800284 	movi	r6,10
  810178:	000f883a 	mov	r7,zero
  81017c:	08116a00 	call	8116a0 <__multadd>
  810180:	1023883a 	mov	r17,r2
  810184:	d8800c17 	ldw	r2,48(sp)
  810188:	0082550e 	bge	zero,r2,810ae0 <_dtoa_r+0x16b0>
  81018c:	d8800615 	stw	r2,24(sp)
  810190:	0500050e 	bge	zero,r20,8101a8 <_dtoa_r+0xd78>
  810194:	880b883a 	mov	r5,r17
  810198:	8009883a 	mov	r4,r16
  81019c:	a00d883a 	mov	r6,r20
  8101a0:	0811d540 	call	811d54 <__lshift>
  8101a4:	1023883a 	mov	r17,r2
  8101a8:	98016a1e 	bne	r19,zero,810754 <_dtoa_r+0x1324>
  8101ac:	8829883a 	mov	r20,r17
  8101b0:	d9000617 	ldw	r4,24(sp)
  8101b4:	dcc00717 	ldw	r19,28(sp)
  8101b8:	9480004c 	andi	r18,r18,1
  8101bc:	20bfffc4 	addi	r2,r4,-1
  8101c0:	9885883a 	add	r2,r19,r2
  8101c4:	d8800415 	stw	r2,16(sp)
  8101c8:	dc800615 	stw	r18,24(sp)
  8101cc:	e009883a 	mov	r4,fp
  8101d0:	a80b883a 	mov	r5,r21
  8101d4:	080f2300 	call	80f230 <quorem>
  8101d8:	e009883a 	mov	r4,fp
  8101dc:	880b883a 	mov	r5,r17
  8101e0:	102f883a 	mov	r23,r2
  8101e4:	0811ea40 	call	811ea4 <__mcmp>
  8101e8:	8009883a 	mov	r4,r16
  8101ec:	a80b883a 	mov	r5,r21
  8101f0:	a00d883a 	mov	r6,r20
  8101f4:	102d883a 	mov	r22,r2
  8101f8:	0811f040 	call	811f04 <__mdiff>
  8101fc:	1007883a 	mov	r3,r2
  810200:	10800317 	ldw	r2,12(r2)
  810204:	bc800c04 	addi	r18,r23,48
  810208:	1000971e 	bne	r2,zero,810468 <_dtoa_r+0x1038>
  81020c:	180b883a 	mov	r5,r3
  810210:	e009883a 	mov	r4,fp
  810214:	d8c01515 	stw	r3,84(sp)
  810218:	0811ea40 	call	811ea4 <__mcmp>
  81021c:	d8c01517 	ldw	r3,84(sp)
  810220:	8009883a 	mov	r4,r16
  810224:	d8801515 	stw	r2,84(sp)
  810228:	180b883a 	mov	r5,r3
  81022c:	08116780 	call	811678 <_Bfree>
  810230:	d8801517 	ldw	r2,84(sp)
  810234:	1000041e 	bne	r2,zero,810248 <_dtoa_r+0xe18>
  810238:	d9800317 	ldw	r6,12(sp)
  81023c:	3000021e 	bne	r6,zero,810248 <_dtoa_r+0xe18>
  810240:	d8c00617 	ldw	r3,24(sp)
  810244:	18007626 	beq	r3,zero,810420 <_dtoa_r+0xff0>
  810248:	b0005b16 	blt	r22,zero,8103b8 <_dtoa_r+0xf88>
  81024c:	b000041e 	bne	r22,zero,810260 <_dtoa_r+0xe30>
  810250:	d9000317 	ldw	r4,12(sp)
  810254:	2000021e 	bne	r4,zero,810260 <_dtoa_r+0xe30>
  810258:	d8c00617 	ldw	r3,24(sp)
  81025c:	18005626 	beq	r3,zero,8103b8 <_dtoa_r+0xf88>
  810260:	00814d16 	blt	zero,r2,810798 <_dtoa_r+0x1368>
  810264:	d8c00417 	ldw	r3,16(sp)
  810268:	9d800044 	addi	r22,r19,1
  81026c:	9c800005 	stb	r18,0(r19)
  810270:	b02f883a 	mov	r23,r22
  810274:	98c14c26 	beq	r19,r3,8107a8 <_dtoa_r+0x1378>
  810278:	e00b883a 	mov	r5,fp
  81027c:	8009883a 	mov	r4,r16
  810280:	01800284 	movi	r6,10
  810284:	000f883a 	mov	r7,zero
  810288:	08116a00 	call	8116a0 <__multadd>
  81028c:	1039883a 	mov	fp,r2
  810290:	8d006d26 	beq	r17,r20,810448 <_dtoa_r+0x1018>
  810294:	880b883a 	mov	r5,r17
  810298:	01800284 	movi	r6,10
  81029c:	000f883a 	mov	r7,zero
  8102a0:	8009883a 	mov	r4,r16
  8102a4:	08116a00 	call	8116a0 <__multadd>
  8102a8:	a00b883a 	mov	r5,r20
  8102ac:	8009883a 	mov	r4,r16
  8102b0:	01800284 	movi	r6,10
  8102b4:	000f883a 	mov	r7,zero
  8102b8:	1023883a 	mov	r17,r2
  8102bc:	08116a00 	call	8116a0 <__multadd>
  8102c0:	1029883a 	mov	r20,r2
  8102c4:	b027883a 	mov	r19,r22
  8102c8:	003fc006 	br	8101cc <__alt_data_end+0xff8101cc>
  8102cc:	a005883a 	mov	r2,r20
  8102d0:	003ede06 	br	80fe4c <__alt_data_end+0xff80fe4c>
  8102d4:	01000044 	movi	r4,1
  8102d8:	d9000b15 	stw	r4,44(sp)
  8102dc:	d9802217 	ldw	r6,136(sp)
  8102e0:	0180dc0e 	bge	zero,r6,810654 <_dtoa_r+0x1224>
  8102e4:	3023883a 	mov	r17,r6
  8102e8:	d9800c15 	stw	r6,48(sp)
  8102ec:	d9800615 	stw	r6,24(sp)
  8102f0:	003d1e06 	br	80f76c <__alt_data_end+0xff80f76c>
  8102f4:	d8800617 	ldw	r2,24(sp)
  8102f8:	00be3716 	blt	zero,r2,80fbd8 <__alt_data_end+0xff80fbd8>
  8102fc:	1000be1e 	bne	r2,zero,8105f8 <_dtoa_r+0x11c8>
  810300:	8809883a 	mov	r4,r17
  810304:	a00b883a 	mov	r5,r20
  810308:	000d883a 	mov	r6,zero
  81030c:	01d00534 	movhi	r7,16404
  810310:	08167580 	call	816758 <__muldf3>
  810314:	1009883a 	mov	r4,r2
  810318:	180b883a 	mov	r5,r3
  81031c:	900d883a 	mov	r6,r18
  810320:	980f883a 	mov	r7,r19
  810324:	08165980 	call	816598 <__gedf2>
  810328:	002b883a 	mov	r21,zero
  81032c:	0023883a 	mov	r17,zero
  810330:	10007a16 	blt	r2,zero,81051c <_dtoa_r+0x10ec>
  810334:	d9002217 	ldw	r4,136(sp)
  810338:	ddc00717 	ldw	r23,28(sp)
  81033c:	0108303a 	nor	r4,zero,r4
  810340:	d9000515 	stw	r4,20(sp)
  810344:	8009883a 	mov	r4,r16
  810348:	a80b883a 	mov	r5,r21
  81034c:	08116780 	call	811678 <_Bfree>
  810350:	883f751e 	bne	r17,zero,810128 <__alt_data_end+0xff810128>
  810354:	003de406 	br	80fae8 <__alt_data_end+0xff80fae8>
  810358:	e00b883a 	mov	r5,fp
  81035c:	8009883a 	mov	r4,r16
  810360:	0811c140 	call	811c14 <__pow5mult>
  810364:	1039883a 	mov	fp,r2
  810368:	003ed306 	br	80feb8 <__alt_data_end+0xff80feb8>
  81036c:	903ee01e 	bne	r18,zero,80fef0 <__alt_data_end+0xff80fef0>
  810370:	00800434 	movhi	r2,16
  810374:	10bfffc4 	addi	r2,r2,-1
  810378:	9884703a 	and	r2,r19,r2
  81037c:	103f081e 	bne	r2,zero,80ffa0 <__alt_data_end+0xff80ffa0>
  810380:	9cdffc2c 	andhi	r19,r19,32752
  810384:	983f0626 	beq	r19,zero,80ffa0 <__alt_data_end+0xff80ffa0>
  810388:	d8800817 	ldw	r2,32(sp)
  81038c:	b5800044 	addi	r22,r22,1
  810390:	04c00044 	movi	r19,1
  810394:	10800044 	addi	r2,r2,1
  810398:	d8800815 	stw	r2,32(sp)
  81039c:	003f0106 	br	80ffa4 <__alt_data_end+0xff80ffa4>
  8103a0:	d9800f17 	ldw	r6,60(sp)
  8103a4:	30016826 	beq	r6,zero,810948 <_dtoa_r+0x1518>
  8103a8:	10810cc4 	addi	r2,r2,1075
  8103ac:	dd400917 	ldw	r21,36(sp)
  8103b0:	dd000817 	ldw	r20,32(sp)
  8103b4:	003e9906 	br	80fe1c <__alt_data_end+0xff80fe1c>
  8103b8:	9011883a 	mov	r8,r18
  8103bc:	4007883a 	mov	r3,r8
  8103c0:	e02d883a 	mov	r22,fp
  8103c4:	0080100e 	bge	zero,r2,810408 <_dtoa_r+0xfd8>
  8103c8:	01800044 	movi	r6,1
  8103cc:	8009883a 	mov	r4,r16
  8103d0:	e00b883a 	mov	r5,fp
  8103d4:	da001515 	stw	r8,84(sp)
  8103d8:	da001715 	stw	r8,92(sp)
  8103dc:	0811d540 	call	811d54 <__lshift>
  8103e0:	1009883a 	mov	r4,r2
  8103e4:	a80b883a 	mov	r5,r21
  8103e8:	102d883a 	mov	r22,r2
  8103ec:	0811ea40 	call	811ea4 <__mcmp>
  8103f0:	d8c01517 	ldw	r3,84(sp)
  8103f4:	da001717 	ldw	r8,92(sp)
  8103f8:	0081a50e 	bge	zero,r2,810a90 <_dtoa_r+0x1660>
  8103fc:	00800e44 	movi	r2,57
  810400:	40817b26 	beq	r8,r2,8109f0 <_dtoa_r+0x15c0>
  810404:	40c00044 	addi	r3,r8,1
  810408:	8825883a 	mov	r18,r17
  81040c:	9dc00044 	addi	r23,r19,1
  810410:	98c00005 	stb	r3,0(r19)
  810414:	a023883a 	mov	r17,r20
  810418:	b039883a 	mov	fp,r22
  81041c:	003f3906 	br	810104 <__alt_data_end+0xff810104>
  810420:	00800e44 	movi	r2,57
  810424:	9011883a 	mov	r8,r18
  810428:	90817226 	beq	r18,r2,8109f4 <_dtoa_r+0x15c4>
  81042c:	0580010e 	bge	zero,r22,810434 <_dtoa_r+0x1004>
  810430:	ba000c44 	addi	r8,r23,49
  810434:	8825883a 	mov	r18,r17
  810438:	9dc00044 	addi	r23,r19,1
  81043c:	9a000005 	stb	r8,0(r19)
  810440:	a023883a 	mov	r17,r20
  810444:	003f2f06 	br	810104 <__alt_data_end+0xff810104>
  810448:	880b883a 	mov	r5,r17
  81044c:	8009883a 	mov	r4,r16
  810450:	01800284 	movi	r6,10
  810454:	000f883a 	mov	r7,zero
  810458:	08116a00 	call	8116a0 <__multadd>
  81045c:	1023883a 	mov	r17,r2
  810460:	1029883a 	mov	r20,r2
  810464:	003f9706 	br	8102c4 <__alt_data_end+0xff8102c4>
  810468:	8009883a 	mov	r4,r16
  81046c:	180b883a 	mov	r5,r3
  810470:	08116780 	call	811678 <_Bfree>
  810474:	00800044 	movi	r2,1
  810478:	003f7306 	br	810248 <__alt_data_end+0xff810248>
  81047c:	e009883a 	mov	r4,fp
  810480:	a80b883a 	mov	r5,r21
  810484:	0811ea40 	call	811ea4 <__mcmp>
  810488:	103ee60e 	bge	r2,zero,810024 <__alt_data_end+0xff810024>
  81048c:	8009883a 	mov	r4,r16
  810490:	e00b883a 	mov	r5,fp
  810494:	01800284 	movi	r6,10
  810498:	000f883a 	mov	r7,zero
  81049c:	08116a00 	call	8116a0 <__multadd>
  8104a0:	d9000517 	ldw	r4,20(sp)
  8104a4:	d9800b17 	ldw	r6,44(sp)
  8104a8:	1039883a 	mov	fp,r2
  8104ac:	213fffc4 	addi	r4,r4,-1
  8104b0:	d9000515 	stw	r4,20(sp)
  8104b4:	303f2d1e 	bne	r6,zero,81016c <__alt_data_end+0xff81016c>
  8104b8:	d9000c17 	ldw	r4,48(sp)
  8104bc:	0101780e 	bge	zero,r4,810aa0 <_dtoa_r+0x1670>
  8104c0:	d9000615 	stw	r4,24(sp)
  8104c4:	003edb06 	br	810034 <__alt_data_end+0xff810034>
  8104c8:	00800084 	movi	r2,2
  8104cc:	30818e1e 	bne	r6,r2,810b08 <_dtoa_r+0x16d8>
  8104d0:	d8000b15 	stw	zero,44(sp)
  8104d4:	003f8106 	br	8102dc <__alt_data_end+0xff8102dc>
  8104d8:	d8800717 	ldw	r2,28(sp)
  8104dc:	003c0306 	br	80f4ec <__alt_data_end+0xff80f4ec>
  8104e0:	d9000317 	ldw	r4,12(sp)
  8104e4:	00800084 	movi	r2,2
  8104e8:	113ed00e 	bge	r2,r4,81002c <__alt_data_end+0xff81002c>
  8104ec:	d8c00617 	ldw	r3,24(sp)
  8104f0:	183f901e 	bne	r3,zero,810334 <__alt_data_end+0xff810334>
  8104f4:	a80b883a 	mov	r5,r21
  8104f8:	8009883a 	mov	r4,r16
  8104fc:	01800144 	movi	r6,5
  810500:	000f883a 	mov	r7,zero
  810504:	08116a00 	call	8116a0 <__multadd>
  810508:	e009883a 	mov	r4,fp
  81050c:	100b883a 	mov	r5,r2
  810510:	102b883a 	mov	r21,r2
  810514:	0811ea40 	call	811ea4 <__mcmp>
  810518:	00bf860e 	bge	zero,r2,810334 <__alt_data_end+0xff810334>
  81051c:	d9800717 	ldw	r6,28(sp)
  810520:	00800c44 	movi	r2,49
  810524:	30800005 	stb	r2,0(r6)
  810528:	d8800517 	ldw	r2,20(sp)
  81052c:	35c00044 	addi	r23,r6,1
  810530:	10800044 	addi	r2,r2,1
  810534:	d8800515 	stw	r2,20(sp)
  810538:	003f8206 	br	810344 <__alt_data_end+0xff810344>
  81053c:	903e981e 	bne	r18,zero,80ffa0 <__alt_data_end+0xff80ffa0>
  810540:	003f8b06 	br	810370 <__alt_data_end+0xff810370>
  810544:	d9800517 	ldw	r6,20(sp)
  810548:	d8c00717 	ldw	r3,28(sp)
  81054c:	00800c44 	movi	r2,49
  810550:	31800044 	addi	r6,r6,1
  810554:	d9800515 	stw	r6,20(sp)
  810558:	18800005 	stb	r2,0(r3)
  81055c:	003ee906 	br	810104 <__alt_data_end+0xff810104>
  810560:	dc000317 	ldw	r16,12(sp)
  810564:	003d6006 	br	80fae8 <__alt_data_end+0xff80fae8>
  810568:	8809883a 	mov	r4,r17
  81056c:	08177d40 	call	8177d4 <__floatsidf>
  810570:	a009883a 	mov	r4,r20
  810574:	a80b883a 	mov	r5,r21
  810578:	100d883a 	mov	r6,r2
  81057c:	180f883a 	mov	r7,r3
  810580:	08167580 	call	816758 <__muldf3>
  810584:	1009883a 	mov	r4,r2
  810588:	180b883a 	mov	r5,r3
  81058c:	000d883a 	mov	r6,zero
  810590:	01d00734 	movhi	r7,16412
  810594:	08153ac0 	call	8153ac <__adddf3>
  810598:	1023883a 	mov	r17,r2
  81059c:	00bf3034 	movhi	r2,64704
  8105a0:	1885883a 	add	r2,r3,r2
  8105a4:	d8800e15 	stw	r2,56(sp)
  8105a8:	a009883a 	mov	r4,r20
  8105ac:	a80b883a 	mov	r5,r21
  8105b0:	000d883a 	mov	r6,zero
  8105b4:	01d00534 	movhi	r7,16404
  8105b8:	0816e7c0 	call	816e7c <__subdf3>
  8105bc:	d9c00e17 	ldw	r7,56(sp)
  8105c0:	1009883a 	mov	r4,r2
  8105c4:	180b883a 	mov	r5,r3
  8105c8:	880d883a 	mov	r6,r17
  8105cc:	102b883a 	mov	r21,r2
  8105d0:	1829883a 	mov	r20,r3
  8105d4:	08165980 	call	816598 <__gedf2>
  8105d8:	00807716 	blt	zero,r2,8107b8 <_dtoa_r+0x1388>
  8105dc:	d8800e17 	ldw	r2,56(sp)
  8105e0:	a809883a 	mov	r4,r21
  8105e4:	a00b883a 	mov	r5,r20
  8105e8:	11e0003c 	xorhi	r7,r2,32768
  8105ec:	880d883a 	mov	r6,r17
  8105f0:	08166780 	call	816678 <__ledf2>
  8105f4:	103d6b0e 	bge	r2,zero,80fba4 <__alt_data_end+0xff80fba4>
  8105f8:	002b883a 	mov	r21,zero
  8105fc:	0023883a 	mov	r17,zero
  810600:	003f4c06 	br	810334 <__alt_data_end+0xff810334>
  810604:	d9800917 	ldw	r6,36(sp)
  810608:	e00b883a 	mov	r5,fp
  81060c:	8009883a 	mov	r4,r16
  810610:	0811c140 	call	811c14 <__pow5mult>
  810614:	1039883a 	mov	fp,r2
  810618:	003e2706 	br	80feb8 <__alt_data_end+0xff80feb8>
  81061c:	d8000b15 	stw	zero,44(sp)
  810620:	003c4906 	br	80f748 <__alt_data_end+0xff80f748>
  810624:	d9000917 	ldw	r4,36(sp)
  810628:	d9800a17 	ldw	r6,40(sp)
  81062c:	dd400915 	stw	r21,36(sp)
  810630:	a905c83a 	sub	r2,r21,r4
  810634:	308d883a 	add	r6,r6,r2
  810638:	d9800a15 	stw	r6,40(sp)
  81063c:	002b883a 	mov	r21,zero
  810640:	003df206 	br	80fe0c <__alt_data_end+0xff80fe0c>
  810644:	dc800e15 	stw	r18,56(sp)
  810648:	982b883a 	mov	r21,r19
  81064c:	04400084 	movi	r17,2
  810650:	003c7406 	br	80f824 <__alt_data_end+0xff80f824>
  810654:	04400044 	movi	r17,1
  810658:	dc400c15 	stw	r17,48(sp)
  81065c:	dc400615 	stw	r17,24(sp)
  810660:	dc402215 	stw	r17,136(sp)
  810664:	80001115 	stw	zero,68(r16)
  810668:	000b883a 	mov	r5,zero
  81066c:	003c4a06 	br	80f798 <__alt_data_end+0xff80f798>
  810670:	3023883a 	mov	r17,r6
  810674:	003ffb06 	br	810664 <__alt_data_end+0xff810664>
  810678:	1000021e 	bne	r2,zero,810684 <_dtoa_r+0x1254>
  81067c:	4200004c 	andi	r8,r8,1
  810680:	403e8f1e 	bne	r8,zero,8100c0 <__alt_data_end+0xff8100c0>
  810684:	01000c04 	movi	r4,48
  810688:	00000106 	br	810690 <_dtoa_r+0x1260>
  81068c:	102f883a 	mov	r23,r2
  810690:	b8bfffc4 	addi	r2,r23,-1
  810694:	10c00007 	ldb	r3,0(r2)
  810698:	193ffc26 	beq	r3,r4,81068c <__alt_data_end+0xff81068c>
  81069c:	003e9906 	br	810104 <__alt_data_end+0xff810104>
  8106a0:	d9000517 	ldw	r4,20(sp)
  8106a4:	012fc83a 	sub	r23,zero,r4
  8106a8:	b800ad26 	beq	r23,zero,810960 <_dtoa_r+0x1530>
  8106ac:	b88003cc 	andi	r2,r23,15
  8106b0:	100490fa 	slli	r2,r2,3
  8106b4:	00c020b4 	movhi	r3,130
  8106b8:	18f35404 	addi	r3,r3,-12976
  8106bc:	1885883a 	add	r2,r3,r2
  8106c0:	11800017 	ldw	r6,0(r2)
  8106c4:	11c00117 	ldw	r7,4(r2)
  8106c8:	b82fd13a 	srai	r23,r23,4
  8106cc:	9009883a 	mov	r4,r18
  8106d0:	980b883a 	mov	r5,r19
  8106d4:	08167580 	call	816758 <__muldf3>
  8106d8:	1029883a 	mov	r20,r2
  8106dc:	182b883a 	mov	r21,r3
  8106e0:	b800f426 	beq	r23,zero,810ab4 <_dtoa_r+0x1684>
  8106e4:	020020b4 	movhi	r8,130
  8106e8:	42334a04 	addi	r8,r8,-13016
  8106ec:	8029883a 	mov	r20,r16
  8106f0:	04400084 	movi	r17,2
  8106f4:	4021883a 	mov	r16,r8
  8106f8:	b980004c 	andi	r6,r23,1
  8106fc:	1009883a 	mov	r4,r2
  810700:	b82fd07a 	srai	r23,r23,1
  810704:	180b883a 	mov	r5,r3
  810708:	30000426 	beq	r6,zero,81071c <_dtoa_r+0x12ec>
  81070c:	81800017 	ldw	r6,0(r16)
  810710:	81c00117 	ldw	r7,4(r16)
  810714:	8c400044 	addi	r17,r17,1
  810718:	08167580 	call	816758 <__muldf3>
  81071c:	84000204 	addi	r16,r16,8
  810720:	b83ff51e 	bne	r23,zero,8106f8 <__alt_data_end+0xff8106f8>
  810724:	a021883a 	mov	r16,r20
  810728:	182b883a 	mov	r21,r3
  81072c:	1029883a 	mov	r20,r2
  810730:	003c5506 	br	80f888 <__alt_data_end+0xff80f888>
  810734:	d9800517 	ldw	r6,20(sp)
  810738:	d9000717 	ldw	r4,28(sp)
  81073c:	00c00c04 	movi	r3,48
  810740:	31800044 	addi	r6,r6,1
  810744:	d9800515 	stw	r6,20(sp)
  810748:	20c00005 	stb	r3,0(r4)
  81074c:	02000c44 	movi	r8,49
  810750:	003da206 	br	80fddc <__alt_data_end+0xff80fddc>
  810754:	89400117 	ldw	r5,4(r17)
  810758:	8009883a 	mov	r4,r16
  81075c:	08115d00 	call	8115d0 <_Balloc>
  810760:	89800417 	ldw	r6,16(r17)
  810764:	11000304 	addi	r4,r2,12
  810768:	89400304 	addi	r5,r17,12
  81076c:	31800084 	addi	r6,r6,2
  810770:	318d883a 	add	r6,r6,r6
  810774:	318d883a 	add	r6,r6,r6
  810778:	1027883a 	mov	r19,r2
  81077c:	081133c0 	call	81133c <memcpy>
  810780:	8009883a 	mov	r4,r16
  810784:	980b883a 	mov	r5,r19
  810788:	01800044 	movi	r6,1
  81078c:	0811d540 	call	811d54 <__lshift>
  810790:	1029883a 	mov	r20,r2
  810794:	003e8606 	br	8101b0 <__alt_data_end+0xff8101b0>
  810798:	00800e44 	movi	r2,57
  81079c:	90809526 	beq	r18,r2,8109f4 <_dtoa_r+0x15c4>
  8107a0:	92000044 	addi	r8,r18,1
  8107a4:	003f2306 	br	810434 <__alt_data_end+0xff810434>
  8107a8:	9011883a 	mov	r8,r18
  8107ac:	8825883a 	mov	r18,r17
  8107b0:	a023883a 	mov	r17,r20
  8107b4:	003e3706 	br	810094 <__alt_data_end+0xff810094>
  8107b8:	002b883a 	mov	r21,zero
  8107bc:	0023883a 	mov	r17,zero
  8107c0:	003f5606 	br	81051c <__alt_data_end+0xff81051c>
  8107c4:	51bfffc4 	addi	r6,r10,-1
  8107c8:	300490fa 	slli	r2,r6,3
  8107cc:	00c020b4 	movhi	r3,130
  8107d0:	18f35404 	addi	r3,r3,-12976
  8107d4:	1885883a 	add	r2,r3,r2
  8107d8:	d9c00e17 	ldw	r7,56(sp)
  8107dc:	11000017 	ldw	r4,0(r2)
  8107e0:	11400117 	ldw	r5,4(r2)
  8107e4:	d8800717 	ldw	r2,28(sp)
  8107e8:	d9801015 	stw	r6,64(sp)
  8107ec:	880d883a 	mov	r6,r17
  8107f0:	da801615 	stw	r10,88(sp)
  8107f4:	15c00044 	addi	r23,r2,1
  8107f8:	08167580 	call	816758 <__muldf3>
  8107fc:	a80b883a 	mov	r5,r21
  810800:	a009883a 	mov	r4,r20
  810804:	d8c01115 	stw	r3,68(sp)
  810808:	d8800e15 	stw	r2,56(sp)
  81080c:	081774c0 	call	81774c <__fixdfsi>
  810810:	1009883a 	mov	r4,r2
  810814:	1023883a 	mov	r17,r2
  810818:	08177d40 	call	8177d4 <__floatsidf>
  81081c:	a009883a 	mov	r4,r20
  810820:	a80b883a 	mov	r5,r21
  810824:	100d883a 	mov	r6,r2
  810828:	180f883a 	mov	r7,r3
  81082c:	0816e7c0 	call	816e7c <__subdf3>
  810830:	1813883a 	mov	r9,r3
  810834:	d8c00717 	ldw	r3,28(sp)
  810838:	8c400c04 	addi	r17,r17,48
  81083c:	1011883a 	mov	r8,r2
  810840:	1c400005 	stb	r17,0(r3)
  810844:	da801617 	ldw	r10,88(sp)
  810848:	00800044 	movi	r2,1
  81084c:	50802326 	beq	r10,r2,8108dc <_dtoa_r+0x14ac>
  810850:	d8800717 	ldw	r2,28(sp)
  810854:	b82b883a 	mov	r21,r23
  810858:	dc001315 	stw	r16,76(sp)
  81085c:	12a9883a 	add	r20,r2,r10
  810860:	4807883a 	mov	r3,r9
  810864:	4005883a 	mov	r2,r8
  810868:	dc801415 	stw	r18,80(sp)
  81086c:	000d883a 	mov	r6,zero
  810870:	01d00934 	movhi	r7,16420
  810874:	1009883a 	mov	r4,r2
  810878:	180b883a 	mov	r5,r3
  81087c:	08167580 	call	816758 <__muldf3>
  810880:	180b883a 	mov	r5,r3
  810884:	1009883a 	mov	r4,r2
  810888:	1821883a 	mov	r16,r3
  81088c:	1025883a 	mov	r18,r2
  810890:	081774c0 	call	81774c <__fixdfsi>
  810894:	1009883a 	mov	r4,r2
  810898:	1023883a 	mov	r17,r2
  81089c:	08177d40 	call	8177d4 <__floatsidf>
  8108a0:	9009883a 	mov	r4,r18
  8108a4:	800b883a 	mov	r5,r16
  8108a8:	100d883a 	mov	r6,r2
  8108ac:	180f883a 	mov	r7,r3
  8108b0:	8c400c04 	addi	r17,r17,48
  8108b4:	0816e7c0 	call	816e7c <__subdf3>
  8108b8:	ad400044 	addi	r21,r21,1
  8108bc:	ac7fffc5 	stb	r17,-1(r21)
  8108c0:	ad3fea1e 	bne	r21,r20,81086c <__alt_data_end+0xff81086c>
  8108c4:	1813883a 	mov	r9,r3
  8108c8:	d8c01017 	ldw	r3,64(sp)
  8108cc:	dc001317 	ldw	r16,76(sp)
  8108d0:	dc801417 	ldw	r18,80(sp)
  8108d4:	1011883a 	mov	r8,r2
  8108d8:	b8ef883a 	add	r23,r23,r3
  8108dc:	d9000e17 	ldw	r4,56(sp)
  8108e0:	d9401117 	ldw	r5,68(sp)
  8108e4:	000d883a 	mov	r6,zero
  8108e8:	01cff834 	movhi	r7,16352
  8108ec:	da001715 	stw	r8,92(sp)
  8108f0:	da401515 	stw	r9,84(sp)
  8108f4:	08153ac0 	call	8153ac <__adddf3>
  8108f8:	da001717 	ldw	r8,92(sp)
  8108fc:	da401517 	ldw	r9,84(sp)
  810900:	1009883a 	mov	r4,r2
  810904:	400d883a 	mov	r6,r8
  810908:	480f883a 	mov	r7,r9
  81090c:	180b883a 	mov	r5,r3
  810910:	08166780 	call	816678 <__ledf2>
  810914:	da001717 	ldw	r8,92(sp)
  810918:	da401517 	ldw	r9,84(sp)
  81091c:	10003b0e 	bge	r2,zero,810a0c <_dtoa_r+0x15dc>
  810920:	d9001217 	ldw	r4,72(sp)
  810924:	bd7fffc3 	ldbu	r21,-1(r23)
  810928:	d9000515 	stw	r4,20(sp)
  81092c:	003d1c06 	br	80fda0 <__alt_data_end+0xff80fda0>
  810930:	d8c00817 	ldw	r3,32(sp)
  810934:	18a9c83a 	sub	r20,r3,r2
  810938:	0005883a 	mov	r2,zero
  81093c:	003d3706 	br	80fe1c <__alt_data_end+0xff80fe1c>
  810940:	00800044 	movi	r2,1
  810944:	003dd006 	br	810088 <__alt_data_end+0xff810088>
  810948:	d8c00217 	ldw	r3,8(sp)
  81094c:	00800d84 	movi	r2,54
  810950:	dd400917 	ldw	r21,36(sp)
  810954:	10c5c83a 	sub	r2,r2,r3
  810958:	dd000817 	ldw	r20,32(sp)
  81095c:	003d2f06 	br	80fe1c <__alt_data_end+0xff80fe1c>
  810960:	9029883a 	mov	r20,r18
  810964:	982b883a 	mov	r21,r19
  810968:	04400084 	movi	r17,2
  81096c:	003bc606 	br	80f888 <__alt_data_end+0xff80f888>
  810970:	d8800617 	ldw	r2,24(sp)
  810974:	103efc26 	beq	r2,zero,810568 <__alt_data_end+0xff810568>
  810978:	d8c00c17 	ldw	r3,48(sp)
  81097c:	00fc890e 	bge	zero,r3,80fba4 <__alt_data_end+0xff80fba4>
  810980:	a80b883a 	mov	r5,r21
  810984:	a009883a 	mov	r4,r20
  810988:	000d883a 	mov	r6,zero
  81098c:	01d00934 	movhi	r7,16420
  810990:	08167580 	call	816758 <__muldf3>
  810994:	89000044 	addi	r4,r17,1
  810998:	1029883a 	mov	r20,r2
  81099c:	182b883a 	mov	r21,r3
  8109a0:	08177d40 	call	8177d4 <__floatsidf>
  8109a4:	a009883a 	mov	r4,r20
  8109a8:	a80b883a 	mov	r5,r21
  8109ac:	100d883a 	mov	r6,r2
  8109b0:	180f883a 	mov	r7,r3
  8109b4:	08167580 	call	816758 <__muldf3>
  8109b8:	1009883a 	mov	r4,r2
  8109bc:	180b883a 	mov	r5,r3
  8109c0:	000d883a 	mov	r6,zero
  8109c4:	01d00734 	movhi	r7,16412
  8109c8:	08153ac0 	call	8153ac <__adddf3>
  8109cc:	d9000517 	ldw	r4,20(sp)
  8109d0:	1023883a 	mov	r17,r2
  8109d4:	00bf3034 	movhi	r2,64704
  8109d8:	213fffc4 	addi	r4,r4,-1
  8109dc:	1885883a 	add	r2,r3,r2
  8109e0:	d9001215 	stw	r4,72(sp)
  8109e4:	d8800e15 	stw	r2,56(sp)
  8109e8:	da800c17 	ldw	r10,48(sp)
  8109ec:	003bc306 	br	80f8fc <__alt_data_end+0xff80f8fc>
  8109f0:	b039883a 	mov	fp,r22
  8109f4:	01000e44 	movi	r4,57
  8109f8:	8825883a 	mov	r18,r17
  8109fc:	9dc00044 	addi	r23,r19,1
  810a00:	99000005 	stb	r4,0(r19)
  810a04:	a023883a 	mov	r17,r20
  810a08:	003dae06 	br	8100c4 <__alt_data_end+0xff8100c4>
  810a0c:	d9800e17 	ldw	r6,56(sp)
  810a10:	d9c01117 	ldw	r7,68(sp)
  810a14:	0009883a 	mov	r4,zero
  810a18:	014ff834 	movhi	r5,16352
  810a1c:	da001715 	stw	r8,92(sp)
  810a20:	da401515 	stw	r9,84(sp)
  810a24:	0816e7c0 	call	816e7c <__subdf3>
  810a28:	da001717 	ldw	r8,92(sp)
  810a2c:	da401517 	ldw	r9,84(sp)
  810a30:	1009883a 	mov	r4,r2
  810a34:	180b883a 	mov	r5,r3
  810a38:	400d883a 	mov	r6,r8
  810a3c:	480f883a 	mov	r7,r9
  810a40:	08165980 	call	816598 <__gedf2>
  810a44:	00bc570e 	bge	zero,r2,80fba4 <__alt_data_end+0xff80fba4>
  810a48:	01000c04 	movi	r4,48
  810a4c:	00000106 	br	810a54 <_dtoa_r+0x1624>
  810a50:	102f883a 	mov	r23,r2
  810a54:	b8bfffc4 	addi	r2,r23,-1
  810a58:	10c00007 	ldb	r3,0(r2)
  810a5c:	193ffc26 	beq	r3,r4,810a50 <__alt_data_end+0xff810a50>
  810a60:	d9801217 	ldw	r6,72(sp)
  810a64:	d9800515 	stw	r6,20(sp)
  810a68:	003c1f06 	br	80fae8 <__alt_data_end+0xff80fae8>
  810a6c:	d8801217 	ldw	r2,72(sp)
  810a70:	dc001117 	ldw	r16,68(sp)
  810a74:	d8800515 	stw	r2,20(sp)
  810a78:	003cc906 	br	80fda0 <__alt_data_end+0xff80fda0>
  810a7c:	dd801317 	ldw	r22,76(sp)
  810a80:	dc001117 	ldw	r16,68(sp)
  810a84:	dcc01417 	ldw	r19,80(sp)
  810a88:	dc801017 	ldw	r18,64(sp)
  810a8c:	003c4506 	br	80fba4 <__alt_data_end+0xff80fba4>
  810a90:	103e5d1e 	bne	r2,zero,810408 <__alt_data_end+0xff810408>
  810a94:	4080004c 	andi	r2,r8,1
  810a98:	103e5b26 	beq	r2,zero,810408 <__alt_data_end+0xff810408>
  810a9c:	003e5706 	br	8103fc <__alt_data_end+0xff8103fc>
  810aa0:	d8c00317 	ldw	r3,12(sp)
  810aa4:	00800084 	movi	r2,2
  810aa8:	10c00a16 	blt	r2,r3,810ad4 <_dtoa_r+0x16a4>
  810aac:	d9000c17 	ldw	r4,48(sp)
  810ab0:	003e8306 	br	8104c0 <__alt_data_end+0xff8104c0>
  810ab4:	04400084 	movi	r17,2
  810ab8:	003b7306 	br	80f888 <__alt_data_end+0xff80f888>
  810abc:	d9801217 	ldw	r6,72(sp)
  810ac0:	d9800515 	stw	r6,20(sp)
  810ac4:	003cb606 	br	80fda0 <__alt_data_end+0xff80fda0>
  810ac8:	d9001217 	ldw	r4,72(sp)
  810acc:	d9000515 	stw	r4,20(sp)
  810ad0:	003c0506 	br	80fae8 <__alt_data_end+0xff80fae8>
  810ad4:	d9800c17 	ldw	r6,48(sp)
  810ad8:	d9800615 	stw	r6,24(sp)
  810adc:	003e8306 	br	8104ec <__alt_data_end+0xff8104ec>
  810ae0:	d9800317 	ldw	r6,12(sp)
  810ae4:	00800084 	movi	r2,2
  810ae8:	11800216 	blt	r2,r6,810af4 <_dtoa_r+0x16c4>
  810aec:	d8800c17 	ldw	r2,48(sp)
  810af0:	003da606 	br	81018c <__alt_data_end+0xff81018c>
  810af4:	d8800c17 	ldw	r2,48(sp)
  810af8:	d8800615 	stw	r2,24(sp)
  810afc:	003e7b06 	br	8104ec <__alt_data_end+0xff8104ec>
  810b00:	05000044 	movi	r20,1
  810b04:	003b0506 	br	80f71c <__alt_data_end+0xff80f71c>
  810b08:	8009883a 	mov	r4,r16
  810b0c:	80001115 	stw	zero,68(r16)
  810b10:	000b883a 	mov	r5,zero
  810b14:	08115d00 	call	8115d0 <_Balloc>
  810b18:	d8800715 	stw	r2,28(sp)
  810b1c:	d8c00717 	ldw	r3,28(sp)
  810b20:	00bfffc4 	movi	r2,-1
  810b24:	01000044 	movi	r4,1
  810b28:	d8800c15 	stw	r2,48(sp)
  810b2c:	80c01015 	stw	r3,64(r16)
  810b30:	d9000b15 	stw	r4,44(sp)
  810b34:	d8800615 	stw	r2,24(sp)
  810b38:	d8002215 	stw	zero,136(sp)
  810b3c:	003c1906 	br	80fba4 <__alt_data_end+0xff80fba4>
  810b40:	193d2926 	beq	r3,r4,80ffe8 <__alt_data_end+0xff80ffe8>
  810b44:	00c00f04 	movi	r3,60
  810b48:	1885c83a 	sub	r2,r3,r2
  810b4c:	003d7b06 	br	81013c <__alt_data_end+0xff81013c>
  810b50:	000b883a 	mov	r5,zero
  810b54:	003b1006 	br	80f798 <__alt_data_end+0xff80f798>

00810b58 <__sflags>:
  810b58:	28800007 	ldb	r2,0(r5)
  810b5c:	00c01c84 	movi	r3,114
  810b60:	10c02426 	beq	r2,r3,810bf4 <__sflags+0x9c>
  810b64:	00c01dc4 	movi	r3,119
  810b68:	10c01e26 	beq	r2,r3,810be4 <__sflags+0x8c>
  810b6c:	00c01844 	movi	r3,97
  810b70:	10c00426 	beq	r2,r3,810b84 <__sflags+0x2c>
  810b74:	00800584 	movi	r2,22
  810b78:	20800015 	stw	r2,0(r4)
  810b7c:	0005883a 	mov	r2,zero
  810b80:	f800283a 	ret
  810b84:	02c08204 	movi	r11,520
  810b88:	01000044 	movi	r4,1
  810b8c:	00804204 	movi	r2,264
  810b90:	01c00ac4 	movi	r7,43
  810b94:	02bff8c4 	movi	r10,-29
  810b98:	027fff04 	movi	r9,-4
  810b9c:	02001e04 	movi	r8,120
  810ba0:	29400044 	addi	r5,r5,1
  810ba4:	28c00007 	ldb	r3,0(r5)
  810ba8:	18000626 	beq	r3,zero,810bc4 <__sflags+0x6c>
  810bac:	19c00826 	beq	r3,r7,810bd0 <__sflags+0x78>
  810bb0:	1a3ffb1e 	bne	r3,r8,810ba0 <__alt_data_end+0xff810ba0>
  810bb4:	29400044 	addi	r5,r5,1
  810bb8:	28c00007 	ldb	r3,0(r5)
  810bbc:	21020014 	ori	r4,r4,2048
  810bc0:	183ffa1e 	bne	r3,zero,810bac <__alt_data_end+0xff810bac>
  810bc4:	22c8b03a 	or	r4,r4,r11
  810bc8:	31000015 	stw	r4,0(r6)
  810bcc:	f800283a 	ret
  810bd0:	1284703a 	and	r2,r2,r10
  810bd4:	2248703a 	and	r4,r4,r9
  810bd8:	10800414 	ori	r2,r2,16
  810bdc:	21000094 	ori	r4,r4,2
  810be0:	003fef06 	br	810ba0 <__alt_data_end+0xff810ba0>
  810be4:	02c18004 	movi	r11,1536
  810be8:	01000044 	movi	r4,1
  810bec:	00800204 	movi	r2,8
  810bf0:	003fe706 	br	810b90 <__alt_data_end+0xff810b90>
  810bf4:	0017883a 	mov	r11,zero
  810bf8:	0009883a 	mov	r4,zero
  810bfc:	00800104 	movi	r2,4
  810c00:	003fe306 	br	810b90 <__alt_data_end+0xff810b90>

00810c04 <__sfvwrite_r>:
  810c04:	30800217 	ldw	r2,8(r6)
  810c08:	10006726 	beq	r2,zero,810da8 <__sfvwrite_r+0x1a4>
  810c0c:	defff404 	addi	sp,sp,-48
  810c10:	dd000615 	stw	r20,24(sp)
  810c14:	2029883a 	mov	r20,r4
  810c18:	2900030b 	ldhu	r4,12(r5)
  810c1c:	ddc00915 	stw	r23,36(sp)
  810c20:	dc000215 	stw	r16,8(sp)
  810c24:	dfc00b15 	stw	ra,44(sp)
  810c28:	df000a15 	stw	fp,40(sp)
  810c2c:	dd800815 	stw	r22,32(sp)
  810c30:	dd400715 	stw	r21,28(sp)
  810c34:	dcc00515 	stw	r19,20(sp)
  810c38:	dc800415 	stw	r18,16(sp)
  810c3c:	dc400315 	stw	r17,12(sp)
  810c40:	2080020c 	andi	r2,r4,8
  810c44:	2821883a 	mov	r16,r5
  810c48:	302f883a 	mov	r23,r6
  810c4c:	10002726 	beq	r2,zero,810cec <__sfvwrite_r+0xe8>
  810c50:	28800417 	ldw	r2,16(r5)
  810c54:	10002526 	beq	r2,zero,810cec <__sfvwrite_r+0xe8>
  810c58:	2080008c 	andi	r2,r4,2
  810c5c:	bc400017 	ldw	r17,0(r23)
  810c60:	10002a26 	beq	r2,zero,810d0c <__sfvwrite_r+0x108>
  810c64:	05600034 	movhi	r21,32768
  810c68:	0027883a 	mov	r19,zero
  810c6c:	0025883a 	mov	r18,zero
  810c70:	ad7f0004 	addi	r21,r21,-1024
  810c74:	980d883a 	mov	r6,r19
  810c78:	a009883a 	mov	r4,r20
  810c7c:	90004626 	beq	r18,zero,810d98 <__sfvwrite_r+0x194>
  810c80:	900f883a 	mov	r7,r18
  810c84:	81400717 	ldw	r5,28(r16)
  810c88:	ac80022e 	bgeu	r21,r18,810c94 <__sfvwrite_r+0x90>
  810c8c:	01e00034 	movhi	r7,32768
  810c90:	39ff0004 	addi	r7,r7,-1024
  810c94:	80800917 	ldw	r2,36(r16)
  810c98:	103ee83a 	callr	r2
  810c9c:	0080520e 	bge	zero,r2,810de8 <__sfvwrite_r+0x1e4>
  810ca0:	b8c00217 	ldw	r3,8(r23)
  810ca4:	98a7883a 	add	r19,r19,r2
  810ca8:	90a5c83a 	sub	r18,r18,r2
  810cac:	1885c83a 	sub	r2,r3,r2
  810cb0:	b8800215 	stw	r2,8(r23)
  810cb4:	103fef1e 	bne	r2,zero,810c74 <__alt_data_end+0xff810c74>
  810cb8:	0005883a 	mov	r2,zero
  810cbc:	dfc00b17 	ldw	ra,44(sp)
  810cc0:	df000a17 	ldw	fp,40(sp)
  810cc4:	ddc00917 	ldw	r23,36(sp)
  810cc8:	dd800817 	ldw	r22,32(sp)
  810ccc:	dd400717 	ldw	r21,28(sp)
  810cd0:	dd000617 	ldw	r20,24(sp)
  810cd4:	dcc00517 	ldw	r19,20(sp)
  810cd8:	dc800417 	ldw	r18,16(sp)
  810cdc:	dc400317 	ldw	r17,12(sp)
  810ce0:	dc000217 	ldw	r16,8(sp)
  810ce4:	dec00c04 	addi	sp,sp,48
  810ce8:	f800283a 	ret
  810cec:	a009883a 	mov	r4,r20
  810cf0:	800b883a 	mov	r5,r16
  810cf4:	080f0880 	call	80f088 <__swsetup_r>
  810cf8:	1000ec1e 	bne	r2,zero,8110ac <__sfvwrite_r+0x4a8>
  810cfc:	8100030b 	ldhu	r4,12(r16)
  810d00:	bc400017 	ldw	r17,0(r23)
  810d04:	2080008c 	andi	r2,r4,2
  810d08:	103fd61e 	bne	r2,zero,810c64 <__alt_data_end+0xff810c64>
  810d0c:	2080004c 	andi	r2,r4,1
  810d10:	10003a1e 	bne	r2,zero,810dfc <__sfvwrite_r+0x1f8>
  810d14:	0039883a 	mov	fp,zero
  810d18:	0025883a 	mov	r18,zero
  810d1c:	90001a26 	beq	r18,zero,810d88 <__sfvwrite_r+0x184>
  810d20:	2080800c 	andi	r2,r4,512
  810d24:	85800217 	ldw	r22,8(r16)
  810d28:	10007626 	beq	r2,zero,810f04 <__sfvwrite_r+0x300>
  810d2c:	b027883a 	mov	r19,r22
  810d30:	95809436 	bltu	r18,r22,810f84 <__sfvwrite_r+0x380>
  810d34:	2081200c 	andi	r2,r4,1152
  810d38:	10009f1e 	bne	r2,zero,810fb8 <__sfvwrite_r+0x3b4>
  810d3c:	81000017 	ldw	r4,0(r16)
  810d40:	e00b883a 	mov	r5,fp
  810d44:	980d883a 	mov	r6,r19
  810d48:	08114740 	call	811474 <memmove>
  810d4c:	81000217 	ldw	r4,8(r16)
  810d50:	81400017 	ldw	r5,0(r16)
  810d54:	9005883a 	mov	r2,r18
  810d58:	2587c83a 	sub	r3,r4,r22
  810d5c:	2ce7883a 	add	r19,r5,r19
  810d60:	80c00215 	stw	r3,8(r16)
  810d64:	84c00015 	stw	r19,0(r16)
  810d68:	b8c00217 	ldw	r3,8(r23)
  810d6c:	e0b9883a 	add	fp,fp,r2
  810d70:	90a5c83a 	sub	r18,r18,r2
  810d74:	1885c83a 	sub	r2,r3,r2
  810d78:	b8800215 	stw	r2,8(r23)
  810d7c:	103fce26 	beq	r2,zero,810cb8 <__alt_data_end+0xff810cb8>
  810d80:	8100030b 	ldhu	r4,12(r16)
  810d84:	903fe61e 	bne	r18,zero,810d20 <__alt_data_end+0xff810d20>
  810d88:	8f000017 	ldw	fp,0(r17)
  810d8c:	8c800117 	ldw	r18,4(r17)
  810d90:	8c400204 	addi	r17,r17,8
  810d94:	003fe106 	br	810d1c <__alt_data_end+0xff810d1c>
  810d98:	8cc00017 	ldw	r19,0(r17)
  810d9c:	8c800117 	ldw	r18,4(r17)
  810da0:	8c400204 	addi	r17,r17,8
  810da4:	003fb306 	br	810c74 <__alt_data_end+0xff810c74>
  810da8:	0005883a 	mov	r2,zero
  810dac:	f800283a 	ret
  810db0:	00a00034 	movhi	r2,32768
  810db4:	10bfffc4 	addi	r2,r2,-1
  810db8:	9009883a 	mov	r4,r18
  810dbc:	1480012e 	bgeu	r2,r18,810dc4 <__sfvwrite_r+0x1c0>
  810dc0:	1009883a 	mov	r4,r2
  810dc4:	980b883a 	mov	r5,r19
  810dc8:	080a8d00 	call	80a8d0 <__divsi3>
  810dcc:	81400717 	ldw	r5,28(r16)
  810dd0:	80c00917 	ldw	r3,36(r16)
  810dd4:	988f383a 	mul	r7,r19,r2
  810dd8:	a009883a 	mov	r4,r20
  810ddc:	e00d883a 	mov	r6,fp
  810de0:	183ee83a 	callr	r3
  810de4:	00bfe016 	blt	zero,r2,810d68 <__alt_data_end+0xff810d68>
  810de8:	8080030b 	ldhu	r2,12(r16)
  810dec:	10801014 	ori	r2,r2,64
  810df0:	8080030d 	sth	r2,12(r16)
  810df4:	00bfffc4 	movi	r2,-1
  810df8:	003fb006 	br	810cbc <__alt_data_end+0xff810cbc>
  810dfc:	0027883a 	mov	r19,zero
  810e00:	0011883a 	mov	r8,zero
  810e04:	0039883a 	mov	fp,zero
  810e08:	0025883a 	mov	r18,zero
  810e0c:	90001f26 	beq	r18,zero,810e8c <__sfvwrite_r+0x288>
  810e10:	40006026 	beq	r8,zero,810f94 <__sfvwrite_r+0x390>
  810e14:	982b883a 	mov	r21,r19
  810e18:	94c0012e 	bgeu	r18,r19,810e20 <__sfvwrite_r+0x21c>
  810e1c:	902b883a 	mov	r21,r18
  810e20:	81000017 	ldw	r4,0(r16)
  810e24:	80800417 	ldw	r2,16(r16)
  810e28:	a82d883a 	mov	r22,r21
  810e2c:	81800217 	ldw	r6,8(r16)
  810e30:	81c00517 	ldw	r7,20(r16)
  810e34:	1100022e 	bgeu	r2,r4,810e40 <__sfvwrite_r+0x23c>
  810e38:	31c7883a 	add	r3,r6,r7
  810e3c:	1d401816 	blt	r3,r21,810ea0 <__sfvwrite_r+0x29c>
  810e40:	a9c04416 	blt	r21,r7,810f54 <__sfvwrite_r+0x350>
  810e44:	80800917 	ldw	r2,36(r16)
  810e48:	81400717 	ldw	r5,28(r16)
  810e4c:	a009883a 	mov	r4,r20
  810e50:	da000115 	stw	r8,4(sp)
  810e54:	e00d883a 	mov	r6,fp
  810e58:	103ee83a 	callr	r2
  810e5c:	102d883a 	mov	r22,r2
  810e60:	da000117 	ldw	r8,4(sp)
  810e64:	00bfe00e 	bge	zero,r2,810de8 <__alt_data_end+0xff810de8>
  810e68:	9da7c83a 	sub	r19,r19,r22
  810e6c:	98001f26 	beq	r19,zero,810eec <__sfvwrite_r+0x2e8>
  810e70:	b8800217 	ldw	r2,8(r23)
  810e74:	e5b9883a 	add	fp,fp,r22
  810e78:	95a5c83a 	sub	r18,r18,r22
  810e7c:	15adc83a 	sub	r22,r2,r22
  810e80:	bd800215 	stw	r22,8(r23)
  810e84:	b03f8c26 	beq	r22,zero,810cb8 <__alt_data_end+0xff810cb8>
  810e88:	903fe11e 	bne	r18,zero,810e10 <__alt_data_end+0xff810e10>
  810e8c:	8f000017 	ldw	fp,0(r17)
  810e90:	8c800117 	ldw	r18,4(r17)
  810e94:	0011883a 	mov	r8,zero
  810e98:	8c400204 	addi	r17,r17,8
  810e9c:	003fdb06 	br	810e0c <__alt_data_end+0xff810e0c>
  810ea0:	180d883a 	mov	r6,r3
  810ea4:	e00b883a 	mov	r5,fp
  810ea8:	da000115 	stw	r8,4(sp)
  810eac:	d8c00015 	stw	r3,0(sp)
  810eb0:	08114740 	call	811474 <memmove>
  810eb4:	d8c00017 	ldw	r3,0(sp)
  810eb8:	80800017 	ldw	r2,0(r16)
  810ebc:	a009883a 	mov	r4,r20
  810ec0:	800b883a 	mov	r5,r16
  810ec4:	10c5883a 	add	r2,r2,r3
  810ec8:	80800015 	stw	r2,0(r16)
  810ecc:	d8c00015 	stw	r3,0(sp)
  810ed0:	080ac9c0 	call	80ac9c <_fflush_r>
  810ed4:	d8c00017 	ldw	r3,0(sp)
  810ed8:	da000117 	ldw	r8,4(sp)
  810edc:	103fc21e 	bne	r2,zero,810de8 <__alt_data_end+0xff810de8>
  810ee0:	182d883a 	mov	r22,r3
  810ee4:	9da7c83a 	sub	r19,r19,r22
  810ee8:	983fe11e 	bne	r19,zero,810e70 <__alt_data_end+0xff810e70>
  810eec:	a009883a 	mov	r4,r20
  810ef0:	800b883a 	mov	r5,r16
  810ef4:	080ac9c0 	call	80ac9c <_fflush_r>
  810ef8:	103fbb1e 	bne	r2,zero,810de8 <__alt_data_end+0xff810de8>
  810efc:	0011883a 	mov	r8,zero
  810f00:	003fdb06 	br	810e70 <__alt_data_end+0xff810e70>
  810f04:	81000017 	ldw	r4,0(r16)
  810f08:	80800417 	ldw	r2,16(r16)
  810f0c:	11000236 	bltu	r2,r4,810f18 <__sfvwrite_r+0x314>
  810f10:	84c00517 	ldw	r19,20(r16)
  810f14:	94ffa62e 	bgeu	r18,r19,810db0 <__alt_data_end+0xff810db0>
  810f18:	9027883a 	mov	r19,r18
  810f1c:	b480012e 	bgeu	r22,r18,810f24 <__sfvwrite_r+0x320>
  810f20:	b027883a 	mov	r19,r22
  810f24:	e00b883a 	mov	r5,fp
  810f28:	980d883a 	mov	r6,r19
  810f2c:	08114740 	call	811474 <memmove>
  810f30:	80800217 	ldw	r2,8(r16)
  810f34:	80c00017 	ldw	r3,0(r16)
  810f38:	14c5c83a 	sub	r2,r2,r19
  810f3c:	1cc7883a 	add	r3,r3,r19
  810f40:	80800215 	stw	r2,8(r16)
  810f44:	80c00015 	stw	r3,0(r16)
  810f48:	10004326 	beq	r2,zero,811058 <__sfvwrite_r+0x454>
  810f4c:	9805883a 	mov	r2,r19
  810f50:	003f8506 	br	810d68 <__alt_data_end+0xff810d68>
  810f54:	a80d883a 	mov	r6,r21
  810f58:	e00b883a 	mov	r5,fp
  810f5c:	da000115 	stw	r8,4(sp)
  810f60:	08114740 	call	811474 <memmove>
  810f64:	80800217 	ldw	r2,8(r16)
  810f68:	80c00017 	ldw	r3,0(r16)
  810f6c:	da000117 	ldw	r8,4(sp)
  810f70:	1545c83a 	sub	r2,r2,r21
  810f74:	1d6b883a 	add	r21,r3,r21
  810f78:	80800215 	stw	r2,8(r16)
  810f7c:	85400015 	stw	r21,0(r16)
  810f80:	003fb906 	br	810e68 <__alt_data_end+0xff810e68>
  810f84:	81000017 	ldw	r4,0(r16)
  810f88:	902d883a 	mov	r22,r18
  810f8c:	9027883a 	mov	r19,r18
  810f90:	003f6b06 	br	810d40 <__alt_data_end+0xff810d40>
  810f94:	e009883a 	mov	r4,fp
  810f98:	01400284 	movi	r5,10
  810f9c:	900d883a 	mov	r6,r18
  810fa0:	08112540 	call	811254 <memchr>
  810fa4:	10003e26 	beq	r2,zero,8110a0 <__sfvwrite_r+0x49c>
  810fa8:	10800044 	addi	r2,r2,1
  810fac:	1727c83a 	sub	r19,r2,fp
  810fb0:	02000044 	movi	r8,1
  810fb4:	003f9706 	br	810e14 <__alt_data_end+0xff810e14>
  810fb8:	80800517 	ldw	r2,20(r16)
  810fbc:	81400417 	ldw	r5,16(r16)
  810fc0:	80c00017 	ldw	r3,0(r16)
  810fc4:	10a7883a 	add	r19,r2,r2
  810fc8:	9885883a 	add	r2,r19,r2
  810fcc:	1026d7fa 	srli	r19,r2,31
  810fd0:	196bc83a 	sub	r21,r3,r5
  810fd4:	a9800044 	addi	r6,r21,1
  810fd8:	9885883a 	add	r2,r19,r2
  810fdc:	1027d07a 	srai	r19,r2,1
  810fe0:	3485883a 	add	r2,r6,r18
  810fe4:	980d883a 	mov	r6,r19
  810fe8:	9880022e 	bgeu	r19,r2,810ff4 <__sfvwrite_r+0x3f0>
  810fec:	1027883a 	mov	r19,r2
  810ff0:	100d883a 	mov	r6,r2
  810ff4:	2101000c 	andi	r4,r4,1024
  810ff8:	20001c26 	beq	r4,zero,81106c <__sfvwrite_r+0x468>
  810ffc:	a009883a 	mov	r4,r20
  811000:	300b883a 	mov	r5,r6
  811004:	080c0600 	call	80c060 <_malloc_r>
  811008:	102d883a 	mov	r22,r2
  81100c:	10002926 	beq	r2,zero,8110b4 <__sfvwrite_r+0x4b0>
  811010:	81400417 	ldw	r5,16(r16)
  811014:	1009883a 	mov	r4,r2
  811018:	a80d883a 	mov	r6,r21
  81101c:	081133c0 	call	81133c <memcpy>
  811020:	8080030b 	ldhu	r2,12(r16)
  811024:	00fedfc4 	movi	r3,-1153
  811028:	10c4703a 	and	r2,r2,r3
  81102c:	10802014 	ori	r2,r2,128
  811030:	8080030d 	sth	r2,12(r16)
  811034:	b549883a 	add	r4,r22,r21
  811038:	9d4bc83a 	sub	r5,r19,r21
  81103c:	85800415 	stw	r22,16(r16)
  811040:	84c00515 	stw	r19,20(r16)
  811044:	81000015 	stw	r4,0(r16)
  811048:	902d883a 	mov	r22,r18
  81104c:	81400215 	stw	r5,8(r16)
  811050:	9027883a 	mov	r19,r18
  811054:	003f3a06 	br	810d40 <__alt_data_end+0xff810d40>
  811058:	a009883a 	mov	r4,r20
  81105c:	800b883a 	mov	r5,r16
  811060:	080ac9c0 	call	80ac9c <_fflush_r>
  811064:	103fb926 	beq	r2,zero,810f4c <__alt_data_end+0xff810f4c>
  811068:	003f5f06 	br	810de8 <__alt_data_end+0xff810de8>
  81106c:	a009883a 	mov	r4,r20
  811070:	08127380 	call	812738 <_realloc_r>
  811074:	102d883a 	mov	r22,r2
  811078:	103fee1e 	bne	r2,zero,811034 <__alt_data_end+0xff811034>
  81107c:	81400417 	ldw	r5,16(r16)
  811080:	a009883a 	mov	r4,r20
  811084:	080b3440 	call	80b344 <_free_r>
  811088:	8080030b 	ldhu	r2,12(r16)
  81108c:	00ffdfc4 	movi	r3,-129
  811090:	1884703a 	and	r2,r3,r2
  811094:	00c00304 	movi	r3,12
  811098:	a0c00015 	stw	r3,0(r20)
  81109c:	003f5306 	br	810dec <__alt_data_end+0xff810dec>
  8110a0:	94c00044 	addi	r19,r18,1
  8110a4:	02000044 	movi	r8,1
  8110a8:	003f5a06 	br	810e14 <__alt_data_end+0xff810e14>
  8110ac:	00bfffc4 	movi	r2,-1
  8110b0:	003f0206 	br	810cbc <__alt_data_end+0xff810cbc>
  8110b4:	00800304 	movi	r2,12
  8110b8:	a0800015 	stw	r2,0(r20)
  8110bc:	8080030b 	ldhu	r2,12(r16)
  8110c0:	003f4a06 	br	810dec <__alt_data_end+0xff810dec>

008110c4 <_isatty_r>:
  8110c4:	defffd04 	addi	sp,sp,-12
  8110c8:	dc000015 	stw	r16,0(sp)
  8110cc:	040020b4 	movhi	r16,130
  8110d0:	dc400115 	stw	r17,4(sp)
  8110d4:	84034404 	addi	r16,r16,3344
  8110d8:	2023883a 	mov	r17,r4
  8110dc:	2809883a 	mov	r4,r5
  8110e0:	dfc00215 	stw	ra,8(sp)
  8110e4:	80000015 	stw	zero,0(r16)
  8110e8:	0817f380 	call	817f38 <isatty>
  8110ec:	00ffffc4 	movi	r3,-1
  8110f0:	10c00526 	beq	r2,r3,811108 <_isatty_r+0x44>
  8110f4:	dfc00217 	ldw	ra,8(sp)
  8110f8:	dc400117 	ldw	r17,4(sp)
  8110fc:	dc000017 	ldw	r16,0(sp)
  811100:	dec00304 	addi	sp,sp,12
  811104:	f800283a 	ret
  811108:	80c00017 	ldw	r3,0(r16)
  81110c:	183ff926 	beq	r3,zero,8110f4 <__alt_data_end+0xff8110f4>
  811110:	88c00015 	stw	r3,0(r17)
  811114:	003ff706 	br	8110f4 <__alt_data_end+0xff8110f4>

00811118 <_setlocale_r>:
  811118:	30001b26 	beq	r6,zero,811188 <_setlocale_r+0x70>
  81111c:	014020b4 	movhi	r5,130
  811120:	defffe04 	addi	sp,sp,-8
  811124:	29733a04 	addi	r5,r5,-13080
  811128:	3009883a 	mov	r4,r6
  81112c:	dc000015 	stw	r16,0(sp)
  811130:	dfc00115 	stw	ra,4(sp)
  811134:	3021883a 	mov	r16,r6
  811138:	0812d140 	call	812d14 <strcmp>
  81113c:	1000061e 	bne	r2,zero,811158 <_setlocale_r+0x40>
  811140:	008020b4 	movhi	r2,130
  811144:	10b31b04 	addi	r2,r2,-13204
  811148:	dfc00117 	ldw	ra,4(sp)
  81114c:	dc000017 	ldw	r16,0(sp)
  811150:	dec00204 	addi	sp,sp,8
  811154:	f800283a 	ret
  811158:	014020b4 	movhi	r5,130
  81115c:	29731b04 	addi	r5,r5,-13204
  811160:	8009883a 	mov	r4,r16
  811164:	0812d140 	call	812d14 <strcmp>
  811168:	103ff526 	beq	r2,zero,811140 <__alt_data_end+0xff811140>
  81116c:	014020b4 	movhi	r5,130
  811170:	29732504 	addi	r5,r5,-13164
  811174:	8009883a 	mov	r4,r16
  811178:	0812d140 	call	812d14 <strcmp>
  81117c:	103ff026 	beq	r2,zero,811140 <__alt_data_end+0xff811140>
  811180:	0005883a 	mov	r2,zero
  811184:	003ff006 	br	811148 <__alt_data_end+0xff811148>
  811188:	008020b4 	movhi	r2,130
  81118c:	10b31b04 	addi	r2,r2,-13204
  811190:	f800283a 	ret

00811194 <__locale_charset>:
  811194:	008020b4 	movhi	r2,130
  811198:	10b6a004 	addi	r2,r2,-9600
  81119c:	f800283a 	ret

008111a0 <__locale_mb_cur_max>:
  8111a0:	008020b4 	movhi	r2,130
  8111a4:	10bbd204 	addi	r2,r2,-4280
  8111a8:	10800017 	ldw	r2,0(r2)
  8111ac:	f800283a 	ret

008111b0 <__locale_msgcharset>:
  8111b0:	008020b4 	movhi	r2,130
  8111b4:	10b69804 	addi	r2,r2,-9632
  8111b8:	f800283a 	ret

008111bc <__locale_cjk_lang>:
  8111bc:	0005883a 	mov	r2,zero
  8111c0:	f800283a 	ret

008111c4 <_localeconv_r>:
  8111c4:	008020b4 	movhi	r2,130
  8111c8:	10b6a804 	addi	r2,r2,-9568
  8111cc:	f800283a 	ret

008111d0 <setlocale>:
  8111d0:	00c020b4 	movhi	r3,130
  8111d4:	18fbcf04 	addi	r3,r3,-4292
  8111d8:	2005883a 	mov	r2,r4
  8111dc:	19000017 	ldw	r4,0(r3)
  8111e0:	280d883a 	mov	r6,r5
  8111e4:	100b883a 	mov	r5,r2
  8111e8:	08111181 	jmpi	811118 <_setlocale_r>

008111ec <localeconv>:
  8111ec:	008020b4 	movhi	r2,130
  8111f0:	10b6a804 	addi	r2,r2,-9568
  8111f4:	f800283a 	ret

008111f8 <_lseek_r>:
  8111f8:	defffd04 	addi	sp,sp,-12
  8111fc:	dc000015 	stw	r16,0(sp)
  811200:	040020b4 	movhi	r16,130
  811204:	dc400115 	stw	r17,4(sp)
  811208:	84034404 	addi	r16,r16,3344
  81120c:	2023883a 	mov	r17,r4
  811210:	2809883a 	mov	r4,r5
  811214:	300b883a 	mov	r5,r6
  811218:	380d883a 	mov	r6,r7
  81121c:	dfc00215 	stw	ra,8(sp)
  811220:	80000015 	stw	zero,0(r16)
  811224:	08181100 	call	818110 <lseek>
  811228:	00ffffc4 	movi	r3,-1
  81122c:	10c00526 	beq	r2,r3,811244 <_lseek_r+0x4c>
  811230:	dfc00217 	ldw	ra,8(sp)
  811234:	dc400117 	ldw	r17,4(sp)
  811238:	dc000017 	ldw	r16,0(sp)
  81123c:	dec00304 	addi	sp,sp,12
  811240:	f800283a 	ret
  811244:	80c00017 	ldw	r3,0(r16)
  811248:	183ff926 	beq	r3,zero,811230 <__alt_data_end+0xff811230>
  81124c:	88c00015 	stw	r3,0(r17)
  811250:	003ff706 	br	811230 <__alt_data_end+0xff811230>

00811254 <memchr>:
  811254:	208000cc 	andi	r2,r4,3
  811258:	280f883a 	mov	r7,r5
  81125c:	10003526 	beq	r2,zero,811334 <memchr+0xe0>
  811260:	30bfffc4 	addi	r2,r6,-1
  811264:	30001b26 	beq	r6,zero,8112d4 <memchr+0x80>
  811268:	21800003 	ldbu	r6,0(r4)
  81126c:	28c03fcc 	andi	r3,r5,255
  811270:	30c01a26 	beq	r6,r3,8112dc <memchr+0x88>
  811274:	180d883a 	mov	r6,r3
  811278:	00000406 	br	81128c <memchr+0x38>
  81127c:	10001526 	beq	r2,zero,8112d4 <memchr+0x80>
  811280:	20c00003 	ldbu	r3,0(r4)
  811284:	10bfffc4 	addi	r2,r2,-1
  811288:	19801426 	beq	r3,r6,8112dc <memchr+0x88>
  81128c:	21000044 	addi	r4,r4,1
  811290:	20c000cc 	andi	r3,r4,3
  811294:	183ff91e 	bne	r3,zero,81127c <__alt_data_end+0xff81127c>
  811298:	024000c4 	movi	r9,3
  81129c:	48801136 	bltu	r9,r2,8112e4 <memchr+0x90>
  8112a0:	10000c26 	beq	r2,zero,8112d4 <memchr+0x80>
  8112a4:	20c00003 	ldbu	r3,0(r4)
  8112a8:	29403fcc 	andi	r5,r5,255
  8112ac:	19400b26 	beq	r3,r5,8112dc <memchr+0x88>
  8112b0:	20c00044 	addi	r3,r4,1
  8112b4:	2085883a 	add	r2,r4,r2
  8112b8:	39803fcc 	andi	r6,r7,255
  8112bc:	00000306 	br	8112cc <memchr+0x78>
  8112c0:	18c00044 	addi	r3,r3,1
  8112c4:	197fffc3 	ldbu	r5,-1(r3)
  8112c8:	29800426 	beq	r5,r6,8112dc <memchr+0x88>
  8112cc:	1809883a 	mov	r4,r3
  8112d0:	18bffb1e 	bne	r3,r2,8112c0 <__alt_data_end+0xff8112c0>
  8112d4:	0005883a 	mov	r2,zero
  8112d8:	f800283a 	ret
  8112dc:	2005883a 	mov	r2,r4
  8112e0:	f800283a 	ret
  8112e4:	28c03fcc 	andi	r3,r5,255
  8112e8:	1810923a 	slli	r8,r3,8
  8112ec:	02ffbff4 	movhi	r11,65279
  8112f0:	02a02074 	movhi	r10,32897
  8112f4:	40c6b03a 	or	r3,r8,r3
  8112f8:	1810943a 	slli	r8,r3,16
  8112fc:	5affbfc4 	addi	r11,r11,-257
  811300:	52a02004 	addi	r10,r10,-32640
  811304:	40d0b03a 	or	r8,r8,r3
  811308:	20c00017 	ldw	r3,0(r4)
  81130c:	40c6f03a 	xor	r3,r8,r3
  811310:	1acd883a 	add	r6,r3,r11
  811314:	00c6303a 	nor	r3,zero,r3
  811318:	30c6703a 	and	r3,r6,r3
  81131c:	1a86703a 	and	r3,r3,r10
  811320:	183fdf1e 	bne	r3,zero,8112a0 <__alt_data_end+0xff8112a0>
  811324:	10bfff04 	addi	r2,r2,-4
  811328:	21000104 	addi	r4,r4,4
  81132c:	48bff636 	bltu	r9,r2,811308 <__alt_data_end+0xff811308>
  811330:	003fdb06 	br	8112a0 <__alt_data_end+0xff8112a0>
  811334:	3005883a 	mov	r2,r6
  811338:	003fd706 	br	811298 <__alt_data_end+0xff811298>

0081133c <memcpy>:
  81133c:	deffff04 	addi	sp,sp,-4
  811340:	dc000015 	stw	r16,0(sp)
  811344:	00c003c4 	movi	r3,15
  811348:	2005883a 	mov	r2,r4
  81134c:	1980432e 	bgeu	r3,r6,81145c <memcpy+0x120>
  811350:	2146b03a 	or	r3,r4,r5
  811354:	18c000cc 	andi	r3,r3,3
  811358:	1800421e 	bne	r3,zero,811464 <memcpy+0x128>
  81135c:	343ffc04 	addi	r16,r6,-16
  811360:	8020d13a 	srli	r16,r16,4
  811364:	28c00104 	addi	r3,r5,4
  811368:	23400104 	addi	r13,r4,4
  81136c:	801e913a 	slli	r15,r16,4
  811370:	2b000204 	addi	r12,r5,8
  811374:	22c00204 	addi	r11,r4,8
  811378:	7bc00504 	addi	r15,r15,20
  81137c:	2a800304 	addi	r10,r5,12
  811380:	22400304 	addi	r9,r4,12
  811384:	2bdf883a 	add	r15,r5,r15
  811388:	2811883a 	mov	r8,r5
  81138c:	200f883a 	mov	r7,r4
  811390:	41000017 	ldw	r4,0(r8)
  811394:	39c00404 	addi	r7,r7,16
  811398:	18c00404 	addi	r3,r3,16
  81139c:	393ffc15 	stw	r4,-16(r7)
  8113a0:	1bbffc17 	ldw	r14,-16(r3)
  8113a4:	6b400404 	addi	r13,r13,16
  8113a8:	5ac00404 	addi	r11,r11,16
  8113ac:	6bbffc15 	stw	r14,-16(r13)
  8113b0:	63800017 	ldw	r14,0(r12)
  8113b4:	4a400404 	addi	r9,r9,16
  8113b8:	42000404 	addi	r8,r8,16
  8113bc:	5bbffc15 	stw	r14,-16(r11)
  8113c0:	53800017 	ldw	r14,0(r10)
  8113c4:	63000404 	addi	r12,r12,16
  8113c8:	52800404 	addi	r10,r10,16
  8113cc:	4bbffc15 	stw	r14,-16(r9)
  8113d0:	1bffef1e 	bne	r3,r15,811390 <__alt_data_end+0xff811390>
  8113d4:	81c00044 	addi	r7,r16,1
  8113d8:	380e913a 	slli	r7,r7,4
  8113dc:	310003cc 	andi	r4,r6,15
  8113e0:	02c000c4 	movi	r11,3
  8113e4:	11c7883a 	add	r3,r2,r7
  8113e8:	29cb883a 	add	r5,r5,r7
  8113ec:	59001f2e 	bgeu	r11,r4,81146c <memcpy+0x130>
  8113f0:	1813883a 	mov	r9,r3
  8113f4:	2811883a 	mov	r8,r5
  8113f8:	200f883a 	mov	r7,r4
  8113fc:	42800017 	ldw	r10,0(r8)
  811400:	4a400104 	addi	r9,r9,4
  811404:	39ffff04 	addi	r7,r7,-4
  811408:	4abfff15 	stw	r10,-4(r9)
  81140c:	42000104 	addi	r8,r8,4
  811410:	59fffa36 	bltu	r11,r7,8113fc <__alt_data_end+0xff8113fc>
  811414:	213fff04 	addi	r4,r4,-4
  811418:	2008d0ba 	srli	r4,r4,2
  81141c:	318000cc 	andi	r6,r6,3
  811420:	21000044 	addi	r4,r4,1
  811424:	2109883a 	add	r4,r4,r4
  811428:	2109883a 	add	r4,r4,r4
  81142c:	1907883a 	add	r3,r3,r4
  811430:	290b883a 	add	r5,r5,r4
  811434:	30000626 	beq	r6,zero,811450 <memcpy+0x114>
  811438:	198d883a 	add	r6,r3,r6
  81143c:	29c00003 	ldbu	r7,0(r5)
  811440:	18c00044 	addi	r3,r3,1
  811444:	29400044 	addi	r5,r5,1
  811448:	19ffffc5 	stb	r7,-1(r3)
  81144c:	19bffb1e 	bne	r3,r6,81143c <__alt_data_end+0xff81143c>
  811450:	dc000017 	ldw	r16,0(sp)
  811454:	dec00104 	addi	sp,sp,4
  811458:	f800283a 	ret
  81145c:	2007883a 	mov	r3,r4
  811460:	003ff406 	br	811434 <__alt_data_end+0xff811434>
  811464:	2007883a 	mov	r3,r4
  811468:	003ff306 	br	811438 <__alt_data_end+0xff811438>
  81146c:	200d883a 	mov	r6,r4
  811470:	003ff006 	br	811434 <__alt_data_end+0xff811434>

00811474 <memmove>:
  811474:	2005883a 	mov	r2,r4
  811478:	29000b2e 	bgeu	r5,r4,8114a8 <memmove+0x34>
  81147c:	298f883a 	add	r7,r5,r6
  811480:	21c0092e 	bgeu	r4,r7,8114a8 <memmove+0x34>
  811484:	2187883a 	add	r3,r4,r6
  811488:	198bc83a 	sub	r5,r3,r6
  81148c:	30004b26 	beq	r6,zero,8115bc <memmove+0x148>
  811490:	39ffffc4 	addi	r7,r7,-1
  811494:	39000003 	ldbu	r4,0(r7)
  811498:	18ffffc4 	addi	r3,r3,-1
  81149c:	19000005 	stb	r4,0(r3)
  8114a0:	197ffb1e 	bne	r3,r5,811490 <__alt_data_end+0xff811490>
  8114a4:	f800283a 	ret
  8114a8:	00c003c4 	movi	r3,15
  8114ac:	1980412e 	bgeu	r3,r6,8115b4 <memmove+0x140>
  8114b0:	1146b03a 	or	r3,r2,r5
  8114b4:	18c000cc 	andi	r3,r3,3
  8114b8:	1800411e 	bne	r3,zero,8115c0 <memmove+0x14c>
  8114bc:	33fffc04 	addi	r15,r6,-16
  8114c0:	781ed13a 	srli	r15,r15,4
  8114c4:	28c00104 	addi	r3,r5,4
  8114c8:	13400104 	addi	r13,r2,4
  8114cc:	781c913a 	slli	r14,r15,4
  8114d0:	2b000204 	addi	r12,r5,8
  8114d4:	12c00204 	addi	r11,r2,8
  8114d8:	73800504 	addi	r14,r14,20
  8114dc:	2a800304 	addi	r10,r5,12
  8114e0:	12400304 	addi	r9,r2,12
  8114e4:	2b9d883a 	add	r14,r5,r14
  8114e8:	2811883a 	mov	r8,r5
  8114ec:	100f883a 	mov	r7,r2
  8114f0:	41000017 	ldw	r4,0(r8)
  8114f4:	39c00404 	addi	r7,r7,16
  8114f8:	18c00404 	addi	r3,r3,16
  8114fc:	393ffc15 	stw	r4,-16(r7)
  811500:	193ffc17 	ldw	r4,-16(r3)
  811504:	6b400404 	addi	r13,r13,16
  811508:	5ac00404 	addi	r11,r11,16
  81150c:	693ffc15 	stw	r4,-16(r13)
  811510:	61000017 	ldw	r4,0(r12)
  811514:	4a400404 	addi	r9,r9,16
  811518:	42000404 	addi	r8,r8,16
  81151c:	593ffc15 	stw	r4,-16(r11)
  811520:	51000017 	ldw	r4,0(r10)
  811524:	63000404 	addi	r12,r12,16
  811528:	52800404 	addi	r10,r10,16
  81152c:	493ffc15 	stw	r4,-16(r9)
  811530:	1bbfef1e 	bne	r3,r14,8114f0 <__alt_data_end+0xff8114f0>
  811534:	79000044 	addi	r4,r15,1
  811538:	2008913a 	slli	r4,r4,4
  81153c:	328003cc 	andi	r10,r6,15
  811540:	02c000c4 	movi	r11,3
  811544:	1107883a 	add	r3,r2,r4
  811548:	290b883a 	add	r5,r5,r4
  81154c:	5a801e2e 	bgeu	r11,r10,8115c8 <memmove+0x154>
  811550:	1813883a 	mov	r9,r3
  811554:	2811883a 	mov	r8,r5
  811558:	500f883a 	mov	r7,r10
  81155c:	41000017 	ldw	r4,0(r8)
  811560:	4a400104 	addi	r9,r9,4
  811564:	39ffff04 	addi	r7,r7,-4
  811568:	493fff15 	stw	r4,-4(r9)
  81156c:	42000104 	addi	r8,r8,4
  811570:	59fffa36 	bltu	r11,r7,81155c <__alt_data_end+0xff81155c>
  811574:	513fff04 	addi	r4,r10,-4
  811578:	2008d0ba 	srli	r4,r4,2
  81157c:	318000cc 	andi	r6,r6,3
  811580:	21000044 	addi	r4,r4,1
  811584:	2109883a 	add	r4,r4,r4
  811588:	2109883a 	add	r4,r4,r4
  81158c:	1907883a 	add	r3,r3,r4
  811590:	290b883a 	add	r5,r5,r4
  811594:	30000926 	beq	r6,zero,8115bc <memmove+0x148>
  811598:	198d883a 	add	r6,r3,r6
  81159c:	29c00003 	ldbu	r7,0(r5)
  8115a0:	18c00044 	addi	r3,r3,1
  8115a4:	29400044 	addi	r5,r5,1
  8115a8:	19ffffc5 	stb	r7,-1(r3)
  8115ac:	19bffb1e 	bne	r3,r6,81159c <__alt_data_end+0xff81159c>
  8115b0:	f800283a 	ret
  8115b4:	1007883a 	mov	r3,r2
  8115b8:	003ff606 	br	811594 <__alt_data_end+0xff811594>
  8115bc:	f800283a 	ret
  8115c0:	1007883a 	mov	r3,r2
  8115c4:	003ff406 	br	811598 <__alt_data_end+0xff811598>
  8115c8:	500d883a 	mov	r6,r10
  8115cc:	003ff106 	br	811594 <__alt_data_end+0xff811594>

008115d0 <_Balloc>:
  8115d0:	20801317 	ldw	r2,76(r4)
  8115d4:	defffc04 	addi	sp,sp,-16
  8115d8:	dc400115 	stw	r17,4(sp)
  8115dc:	dc000015 	stw	r16,0(sp)
  8115e0:	dfc00315 	stw	ra,12(sp)
  8115e4:	dc800215 	stw	r18,8(sp)
  8115e8:	2023883a 	mov	r17,r4
  8115ec:	2821883a 	mov	r16,r5
  8115f0:	10000f26 	beq	r2,zero,811630 <_Balloc+0x60>
  8115f4:	8407883a 	add	r3,r16,r16
  8115f8:	18c7883a 	add	r3,r3,r3
  8115fc:	10c7883a 	add	r3,r2,r3
  811600:	18800017 	ldw	r2,0(r3)
  811604:	10001126 	beq	r2,zero,81164c <_Balloc+0x7c>
  811608:	11000017 	ldw	r4,0(r2)
  81160c:	19000015 	stw	r4,0(r3)
  811610:	10000415 	stw	zero,16(r2)
  811614:	10000315 	stw	zero,12(r2)
  811618:	dfc00317 	ldw	ra,12(sp)
  81161c:	dc800217 	ldw	r18,8(sp)
  811620:	dc400117 	ldw	r17,4(sp)
  811624:	dc000017 	ldw	r16,0(sp)
  811628:	dec00404 	addi	sp,sp,16
  81162c:	f800283a 	ret
  811630:	01400104 	movi	r5,4
  811634:	01800844 	movi	r6,33
  811638:	08143d00 	call	8143d0 <_calloc_r>
  81163c:	88801315 	stw	r2,76(r17)
  811640:	103fec1e 	bne	r2,zero,8115f4 <__alt_data_end+0xff8115f4>
  811644:	0005883a 	mov	r2,zero
  811648:	003ff306 	br	811618 <__alt_data_end+0xff811618>
  81164c:	01400044 	movi	r5,1
  811650:	2c24983a 	sll	r18,r5,r16
  811654:	8809883a 	mov	r4,r17
  811658:	91800144 	addi	r6,r18,5
  81165c:	318d883a 	add	r6,r6,r6
  811660:	318d883a 	add	r6,r6,r6
  811664:	08143d00 	call	8143d0 <_calloc_r>
  811668:	103ff626 	beq	r2,zero,811644 <__alt_data_end+0xff811644>
  81166c:	14000115 	stw	r16,4(r2)
  811670:	14800215 	stw	r18,8(r2)
  811674:	003fe606 	br	811610 <__alt_data_end+0xff811610>

00811678 <_Bfree>:
  811678:	28000826 	beq	r5,zero,81169c <_Bfree+0x24>
  81167c:	28c00117 	ldw	r3,4(r5)
  811680:	20801317 	ldw	r2,76(r4)
  811684:	18c7883a 	add	r3,r3,r3
  811688:	18c7883a 	add	r3,r3,r3
  81168c:	10c5883a 	add	r2,r2,r3
  811690:	10c00017 	ldw	r3,0(r2)
  811694:	28c00015 	stw	r3,0(r5)
  811698:	11400015 	stw	r5,0(r2)
  81169c:	f800283a 	ret

008116a0 <__multadd>:
  8116a0:	defffa04 	addi	sp,sp,-24
  8116a4:	dc000115 	stw	r16,4(sp)
  8116a8:	2c000417 	ldw	r16,16(r5)
  8116ac:	dc800315 	stw	r18,12(sp)
  8116b0:	dc400215 	stw	r17,8(sp)
  8116b4:	dfc00515 	stw	ra,20(sp)
  8116b8:	dcc00415 	stw	r19,16(sp)
  8116bc:	2823883a 	mov	r17,r5
  8116c0:	2025883a 	mov	r18,r4
  8116c4:	2a400504 	addi	r9,r5,20
  8116c8:	0015883a 	mov	r10,zero
  8116cc:	4a000017 	ldw	r8,0(r9)
  8116d0:	4a400104 	addi	r9,r9,4
  8116d4:	52800044 	addi	r10,r10,1
  8116d8:	40ffffcc 	andi	r3,r8,65535
  8116dc:	1987383a 	mul	r3,r3,r6
  8116e0:	4010d43a 	srli	r8,r8,16
  8116e4:	19cf883a 	add	r7,r3,r7
  8116e8:	4191383a 	mul	r8,r8,r6
  8116ec:	3816d43a 	srli	r11,r7,16
  8116f0:	38ffffcc 	andi	r3,r7,65535
  8116f4:	5a0f883a 	add	r7,r11,r8
  8116f8:	3810943a 	slli	r8,r7,16
  8116fc:	380ed43a 	srli	r7,r7,16
  811700:	40c7883a 	add	r3,r8,r3
  811704:	48ffff15 	stw	r3,-4(r9)
  811708:	543ff016 	blt	r10,r16,8116cc <__alt_data_end+0xff8116cc>
  81170c:	38000926 	beq	r7,zero,811734 <__multadd+0x94>
  811710:	88800217 	ldw	r2,8(r17)
  811714:	80800f0e 	bge	r16,r2,811754 <__multadd+0xb4>
  811718:	80800144 	addi	r2,r16,5
  81171c:	1085883a 	add	r2,r2,r2
  811720:	1085883a 	add	r2,r2,r2
  811724:	8885883a 	add	r2,r17,r2
  811728:	11c00015 	stw	r7,0(r2)
  81172c:	84000044 	addi	r16,r16,1
  811730:	8c000415 	stw	r16,16(r17)
  811734:	8805883a 	mov	r2,r17
  811738:	dfc00517 	ldw	ra,20(sp)
  81173c:	dcc00417 	ldw	r19,16(sp)
  811740:	dc800317 	ldw	r18,12(sp)
  811744:	dc400217 	ldw	r17,8(sp)
  811748:	dc000117 	ldw	r16,4(sp)
  81174c:	dec00604 	addi	sp,sp,24
  811750:	f800283a 	ret
  811754:	89400117 	ldw	r5,4(r17)
  811758:	9009883a 	mov	r4,r18
  81175c:	d9c00015 	stw	r7,0(sp)
  811760:	29400044 	addi	r5,r5,1
  811764:	08115d00 	call	8115d0 <_Balloc>
  811768:	89800417 	ldw	r6,16(r17)
  81176c:	11000304 	addi	r4,r2,12
  811770:	89400304 	addi	r5,r17,12
  811774:	31800084 	addi	r6,r6,2
  811778:	318d883a 	add	r6,r6,r6
  81177c:	318d883a 	add	r6,r6,r6
  811780:	1027883a 	mov	r19,r2
  811784:	081133c0 	call	81133c <memcpy>
  811788:	d9c00017 	ldw	r7,0(sp)
  81178c:	88000a26 	beq	r17,zero,8117b8 <__multadd+0x118>
  811790:	89000117 	ldw	r4,4(r17)
  811794:	90c01317 	ldw	r3,76(r18)
  811798:	2109883a 	add	r4,r4,r4
  81179c:	2109883a 	add	r4,r4,r4
  8117a0:	1907883a 	add	r3,r3,r4
  8117a4:	18800017 	ldw	r2,0(r3)
  8117a8:	88800015 	stw	r2,0(r17)
  8117ac:	1c400015 	stw	r17,0(r3)
  8117b0:	9823883a 	mov	r17,r19
  8117b4:	003fd806 	br	811718 <__alt_data_end+0xff811718>
  8117b8:	9823883a 	mov	r17,r19
  8117bc:	003fd606 	br	811718 <__alt_data_end+0xff811718>

008117c0 <__s2b>:
  8117c0:	defff904 	addi	sp,sp,-28
  8117c4:	dc400115 	stw	r17,4(sp)
  8117c8:	dc000015 	stw	r16,0(sp)
  8117cc:	2023883a 	mov	r17,r4
  8117d0:	2821883a 	mov	r16,r5
  8117d4:	39000204 	addi	r4,r7,8
  8117d8:	01400244 	movi	r5,9
  8117dc:	dcc00315 	stw	r19,12(sp)
  8117e0:	dc800215 	stw	r18,8(sp)
  8117e4:	dfc00615 	stw	ra,24(sp)
  8117e8:	dd400515 	stw	r21,20(sp)
  8117ec:	dd000415 	stw	r20,16(sp)
  8117f0:	3825883a 	mov	r18,r7
  8117f4:	3027883a 	mov	r19,r6
  8117f8:	080a8d00 	call	80a8d0 <__divsi3>
  8117fc:	00c00044 	movi	r3,1
  811800:	000b883a 	mov	r5,zero
  811804:	1880030e 	bge	r3,r2,811814 <__s2b+0x54>
  811808:	18c7883a 	add	r3,r3,r3
  81180c:	29400044 	addi	r5,r5,1
  811810:	18bffd16 	blt	r3,r2,811808 <__alt_data_end+0xff811808>
  811814:	8809883a 	mov	r4,r17
  811818:	08115d00 	call	8115d0 <_Balloc>
  81181c:	d8c00717 	ldw	r3,28(sp)
  811820:	10c00515 	stw	r3,20(r2)
  811824:	00c00044 	movi	r3,1
  811828:	10c00415 	stw	r3,16(r2)
  81182c:	00c00244 	movi	r3,9
  811830:	1cc0210e 	bge	r3,r19,8118b8 <__s2b+0xf8>
  811834:	80eb883a 	add	r21,r16,r3
  811838:	a829883a 	mov	r20,r21
  81183c:	84e1883a 	add	r16,r16,r19
  811840:	a1c00007 	ldb	r7,0(r20)
  811844:	8809883a 	mov	r4,r17
  811848:	a5000044 	addi	r20,r20,1
  81184c:	100b883a 	mov	r5,r2
  811850:	01800284 	movi	r6,10
  811854:	39fff404 	addi	r7,r7,-48
  811858:	08116a00 	call	8116a0 <__multadd>
  81185c:	a43ff81e 	bne	r20,r16,811840 <__alt_data_end+0xff811840>
  811860:	ace1883a 	add	r16,r21,r19
  811864:	843ffe04 	addi	r16,r16,-8
  811868:	9c800a0e 	bge	r19,r18,811894 <__s2b+0xd4>
  81186c:	94e5c83a 	sub	r18,r18,r19
  811870:	84a5883a 	add	r18,r16,r18
  811874:	81c00007 	ldb	r7,0(r16)
  811878:	8809883a 	mov	r4,r17
  81187c:	84000044 	addi	r16,r16,1
  811880:	100b883a 	mov	r5,r2
  811884:	01800284 	movi	r6,10
  811888:	39fff404 	addi	r7,r7,-48
  81188c:	08116a00 	call	8116a0 <__multadd>
  811890:	84bff81e 	bne	r16,r18,811874 <__alt_data_end+0xff811874>
  811894:	dfc00617 	ldw	ra,24(sp)
  811898:	dd400517 	ldw	r21,20(sp)
  81189c:	dd000417 	ldw	r20,16(sp)
  8118a0:	dcc00317 	ldw	r19,12(sp)
  8118a4:	dc800217 	ldw	r18,8(sp)
  8118a8:	dc400117 	ldw	r17,4(sp)
  8118ac:	dc000017 	ldw	r16,0(sp)
  8118b0:	dec00704 	addi	sp,sp,28
  8118b4:	f800283a 	ret
  8118b8:	84000284 	addi	r16,r16,10
  8118bc:	1827883a 	mov	r19,r3
  8118c0:	003fe906 	br	811868 <__alt_data_end+0xff811868>

008118c4 <__hi0bits>:
  8118c4:	20bfffec 	andhi	r2,r4,65535
  8118c8:	1000141e 	bne	r2,zero,81191c <__hi0bits+0x58>
  8118cc:	2008943a 	slli	r4,r4,16
  8118d0:	00800404 	movi	r2,16
  8118d4:	20ffc02c 	andhi	r3,r4,65280
  8118d8:	1800021e 	bne	r3,zero,8118e4 <__hi0bits+0x20>
  8118dc:	2008923a 	slli	r4,r4,8
  8118e0:	10800204 	addi	r2,r2,8
  8118e4:	20fc002c 	andhi	r3,r4,61440
  8118e8:	1800021e 	bne	r3,zero,8118f4 <__hi0bits+0x30>
  8118ec:	2008913a 	slli	r4,r4,4
  8118f0:	10800104 	addi	r2,r2,4
  8118f4:	20f0002c 	andhi	r3,r4,49152
  8118f8:	1800031e 	bne	r3,zero,811908 <__hi0bits+0x44>
  8118fc:	2109883a 	add	r4,r4,r4
  811900:	10800084 	addi	r2,r2,2
  811904:	2109883a 	add	r4,r4,r4
  811908:	20000316 	blt	r4,zero,811918 <__hi0bits+0x54>
  81190c:	2110002c 	andhi	r4,r4,16384
  811910:	2000041e 	bne	r4,zero,811924 <__hi0bits+0x60>
  811914:	00800804 	movi	r2,32
  811918:	f800283a 	ret
  81191c:	0005883a 	mov	r2,zero
  811920:	003fec06 	br	8118d4 <__alt_data_end+0xff8118d4>
  811924:	10800044 	addi	r2,r2,1
  811928:	f800283a 	ret

0081192c <__lo0bits>:
  81192c:	20c00017 	ldw	r3,0(r4)
  811930:	188001cc 	andi	r2,r3,7
  811934:	10000826 	beq	r2,zero,811958 <__lo0bits+0x2c>
  811938:	1880004c 	andi	r2,r3,1
  81193c:	1000211e 	bne	r2,zero,8119c4 <__lo0bits+0x98>
  811940:	1880008c 	andi	r2,r3,2
  811944:	1000211e 	bne	r2,zero,8119cc <__lo0bits+0xa0>
  811948:	1806d0ba 	srli	r3,r3,2
  81194c:	00800084 	movi	r2,2
  811950:	20c00015 	stw	r3,0(r4)
  811954:	f800283a 	ret
  811958:	18bfffcc 	andi	r2,r3,65535
  81195c:	10001326 	beq	r2,zero,8119ac <__lo0bits+0x80>
  811960:	0005883a 	mov	r2,zero
  811964:	19403fcc 	andi	r5,r3,255
  811968:	2800021e 	bne	r5,zero,811974 <__lo0bits+0x48>
  81196c:	1806d23a 	srli	r3,r3,8
  811970:	10800204 	addi	r2,r2,8
  811974:	194003cc 	andi	r5,r3,15
  811978:	2800021e 	bne	r5,zero,811984 <__lo0bits+0x58>
  81197c:	1806d13a 	srli	r3,r3,4
  811980:	10800104 	addi	r2,r2,4
  811984:	194000cc 	andi	r5,r3,3
  811988:	2800021e 	bne	r5,zero,811994 <__lo0bits+0x68>
  81198c:	1806d0ba 	srli	r3,r3,2
  811990:	10800084 	addi	r2,r2,2
  811994:	1940004c 	andi	r5,r3,1
  811998:	2800081e 	bne	r5,zero,8119bc <__lo0bits+0x90>
  81199c:	1806d07a 	srli	r3,r3,1
  8119a0:	1800051e 	bne	r3,zero,8119b8 <__lo0bits+0x8c>
  8119a4:	00800804 	movi	r2,32
  8119a8:	f800283a 	ret
  8119ac:	1806d43a 	srli	r3,r3,16
  8119b0:	00800404 	movi	r2,16
  8119b4:	003feb06 	br	811964 <__alt_data_end+0xff811964>
  8119b8:	10800044 	addi	r2,r2,1
  8119bc:	20c00015 	stw	r3,0(r4)
  8119c0:	f800283a 	ret
  8119c4:	0005883a 	mov	r2,zero
  8119c8:	f800283a 	ret
  8119cc:	1806d07a 	srli	r3,r3,1
  8119d0:	00800044 	movi	r2,1
  8119d4:	20c00015 	stw	r3,0(r4)
  8119d8:	f800283a 	ret

008119dc <__i2b>:
  8119dc:	defffd04 	addi	sp,sp,-12
  8119e0:	dc000015 	stw	r16,0(sp)
  8119e4:	04000044 	movi	r16,1
  8119e8:	dc400115 	stw	r17,4(sp)
  8119ec:	2823883a 	mov	r17,r5
  8119f0:	800b883a 	mov	r5,r16
  8119f4:	dfc00215 	stw	ra,8(sp)
  8119f8:	08115d00 	call	8115d0 <_Balloc>
  8119fc:	14400515 	stw	r17,20(r2)
  811a00:	14000415 	stw	r16,16(r2)
  811a04:	dfc00217 	ldw	ra,8(sp)
  811a08:	dc400117 	ldw	r17,4(sp)
  811a0c:	dc000017 	ldw	r16,0(sp)
  811a10:	dec00304 	addi	sp,sp,12
  811a14:	f800283a 	ret

00811a18 <__multiply>:
  811a18:	defffa04 	addi	sp,sp,-24
  811a1c:	dcc00315 	stw	r19,12(sp)
  811a20:	dc800215 	stw	r18,8(sp)
  811a24:	2cc00417 	ldw	r19,16(r5)
  811a28:	34800417 	ldw	r18,16(r6)
  811a2c:	dd000415 	stw	r20,16(sp)
  811a30:	dc400115 	stw	r17,4(sp)
  811a34:	dfc00515 	stw	ra,20(sp)
  811a38:	dc000015 	stw	r16,0(sp)
  811a3c:	2829883a 	mov	r20,r5
  811a40:	3023883a 	mov	r17,r6
  811a44:	9c807016 	blt	r19,r18,811c08 <__multiply+0x1f0>
  811a48:	9005883a 	mov	r2,r18
  811a4c:	9825883a 	mov	r18,r19
  811a50:	1027883a 	mov	r19,r2
  811a54:	a0800217 	ldw	r2,8(r20)
  811a58:	94e1883a 	add	r16,r18,r19
  811a5c:	a1400117 	ldw	r5,4(r20)
  811a60:	1400010e 	bge	r2,r16,811a68 <__multiply+0x50>
  811a64:	29400044 	addi	r5,r5,1
  811a68:	08115d00 	call	8115d0 <_Balloc>
  811a6c:	8417883a 	add	r11,r16,r16
  811a70:	13000504 	addi	r12,r2,20
  811a74:	5ad7883a 	add	r11,r11,r11
  811a78:	62d7883a 	add	r11,r12,r11
  811a7c:	6007883a 	mov	r3,r12
  811a80:	62c0032e 	bgeu	r12,r11,811a90 <__multiply+0x78>
  811a84:	18000015 	stw	zero,0(r3)
  811a88:	18c00104 	addi	r3,r3,4
  811a8c:	1afffd36 	bltu	r3,r11,811a84 <__alt_data_end+0xff811a84>
  811a90:	9ce7883a 	add	r19,r19,r19
  811a94:	94a5883a 	add	r18,r18,r18
  811a98:	89800504 	addi	r6,r17,20
  811a9c:	9ce7883a 	add	r19,r19,r19
  811aa0:	a3800504 	addi	r14,r20,20
  811aa4:	94a5883a 	add	r18,r18,r18
  811aa8:	34db883a 	add	r13,r6,r19
  811aac:	7495883a 	add	r10,r14,r18
  811ab0:	3340422e 	bgeu	r6,r13,811bbc <__multiply+0x1a4>
  811ab4:	34400017 	ldw	r17,0(r6)
  811ab8:	8cbfffcc 	andi	r18,r17,65535
  811abc:	90001b26 	beq	r18,zero,811b2c <__multiply+0x114>
  811ac0:	6013883a 	mov	r9,r12
  811ac4:	7023883a 	mov	r17,r14
  811ac8:	0011883a 	mov	r8,zero
  811acc:	88c00017 	ldw	r3,0(r17)
  811ad0:	4bc00017 	ldw	r15,0(r9)
  811ad4:	8c400104 	addi	r17,r17,4
  811ad8:	19ffffcc 	andi	r7,r3,65535
  811adc:	3c8f383a 	mul	r7,r7,r18
  811ae0:	1808d43a 	srli	r4,r3,16
  811ae4:	797fffcc 	andi	r5,r15,65535
  811ae8:	29cb883a 	add	r5,r5,r7
  811aec:	2a0b883a 	add	r5,r5,r8
  811af0:	2489383a 	mul	r4,r4,r18
  811af4:	7806d43a 	srli	r3,r15,16
  811af8:	2810d43a 	srli	r8,r5,16
  811afc:	297fffcc 	andi	r5,r5,65535
  811b00:	1907883a 	add	r3,r3,r4
  811b04:	1a07883a 	add	r3,r3,r8
  811b08:	1808943a 	slli	r4,r3,16
  811b0c:	480f883a 	mov	r7,r9
  811b10:	1810d43a 	srli	r8,r3,16
  811b14:	214ab03a 	or	r5,r4,r5
  811b18:	49400015 	stw	r5,0(r9)
  811b1c:	4a400104 	addi	r9,r9,4
  811b20:	8abfea36 	bltu	r17,r10,811acc <__alt_data_end+0xff811acc>
  811b24:	3a000115 	stw	r8,4(r7)
  811b28:	34400017 	ldw	r17,0(r6)
  811b2c:	8822d43a 	srli	r17,r17,16
  811b30:	88001f26 	beq	r17,zero,811bb0 <__multiply+0x198>
  811b34:	60c00017 	ldw	r3,0(r12)
  811b38:	7013883a 	mov	r9,r14
  811b3c:	601f883a 	mov	r15,r12
  811b40:	1811883a 	mov	r8,r3
  811b44:	6027883a 	mov	r19,r12
  811b48:	000f883a 	mov	r7,zero
  811b4c:	00000106 	br	811b54 <__multiply+0x13c>
  811b50:	9027883a 	mov	r19,r18
  811b54:	4940000b 	ldhu	r5,0(r9)
  811b58:	4010d43a 	srli	r8,r8,16
  811b5c:	193fffcc 	andi	r4,r3,65535
  811b60:	2c4b383a 	mul	r5,r5,r17
  811b64:	7bc00104 	addi	r15,r15,4
  811b68:	4a400104 	addi	r9,r9,4
  811b6c:	2a0b883a 	add	r5,r5,r8
  811b70:	29cb883a 	add	r5,r5,r7
  811b74:	2806943a 	slli	r3,r5,16
  811b78:	9c800104 	addi	r18,r19,4
  811b7c:	280ad43a 	srli	r5,r5,16
  811b80:	1908b03a 	or	r4,r3,r4
  811b84:	793fff15 	stw	r4,-4(r15)
  811b88:	48ffff17 	ldw	r3,-4(r9)
  811b8c:	92000017 	ldw	r8,0(r18)
  811b90:	1806d43a 	srli	r3,r3,16
  811b94:	413fffcc 	andi	r4,r8,65535
  811b98:	1c47383a 	mul	r3,r3,r17
  811b9c:	1907883a 	add	r3,r3,r4
  811ba0:	1947883a 	add	r3,r3,r5
  811ba4:	180ed43a 	srli	r7,r3,16
  811ba8:	4abfe936 	bltu	r9,r10,811b50 <__alt_data_end+0xff811b50>
  811bac:	98c00115 	stw	r3,4(r19)
  811bb0:	31800104 	addi	r6,r6,4
  811bb4:	63000104 	addi	r12,r12,4
  811bb8:	337fbe36 	bltu	r6,r13,811ab4 <__alt_data_end+0xff811ab4>
  811bbc:	0400090e 	bge	zero,r16,811be4 <__multiply+0x1cc>
  811bc0:	58ffff17 	ldw	r3,-4(r11)
  811bc4:	5affff04 	addi	r11,r11,-4
  811bc8:	18000326 	beq	r3,zero,811bd8 <__multiply+0x1c0>
  811bcc:	00000506 	br	811be4 <__multiply+0x1cc>
  811bd0:	58c00017 	ldw	r3,0(r11)
  811bd4:	1800031e 	bne	r3,zero,811be4 <__multiply+0x1cc>
  811bd8:	843fffc4 	addi	r16,r16,-1
  811bdc:	5affff04 	addi	r11,r11,-4
  811be0:	803ffb1e 	bne	r16,zero,811bd0 <__alt_data_end+0xff811bd0>
  811be4:	14000415 	stw	r16,16(r2)
  811be8:	dfc00517 	ldw	ra,20(sp)
  811bec:	dd000417 	ldw	r20,16(sp)
  811bf0:	dcc00317 	ldw	r19,12(sp)
  811bf4:	dc800217 	ldw	r18,8(sp)
  811bf8:	dc400117 	ldw	r17,4(sp)
  811bfc:	dc000017 	ldw	r16,0(sp)
  811c00:	dec00604 	addi	sp,sp,24
  811c04:	f800283a 	ret
  811c08:	3029883a 	mov	r20,r6
  811c0c:	2823883a 	mov	r17,r5
  811c10:	003f9006 	br	811a54 <__alt_data_end+0xff811a54>

00811c14 <__pow5mult>:
  811c14:	defffa04 	addi	sp,sp,-24
  811c18:	dcc00315 	stw	r19,12(sp)
  811c1c:	dc800215 	stw	r18,8(sp)
  811c20:	dc000015 	stw	r16,0(sp)
  811c24:	dfc00515 	stw	ra,20(sp)
  811c28:	dd000415 	stw	r20,16(sp)
  811c2c:	dc400115 	stw	r17,4(sp)
  811c30:	308000cc 	andi	r2,r6,3
  811c34:	3021883a 	mov	r16,r6
  811c38:	2027883a 	mov	r19,r4
  811c3c:	2825883a 	mov	r18,r5
  811c40:	10002e1e 	bne	r2,zero,811cfc <__pow5mult+0xe8>
  811c44:	8021d0ba 	srai	r16,r16,2
  811c48:	80001a26 	beq	r16,zero,811cb4 <__pow5mult+0xa0>
  811c4c:	9c401217 	ldw	r17,72(r19)
  811c50:	8800061e 	bne	r17,zero,811c6c <__pow5mult+0x58>
  811c54:	00003406 	br	811d28 <__pow5mult+0x114>
  811c58:	8021d07a 	srai	r16,r16,1
  811c5c:	80001526 	beq	r16,zero,811cb4 <__pow5mult+0xa0>
  811c60:	88800017 	ldw	r2,0(r17)
  811c64:	10001c26 	beq	r2,zero,811cd8 <__pow5mult+0xc4>
  811c68:	1023883a 	mov	r17,r2
  811c6c:	80c0004c 	andi	r3,r16,1
  811c70:	183ff926 	beq	r3,zero,811c58 <__alt_data_end+0xff811c58>
  811c74:	900b883a 	mov	r5,r18
  811c78:	880d883a 	mov	r6,r17
  811c7c:	9809883a 	mov	r4,r19
  811c80:	0811a180 	call	811a18 <__multiply>
  811c84:	90001b26 	beq	r18,zero,811cf4 <__pow5mult+0xe0>
  811c88:	91c00117 	ldw	r7,4(r18)
  811c8c:	98c01317 	ldw	r3,76(r19)
  811c90:	8021d07a 	srai	r16,r16,1
  811c94:	39cf883a 	add	r7,r7,r7
  811c98:	39cf883a 	add	r7,r7,r7
  811c9c:	19c7883a 	add	r3,r3,r7
  811ca0:	19000017 	ldw	r4,0(r3)
  811ca4:	91000015 	stw	r4,0(r18)
  811ca8:	1c800015 	stw	r18,0(r3)
  811cac:	1025883a 	mov	r18,r2
  811cb0:	803feb1e 	bne	r16,zero,811c60 <__alt_data_end+0xff811c60>
  811cb4:	9005883a 	mov	r2,r18
  811cb8:	dfc00517 	ldw	ra,20(sp)
  811cbc:	dd000417 	ldw	r20,16(sp)
  811cc0:	dcc00317 	ldw	r19,12(sp)
  811cc4:	dc800217 	ldw	r18,8(sp)
  811cc8:	dc400117 	ldw	r17,4(sp)
  811ccc:	dc000017 	ldw	r16,0(sp)
  811cd0:	dec00604 	addi	sp,sp,24
  811cd4:	f800283a 	ret
  811cd8:	9809883a 	mov	r4,r19
  811cdc:	880b883a 	mov	r5,r17
  811ce0:	880d883a 	mov	r6,r17
  811ce4:	0811a180 	call	811a18 <__multiply>
  811ce8:	88800015 	stw	r2,0(r17)
  811cec:	10000015 	stw	zero,0(r2)
  811cf0:	003fdd06 	br	811c68 <__alt_data_end+0xff811c68>
  811cf4:	1025883a 	mov	r18,r2
  811cf8:	003fd706 	br	811c58 <__alt_data_end+0xff811c58>
  811cfc:	10bfffc4 	addi	r2,r2,-1
  811d00:	1085883a 	add	r2,r2,r2
  811d04:	00c020b4 	movhi	r3,130
  811d08:	18f33d04 	addi	r3,r3,-13068
  811d0c:	1085883a 	add	r2,r2,r2
  811d10:	1885883a 	add	r2,r3,r2
  811d14:	11800017 	ldw	r6,0(r2)
  811d18:	000f883a 	mov	r7,zero
  811d1c:	08116a00 	call	8116a0 <__multadd>
  811d20:	1025883a 	mov	r18,r2
  811d24:	003fc706 	br	811c44 <__alt_data_end+0xff811c44>
  811d28:	05000044 	movi	r20,1
  811d2c:	9809883a 	mov	r4,r19
  811d30:	a00b883a 	mov	r5,r20
  811d34:	08115d00 	call	8115d0 <_Balloc>
  811d38:	1023883a 	mov	r17,r2
  811d3c:	00809c44 	movi	r2,625
  811d40:	88800515 	stw	r2,20(r17)
  811d44:	8d000415 	stw	r20,16(r17)
  811d48:	9c401215 	stw	r17,72(r19)
  811d4c:	88000015 	stw	zero,0(r17)
  811d50:	003fc606 	br	811c6c <__alt_data_end+0xff811c6c>

00811d54 <__lshift>:
  811d54:	defff904 	addi	sp,sp,-28
  811d58:	dd000415 	stw	r20,16(sp)
  811d5c:	dcc00315 	stw	r19,12(sp)
  811d60:	3029d17a 	srai	r20,r6,5
  811d64:	2cc00417 	ldw	r19,16(r5)
  811d68:	28800217 	ldw	r2,8(r5)
  811d6c:	dd400515 	stw	r21,20(sp)
  811d70:	a4e7883a 	add	r19,r20,r19
  811d74:	dc800215 	stw	r18,8(sp)
  811d78:	dc400115 	stw	r17,4(sp)
  811d7c:	dc000015 	stw	r16,0(sp)
  811d80:	dfc00615 	stw	ra,24(sp)
  811d84:	9c000044 	addi	r16,r19,1
  811d88:	2823883a 	mov	r17,r5
  811d8c:	302b883a 	mov	r21,r6
  811d90:	2025883a 	mov	r18,r4
  811d94:	29400117 	ldw	r5,4(r5)
  811d98:	1400030e 	bge	r2,r16,811da8 <__lshift+0x54>
  811d9c:	1085883a 	add	r2,r2,r2
  811da0:	29400044 	addi	r5,r5,1
  811da4:	143ffd16 	blt	r2,r16,811d9c <__alt_data_end+0xff811d9c>
  811da8:	9009883a 	mov	r4,r18
  811dac:	08115d00 	call	8115d0 <_Balloc>
  811db0:	11c00504 	addi	r7,r2,20
  811db4:	0500090e 	bge	zero,r20,811ddc <__lshift+0x88>
  811db8:	3811883a 	mov	r8,r7
  811dbc:	0007883a 	mov	r3,zero
  811dc0:	40000015 	stw	zero,0(r8)
  811dc4:	18c00044 	addi	r3,r3,1
  811dc8:	42000104 	addi	r8,r8,4
  811dcc:	1d3ffc1e 	bne	r3,r20,811dc0 <__alt_data_end+0xff811dc0>
  811dd0:	18c7883a 	add	r3,r3,r3
  811dd4:	18c7883a 	add	r3,r3,r3
  811dd8:	38cf883a 	add	r7,r7,r3
  811ddc:	89000417 	ldw	r4,16(r17)
  811de0:	88c00504 	addi	r3,r17,20
  811de4:	a98007cc 	andi	r6,r21,31
  811de8:	2109883a 	add	r4,r4,r4
  811dec:	2109883a 	add	r4,r4,r4
  811df0:	1909883a 	add	r4,r3,r4
  811df4:	30002326 	beq	r6,zero,811e84 <__lshift+0x130>
  811df8:	01400804 	movi	r5,32
  811dfc:	298bc83a 	sub	r5,r5,r6
  811e00:	0013883a 	mov	r9,zero
  811e04:	1a000017 	ldw	r8,0(r3)
  811e08:	3815883a 	mov	r10,r7
  811e0c:	39c00104 	addi	r7,r7,4
  811e10:	4190983a 	sll	r8,r8,r6
  811e14:	18c00104 	addi	r3,r3,4
  811e18:	4a10b03a 	or	r8,r9,r8
  811e1c:	3a3fff15 	stw	r8,-4(r7)
  811e20:	1a3fff17 	ldw	r8,-4(r3)
  811e24:	4152d83a 	srl	r9,r8,r5
  811e28:	193ff636 	bltu	r3,r4,811e04 <__alt_data_end+0xff811e04>
  811e2c:	52400115 	stw	r9,4(r10)
  811e30:	48001a1e 	bne	r9,zero,811e9c <__lshift+0x148>
  811e34:	843fffc4 	addi	r16,r16,-1
  811e38:	14000415 	stw	r16,16(r2)
  811e3c:	88000826 	beq	r17,zero,811e60 <__lshift+0x10c>
  811e40:	89000117 	ldw	r4,4(r17)
  811e44:	90c01317 	ldw	r3,76(r18)
  811e48:	2109883a 	add	r4,r4,r4
  811e4c:	2109883a 	add	r4,r4,r4
  811e50:	1907883a 	add	r3,r3,r4
  811e54:	19000017 	ldw	r4,0(r3)
  811e58:	89000015 	stw	r4,0(r17)
  811e5c:	1c400015 	stw	r17,0(r3)
  811e60:	dfc00617 	ldw	ra,24(sp)
  811e64:	dd400517 	ldw	r21,20(sp)
  811e68:	dd000417 	ldw	r20,16(sp)
  811e6c:	dcc00317 	ldw	r19,12(sp)
  811e70:	dc800217 	ldw	r18,8(sp)
  811e74:	dc400117 	ldw	r17,4(sp)
  811e78:	dc000017 	ldw	r16,0(sp)
  811e7c:	dec00704 	addi	sp,sp,28
  811e80:	f800283a 	ret
  811e84:	19400017 	ldw	r5,0(r3)
  811e88:	39c00104 	addi	r7,r7,4
  811e8c:	18c00104 	addi	r3,r3,4
  811e90:	397fff15 	stw	r5,-4(r7)
  811e94:	193ffb36 	bltu	r3,r4,811e84 <__alt_data_end+0xff811e84>
  811e98:	003fe606 	br	811e34 <__alt_data_end+0xff811e34>
  811e9c:	9c000084 	addi	r16,r19,2
  811ea0:	003fe406 	br	811e34 <__alt_data_end+0xff811e34>

00811ea4 <__mcmp>:
  811ea4:	20800417 	ldw	r2,16(r4)
  811ea8:	28c00417 	ldw	r3,16(r5)
  811eac:	10c5c83a 	sub	r2,r2,r3
  811eb0:	1000111e 	bne	r2,zero,811ef8 <__mcmp+0x54>
  811eb4:	18c7883a 	add	r3,r3,r3
  811eb8:	18c7883a 	add	r3,r3,r3
  811ebc:	21000504 	addi	r4,r4,20
  811ec0:	29400504 	addi	r5,r5,20
  811ec4:	20c5883a 	add	r2,r4,r3
  811ec8:	28cb883a 	add	r5,r5,r3
  811ecc:	00000106 	br	811ed4 <__mcmp+0x30>
  811ed0:	20800a2e 	bgeu	r4,r2,811efc <__mcmp+0x58>
  811ed4:	10bfff04 	addi	r2,r2,-4
  811ed8:	297fff04 	addi	r5,r5,-4
  811edc:	11800017 	ldw	r6,0(r2)
  811ee0:	28c00017 	ldw	r3,0(r5)
  811ee4:	30fffa26 	beq	r6,r3,811ed0 <__alt_data_end+0xff811ed0>
  811ee8:	30c00236 	bltu	r6,r3,811ef4 <__mcmp+0x50>
  811eec:	00800044 	movi	r2,1
  811ef0:	f800283a 	ret
  811ef4:	00bfffc4 	movi	r2,-1
  811ef8:	f800283a 	ret
  811efc:	0005883a 	mov	r2,zero
  811f00:	f800283a 	ret

00811f04 <__mdiff>:
  811f04:	defffb04 	addi	sp,sp,-20
  811f08:	dc000015 	stw	r16,0(sp)
  811f0c:	2821883a 	mov	r16,r5
  811f10:	dcc00315 	stw	r19,12(sp)
  811f14:	300b883a 	mov	r5,r6
  811f18:	2027883a 	mov	r19,r4
  811f1c:	8009883a 	mov	r4,r16
  811f20:	dc800215 	stw	r18,8(sp)
  811f24:	dfc00415 	stw	ra,16(sp)
  811f28:	dc400115 	stw	r17,4(sp)
  811f2c:	3025883a 	mov	r18,r6
  811f30:	0811ea40 	call	811ea4 <__mcmp>
  811f34:	10005226 	beq	r2,zero,812080 <__mdiff+0x17c>
  811f38:	10004c16 	blt	r2,zero,81206c <__mdiff+0x168>
  811f3c:	0023883a 	mov	r17,zero
  811f40:	81400117 	ldw	r5,4(r16)
  811f44:	9809883a 	mov	r4,r19
  811f48:	08115d00 	call	8115d0 <_Balloc>
  811f4c:	83400417 	ldw	r13,16(r16)
  811f50:	93800417 	ldw	r14,16(r18)
  811f54:	81000504 	addi	r4,r16,20
  811f58:	6b59883a 	add	r12,r13,r13
  811f5c:	739d883a 	add	r14,r14,r14
  811f60:	6319883a 	add	r12,r12,r12
  811f64:	91800504 	addi	r6,r18,20
  811f68:	739d883a 	add	r14,r14,r14
  811f6c:	14400315 	stw	r17,12(r2)
  811f70:	2319883a 	add	r12,r4,r12
  811f74:	339d883a 	add	r14,r6,r14
  811f78:	12400504 	addi	r9,r2,20
  811f7c:	0007883a 	mov	r3,zero
  811f80:	22000017 	ldw	r8,0(r4)
  811f84:	32800017 	ldw	r10,0(r6)
  811f88:	4ac00104 	addi	r11,r9,4
  811f8c:	41ffffcc 	andi	r7,r8,65535
  811f90:	38c7883a 	add	r3,r7,r3
  811f94:	51ffffcc 	andi	r7,r10,65535
  811f98:	19cfc83a 	sub	r7,r3,r7
  811f9c:	4010d43a 	srli	r8,r8,16
  811fa0:	5014d43a 	srli	r10,r10,16
  811fa4:	3807d43a 	srai	r3,r7,16
  811fa8:	39ffffcc 	andi	r7,r7,65535
  811fac:	4291c83a 	sub	r8,r8,r10
  811fb0:	40c7883a 	add	r3,r8,r3
  811fb4:	1810943a 	slli	r8,r3,16
  811fb8:	31800104 	addi	r6,r6,4
  811fbc:	21000104 	addi	r4,r4,4
  811fc0:	41ceb03a 	or	r7,r8,r7
  811fc4:	49c00015 	stw	r7,0(r9)
  811fc8:	1807d43a 	srai	r3,r3,16
  811fcc:	580b883a 	mov	r5,r11
  811fd0:	5813883a 	mov	r9,r11
  811fd4:	33bfea36 	bltu	r6,r14,811f80 <__alt_data_end+0xff811f80>
  811fd8:	2011883a 	mov	r8,r4
  811fdc:	2300152e 	bgeu	r4,r12,812034 <__mdiff+0x130>
  811fe0:	21400017 	ldw	r5,0(r4)
  811fe4:	4a400104 	addi	r9,r9,4
  811fe8:	21000104 	addi	r4,r4,4
  811fec:	29ffffcc 	andi	r7,r5,65535
  811ff0:	38c7883a 	add	r3,r7,r3
  811ff4:	280ad43a 	srli	r5,r5,16
  811ff8:	180dd43a 	srai	r6,r3,16
  811ffc:	19ffffcc 	andi	r7,r3,65535
  812000:	3147883a 	add	r3,r6,r5
  812004:	180a943a 	slli	r5,r3,16
  812008:	1807d43a 	srai	r3,r3,16
  81200c:	29ceb03a 	or	r7,r5,r7
  812010:	49ffff15 	stw	r7,-4(r9)
  812014:	233ff236 	bltu	r4,r12,811fe0 <__alt_data_end+0xff811fe0>
  812018:	0206303a 	nor	r3,zero,r8
  81201c:	1b07883a 	add	r3,r3,r12
  812020:	1806d0ba 	srli	r3,r3,2
  812024:	18c00044 	addi	r3,r3,1
  812028:	18c7883a 	add	r3,r3,r3
  81202c:	18c7883a 	add	r3,r3,r3
  812030:	58cb883a 	add	r5,r11,r3
  812034:	28ffff04 	addi	r3,r5,-4
  812038:	3800041e 	bne	r7,zero,81204c <__mdiff+0x148>
  81203c:	18ffff04 	addi	r3,r3,-4
  812040:	19000017 	ldw	r4,0(r3)
  812044:	6b7fffc4 	addi	r13,r13,-1
  812048:	203ffc26 	beq	r4,zero,81203c <__alt_data_end+0xff81203c>
  81204c:	13400415 	stw	r13,16(r2)
  812050:	dfc00417 	ldw	ra,16(sp)
  812054:	dcc00317 	ldw	r19,12(sp)
  812058:	dc800217 	ldw	r18,8(sp)
  81205c:	dc400117 	ldw	r17,4(sp)
  812060:	dc000017 	ldw	r16,0(sp)
  812064:	dec00504 	addi	sp,sp,20
  812068:	f800283a 	ret
  81206c:	8005883a 	mov	r2,r16
  812070:	04400044 	movi	r17,1
  812074:	9021883a 	mov	r16,r18
  812078:	1025883a 	mov	r18,r2
  81207c:	003fb006 	br	811f40 <__alt_data_end+0xff811f40>
  812080:	9809883a 	mov	r4,r19
  812084:	000b883a 	mov	r5,zero
  812088:	08115d00 	call	8115d0 <_Balloc>
  81208c:	00c00044 	movi	r3,1
  812090:	10c00415 	stw	r3,16(r2)
  812094:	10000515 	stw	zero,20(r2)
  812098:	003fed06 	br	812050 <__alt_data_end+0xff812050>

0081209c <__ulp>:
  81209c:	295ffc2c 	andhi	r5,r5,32752
  8120a0:	00bf3034 	movhi	r2,64704
  8120a4:	2887883a 	add	r3,r5,r2
  8120a8:	00c0020e 	bge	zero,r3,8120b4 <__ulp+0x18>
  8120ac:	0005883a 	mov	r2,zero
  8120b0:	f800283a 	ret
  8120b4:	00c7c83a 	sub	r3,zero,r3
  8120b8:	180bd53a 	srai	r5,r3,20
  8120bc:	008004c4 	movi	r2,19
  8120c0:	11400a0e 	bge	r2,r5,8120ec <__ulp+0x50>
  8120c4:	00800c84 	movi	r2,50
  8120c8:	0007883a 	mov	r3,zero
  8120cc:	11400516 	blt	r2,r5,8120e4 <__ulp+0x48>
  8120d0:	00800cc4 	movi	r2,51
  8120d4:	114bc83a 	sub	r5,r2,r5
  8120d8:	00800044 	movi	r2,1
  8120dc:	1144983a 	sll	r2,r2,r5
  8120e0:	f800283a 	ret
  8120e4:	00800044 	movi	r2,1
  8120e8:	f800283a 	ret
  8120ec:	00800234 	movhi	r2,8
  8120f0:	1147d83a 	sra	r3,r2,r5
  8120f4:	0005883a 	mov	r2,zero
  8120f8:	f800283a 	ret

008120fc <__b2d>:
  8120fc:	defffa04 	addi	sp,sp,-24
  812100:	dc000015 	stw	r16,0(sp)
  812104:	24000417 	ldw	r16,16(r4)
  812108:	dc400115 	stw	r17,4(sp)
  81210c:	24400504 	addi	r17,r4,20
  812110:	8421883a 	add	r16,r16,r16
  812114:	8421883a 	add	r16,r16,r16
  812118:	8c21883a 	add	r16,r17,r16
  81211c:	dc800215 	stw	r18,8(sp)
  812120:	84bfff17 	ldw	r18,-4(r16)
  812124:	dd000415 	stw	r20,16(sp)
  812128:	dcc00315 	stw	r19,12(sp)
  81212c:	9009883a 	mov	r4,r18
  812130:	2829883a 	mov	r20,r5
  812134:	dfc00515 	stw	ra,20(sp)
  812138:	08118c40 	call	8118c4 <__hi0bits>
  81213c:	00c00804 	movi	r3,32
  812140:	1887c83a 	sub	r3,r3,r2
  812144:	a0c00015 	stw	r3,0(r20)
  812148:	00c00284 	movi	r3,10
  81214c:	84ffff04 	addi	r19,r16,-4
  812150:	18801216 	blt	r3,r2,81219c <__b2d+0xa0>
  812154:	014002c4 	movi	r5,11
  812158:	2889c83a 	sub	r4,r5,r2
  81215c:	9106d83a 	srl	r3,r18,r4
  812160:	18cffc34 	orhi	r3,r3,16368
  812164:	8cc0282e 	bgeu	r17,r19,812208 <__b2d+0x10c>
  812168:	817ffe17 	ldw	r5,-8(r16)
  81216c:	290ad83a 	srl	r5,r5,r4
  812170:	10800544 	addi	r2,r2,21
  812174:	9084983a 	sll	r2,r18,r2
  812178:	2884b03a 	or	r2,r5,r2
  81217c:	dfc00517 	ldw	ra,20(sp)
  812180:	dd000417 	ldw	r20,16(sp)
  812184:	dcc00317 	ldw	r19,12(sp)
  812188:	dc800217 	ldw	r18,8(sp)
  81218c:	dc400117 	ldw	r17,4(sp)
  812190:	dc000017 	ldw	r16,0(sp)
  812194:	dec00604 	addi	sp,sp,24
  812198:	f800283a 	ret
  81219c:	113ffd44 	addi	r4,r2,-11
  8121a0:	8cc00f2e 	bgeu	r17,r19,8121e0 <__b2d+0xe4>
  8121a4:	81bffe04 	addi	r6,r16,-8
  8121a8:	817ffe17 	ldw	r5,-8(r16)
  8121ac:	20001326 	beq	r4,zero,8121fc <__b2d+0x100>
  8121b0:	00c00ac4 	movi	r3,43
  8121b4:	1885c83a 	sub	r2,r3,r2
  8121b8:	2886d83a 	srl	r3,r5,r2
  8121bc:	9124983a 	sll	r18,r18,r4
  8121c0:	90e4b03a 	or	r18,r18,r3
  8121c4:	90cffc34 	orhi	r3,r18,16368
  8121c8:	8980112e 	bgeu	r17,r6,812210 <__b2d+0x114>
  8121cc:	81bffd17 	ldw	r6,-12(r16)
  8121d0:	308cd83a 	srl	r6,r6,r2
  8121d4:	2904983a 	sll	r2,r5,r4
  8121d8:	1184b03a 	or	r2,r2,r6
  8121dc:	003fe706 	br	81217c <__alt_data_end+0xff81217c>
  8121e0:	20000526 	beq	r4,zero,8121f8 <__b2d+0xfc>
  8121e4:	9124983a 	sll	r18,r18,r4
  8121e8:	000d883a 	mov	r6,zero
  8121ec:	000b883a 	mov	r5,zero
  8121f0:	90cffc34 	orhi	r3,r18,16368
  8121f4:	003ff706 	br	8121d4 <__alt_data_end+0xff8121d4>
  8121f8:	000b883a 	mov	r5,zero
  8121fc:	90cffc34 	orhi	r3,r18,16368
  812200:	2805883a 	mov	r2,r5
  812204:	003fdd06 	br	81217c <__alt_data_end+0xff81217c>
  812208:	000b883a 	mov	r5,zero
  81220c:	003fd806 	br	812170 <__alt_data_end+0xff812170>
  812210:	000d883a 	mov	r6,zero
  812214:	003fef06 	br	8121d4 <__alt_data_end+0xff8121d4>

00812218 <__d2b>:
  812218:	defff704 	addi	sp,sp,-36
  81221c:	dc000215 	stw	r16,8(sp)
  812220:	3021883a 	mov	r16,r6
  812224:	dc400315 	stw	r17,12(sp)
  812228:	8022907a 	slli	r17,r16,1
  81222c:	dd400715 	stw	r21,28(sp)
  812230:	282b883a 	mov	r21,r5
  812234:	01400044 	movi	r5,1
  812238:	dd000615 	stw	r20,24(sp)
  81223c:	dcc00515 	stw	r19,20(sp)
  812240:	dc800415 	stw	r18,16(sp)
  812244:	dfc00815 	stw	ra,32(sp)
  812248:	3829883a 	mov	r20,r7
  81224c:	dc800917 	ldw	r18,36(sp)
  812250:	8822d57a 	srli	r17,r17,21
  812254:	08115d00 	call	8115d0 <_Balloc>
  812258:	1027883a 	mov	r19,r2
  81225c:	00800434 	movhi	r2,16
  812260:	10bfffc4 	addi	r2,r2,-1
  812264:	808c703a 	and	r6,r16,r2
  812268:	88000126 	beq	r17,zero,812270 <__d2b+0x58>
  81226c:	31800434 	orhi	r6,r6,16
  812270:	d9800015 	stw	r6,0(sp)
  812274:	a8001f26 	beq	r21,zero,8122f4 <__d2b+0xdc>
  812278:	d9000104 	addi	r4,sp,4
  81227c:	dd400115 	stw	r21,4(sp)
  812280:	081192c0 	call	81192c <__lo0bits>
  812284:	d8c00017 	ldw	r3,0(sp)
  812288:	1000291e 	bne	r2,zero,812330 <__d2b+0x118>
  81228c:	d9000117 	ldw	r4,4(sp)
  812290:	99000515 	stw	r4,20(r19)
  812294:	1820c03a 	cmpne	r16,r3,zero
  812298:	84000044 	addi	r16,r16,1
  81229c:	98c00615 	stw	r3,24(r19)
  8122a0:	9c000415 	stw	r16,16(r19)
  8122a4:	88001b1e 	bne	r17,zero,812314 <__d2b+0xfc>
  8122a8:	800690ba 	slli	r3,r16,2
  8122ac:	10bef384 	addi	r2,r2,-1074
  8122b0:	a0800015 	stw	r2,0(r20)
  8122b4:	98c5883a 	add	r2,r19,r3
  8122b8:	11000417 	ldw	r4,16(r2)
  8122bc:	8020917a 	slli	r16,r16,5
  8122c0:	08118c40 	call	8118c4 <__hi0bits>
  8122c4:	8085c83a 	sub	r2,r16,r2
  8122c8:	90800015 	stw	r2,0(r18)
  8122cc:	9805883a 	mov	r2,r19
  8122d0:	dfc00817 	ldw	ra,32(sp)
  8122d4:	dd400717 	ldw	r21,28(sp)
  8122d8:	dd000617 	ldw	r20,24(sp)
  8122dc:	dcc00517 	ldw	r19,20(sp)
  8122e0:	dc800417 	ldw	r18,16(sp)
  8122e4:	dc400317 	ldw	r17,12(sp)
  8122e8:	dc000217 	ldw	r16,8(sp)
  8122ec:	dec00904 	addi	sp,sp,36
  8122f0:	f800283a 	ret
  8122f4:	d809883a 	mov	r4,sp
  8122f8:	081192c0 	call	81192c <__lo0bits>
  8122fc:	d8c00017 	ldw	r3,0(sp)
  812300:	04000044 	movi	r16,1
  812304:	9c000415 	stw	r16,16(r19)
  812308:	98c00515 	stw	r3,20(r19)
  81230c:	10800804 	addi	r2,r2,32
  812310:	883fe526 	beq	r17,zero,8122a8 <__alt_data_end+0xff8122a8>
  812314:	8c7ef344 	addi	r17,r17,-1075
  812318:	88a3883a 	add	r17,r17,r2
  81231c:	00c00d44 	movi	r3,53
  812320:	a4400015 	stw	r17,0(r20)
  812324:	1885c83a 	sub	r2,r3,r2
  812328:	90800015 	stw	r2,0(r18)
  81232c:	003fe706 	br	8122cc <__alt_data_end+0xff8122cc>
  812330:	01000804 	movi	r4,32
  812334:	2089c83a 	sub	r4,r4,r2
  812338:	1908983a 	sll	r4,r3,r4
  81233c:	d9400117 	ldw	r5,4(sp)
  812340:	1886d83a 	srl	r3,r3,r2
  812344:	2148b03a 	or	r4,r4,r5
  812348:	99000515 	stw	r4,20(r19)
  81234c:	d8c00015 	stw	r3,0(sp)
  812350:	003fd006 	br	812294 <__alt_data_end+0xff812294>

00812354 <__ratio>:
  812354:	defff904 	addi	sp,sp,-28
  812358:	dc400315 	stw	r17,12(sp)
  81235c:	2823883a 	mov	r17,r5
  812360:	d9400104 	addi	r5,sp,4
  812364:	dfc00615 	stw	ra,24(sp)
  812368:	dcc00515 	stw	r19,20(sp)
  81236c:	dc800415 	stw	r18,16(sp)
  812370:	2027883a 	mov	r19,r4
  812374:	dc000215 	stw	r16,8(sp)
  812378:	08120fc0 	call	8120fc <__b2d>
  81237c:	8809883a 	mov	r4,r17
  812380:	d80b883a 	mov	r5,sp
  812384:	1025883a 	mov	r18,r2
  812388:	1821883a 	mov	r16,r3
  81238c:	08120fc0 	call	8120fc <__b2d>
  812390:	8a400417 	ldw	r9,16(r17)
  812394:	9a000417 	ldw	r8,16(r19)
  812398:	100d883a 	mov	r6,r2
  81239c:	d8800017 	ldw	r2,0(sp)
  8123a0:	4251c83a 	sub	r8,r8,r9
  8123a4:	4012917a 	slli	r9,r8,5
  8123a8:	da000117 	ldw	r8,4(sp)
  8123ac:	4091c83a 	sub	r8,r8,r2
  8123b0:	4251883a 	add	r8,r8,r9
  8123b4:	02000d0e 	bge	zero,r8,8123ec <__ratio+0x98>
  8123b8:	4010953a 	slli	r8,r8,20
  8123bc:	4421883a 	add	r16,r8,r16
  8123c0:	9009883a 	mov	r4,r18
  8123c4:	800b883a 	mov	r5,r16
  8123c8:	180f883a 	mov	r7,r3
  8123cc:	0815c480 	call	815c48 <__divdf3>
  8123d0:	dfc00617 	ldw	ra,24(sp)
  8123d4:	dcc00517 	ldw	r19,20(sp)
  8123d8:	dc800417 	ldw	r18,16(sp)
  8123dc:	dc400317 	ldw	r17,12(sp)
  8123e0:	dc000217 	ldw	r16,8(sp)
  8123e4:	dec00704 	addi	sp,sp,28
  8123e8:	f800283a 	ret
  8123ec:	4010953a 	slli	r8,r8,20
  8123f0:	1a07c83a 	sub	r3,r3,r8
  8123f4:	003ff206 	br	8123c0 <__alt_data_end+0xff8123c0>

008123f8 <_mprec_log10>:
  8123f8:	defffe04 	addi	sp,sp,-8
  8123fc:	dc000015 	stw	r16,0(sp)
  812400:	dfc00115 	stw	ra,4(sp)
  812404:	008005c4 	movi	r2,23
  812408:	2021883a 	mov	r16,r4
  81240c:	11000d0e 	bge	r2,r4,812444 <_mprec_log10+0x4c>
  812410:	0005883a 	mov	r2,zero
  812414:	00cffc34 	movhi	r3,16368
  812418:	843fffc4 	addi	r16,r16,-1
  81241c:	1009883a 	mov	r4,r2
  812420:	180b883a 	mov	r5,r3
  812424:	000d883a 	mov	r6,zero
  812428:	01d00934 	movhi	r7,16420
  81242c:	08167580 	call	816758 <__muldf3>
  812430:	803ff91e 	bne	r16,zero,812418 <__alt_data_end+0xff812418>
  812434:	dfc00117 	ldw	ra,4(sp)
  812438:	dc000017 	ldw	r16,0(sp)
  81243c:	dec00204 	addi	sp,sp,8
  812440:	f800283a 	ret
  812444:	202090fa 	slli	r16,r4,3
  812448:	008020b4 	movhi	r2,130
  81244c:	10b35404 	addi	r2,r2,-12976
  812450:	1421883a 	add	r16,r2,r16
  812454:	80800017 	ldw	r2,0(r16)
  812458:	80c00117 	ldw	r3,4(r16)
  81245c:	dfc00117 	ldw	ra,4(sp)
  812460:	dc000017 	ldw	r16,0(sp)
  812464:	dec00204 	addi	sp,sp,8
  812468:	f800283a 	ret

0081246c <__copybits>:
  81246c:	297fffc4 	addi	r5,r5,-1
  812470:	280fd17a 	srai	r7,r5,5
  812474:	30c00417 	ldw	r3,16(r6)
  812478:	30800504 	addi	r2,r6,20
  81247c:	39c00044 	addi	r7,r7,1
  812480:	18c7883a 	add	r3,r3,r3
  812484:	39cf883a 	add	r7,r7,r7
  812488:	18c7883a 	add	r3,r3,r3
  81248c:	39cf883a 	add	r7,r7,r7
  812490:	10c7883a 	add	r3,r2,r3
  812494:	21cf883a 	add	r7,r4,r7
  812498:	10c00d2e 	bgeu	r2,r3,8124d0 <__copybits+0x64>
  81249c:	200b883a 	mov	r5,r4
  8124a0:	12000017 	ldw	r8,0(r2)
  8124a4:	29400104 	addi	r5,r5,4
  8124a8:	10800104 	addi	r2,r2,4
  8124ac:	2a3fff15 	stw	r8,-4(r5)
  8124b0:	10fffb36 	bltu	r2,r3,8124a0 <__alt_data_end+0xff8124a0>
  8124b4:	1985c83a 	sub	r2,r3,r6
  8124b8:	10bffac4 	addi	r2,r2,-21
  8124bc:	1004d0ba 	srli	r2,r2,2
  8124c0:	10800044 	addi	r2,r2,1
  8124c4:	1085883a 	add	r2,r2,r2
  8124c8:	1085883a 	add	r2,r2,r2
  8124cc:	2089883a 	add	r4,r4,r2
  8124d0:	21c0032e 	bgeu	r4,r7,8124e0 <__copybits+0x74>
  8124d4:	20000015 	stw	zero,0(r4)
  8124d8:	21000104 	addi	r4,r4,4
  8124dc:	21fffd36 	bltu	r4,r7,8124d4 <__alt_data_end+0xff8124d4>
  8124e0:	f800283a 	ret

008124e4 <__any_on>:
  8124e4:	20c00417 	ldw	r3,16(r4)
  8124e8:	2805d17a 	srai	r2,r5,5
  8124ec:	21000504 	addi	r4,r4,20
  8124f0:	18800d0e 	bge	r3,r2,812528 <__any_on+0x44>
  8124f4:	18c7883a 	add	r3,r3,r3
  8124f8:	18c7883a 	add	r3,r3,r3
  8124fc:	20c7883a 	add	r3,r4,r3
  812500:	20c0192e 	bgeu	r4,r3,812568 <__any_on+0x84>
  812504:	18bfff17 	ldw	r2,-4(r3)
  812508:	18ffff04 	addi	r3,r3,-4
  81250c:	1000041e 	bne	r2,zero,812520 <__any_on+0x3c>
  812510:	20c0142e 	bgeu	r4,r3,812564 <__any_on+0x80>
  812514:	18ffff04 	addi	r3,r3,-4
  812518:	19400017 	ldw	r5,0(r3)
  81251c:	283ffc26 	beq	r5,zero,812510 <__alt_data_end+0xff812510>
  812520:	00800044 	movi	r2,1
  812524:	f800283a 	ret
  812528:	10c00a0e 	bge	r2,r3,812554 <__any_on+0x70>
  81252c:	1085883a 	add	r2,r2,r2
  812530:	1085883a 	add	r2,r2,r2
  812534:	294007cc 	andi	r5,r5,31
  812538:	2087883a 	add	r3,r4,r2
  81253c:	283ff026 	beq	r5,zero,812500 <__alt_data_end+0xff812500>
  812540:	19800017 	ldw	r6,0(r3)
  812544:	3144d83a 	srl	r2,r6,r5
  812548:	114a983a 	sll	r5,r2,r5
  81254c:	29bff41e 	bne	r5,r6,812520 <__alt_data_end+0xff812520>
  812550:	003feb06 	br	812500 <__alt_data_end+0xff812500>
  812554:	1085883a 	add	r2,r2,r2
  812558:	1085883a 	add	r2,r2,r2
  81255c:	2087883a 	add	r3,r4,r2
  812560:	003fe706 	br	812500 <__alt_data_end+0xff812500>
  812564:	f800283a 	ret
  812568:	0005883a 	mov	r2,zero
  81256c:	f800283a 	ret

00812570 <_putc_r>:
  812570:	defffc04 	addi	sp,sp,-16
  812574:	dc000215 	stw	r16,8(sp)
  812578:	dfc00315 	stw	ra,12(sp)
  81257c:	2021883a 	mov	r16,r4
  812580:	20000226 	beq	r4,zero,81258c <_putc_r+0x1c>
  812584:	20800e17 	ldw	r2,56(r4)
  812588:	10001b26 	beq	r2,zero,8125f8 <_putc_r+0x88>
  81258c:	30800217 	ldw	r2,8(r6)
  812590:	10bfffc4 	addi	r2,r2,-1
  812594:	30800215 	stw	r2,8(r6)
  812598:	10000a16 	blt	r2,zero,8125c4 <_putc_r+0x54>
  81259c:	30800017 	ldw	r2,0(r6)
  8125a0:	11400005 	stb	r5,0(r2)
  8125a4:	30800017 	ldw	r2,0(r6)
  8125a8:	10c00044 	addi	r3,r2,1
  8125ac:	30c00015 	stw	r3,0(r6)
  8125b0:	10800003 	ldbu	r2,0(r2)
  8125b4:	dfc00317 	ldw	ra,12(sp)
  8125b8:	dc000217 	ldw	r16,8(sp)
  8125bc:	dec00404 	addi	sp,sp,16
  8125c0:	f800283a 	ret
  8125c4:	30c00617 	ldw	r3,24(r6)
  8125c8:	10c00616 	blt	r2,r3,8125e4 <_putc_r+0x74>
  8125cc:	30800017 	ldw	r2,0(r6)
  8125d0:	00c00284 	movi	r3,10
  8125d4:	11400005 	stb	r5,0(r2)
  8125d8:	30800017 	ldw	r2,0(r6)
  8125dc:	11400003 	ldbu	r5,0(r2)
  8125e0:	28fff11e 	bne	r5,r3,8125a8 <__alt_data_end+0xff8125a8>
  8125e4:	8009883a 	mov	r4,r16
  8125e8:	dfc00317 	ldw	ra,12(sp)
  8125ec:	dc000217 	ldw	r16,8(sp)
  8125f0:	dec00404 	addi	sp,sp,16
  8125f4:	081427c1 	jmpi	81427c <__swbuf_r>
  8125f8:	d9400015 	stw	r5,0(sp)
  8125fc:	d9800115 	stw	r6,4(sp)
  812600:	080b0780 	call	80b078 <__sinit>
  812604:	d9800117 	ldw	r6,4(sp)
  812608:	d9400017 	ldw	r5,0(sp)
  81260c:	003fdf06 	br	81258c <__alt_data_end+0xff81258c>

00812610 <putc>:
  812610:	008020b4 	movhi	r2,130
  812614:	defffc04 	addi	sp,sp,-16
  812618:	10bbcf04 	addi	r2,r2,-4292
  81261c:	dc400115 	stw	r17,4(sp)
  812620:	14400017 	ldw	r17,0(r2)
  812624:	dc800215 	stw	r18,8(sp)
  812628:	dc000015 	stw	r16,0(sp)
  81262c:	dfc00315 	stw	ra,12(sp)
  812630:	2025883a 	mov	r18,r4
  812634:	2821883a 	mov	r16,r5
  812638:	88000226 	beq	r17,zero,812644 <putc+0x34>
  81263c:	88800e17 	ldw	r2,56(r17)
  812640:	10001a26 	beq	r2,zero,8126ac <putc+0x9c>
  812644:	80800217 	ldw	r2,8(r16)
  812648:	10bfffc4 	addi	r2,r2,-1
  81264c:	80800215 	stw	r2,8(r16)
  812650:	10000c16 	blt	r2,zero,812684 <putc+0x74>
  812654:	80800017 	ldw	r2,0(r16)
  812658:	14800005 	stb	r18,0(r2)
  81265c:	80800017 	ldw	r2,0(r16)
  812660:	10c00044 	addi	r3,r2,1
  812664:	80c00015 	stw	r3,0(r16)
  812668:	10800003 	ldbu	r2,0(r2)
  81266c:	dfc00317 	ldw	ra,12(sp)
  812670:	dc800217 	ldw	r18,8(sp)
  812674:	dc400117 	ldw	r17,4(sp)
  812678:	dc000017 	ldw	r16,0(sp)
  81267c:	dec00404 	addi	sp,sp,16
  812680:	f800283a 	ret
  812684:	80c00617 	ldw	r3,24(r16)
  812688:	10c00b16 	blt	r2,r3,8126b8 <putc+0xa8>
  81268c:	80800017 	ldw	r2,0(r16)
  812690:	00c00284 	movi	r3,10
  812694:	14800005 	stb	r18,0(r2)
  812698:	80800017 	ldw	r2,0(r16)
  81269c:	11400003 	ldbu	r5,0(r2)
  8126a0:	28ffef1e 	bne	r5,r3,812660 <__alt_data_end+0xff812660>
  8126a4:	8809883a 	mov	r4,r17
  8126a8:	00000506 	br	8126c0 <putc+0xb0>
  8126ac:	8809883a 	mov	r4,r17
  8126b0:	080b0780 	call	80b078 <__sinit>
  8126b4:	003fe306 	br	812644 <__alt_data_end+0xff812644>
  8126b8:	8809883a 	mov	r4,r17
  8126bc:	900b883a 	mov	r5,r18
  8126c0:	800d883a 	mov	r6,r16
  8126c4:	dfc00317 	ldw	ra,12(sp)
  8126c8:	dc800217 	ldw	r18,8(sp)
  8126cc:	dc400117 	ldw	r17,4(sp)
  8126d0:	dc000017 	ldw	r16,0(sp)
  8126d4:	dec00404 	addi	sp,sp,16
  8126d8:	081427c1 	jmpi	81427c <__swbuf_r>

008126dc <_read_r>:
  8126dc:	defffd04 	addi	sp,sp,-12
  8126e0:	dc000015 	stw	r16,0(sp)
  8126e4:	040020b4 	movhi	r16,130
  8126e8:	dc400115 	stw	r17,4(sp)
  8126ec:	84034404 	addi	r16,r16,3344
  8126f0:	2023883a 	mov	r17,r4
  8126f4:	2809883a 	mov	r4,r5
  8126f8:	300b883a 	mov	r5,r6
  8126fc:	380d883a 	mov	r6,r7
  812700:	dfc00215 	stw	ra,8(sp)
  812704:	80000015 	stw	zero,0(r16)
  812708:	08187cc0 	call	8187cc <read>
  81270c:	00ffffc4 	movi	r3,-1
  812710:	10c00526 	beq	r2,r3,812728 <_read_r+0x4c>
  812714:	dfc00217 	ldw	ra,8(sp)
  812718:	dc400117 	ldw	r17,4(sp)
  81271c:	dc000017 	ldw	r16,0(sp)
  812720:	dec00304 	addi	sp,sp,12
  812724:	f800283a 	ret
  812728:	80c00017 	ldw	r3,0(r16)
  81272c:	183ff926 	beq	r3,zero,812714 <__alt_data_end+0xff812714>
  812730:	88c00015 	stw	r3,0(r17)
  812734:	003ff706 	br	812714 <__alt_data_end+0xff812714>

00812738 <_realloc_r>:
  812738:	defff604 	addi	sp,sp,-40
  81273c:	dd000415 	stw	r20,16(sp)
  812740:	dc400115 	stw	r17,4(sp)
  812744:	dfc00915 	stw	ra,36(sp)
  812748:	df000815 	stw	fp,32(sp)
  81274c:	ddc00715 	stw	r23,28(sp)
  812750:	dd800615 	stw	r22,24(sp)
  812754:	dd400515 	stw	r21,20(sp)
  812758:	dcc00315 	stw	r19,12(sp)
  81275c:	dc800215 	stw	r18,8(sp)
  812760:	dc000015 	stw	r16,0(sp)
  812764:	2829883a 	mov	r20,r5
  812768:	3023883a 	mov	r17,r6
  81276c:	2800ad26 	beq	r5,zero,812a24 <_realloc_r+0x2ec>
  812770:	2025883a 	mov	r18,r4
  812774:	081825c0 	call	81825c <__malloc_lock>
  812778:	a0ffff17 	ldw	r3,-4(r20)
  81277c:	043fff04 	movi	r16,-4
  812780:	890002c4 	addi	r4,r17,11
  812784:	01c00584 	movi	r7,22
  812788:	a57ffe04 	addi	r21,r20,-8
  81278c:	1c20703a 	and	r16,r3,r16
  812790:	39001d2e 	bgeu	r7,r4,812808 <_realloc_r+0xd0>
  812794:	05bffe04 	movi	r22,-8
  812798:	25ac703a 	and	r22,r4,r22
  81279c:	b00f883a 	mov	r7,r22
  8127a0:	b0006516 	blt	r22,zero,812938 <_realloc_r+0x200>
  8127a4:	b4406436 	bltu	r22,r17,812938 <_realloc_r+0x200>
  8127a8:	81c01a0e 	bge	r16,r7,812814 <_realloc_r+0xdc>
  8127ac:	070020b4 	movhi	fp,130
  8127b0:	e7359604 	addi	fp,fp,-10664
  8127b4:	e1400217 	ldw	r5,8(fp)
  8127b8:	ac11883a 	add	r8,r21,r16
  8127bc:	2a006226 	beq	r5,r8,812948 <_realloc_r+0x210>
  8127c0:	41800117 	ldw	r6,4(r8)
  8127c4:	027fff84 	movi	r9,-2
  8127c8:	3252703a 	and	r9,r6,r9
  8127cc:	4253883a 	add	r9,r8,r9
  8127d0:	49000117 	ldw	r4,4(r9)
  8127d4:	2100004c 	andi	r4,r4,1
  8127d8:	2000281e 	bne	r4,zero,81287c <_realloc_r+0x144>
  8127dc:	00bfff04 	movi	r2,-4
  8127e0:	3084703a 	and	r2,r6,r2
  8127e4:	1409883a 	add	r4,r2,r16
  8127e8:	21c05e16 	blt	r4,r7,812964 <_realloc_r+0x22c>
  8127ec:	40800317 	ldw	r2,12(r8)
  8127f0:	41400217 	ldw	r5,8(r8)
  8127f4:	a023883a 	mov	r17,r20
  8127f8:	2021883a 	mov	r16,r4
  8127fc:	28800315 	stw	r2,12(r5)
  812800:	11400215 	stw	r5,8(r2)
  812804:	00000406 	br	812818 <_realloc_r+0xe0>
  812808:	01c00404 	movi	r7,16
  81280c:	382d883a 	mov	r22,r7
  812810:	003fe406 	br	8127a4 <__alt_data_end+0xff8127a4>
  812814:	a023883a 	mov	r17,r20
  812818:	858fc83a 	sub	r7,r16,r22
  81281c:	008003c4 	movi	r2,15
  812820:	18c0004c 	andi	r3,r3,1
  812824:	11c07236 	bltu	r2,r7,8129f0 <_realloc_r+0x2b8>
  812828:	1c06b03a 	or	r3,r3,r16
  81282c:	a8c00115 	stw	r3,4(r21)
  812830:	ac21883a 	add	r16,r21,r16
  812834:	80800117 	ldw	r2,4(r16)
  812838:	10800054 	ori	r2,r2,1
  81283c:	80800115 	stw	r2,4(r16)
  812840:	9009883a 	mov	r4,r18
  812844:	081827c0 	call	81827c <__malloc_unlock>
  812848:	8805883a 	mov	r2,r17
  81284c:	dfc00917 	ldw	ra,36(sp)
  812850:	df000817 	ldw	fp,32(sp)
  812854:	ddc00717 	ldw	r23,28(sp)
  812858:	dd800617 	ldw	r22,24(sp)
  81285c:	dd400517 	ldw	r21,20(sp)
  812860:	dd000417 	ldw	r20,16(sp)
  812864:	dcc00317 	ldw	r19,12(sp)
  812868:	dc800217 	ldw	r18,8(sp)
  81286c:	dc400117 	ldw	r17,4(sp)
  812870:	dc000017 	ldw	r16,0(sp)
  812874:	dec00a04 	addi	sp,sp,40
  812878:	f800283a 	ret
  81287c:	18c0004c 	andi	r3,r3,1
  812880:	1800081e 	bne	r3,zero,8128a4 <_realloc_r+0x16c>
  812884:	a4fffe17 	ldw	r19,-8(r20)
  812888:	00bfff04 	movi	r2,-4
  81288c:	ace7c83a 	sub	r19,r21,r19
  812890:	98c00117 	ldw	r3,4(r19)
  812894:	1886703a 	and	r3,r3,r2
  812898:	98000226 	beq	r19,zero,8128a4 <_realloc_r+0x16c>
  81289c:	1c2f883a 	add	r23,r3,r16
  8128a0:	b9c06d0e 	bge	r23,r7,812a58 <_realloc_r+0x320>
  8128a4:	880b883a 	mov	r5,r17
  8128a8:	9009883a 	mov	r4,r18
  8128ac:	080c0600 	call	80c060 <_malloc_r>
  8128b0:	1023883a 	mov	r17,r2
  8128b4:	1000ef26 	beq	r2,zero,812c74 <_realloc_r+0x53c>
  8128b8:	a0ffff17 	ldw	r3,-4(r20)
  8128bc:	113ffe04 	addi	r4,r2,-8
  8128c0:	00bfff84 	movi	r2,-2
  8128c4:	1884703a 	and	r2,r3,r2
  8128c8:	a885883a 	add	r2,r21,r2
  8128cc:	2080bf26 	beq	r4,r2,812bcc <_realloc_r+0x494>
  8128d0:	81bfff04 	addi	r6,r16,-4
  8128d4:	00800904 	movi	r2,36
  8128d8:	11808936 	bltu	r2,r6,812b00 <_realloc_r+0x3c8>
  8128dc:	00c004c4 	movi	r3,19
  8128e0:	19806c2e 	bgeu	r3,r6,812a94 <_realloc_r+0x35c>
  8128e4:	a0c00017 	ldw	r3,0(r20)
  8128e8:	88c00015 	stw	r3,0(r17)
  8128ec:	a0c00117 	ldw	r3,4(r20)
  8128f0:	88c00115 	stw	r3,4(r17)
  8128f4:	00c006c4 	movi	r3,27
  8128f8:	1980ac36 	bltu	r3,r6,812bac <_realloc_r+0x474>
  8128fc:	88800204 	addi	r2,r17,8
  812900:	a0c00204 	addi	r3,r20,8
  812904:	19000017 	ldw	r4,0(r3)
  812908:	11000015 	stw	r4,0(r2)
  81290c:	19000117 	ldw	r4,4(r3)
  812910:	11000115 	stw	r4,4(r2)
  812914:	18c00217 	ldw	r3,8(r3)
  812918:	10c00215 	stw	r3,8(r2)
  81291c:	a00b883a 	mov	r5,r20
  812920:	9009883a 	mov	r4,r18
  812924:	080b3440 	call	80b344 <_free_r>
  812928:	9009883a 	mov	r4,r18
  81292c:	081827c0 	call	81827c <__malloc_unlock>
  812930:	8805883a 	mov	r2,r17
  812934:	003fc506 	br	81284c <__alt_data_end+0xff81284c>
  812938:	00800304 	movi	r2,12
  81293c:	90800015 	stw	r2,0(r18)
  812940:	0005883a 	mov	r2,zero
  812944:	003fc106 	br	81284c <__alt_data_end+0xff81284c>
  812948:	29800117 	ldw	r6,4(r5)
  81294c:	00bfff04 	movi	r2,-4
  812950:	b1000404 	addi	r4,r22,16
  812954:	3084703a 	and	r2,r6,r2
  812958:	140d883a 	add	r6,r2,r16
  81295c:	31005b0e 	bge	r6,r4,812acc <_realloc_r+0x394>
  812960:	2811883a 	mov	r8,r5
  812964:	18c0004c 	andi	r3,r3,1
  812968:	183fce1e 	bne	r3,zero,8128a4 <__alt_data_end+0xff8128a4>
  81296c:	a4fffe17 	ldw	r19,-8(r20)
  812970:	00ffff04 	movi	r3,-4
  812974:	ace7c83a 	sub	r19,r21,r19
  812978:	99000117 	ldw	r4,4(r19)
  81297c:	20c6703a 	and	r3,r4,r3
  812980:	403fc526 	beq	r8,zero,812898 <__alt_data_end+0xff812898>
  812984:	1c2f883a 	add	r23,r3,r16
  812988:	b8af883a 	add	r23,r23,r2
  81298c:	41406026 	beq	r8,r5,812b10 <_realloc_r+0x3d8>
  812990:	b9ffc116 	blt	r23,r7,812898 <__alt_data_end+0xff812898>
  812994:	40c00217 	ldw	r3,8(r8)
  812998:	40800317 	ldw	r2,12(r8)
  81299c:	81bfff04 	addi	r6,r16,-4
  8129a0:	01000904 	movi	r4,36
  8129a4:	18800315 	stw	r2,12(r3)
  8129a8:	10c00215 	stw	r3,8(r2)
  8129ac:	99400217 	ldw	r5,8(r19)
  8129b0:	98c00317 	ldw	r3,12(r19)
  8129b4:	9c400204 	addi	r17,r19,8
  8129b8:	28c00315 	stw	r3,12(r5)
  8129bc:	19400215 	stw	r5,8(r3)
  8129c0:	21802d36 	bltu	r4,r6,812a78 <_realloc_r+0x340>
  8129c4:	008004c4 	movi	r2,19
  8129c8:	1180352e 	bgeu	r2,r6,812aa0 <_realloc_r+0x368>
  8129cc:	a0800017 	ldw	r2,0(r20)
  8129d0:	98800215 	stw	r2,8(r19)
  8129d4:	a0800117 	ldw	r2,4(r20)
  8129d8:	98800315 	stw	r2,12(r19)
  8129dc:	008006c4 	movi	r2,27
  8129e0:	11808036 	bltu	r2,r6,812be4 <_realloc_r+0x4ac>
  8129e4:	98c00404 	addi	r3,r19,16
  8129e8:	a5000204 	addi	r20,r20,8
  8129ec:	00002d06 	br	812aa4 <_realloc_r+0x36c>
  8129f0:	1d86b03a 	or	r3,r3,r22
  8129f4:	ad8b883a 	add	r5,r21,r22
  8129f8:	a8c00115 	stw	r3,4(r21)
  8129fc:	38800054 	ori	r2,r7,1
  812a00:	28800115 	stw	r2,4(r5)
  812a04:	29cf883a 	add	r7,r5,r7
  812a08:	38800117 	ldw	r2,4(r7)
  812a0c:	9009883a 	mov	r4,r18
  812a10:	29400204 	addi	r5,r5,8
  812a14:	10800054 	ori	r2,r2,1
  812a18:	38800115 	stw	r2,4(r7)
  812a1c:	080b3440 	call	80b344 <_free_r>
  812a20:	003f8706 	br	812840 <__alt_data_end+0xff812840>
  812a24:	300b883a 	mov	r5,r6
  812a28:	dfc00917 	ldw	ra,36(sp)
  812a2c:	df000817 	ldw	fp,32(sp)
  812a30:	ddc00717 	ldw	r23,28(sp)
  812a34:	dd800617 	ldw	r22,24(sp)
  812a38:	dd400517 	ldw	r21,20(sp)
  812a3c:	dd000417 	ldw	r20,16(sp)
  812a40:	dcc00317 	ldw	r19,12(sp)
  812a44:	dc800217 	ldw	r18,8(sp)
  812a48:	dc400117 	ldw	r17,4(sp)
  812a4c:	dc000017 	ldw	r16,0(sp)
  812a50:	dec00a04 	addi	sp,sp,40
  812a54:	080c0601 	jmpi	80c060 <_malloc_r>
  812a58:	98800317 	ldw	r2,12(r19)
  812a5c:	98c00217 	ldw	r3,8(r19)
  812a60:	81bfff04 	addi	r6,r16,-4
  812a64:	01000904 	movi	r4,36
  812a68:	18800315 	stw	r2,12(r3)
  812a6c:	10c00215 	stw	r3,8(r2)
  812a70:	9c400204 	addi	r17,r19,8
  812a74:	21bfd32e 	bgeu	r4,r6,8129c4 <__alt_data_end+0xff8129c4>
  812a78:	8809883a 	mov	r4,r17
  812a7c:	a00b883a 	mov	r5,r20
  812a80:	08114740 	call	811474 <memmove>
  812a84:	98c00117 	ldw	r3,4(r19)
  812a88:	b821883a 	mov	r16,r23
  812a8c:	982b883a 	mov	r21,r19
  812a90:	003f6106 	br	812818 <__alt_data_end+0xff812818>
  812a94:	8805883a 	mov	r2,r17
  812a98:	a007883a 	mov	r3,r20
  812a9c:	003f9906 	br	812904 <__alt_data_end+0xff812904>
  812aa0:	8807883a 	mov	r3,r17
  812aa4:	a0800017 	ldw	r2,0(r20)
  812aa8:	b821883a 	mov	r16,r23
  812aac:	982b883a 	mov	r21,r19
  812ab0:	18800015 	stw	r2,0(r3)
  812ab4:	a0800117 	ldw	r2,4(r20)
  812ab8:	18800115 	stw	r2,4(r3)
  812abc:	a0800217 	ldw	r2,8(r20)
  812ac0:	18800215 	stw	r2,8(r3)
  812ac4:	98c00117 	ldw	r3,4(r19)
  812ac8:	003f5306 	br	812818 <__alt_data_end+0xff812818>
  812acc:	adab883a 	add	r21,r21,r22
  812ad0:	3585c83a 	sub	r2,r6,r22
  812ad4:	e5400215 	stw	r21,8(fp)
  812ad8:	10800054 	ori	r2,r2,1
  812adc:	a8800115 	stw	r2,4(r21)
  812ae0:	a0bfff17 	ldw	r2,-4(r20)
  812ae4:	9009883a 	mov	r4,r18
  812ae8:	1080004c 	andi	r2,r2,1
  812aec:	b0acb03a 	or	r22,r22,r2
  812af0:	a5bfff15 	stw	r22,-4(r20)
  812af4:	081827c0 	call	81827c <__malloc_unlock>
  812af8:	a005883a 	mov	r2,r20
  812afc:	003f5306 	br	81284c <__alt_data_end+0xff81284c>
  812b00:	8809883a 	mov	r4,r17
  812b04:	a00b883a 	mov	r5,r20
  812b08:	08114740 	call	811474 <memmove>
  812b0c:	003f8306 	br	81291c <__alt_data_end+0xff81291c>
  812b10:	b0800404 	addi	r2,r22,16
  812b14:	b8bf6016 	blt	r23,r2,812898 <__alt_data_end+0xff812898>
  812b18:	98800317 	ldw	r2,12(r19)
  812b1c:	98c00217 	ldw	r3,8(r19)
  812b20:	81bfff04 	addi	r6,r16,-4
  812b24:	01000904 	movi	r4,36
  812b28:	18800315 	stw	r2,12(r3)
  812b2c:	10c00215 	stw	r3,8(r2)
  812b30:	9c400204 	addi	r17,r19,8
  812b34:	21804336 	bltu	r4,r6,812c44 <_realloc_r+0x50c>
  812b38:	008004c4 	movi	r2,19
  812b3c:	11803f2e 	bgeu	r2,r6,812c3c <_realloc_r+0x504>
  812b40:	a0800017 	ldw	r2,0(r20)
  812b44:	98800215 	stw	r2,8(r19)
  812b48:	a0800117 	ldw	r2,4(r20)
  812b4c:	98800315 	stw	r2,12(r19)
  812b50:	008006c4 	movi	r2,27
  812b54:	11803f36 	bltu	r2,r6,812c54 <_realloc_r+0x51c>
  812b58:	98800404 	addi	r2,r19,16
  812b5c:	a5000204 	addi	r20,r20,8
  812b60:	a0c00017 	ldw	r3,0(r20)
  812b64:	10c00015 	stw	r3,0(r2)
  812b68:	a0c00117 	ldw	r3,4(r20)
  812b6c:	10c00115 	stw	r3,4(r2)
  812b70:	a0c00217 	ldw	r3,8(r20)
  812b74:	10c00215 	stw	r3,8(r2)
  812b78:	9d87883a 	add	r3,r19,r22
  812b7c:	bd85c83a 	sub	r2,r23,r22
  812b80:	e0c00215 	stw	r3,8(fp)
  812b84:	10800054 	ori	r2,r2,1
  812b88:	18800115 	stw	r2,4(r3)
  812b8c:	98800117 	ldw	r2,4(r19)
  812b90:	9009883a 	mov	r4,r18
  812b94:	1080004c 	andi	r2,r2,1
  812b98:	b0acb03a 	or	r22,r22,r2
  812b9c:	9d800115 	stw	r22,4(r19)
  812ba0:	081827c0 	call	81827c <__malloc_unlock>
  812ba4:	8805883a 	mov	r2,r17
  812ba8:	003f2806 	br	81284c <__alt_data_end+0xff81284c>
  812bac:	a0c00217 	ldw	r3,8(r20)
  812bb0:	88c00215 	stw	r3,8(r17)
  812bb4:	a0c00317 	ldw	r3,12(r20)
  812bb8:	88c00315 	stw	r3,12(r17)
  812bbc:	30801126 	beq	r6,r2,812c04 <_realloc_r+0x4cc>
  812bc0:	88800404 	addi	r2,r17,16
  812bc4:	a0c00404 	addi	r3,r20,16
  812bc8:	003f4e06 	br	812904 <__alt_data_end+0xff812904>
  812bcc:	893fff17 	ldw	r4,-4(r17)
  812bd0:	00bfff04 	movi	r2,-4
  812bd4:	a023883a 	mov	r17,r20
  812bd8:	2084703a 	and	r2,r4,r2
  812bdc:	80a1883a 	add	r16,r16,r2
  812be0:	003f0d06 	br	812818 <__alt_data_end+0xff812818>
  812be4:	a0800217 	ldw	r2,8(r20)
  812be8:	98800415 	stw	r2,16(r19)
  812bec:	a0800317 	ldw	r2,12(r20)
  812bf0:	98800515 	stw	r2,20(r19)
  812bf4:	31000a26 	beq	r6,r4,812c20 <_realloc_r+0x4e8>
  812bf8:	98c00604 	addi	r3,r19,24
  812bfc:	a5000404 	addi	r20,r20,16
  812c00:	003fa806 	br	812aa4 <__alt_data_end+0xff812aa4>
  812c04:	a1000417 	ldw	r4,16(r20)
  812c08:	88800604 	addi	r2,r17,24
  812c0c:	a0c00604 	addi	r3,r20,24
  812c10:	89000415 	stw	r4,16(r17)
  812c14:	a1000517 	ldw	r4,20(r20)
  812c18:	89000515 	stw	r4,20(r17)
  812c1c:	003f3906 	br	812904 <__alt_data_end+0xff812904>
  812c20:	a0800417 	ldw	r2,16(r20)
  812c24:	a5000604 	addi	r20,r20,24
  812c28:	98c00804 	addi	r3,r19,32
  812c2c:	98800615 	stw	r2,24(r19)
  812c30:	a0bfff17 	ldw	r2,-4(r20)
  812c34:	98800715 	stw	r2,28(r19)
  812c38:	003f9a06 	br	812aa4 <__alt_data_end+0xff812aa4>
  812c3c:	8805883a 	mov	r2,r17
  812c40:	003fc706 	br	812b60 <__alt_data_end+0xff812b60>
  812c44:	8809883a 	mov	r4,r17
  812c48:	a00b883a 	mov	r5,r20
  812c4c:	08114740 	call	811474 <memmove>
  812c50:	003fc906 	br	812b78 <__alt_data_end+0xff812b78>
  812c54:	a0800217 	ldw	r2,8(r20)
  812c58:	98800415 	stw	r2,16(r19)
  812c5c:	a0800317 	ldw	r2,12(r20)
  812c60:	98800515 	stw	r2,20(r19)
  812c64:	31000726 	beq	r6,r4,812c84 <_realloc_r+0x54c>
  812c68:	98800604 	addi	r2,r19,24
  812c6c:	a5000404 	addi	r20,r20,16
  812c70:	003fbb06 	br	812b60 <__alt_data_end+0xff812b60>
  812c74:	9009883a 	mov	r4,r18
  812c78:	081827c0 	call	81827c <__malloc_unlock>
  812c7c:	0005883a 	mov	r2,zero
  812c80:	003ef206 	br	81284c <__alt_data_end+0xff81284c>
  812c84:	a0c00417 	ldw	r3,16(r20)
  812c88:	a5000604 	addi	r20,r20,24
  812c8c:	98800804 	addi	r2,r19,32
  812c90:	98c00615 	stw	r3,24(r19)
  812c94:	a0ffff17 	ldw	r3,-4(r20)
  812c98:	98c00715 	stw	r3,28(r19)
  812c9c:	003fb006 	br	812b60 <__alt_data_end+0xff812b60>

00812ca0 <__fpclassifyd>:
  812ca0:	00a00034 	movhi	r2,32768
  812ca4:	10bfffc4 	addi	r2,r2,-1
  812ca8:	2884703a 	and	r2,r5,r2
  812cac:	10000726 	beq	r2,zero,812ccc <__fpclassifyd+0x2c>
  812cb0:	00fffc34 	movhi	r3,65520
  812cb4:	019ff834 	movhi	r6,32736
  812cb8:	28c7883a 	add	r3,r5,r3
  812cbc:	31bfffc4 	addi	r6,r6,-1
  812cc0:	30c00536 	bltu	r6,r3,812cd8 <__fpclassifyd+0x38>
  812cc4:	00800104 	movi	r2,4
  812cc8:	f800283a 	ret
  812ccc:	2000021e 	bne	r4,zero,812cd8 <__fpclassifyd+0x38>
  812cd0:	00800084 	movi	r2,2
  812cd4:	f800283a 	ret
  812cd8:	00dffc34 	movhi	r3,32752
  812cdc:	019ff834 	movhi	r6,32736
  812ce0:	28cb883a 	add	r5,r5,r3
  812ce4:	31bfffc4 	addi	r6,r6,-1
  812ce8:	317ff62e 	bgeu	r6,r5,812cc4 <__alt_data_end+0xff812cc4>
  812cec:	01400434 	movhi	r5,16
  812cf0:	297fffc4 	addi	r5,r5,-1
  812cf4:	28800236 	bltu	r5,r2,812d00 <__fpclassifyd+0x60>
  812cf8:	008000c4 	movi	r2,3
  812cfc:	f800283a 	ret
  812d00:	10c00226 	beq	r2,r3,812d0c <__fpclassifyd+0x6c>
  812d04:	0005883a 	mov	r2,zero
  812d08:	f800283a 	ret
  812d0c:	2005003a 	cmpeq	r2,r4,zero
  812d10:	f800283a 	ret

00812d14 <strcmp>:
  812d14:	2144b03a 	or	r2,r4,r5
  812d18:	108000cc 	andi	r2,r2,3
  812d1c:	1000171e 	bne	r2,zero,812d7c <strcmp+0x68>
  812d20:	20800017 	ldw	r2,0(r4)
  812d24:	28c00017 	ldw	r3,0(r5)
  812d28:	10c0141e 	bne	r2,r3,812d7c <strcmp+0x68>
  812d2c:	027fbff4 	movhi	r9,65279
  812d30:	4a7fbfc4 	addi	r9,r9,-257
  812d34:	0086303a 	nor	r3,zero,r2
  812d38:	02202074 	movhi	r8,32897
  812d3c:	1245883a 	add	r2,r2,r9
  812d40:	42202004 	addi	r8,r8,-32640
  812d44:	10c4703a 	and	r2,r2,r3
  812d48:	1204703a 	and	r2,r2,r8
  812d4c:	10000226 	beq	r2,zero,812d58 <strcmp+0x44>
  812d50:	00001706 	br	812db0 <strcmp+0x9c>
  812d54:	1000161e 	bne	r2,zero,812db0 <strcmp+0x9c>
  812d58:	21000104 	addi	r4,r4,4
  812d5c:	20c00017 	ldw	r3,0(r4)
  812d60:	29400104 	addi	r5,r5,4
  812d64:	29800017 	ldw	r6,0(r5)
  812d68:	1a4f883a 	add	r7,r3,r9
  812d6c:	00c4303a 	nor	r2,zero,r3
  812d70:	3884703a 	and	r2,r7,r2
  812d74:	1204703a 	and	r2,r2,r8
  812d78:	19bff626 	beq	r3,r6,812d54 <__alt_data_end+0xff812d54>
  812d7c:	20800007 	ldb	r2,0(r4)
  812d80:	1000051e 	bne	r2,zero,812d98 <strcmp+0x84>
  812d84:	00000606 	br	812da0 <strcmp+0x8c>
  812d88:	21000044 	addi	r4,r4,1
  812d8c:	20800007 	ldb	r2,0(r4)
  812d90:	29400044 	addi	r5,r5,1
  812d94:	10000226 	beq	r2,zero,812da0 <strcmp+0x8c>
  812d98:	28c00007 	ldb	r3,0(r5)
  812d9c:	10fffa26 	beq	r2,r3,812d88 <__alt_data_end+0xff812d88>
  812da0:	20800003 	ldbu	r2,0(r4)
  812da4:	28c00003 	ldbu	r3,0(r5)
  812da8:	10c5c83a 	sub	r2,r2,r3
  812dac:	f800283a 	ret
  812db0:	0005883a 	mov	r2,zero
  812db4:	f800283a 	ret

00812db8 <__sprint_r.part.0>:
  812db8:	28801917 	ldw	r2,100(r5)
  812dbc:	defff604 	addi	sp,sp,-40
  812dc0:	dd400515 	stw	r21,20(sp)
  812dc4:	dcc00315 	stw	r19,12(sp)
  812dc8:	dfc00915 	stw	ra,36(sp)
  812dcc:	df000815 	stw	fp,32(sp)
  812dd0:	ddc00715 	stw	r23,28(sp)
  812dd4:	dd800615 	stw	r22,24(sp)
  812dd8:	dd000415 	stw	r20,16(sp)
  812ddc:	dc800215 	stw	r18,8(sp)
  812de0:	dc400115 	stw	r17,4(sp)
  812de4:	dc000015 	stw	r16,0(sp)
  812de8:	1088000c 	andi	r2,r2,8192
  812dec:	2827883a 	mov	r19,r5
  812df0:	302b883a 	mov	r21,r6
  812df4:	10002d26 	beq	r2,zero,812eac <__sprint_r.part.0+0xf4>
  812df8:	30800217 	ldw	r2,8(r6)
  812dfc:	35800017 	ldw	r22,0(r6)
  812e00:	10002826 	beq	r2,zero,812ea4 <__sprint_r.part.0+0xec>
  812e04:	2029883a 	mov	r20,r4
  812e08:	b5c00104 	addi	r23,r22,4
  812e0c:	04bfffc4 	movi	r18,-1
  812e10:	bc400017 	ldw	r17,0(r23)
  812e14:	b4000017 	ldw	r16,0(r22)
  812e18:	0039883a 	mov	fp,zero
  812e1c:	8822d0ba 	srli	r17,r17,2
  812e20:	04400316 	blt	zero,r17,812e30 <__sprint_r.part.0+0x78>
  812e24:	00001806 	br	812e88 <__sprint_r.part.0+0xd0>
  812e28:	84000104 	addi	r16,r16,4
  812e2c:	8f001526 	beq	r17,fp,812e84 <__sprint_r.part.0+0xcc>
  812e30:	81400017 	ldw	r5,0(r16)
  812e34:	a009883a 	mov	r4,r20
  812e38:	980d883a 	mov	r6,r19
  812e3c:	08144940 	call	814494 <_fputwc_r>
  812e40:	e7000044 	addi	fp,fp,1
  812e44:	14bff81e 	bne	r2,r18,812e28 <__alt_data_end+0xff812e28>
  812e48:	9005883a 	mov	r2,r18
  812e4c:	a8000215 	stw	zero,8(r21)
  812e50:	a8000115 	stw	zero,4(r21)
  812e54:	dfc00917 	ldw	ra,36(sp)
  812e58:	df000817 	ldw	fp,32(sp)
  812e5c:	ddc00717 	ldw	r23,28(sp)
  812e60:	dd800617 	ldw	r22,24(sp)
  812e64:	dd400517 	ldw	r21,20(sp)
  812e68:	dd000417 	ldw	r20,16(sp)
  812e6c:	dcc00317 	ldw	r19,12(sp)
  812e70:	dc800217 	ldw	r18,8(sp)
  812e74:	dc400117 	ldw	r17,4(sp)
  812e78:	dc000017 	ldw	r16,0(sp)
  812e7c:	dec00a04 	addi	sp,sp,40
  812e80:	f800283a 	ret
  812e84:	a8800217 	ldw	r2,8(r21)
  812e88:	8c63883a 	add	r17,r17,r17
  812e8c:	8c63883a 	add	r17,r17,r17
  812e90:	1445c83a 	sub	r2,r2,r17
  812e94:	a8800215 	stw	r2,8(r21)
  812e98:	b5800204 	addi	r22,r22,8
  812e9c:	bdc00204 	addi	r23,r23,8
  812ea0:	103fdb1e 	bne	r2,zero,812e10 <__alt_data_end+0xff812e10>
  812ea4:	0005883a 	mov	r2,zero
  812ea8:	003fe806 	br	812e4c <__alt_data_end+0xff812e4c>
  812eac:	0810c040 	call	810c04 <__sfvwrite_r>
  812eb0:	003fe606 	br	812e4c <__alt_data_end+0xff812e4c>

00812eb4 <__sprint_r>:
  812eb4:	30c00217 	ldw	r3,8(r6)
  812eb8:	18000126 	beq	r3,zero,812ec0 <__sprint_r+0xc>
  812ebc:	0812db81 	jmpi	812db8 <__sprint_r.part.0>
  812ec0:	30000115 	stw	zero,4(r6)
  812ec4:	0005883a 	mov	r2,zero
  812ec8:	f800283a 	ret

00812ecc <___vfiprintf_internal_r>:
  812ecc:	deffca04 	addi	sp,sp,-216
  812ed0:	dd803215 	stw	r22,200(sp)
  812ed4:	dd403115 	stw	r21,196(sp)
  812ed8:	dfc03515 	stw	ra,212(sp)
  812edc:	df003415 	stw	fp,208(sp)
  812ee0:	ddc03315 	stw	r23,204(sp)
  812ee4:	dd003015 	stw	r20,192(sp)
  812ee8:	dcc02f15 	stw	r19,188(sp)
  812eec:	dc802e15 	stw	r18,184(sp)
  812ef0:	dc402d15 	stw	r17,180(sp)
  812ef4:	dc002c15 	stw	r16,176(sp)
  812ef8:	d9002015 	stw	r4,128(sp)
  812efc:	d9c02215 	stw	r7,136(sp)
  812f00:	282b883a 	mov	r21,r5
  812f04:	302d883a 	mov	r22,r6
  812f08:	20000226 	beq	r4,zero,812f14 <___vfiprintf_internal_r+0x48>
  812f0c:	20800e17 	ldw	r2,56(r4)
  812f10:	1001b126 	beq	r2,zero,8135d8 <___vfiprintf_internal_r+0x70c>
  812f14:	a880030b 	ldhu	r2,12(r21)
  812f18:	10c8000c 	andi	r3,r2,8192
  812f1c:	1800061e 	bne	r3,zero,812f38 <___vfiprintf_internal_r+0x6c>
  812f20:	a9001917 	ldw	r4,100(r21)
  812f24:	00f7ffc4 	movi	r3,-8193
  812f28:	10880014 	ori	r2,r2,8192
  812f2c:	20c6703a 	and	r3,r4,r3
  812f30:	a880030d 	sth	r2,12(r21)
  812f34:	a8c01915 	stw	r3,100(r21)
  812f38:	10c0020c 	andi	r3,r2,8
  812f3c:	18018926 	beq	r3,zero,813564 <___vfiprintf_internal_r+0x698>
  812f40:	a8c00417 	ldw	r3,16(r21)
  812f44:	18018726 	beq	r3,zero,813564 <___vfiprintf_internal_r+0x698>
  812f48:	1080068c 	andi	r2,r2,26
  812f4c:	00c00284 	movi	r3,10
  812f50:	10c18c26 	beq	r2,r3,813584 <___vfiprintf_internal_r+0x6b8>
  812f54:	d8801a04 	addi	r2,sp,104
  812f58:	d8c019c4 	addi	r3,sp,103
  812f5c:	070020b4 	movhi	fp,130
  812f60:	05c020b4 	movhi	r23,130
  812f64:	10c9c83a 	sub	r4,r2,r3
  812f68:	e7338a04 	addi	fp,fp,-12760
  812f6c:	bdf38604 	addi	r23,r23,-12776
  812f70:	d8801e15 	stw	r2,120(sp)
  812f74:	d8c01f15 	stw	r3,124(sp)
  812f78:	dec01a15 	stw	sp,104(sp)
  812f7c:	d8001c15 	stw	zero,112(sp)
  812f80:	d8001b15 	stw	zero,108(sp)
  812f84:	d8002615 	stw	zero,152(sp)
  812f88:	d8002315 	stw	zero,140(sp)
  812f8c:	d9002715 	stw	r4,156(sp)
  812f90:	d811883a 	mov	r8,sp
  812f94:	dd402115 	stw	r21,132(sp)
  812f98:	b021883a 	mov	r16,r22
  812f9c:	80800007 	ldb	r2,0(r16)
  812fa0:	10037226 	beq	r2,zero,813d6c <___vfiprintf_internal_r+0xea0>
  812fa4:	01000944 	movi	r4,37
  812fa8:	11037026 	beq	r2,r4,813d6c <___vfiprintf_internal_r+0xea0>
  812fac:	8005883a 	mov	r2,r16
  812fb0:	00000106 	br	812fb8 <___vfiprintf_internal_r+0xec>
  812fb4:	19000326 	beq	r3,r4,812fc4 <___vfiprintf_internal_r+0xf8>
  812fb8:	10800044 	addi	r2,r2,1
  812fbc:	10c00007 	ldb	r3,0(r2)
  812fc0:	183ffc1e 	bne	r3,zero,812fb4 <__alt_data_end+0xff812fb4>
  812fc4:	1425c83a 	sub	r18,r2,r16
  812fc8:	1023883a 	mov	r17,r2
  812fcc:	90001026 	beq	r18,zero,813010 <___vfiprintf_internal_r+0x144>
  812fd0:	d8c01c17 	ldw	r3,112(sp)
  812fd4:	d8801b17 	ldw	r2,108(sp)
  812fd8:	44000015 	stw	r16,0(r8)
  812fdc:	90c7883a 	add	r3,r18,r3
  812fe0:	10800044 	addi	r2,r2,1
  812fe4:	44800115 	stw	r18,4(r8)
  812fe8:	d8c01c15 	stw	r3,112(sp)
  812fec:	d8801b15 	stw	r2,108(sp)
  812ff0:	010001c4 	movi	r4,7
  812ff4:	2080750e 	bge	r4,r2,8131cc <___vfiprintf_internal_r+0x300>
  812ff8:	18036f1e 	bne	r3,zero,813db8 <___vfiprintf_internal_r+0xeec>
  812ffc:	d8802317 	ldw	r2,140(sp)
  813000:	d8001b15 	stw	zero,108(sp)
  813004:	d811883a 	mov	r8,sp
  813008:	1485883a 	add	r2,r2,r18
  81300c:	d8802315 	stw	r2,140(sp)
  813010:	88800007 	ldb	r2,0(r17)
  813014:	10041026 	beq	r2,zero,814058 <___vfiprintf_internal_r+0x118c>
  813018:	88c00047 	ldb	r3,1(r17)
  81301c:	88800044 	addi	r2,r17,1
  813020:	d8001d85 	stb	zero,118(sp)
  813024:	000f883a 	mov	r7,zero
  813028:	027fffc4 	movi	r9,-1
  81302c:	0025883a 	mov	r18,zero
  813030:	002b883a 	mov	r21,zero
  813034:	01401604 	movi	r5,88
  813038:	01800244 	movi	r6,9
  81303c:	03400a84 	movi	r13,42
  813040:	03001b04 	movi	r12,108
  813044:	14000044 	addi	r16,r2,1
  813048:	18bff804 	addi	r2,r3,-32
  81304c:	28825536 	bltu	r5,r2,8139a4 <___vfiprintf_internal_r+0xad8>
  813050:	100490ba 	slli	r2,r2,2
  813054:	01002074 	movhi	r4,129
  813058:	210c1a04 	addi	r4,r4,12392
  81305c:	1105883a 	add	r2,r2,r4
  813060:	10800017 	ldw	r2,0(r2)
  813064:	1000683a 	jmp	r2
  813068:	00813768 	cmpgeui	r2,zero,1245
  81306c:	008139a4 	muli	r2,zero,1254
  813070:	008139a4 	muli	r2,zero,1254
  813074:	00813788 	cmpgei	r2,zero,1246
  813078:	008139a4 	muli	r2,zero,1254
  81307c:	008139a4 	muli	r2,zero,1254
  813080:	008139a4 	muli	r2,zero,1254
  813084:	008139a4 	muli	r2,zero,1254
  813088:	008139a4 	muli	r2,zero,1254
  81308c:	008139a4 	muli	r2,zero,1254
  813090:	00813798 	cmpnei	r2,zero,1246
  813094:	008137b8 	rdprs	r2,zero,1246
  813098:	008139a4 	muli	r2,zero,1254
  81309c:	008135e0 	cmpeqi	r2,zero,1239
  8130a0:	008136cc 	andi	r2,zero,1243
  8130a4:	008139a4 	muli	r2,zero,1254
  8130a8:	0081364c 	andi	r2,zero,1241
  8130ac:	0081365c 	xori	r2,zero,1241
  8130b0:	0081365c 	xori	r2,zero,1241
  8130b4:	0081365c 	xori	r2,zero,1241
  8130b8:	0081365c 	xori	r2,zero,1241
  8130bc:	0081365c 	xori	r2,zero,1241
  8130c0:	0081365c 	xori	r2,zero,1241
  8130c4:	0081365c 	xori	r2,zero,1241
  8130c8:	0081365c 	xori	r2,zero,1241
  8130cc:	0081365c 	xori	r2,zero,1241
  8130d0:	008139a4 	muli	r2,zero,1254
  8130d4:	008139a4 	muli	r2,zero,1254
  8130d8:	008139a4 	muli	r2,zero,1254
  8130dc:	008139a4 	muli	r2,zero,1254
  8130e0:	008139a4 	muli	r2,zero,1254
  8130e4:	008139a4 	muli	r2,zero,1254
  8130e8:	008139a4 	muli	r2,zero,1254
  8130ec:	008139a4 	muli	r2,zero,1254
  8130f0:	008139a4 	muli	r2,zero,1254
  8130f4:	008139a4 	muli	r2,zero,1254
  8130f8:	00813688 	cmpgei	r2,zero,1242
  8130fc:	008139a4 	muli	r2,zero,1254
  813100:	008139a4 	muli	r2,zero,1254
  813104:	008139a4 	muli	r2,zero,1254
  813108:	008139a4 	muli	r2,zero,1254
  81310c:	008139a4 	muli	r2,zero,1254
  813110:	008139a4 	muli	r2,zero,1254
  813114:	008139a4 	muli	r2,zero,1254
  813118:	008139a4 	muli	r2,zero,1254
  81311c:	008139a4 	muli	r2,zero,1254
  813120:	008139a4 	muli	r2,zero,1254
  813124:	00813214 	movui	r2,1224
  813128:	008139a4 	muli	r2,zero,1254
  81312c:	008139a4 	muli	r2,zero,1254
  813130:	008139a4 	muli	r2,zero,1254
  813134:	008139a4 	muli	r2,zero,1254
  813138:	008139a4 	muli	r2,zero,1254
  81313c:	008131e0 	cmpeqi	r2,zero,1223
  813140:	008139a4 	muli	r2,zero,1254
  813144:	008139a4 	muli	r2,zero,1254
  813148:	00813828 	cmpgeui	r2,zero,1248
  81314c:	008139a4 	muli	r2,zero,1254
  813150:	008139a4 	muli	r2,zero,1254
  813154:	008139a4 	muli	r2,zero,1254
  813158:	008139a4 	muli	r2,zero,1254
  81315c:	008139a4 	muli	r2,zero,1254
  813160:	008139a4 	muli	r2,zero,1254
  813164:	008139a4 	muli	r2,zero,1254
  813168:	008139a4 	muli	r2,zero,1254
  81316c:	008139a4 	muli	r2,zero,1254
  813170:	008139a4 	muli	r2,zero,1254
  813174:	008137c8 	cmpgei	r2,zero,1247
  813178:	008137f4 	movhi	r2,1247
  81317c:	008139a4 	muli	r2,zero,1254
  813180:	008139a4 	muli	r2,zero,1254
  813184:	008139a4 	muli	r2,zero,1254
  813188:	008138d0 	cmplti	r2,zero,1251
  81318c:	008137f4 	movhi	r2,1247
  813190:	008139a4 	muli	r2,zero,1254
  813194:	008139a4 	muli	r2,zero,1254
  813198:	008138e0 	cmpeqi	r2,zero,1251
  81319c:	008139a4 	muli	r2,zero,1254
  8131a0:	0081370c 	andi	r2,zero,1244
  8131a4:	00813218 	cmpnei	r2,zero,1224
  8131a8:	008138f4 	movhi	r2,1251
  8131ac:	00813934 	movhi	r2,1252
  8131b0:	008139a4 	muli	r2,zero,1254
  8131b4:	0081387c 	xorhi	r2,zero,1249
  8131b8:	008139a4 	muli	r2,zero,1254
  8131bc:	008131e4 	muli	r2,zero,1223
  8131c0:	008139a4 	muli	r2,zero,1254
  8131c4:	008139a4 	muli	r2,zero,1254
  8131c8:	00813944 	movi	r2,1253
  8131cc:	42000204 	addi	r8,r8,8
  8131d0:	d8802317 	ldw	r2,140(sp)
  8131d4:	1485883a 	add	r2,r2,r18
  8131d8:	d8802315 	stw	r2,140(sp)
  8131dc:	003f8c06 	br	813010 <__alt_data_end+0xff813010>
  8131e0:	ad400414 	ori	r21,r21,16
  8131e4:	a880080c 	andi	r2,r21,32
  8131e8:	1001e61e 	bne	r2,zero,813984 <___vfiprintf_internal_r+0xab8>
  8131ec:	a880040c 	andi	r2,r21,16
  8131f0:	10034726 	beq	r2,zero,813f10 <___vfiprintf_internal_r+0x1044>
  8131f4:	d8802217 	ldw	r2,136(sp)
  8131f8:	001b883a 	mov	r13,zero
  8131fc:	15800017 	ldw	r22,0(r2)
  813200:	10800104 	addi	r2,r2,4
  813204:	d8802215 	stw	r2,136(sp)
  813208:	b009883a 	mov	r4,r22
  81320c:	00800044 	movi	r2,1
  813210:	00000c06 	br	813244 <___vfiprintf_internal_r+0x378>
  813214:	ad400414 	ori	r21,r21,16
  813218:	a880080c 	andi	r2,r21,32
  81321c:	1001491e 	bne	r2,zero,813744 <___vfiprintf_internal_r+0x878>
  813220:	a880040c 	andi	r2,r21,16
  813224:	10032d26 	beq	r2,zero,813edc <___vfiprintf_internal_r+0x1010>
  813228:	d9002217 	ldw	r4,136(sp)
  81322c:	001b883a 	mov	r13,zero
  813230:	0005883a 	mov	r2,zero
  813234:	25800017 	ldw	r22,0(r4)
  813238:	21000104 	addi	r4,r4,4
  81323c:	d9002215 	stw	r4,136(sp)
  813240:	b009883a 	mov	r4,r22
  813244:	d8001d85 	stb	zero,118(sp)
  813248:	4827883a 	mov	r19,r9
  81324c:	001d883a 	mov	r14,zero
  813250:	48000216 	blt	r9,zero,81325c <___vfiprintf_internal_r+0x390>
  813254:	00ffdfc4 	movi	r3,-129
  813258:	a8ea703a 	and	r21,r21,r3
  81325c:	2002071e 	bne	r4,zero,813a7c <___vfiprintf_internal_r+0xbb0>
  813260:	4802ad26 	beq	r9,zero,813d18 <___vfiprintf_internal_r+0xe4c>
  813264:	10803fcc 	andi	r2,r2,255
  813268:	00c00044 	movi	r3,1
  81326c:	10c22b26 	beq	r2,r3,813b1c <___vfiprintf_internal_r+0xc50>
  813270:	00c00084 	movi	r3,2
  813274:	dd001a04 	addi	r20,sp,104
  813278:	10c0dd1e 	bne	r2,r3,8135f0 <___vfiprintf_internal_r+0x724>
  81327c:	d9002617 	ldw	r4,152(sp)
  813280:	b08003cc 	andi	r2,r22,15
  813284:	6806973a 	slli	r3,r13,28
  813288:	2085883a 	add	r2,r4,r2
  81328c:	b02cd13a 	srli	r22,r22,4
  813290:	10800003 	ldbu	r2,0(r2)
  813294:	681ad13a 	srli	r13,r13,4
  813298:	a53fffc4 	addi	r20,r20,-1
  81329c:	1dacb03a 	or	r22,r3,r22
  8132a0:	a0800005 	stb	r2,0(r20)
  8132a4:	b344b03a 	or	r2,r22,r13
  8132a8:	103ff51e 	bne	r2,zero,813280 <__alt_data_end+0xff813280>
  8132ac:	d9001e17 	ldw	r4,120(sp)
  8132b0:	2527c83a 	sub	r19,r4,r20
  8132b4:	9823883a 	mov	r17,r19
  8132b8:	9a40010e 	bge	r19,r9,8132c0 <___vfiprintf_internal_r+0x3f4>
  8132bc:	4823883a 	mov	r17,r9
  8132c0:	73803fcc 	andi	r14,r14,255
  8132c4:	7380201c 	xori	r14,r14,128
  8132c8:	73bfe004 	addi	r14,r14,-128
  8132cc:	70000126 	beq	r14,zero,8132d4 <___vfiprintf_internal_r+0x408>
  8132d0:	8c400044 	addi	r17,r17,1
  8132d4:	ab40008c 	andi	r13,r21,2
  8132d8:	68000126 	beq	r13,zero,8132e0 <___vfiprintf_internal_r+0x414>
  8132dc:	8c400084 	addi	r17,r17,2
  8132e0:	ad80210c 	andi	r22,r21,132
  8132e4:	b001c51e 	bne	r22,zero,8139fc <___vfiprintf_internal_r+0xb30>
  8132e8:	9447c83a 	sub	r3,r18,r17
  8132ec:	00c1c30e 	bge	zero,r3,8139fc <___vfiprintf_internal_r+0xb30>
  8132f0:	01c00404 	movi	r7,16
  8132f4:	d8801c17 	ldw	r2,112(sp)
  8132f8:	38c37b0e 	bge	r7,r3,8140e8 <___vfiprintf_internal_r+0x121c>
  8132fc:	010020b4 	movhi	r4,130
  813300:	21338a04 	addi	r4,r4,-12760
  813304:	dc002915 	stw	r16,164(sp)
  813308:	d9801b17 	ldw	r6,108(sp)
  81330c:	d9002415 	stw	r4,144(sp)
  813310:	03c001c4 	movi	r15,7
  813314:	da402515 	stw	r9,148(sp)
  813318:	db402815 	stw	r13,160(sp)
  81331c:	1821883a 	mov	r16,r3
  813320:	00000506 	br	813338 <___vfiprintf_internal_r+0x46c>
  813324:	31400084 	addi	r5,r6,2
  813328:	42000204 	addi	r8,r8,8
  81332c:	200d883a 	mov	r6,r4
  813330:	843ffc04 	addi	r16,r16,-16
  813334:	3c000d0e 	bge	r7,r16,81336c <___vfiprintf_internal_r+0x4a0>
  813338:	10800404 	addi	r2,r2,16
  81333c:	31000044 	addi	r4,r6,1
  813340:	47000015 	stw	fp,0(r8)
  813344:	41c00115 	stw	r7,4(r8)
  813348:	d8801c15 	stw	r2,112(sp)
  81334c:	d9001b15 	stw	r4,108(sp)
  813350:	793ff40e 	bge	r15,r4,813324 <__alt_data_end+0xff813324>
  813354:	10019b1e 	bne	r2,zero,8139c4 <___vfiprintf_internal_r+0xaf8>
  813358:	843ffc04 	addi	r16,r16,-16
  81335c:	000d883a 	mov	r6,zero
  813360:	01400044 	movi	r5,1
  813364:	d811883a 	mov	r8,sp
  813368:	3c3ff316 	blt	r7,r16,813338 <__alt_data_end+0xff813338>
  81336c:	8007883a 	mov	r3,r16
  813370:	da402517 	ldw	r9,148(sp)
  813374:	db402817 	ldw	r13,160(sp)
  813378:	dc002917 	ldw	r16,164(sp)
  81337c:	d9002417 	ldw	r4,144(sp)
  813380:	1885883a 	add	r2,r3,r2
  813384:	40c00115 	stw	r3,4(r8)
  813388:	41000015 	stw	r4,0(r8)
  81338c:	d8801c15 	stw	r2,112(sp)
  813390:	d9401b15 	stw	r5,108(sp)
  813394:	00c001c4 	movi	r3,7
  813398:	19426a16 	blt	r3,r5,813d44 <___vfiprintf_internal_r+0xe78>
  81339c:	d8c01d87 	ldb	r3,118(sp)
  8133a0:	42000204 	addi	r8,r8,8
  8133a4:	29000044 	addi	r4,r5,1
  8133a8:	1801991e 	bne	r3,zero,813a10 <___vfiprintf_internal_r+0xb44>
  8133ac:	68000c26 	beq	r13,zero,8133e0 <___vfiprintf_internal_r+0x514>
  8133b0:	d8c01d04 	addi	r3,sp,116
  8133b4:	10800084 	addi	r2,r2,2
  8133b8:	40c00015 	stw	r3,0(r8)
  8133bc:	00c00084 	movi	r3,2
  8133c0:	40c00115 	stw	r3,4(r8)
  8133c4:	d8801c15 	stw	r2,112(sp)
  8133c8:	d9001b15 	stw	r4,108(sp)
  8133cc:	00c001c4 	movi	r3,7
  8133d0:	19024c16 	blt	r3,r4,813d04 <___vfiprintf_internal_r+0xe38>
  8133d4:	200b883a 	mov	r5,r4
  8133d8:	42000204 	addi	r8,r8,8
  8133dc:	21000044 	addi	r4,r4,1
  8133e0:	00c02004 	movi	r3,128
  8133e4:	b0c20126 	beq	r22,r3,813bec <___vfiprintf_internal_r+0xd20>
  8133e8:	4cedc83a 	sub	r22,r9,r19
  8133ec:	0580230e 	bge	zero,r22,81347c <___vfiprintf_internal_r+0x5b0>
  8133f0:	01c00404 	movi	r7,16
  8133f4:	3d83140e 	bge	r7,r22,814048 <___vfiprintf_internal_r+0x117c>
  8133f8:	010020b4 	movhi	r4,130
  8133fc:	21338604 	addi	r4,r4,-12776
  813400:	d9002415 	stw	r4,144(sp)
  813404:	034001c4 	movi	r13,7
  813408:	00000506 	br	813420 <___vfiprintf_internal_r+0x554>
  81340c:	29000084 	addi	r4,r5,2
  813410:	42000204 	addi	r8,r8,8
  813414:	180b883a 	mov	r5,r3
  813418:	b5bffc04 	addi	r22,r22,-16
  81341c:	3d800d0e 	bge	r7,r22,813454 <___vfiprintf_internal_r+0x588>
  813420:	10800404 	addi	r2,r2,16
  813424:	28c00044 	addi	r3,r5,1
  813428:	45c00015 	stw	r23,0(r8)
  81342c:	41c00115 	stw	r7,4(r8)
  813430:	d8801c15 	stw	r2,112(sp)
  813434:	d8c01b15 	stw	r3,108(sp)
  813438:	68fff40e 	bge	r13,r3,81340c <__alt_data_end+0xff81340c>
  81343c:	1001811e 	bne	r2,zero,813a44 <___vfiprintf_internal_r+0xb78>
  813440:	b5bffc04 	addi	r22,r22,-16
  813444:	01000044 	movi	r4,1
  813448:	000b883a 	mov	r5,zero
  81344c:	d811883a 	mov	r8,sp
  813450:	3dbff316 	blt	r7,r22,813420 <__alt_data_end+0xff813420>
  813454:	d8c02417 	ldw	r3,144(sp)
  813458:	1585883a 	add	r2,r2,r22
  81345c:	45800115 	stw	r22,4(r8)
  813460:	40c00015 	stw	r3,0(r8)
  813464:	d8801c15 	stw	r2,112(sp)
  813468:	d9001b15 	stw	r4,108(sp)
  81346c:	00c001c4 	movi	r3,7
  813470:	1901d016 	blt	r3,r4,813bb4 <___vfiprintf_internal_r+0xce8>
  813474:	42000204 	addi	r8,r8,8
  813478:	21000044 	addi	r4,r4,1
  81347c:	14c5883a 	add	r2,r2,r19
  813480:	45000015 	stw	r20,0(r8)
  813484:	44c00115 	stw	r19,4(r8)
  813488:	d8801c15 	stw	r2,112(sp)
  81348c:	d9001b15 	stw	r4,108(sp)
  813490:	00c001c4 	movi	r3,7
  813494:	1901cf0e 	bge	r3,r4,813bd4 <___vfiprintf_internal_r+0xd08>
  813498:	1002361e 	bne	r2,zero,813d74 <___vfiprintf_internal_r+0xea8>
  81349c:	d8001b15 	stw	zero,108(sp)
  8134a0:	aac0010c 	andi	r11,r21,4
  8134a4:	58002826 	beq	r11,zero,813548 <___vfiprintf_internal_r+0x67c>
  8134a8:	9467c83a 	sub	r19,r18,r17
  8134ac:	d811883a 	mov	r8,sp
  8134b0:	04c3340e 	bge	zero,r19,814184 <___vfiprintf_internal_r+0x12b8>
  8134b4:	01c00404 	movi	r7,16
  8134b8:	3cc31b0e 	bge	r7,r19,814128 <___vfiprintf_internal_r+0x125c>
  8134bc:	00c020b4 	movhi	r3,130
  8134c0:	18f38a04 	addi	r3,r3,-12760
  8134c4:	d9001b17 	ldw	r4,108(sp)
  8134c8:	d8c02415 	stw	r3,144(sp)
  8134cc:	382b883a 	mov	r21,r7
  8134d0:	050001c4 	movi	r20,7
  8134d4:	dd802017 	ldw	r22,128(sp)
  8134d8:	00000506 	br	8134f0 <___vfiprintf_internal_r+0x624>
  8134dc:	21400084 	addi	r5,r4,2
  8134e0:	42000204 	addi	r8,r8,8
  8134e4:	1809883a 	mov	r4,r3
  8134e8:	9cfffc04 	addi	r19,r19,-16
  8134ec:	acc00d0e 	bge	r21,r19,813524 <___vfiprintf_internal_r+0x658>
  8134f0:	10800404 	addi	r2,r2,16
  8134f4:	20c00044 	addi	r3,r4,1
  8134f8:	47000015 	stw	fp,0(r8)
  8134fc:	45400115 	stw	r21,4(r8)
  813500:	d8801c15 	stw	r2,112(sp)
  813504:	d8c01b15 	stw	r3,108(sp)
  813508:	a0fff40e 	bge	r20,r3,8134dc <__alt_data_end+0xff8134dc>
  81350c:	10019f1e 	bne	r2,zero,813b8c <___vfiprintf_internal_r+0xcc0>
  813510:	9cfffc04 	addi	r19,r19,-16
  813514:	01400044 	movi	r5,1
  813518:	0009883a 	mov	r4,zero
  81351c:	d811883a 	mov	r8,sp
  813520:	acfff316 	blt	r21,r19,8134f0 <__alt_data_end+0xff8134f0>
  813524:	d8c02417 	ldw	r3,144(sp)
  813528:	14c5883a 	add	r2,r2,r19
  81352c:	44c00115 	stw	r19,4(r8)
  813530:	40c00015 	stw	r3,0(r8)
  813534:	d8801c15 	stw	r2,112(sp)
  813538:	d9401b15 	stw	r5,108(sp)
  81353c:	00c001c4 	movi	r3,7
  813540:	1941810e 	bge	r3,r5,813b48 <___vfiprintf_internal_r+0xc7c>
  813544:	10017a1e 	bne	r2,zero,813b30 <___vfiprintf_internal_r+0xc64>
  813548:	8c82a416 	blt	r17,r18,813fdc <___vfiprintf_internal_r+0x1110>
  81354c:	d9002317 	ldw	r4,140(sp)
  813550:	2449883a 	add	r4,r4,r17
  813554:	d9002315 	stw	r4,140(sp)
  813558:	d8001b15 	stw	zero,108(sp)
  81355c:	d811883a 	mov	r8,sp
  813560:	003e8e06 	br	812f9c <__alt_data_end+0xff812f9c>
  813564:	d9002017 	ldw	r4,128(sp)
  813568:	a80b883a 	mov	r5,r21
  81356c:	080f0880 	call	80f088 <__swsetup_r>
  813570:	10000c1e 	bne	r2,zero,8135a4 <___vfiprintf_internal_r+0x6d8>
  813574:	a880030b 	ldhu	r2,12(r21)
  813578:	00c00284 	movi	r3,10
  81357c:	1080068c 	andi	r2,r2,26
  813580:	10fe741e 	bne	r2,r3,812f54 <__alt_data_end+0xff812f54>
  813584:	a880038f 	ldh	r2,14(r21)
  813588:	103e7216 	blt	r2,zero,812f54 <__alt_data_end+0xff812f54>
  81358c:	d9002017 	ldw	r4,128(sp)
  813590:	d9c02217 	ldw	r7,136(sp)
  813594:	a80b883a 	mov	r5,r21
  813598:	b00d883a 	mov	r6,r22
  81359c:	08141c00 	call	8141c0 <__sbprintf>
  8135a0:	00000106 	br	8135a8 <___vfiprintf_internal_r+0x6dc>
  8135a4:	00bfffc4 	movi	r2,-1
  8135a8:	dfc03517 	ldw	ra,212(sp)
  8135ac:	df003417 	ldw	fp,208(sp)
  8135b0:	ddc03317 	ldw	r23,204(sp)
  8135b4:	dd803217 	ldw	r22,200(sp)
  8135b8:	dd403117 	ldw	r21,196(sp)
  8135bc:	dd003017 	ldw	r20,192(sp)
  8135c0:	dcc02f17 	ldw	r19,188(sp)
  8135c4:	dc802e17 	ldw	r18,184(sp)
  8135c8:	dc402d17 	ldw	r17,180(sp)
  8135cc:	dc002c17 	ldw	r16,176(sp)
  8135d0:	dec03604 	addi	sp,sp,216
  8135d4:	f800283a 	ret
  8135d8:	080b0780 	call	80b078 <__sinit>
  8135dc:	003e4d06 	br	812f14 <__alt_data_end+0xff812f14>
  8135e0:	8005883a 	mov	r2,r16
  8135e4:	ad400114 	ori	r21,r21,4
  8135e8:	80c00007 	ldb	r3,0(r16)
  8135ec:	003e9506 	br	813044 <__alt_data_end+0xff813044>
  8135f0:	b006d0fa 	srli	r3,r22,3
  8135f4:	6808977a 	slli	r4,r13,29
  8135f8:	681ad0fa 	srli	r13,r13,3
  8135fc:	b58001cc 	andi	r22,r22,7
  813600:	b0800c04 	addi	r2,r22,48
  813604:	a53fffc4 	addi	r20,r20,-1
  813608:	20ecb03a 	or	r22,r4,r3
  81360c:	a0800005 	stb	r2,0(r20)
  813610:	b346b03a 	or	r3,r22,r13
  813614:	183ff61e 	bne	r3,zero,8135f0 <__alt_data_end+0xff8135f0>
  813618:	a8c0004c 	andi	r3,r21,1
  81361c:	a009883a 	mov	r4,r20
  813620:	18013b26 	beq	r3,zero,813b10 <___vfiprintf_internal_r+0xc44>
  813624:	10803fcc 	andi	r2,r2,255
  813628:	1080201c 	xori	r2,r2,128
  81362c:	10bfe004 	addi	r2,r2,-128
  813630:	00c00c04 	movi	r3,48
  813634:	10ff1d26 	beq	r2,r3,8132ac <__alt_data_end+0xff8132ac>
  813638:	d8801e17 	ldw	r2,120(sp)
  81363c:	a53fffc4 	addi	r20,r20,-1
  813640:	20ffffc5 	stb	r3,-1(r4)
  813644:	1527c83a 	sub	r19,r2,r20
  813648:	003f1a06 	br	8132b4 <__alt_data_end+0xff8132b4>
  81364c:	ad402014 	ori	r21,r21,128
  813650:	8005883a 	mov	r2,r16
  813654:	80c00007 	ldb	r3,0(r16)
  813658:	003e7a06 	br	813044 <__alt_data_end+0xff813044>
  81365c:	8005883a 	mov	r2,r16
  813660:	0025883a 	mov	r18,zero
  813664:	193ff404 	addi	r4,r3,-48
  813668:	10c00007 	ldb	r3,0(r2)
  81366c:	948002a4 	muli	r18,r18,10
  813670:	84000044 	addi	r16,r16,1
  813674:	8005883a 	mov	r2,r16
  813678:	9125883a 	add	r18,r18,r4
  81367c:	193ff404 	addi	r4,r3,-48
  813680:	313ff92e 	bgeu	r6,r4,813668 <__alt_data_end+0xff813668>
  813684:	003e7006 	br	813048 <__alt_data_end+0xff813048>
  813688:	ad400414 	ori	r21,r21,16
  81368c:	d9c01d85 	stb	r7,118(sp)
  813690:	a880080c 	andi	r2,r21,32
  813694:	d8c02217 	ldw	r3,136(sp)
  813698:	10005a26 	beq	r2,zero,813804 <___vfiprintf_internal_r+0x938>
  81369c:	d9002217 	ldw	r4,136(sp)
  8136a0:	18800117 	ldw	r2,4(r3)
  8136a4:	1d800017 	ldw	r22,0(r3)
  8136a8:	21000204 	addi	r4,r4,8
  8136ac:	d9002215 	stw	r4,136(sp)
  8136b0:	101b883a 	mov	r13,r2
  8136b4:	1001f416 	blt	r2,zero,813e88 <___vfiprintf_internal_r+0xfbc>
  8136b8:	db801d83 	ldbu	r14,118(sp)
  8136bc:	4827883a 	mov	r19,r9
  8136c0:	00800044 	movi	r2,1
  8136c4:	b348b03a 	or	r4,r22,r13
  8136c8:	003ee106 	br	813250 <__alt_data_end+0xff813250>
  8136cc:	80c00007 	ldb	r3,0(r16)
  8136d0:	80800044 	addi	r2,r16,1
  8136d4:	1b42a326 	beq	r3,r13,814164 <___vfiprintf_internal_r+0x1298>
  8136d8:	193ff404 	addi	r4,r3,-48
  8136dc:	1021883a 	mov	r16,r2
  8136e0:	0013883a 	mov	r9,zero
  8136e4:	313e5836 	bltu	r6,r4,813048 <__alt_data_end+0xff813048>
  8136e8:	80c00007 	ldb	r3,0(r16)
  8136ec:	4a4002a4 	muli	r9,r9,10
  8136f0:	84000044 	addi	r16,r16,1
  8136f4:	2253883a 	add	r9,r4,r9
  8136f8:	193ff404 	addi	r4,r3,-48
  8136fc:	313ffa2e 	bgeu	r6,r4,8136e8 <__alt_data_end+0xff8136e8>
  813700:	483e510e 	bge	r9,zero,813048 <__alt_data_end+0xff813048>
  813704:	027fffc4 	movi	r9,-1
  813708:	003e4f06 	br	813048 <__alt_data_end+0xff813048>
  81370c:	d9c01d85 	stb	r7,118(sp)
  813710:	a880080c 	andi	r2,r21,32
  813714:	10020826 	beq	r2,zero,813f38 <___vfiprintf_internal_r+0x106c>
  813718:	d8c02217 	ldw	r3,136(sp)
  81371c:	d9002317 	ldw	r4,140(sp)
  813720:	18800017 	ldw	r2,0(r3)
  813724:	2007d7fa 	srai	r3,r4,31
  813728:	d9002217 	ldw	r4,136(sp)
  81372c:	10c00115 	stw	r3,4(r2)
  813730:	21000104 	addi	r4,r4,4
  813734:	d9002215 	stw	r4,136(sp)
  813738:	d9002317 	ldw	r4,140(sp)
  81373c:	11000015 	stw	r4,0(r2)
  813740:	003e1606 	br	812f9c <__alt_data_end+0xff812f9c>
  813744:	d8802217 	ldw	r2,136(sp)
  813748:	d8c02217 	ldw	r3,136(sp)
  81374c:	15800017 	ldw	r22,0(r2)
  813750:	13400117 	ldw	r13,4(r2)
  813754:	18c00204 	addi	r3,r3,8
  813758:	0005883a 	mov	r2,zero
  81375c:	d8c02215 	stw	r3,136(sp)
  813760:	b348b03a 	or	r4,r22,r13
  813764:	003eb706 	br	813244 <__alt_data_end+0xff813244>
  813768:	38803fcc 	andi	r2,r7,255
  81376c:	1080201c 	xori	r2,r2,128
  813770:	10bfe004 	addi	r2,r2,-128
  813774:	1001e31e 	bne	r2,zero,813f04 <___vfiprintf_internal_r+0x1038>
  813778:	8005883a 	mov	r2,r16
  81377c:	01c00804 	movi	r7,32
  813780:	80c00007 	ldb	r3,0(r16)
  813784:	003e2f06 	br	813044 <__alt_data_end+0xff813044>
  813788:	ad400054 	ori	r21,r21,1
  81378c:	8005883a 	mov	r2,r16
  813790:	80c00007 	ldb	r3,0(r16)
  813794:	003e2b06 	br	813044 <__alt_data_end+0xff813044>
  813798:	d8c02217 	ldw	r3,136(sp)
  81379c:	1c800017 	ldw	r18,0(r3)
  8137a0:	18c00104 	addi	r3,r3,4
  8137a4:	90023816 	blt	r18,zero,814088 <___vfiprintf_internal_r+0x11bc>
  8137a8:	d8c02215 	stw	r3,136(sp)
  8137ac:	8005883a 	mov	r2,r16
  8137b0:	80c00007 	ldb	r3,0(r16)
  8137b4:	003e2306 	br	813044 <__alt_data_end+0xff813044>
  8137b8:	8005883a 	mov	r2,r16
  8137bc:	01c00ac4 	movi	r7,43
  8137c0:	80c00007 	ldb	r3,0(r16)
  8137c4:	003e1f06 	br	813044 <__alt_data_end+0xff813044>
  8137c8:	d8c02217 	ldw	r3,136(sp)
  8137cc:	04400044 	movi	r17,1
  8137d0:	d8001d85 	stb	zero,118(sp)
  8137d4:	18800017 	ldw	r2,0(r3)
  8137d8:	18c00104 	addi	r3,r3,4
  8137dc:	d8c02215 	stw	r3,136(sp)
  8137e0:	d8801005 	stb	r2,64(sp)
  8137e4:	8827883a 	mov	r19,r17
  8137e8:	dd001004 	addi	r20,sp,64
  8137ec:	0013883a 	mov	r9,zero
  8137f0:	003eb806 	br	8132d4 <__alt_data_end+0xff8132d4>
  8137f4:	d9c01d85 	stb	r7,118(sp)
  8137f8:	a880080c 	andi	r2,r21,32
  8137fc:	d8c02217 	ldw	r3,136(sp)
  813800:	103fa61e 	bne	r2,zero,81369c <__alt_data_end+0xff81369c>
  813804:	a880040c 	andi	r2,r21,16
  813808:	1001dd26 	beq	r2,zero,813f80 <___vfiprintf_internal_r+0x10b4>
  81380c:	1d800017 	ldw	r22,0(r3)
  813810:	d8802217 	ldw	r2,136(sp)
  813814:	b01bd7fa 	srai	r13,r22,31
  813818:	10800104 	addi	r2,r2,4
  81381c:	d8802215 	stw	r2,136(sp)
  813820:	6805883a 	mov	r2,r13
  813824:	003fa306 	br	8136b4 <__alt_data_end+0xff8136b4>
  813828:	008020b4 	movhi	r2,130
  81382c:	10b32104 	addi	r2,r2,-13180
  813830:	d8802615 	stw	r2,152(sp)
  813834:	d9c01d85 	stb	r7,118(sp)
  813838:	a880080c 	andi	r2,r21,32
  81383c:	10004726 	beq	r2,zero,81395c <___vfiprintf_internal_r+0xa90>
  813840:	d9002217 	ldw	r4,136(sp)
  813844:	25800017 	ldw	r22,0(r4)
  813848:	23400117 	ldw	r13,4(r4)
  81384c:	21000204 	addi	r4,r4,8
  813850:	d9002215 	stw	r4,136(sp)
  813854:	a880004c 	andi	r2,r21,1
  813858:	10014e26 	beq	r2,zero,813d94 <___vfiprintf_internal_r+0xec8>
  81385c:	b348b03a 	or	r4,r22,r13
  813860:	20019c26 	beq	r4,zero,813ed4 <___vfiprintf_internal_r+0x1008>
  813864:	00800c04 	movi	r2,48
  813868:	d8801d05 	stb	r2,116(sp)
  81386c:	d8c01d45 	stb	r3,117(sp)
  813870:	ad400094 	ori	r21,r21,2
  813874:	00800084 	movi	r2,2
  813878:	003e7206 	br	813244 <__alt_data_end+0xff813244>
  81387c:	d8c02217 	ldw	r3,136(sp)
  813880:	d8001d85 	stb	zero,118(sp)
  813884:	1d000017 	ldw	r20,0(r3)
  813888:	1d800104 	addi	r22,r3,4
  81388c:	a0021c26 	beq	r20,zero,814100 <___vfiprintf_internal_r+0x1234>
  813890:	a009883a 	mov	r4,r20
  813894:	48020016 	blt	r9,zero,814098 <___vfiprintf_internal_r+0x11cc>
  813898:	480d883a 	mov	r6,r9
  81389c:	000b883a 	mov	r5,zero
  8138a0:	da002a15 	stw	r8,168(sp)
  8138a4:	da402b15 	stw	r9,172(sp)
  8138a8:	08112540 	call	811254 <memchr>
  8138ac:	da002a17 	ldw	r8,168(sp)
  8138b0:	da402b17 	ldw	r9,172(sp)
  8138b4:	10022226 	beq	r2,zero,814140 <___vfiprintf_internal_r+0x1274>
  8138b8:	1527c83a 	sub	r19,r2,r20
  8138bc:	4cc1c916 	blt	r9,r19,813fe4 <___vfiprintf_internal_r+0x1118>
  8138c0:	db801d83 	ldbu	r14,118(sp)
  8138c4:	dd802215 	stw	r22,136(sp)
  8138c8:	0013883a 	mov	r9,zero
  8138cc:	003e7906 	br	8132b4 <__alt_data_end+0xff8132b4>
  8138d0:	ad401014 	ori	r21,r21,64
  8138d4:	8005883a 	mov	r2,r16
  8138d8:	80c00007 	ldb	r3,0(r16)
  8138dc:	003dd906 	br	813044 <__alt_data_end+0xff813044>
  8138e0:	80c00007 	ldb	r3,0(r16)
  8138e4:	8005883a 	mov	r2,r16
  8138e8:	1b01e326 	beq	r3,r12,814078 <___vfiprintf_internal_r+0x11ac>
  8138ec:	ad400414 	ori	r21,r21,16
  8138f0:	003dd406 	br	813044 <__alt_data_end+0xff813044>
  8138f4:	d9002217 	ldw	r4,136(sp)
  8138f8:	00800c04 	movi	r2,48
  8138fc:	d8801d05 	stb	r2,116(sp)
  813900:	25800017 	ldw	r22,0(r4)
  813904:	00801e04 	movi	r2,120
  813908:	d8801d45 	stb	r2,117(sp)
  81390c:	008020b4 	movhi	r2,130
  813910:	21000104 	addi	r4,r4,4
  813914:	10b32604 	addi	r2,r2,-13160
  813918:	d9002215 	stw	r4,136(sp)
  81391c:	d8802615 	stw	r2,152(sp)
  813920:	001b883a 	mov	r13,zero
  813924:	ad400094 	ori	r21,r21,2
  813928:	00800084 	movi	r2,2
  81392c:	b009883a 	mov	r4,r22
  813930:	003e4406 	br	813244 <__alt_data_end+0xff813244>
  813934:	ad400814 	ori	r21,r21,32
  813938:	8005883a 	mov	r2,r16
  81393c:	80c00007 	ldb	r3,0(r16)
  813940:	003dc006 	br	813044 <__alt_data_end+0xff813044>
  813944:	008020b4 	movhi	r2,130
  813948:	10b32604 	addi	r2,r2,-13160
  81394c:	d8802615 	stw	r2,152(sp)
  813950:	d9c01d85 	stb	r7,118(sp)
  813954:	a880080c 	andi	r2,r21,32
  813958:	103fb91e 	bne	r2,zero,813840 <__alt_data_end+0xff813840>
  81395c:	a880040c 	andi	r2,r21,16
  813960:	10010f1e 	bne	r2,zero,813da0 <___vfiprintf_internal_r+0xed4>
  813964:	a880100c 	andi	r2,r21,64
  813968:	10010d26 	beq	r2,zero,813da0 <___vfiprintf_internal_r+0xed4>
  81396c:	d9002217 	ldw	r4,136(sp)
  813970:	001b883a 	mov	r13,zero
  813974:	2580000b 	ldhu	r22,0(r4)
  813978:	21000104 	addi	r4,r4,4
  81397c:	d9002215 	stw	r4,136(sp)
  813980:	003fb406 	br	813854 <__alt_data_end+0xff813854>
  813984:	d9002217 	ldw	r4,136(sp)
  813988:	00800044 	movi	r2,1
  81398c:	25800017 	ldw	r22,0(r4)
  813990:	23400117 	ldw	r13,4(r4)
  813994:	21000204 	addi	r4,r4,8
  813998:	d9002215 	stw	r4,136(sp)
  81399c:	b348b03a 	or	r4,r22,r13
  8139a0:	003e2806 	br	813244 <__alt_data_end+0xff813244>
  8139a4:	d9c01d85 	stb	r7,118(sp)
  8139a8:	1801ab26 	beq	r3,zero,814058 <___vfiprintf_internal_r+0x118c>
  8139ac:	04400044 	movi	r17,1
  8139b0:	d8c01005 	stb	r3,64(sp)
  8139b4:	d8001d85 	stb	zero,118(sp)
  8139b8:	8827883a 	mov	r19,r17
  8139bc:	dd001004 	addi	r20,sp,64
  8139c0:	003f8a06 	br	8137ec <__alt_data_end+0xff8137ec>
  8139c4:	d9002017 	ldw	r4,128(sp)
  8139c8:	d9402117 	ldw	r5,132(sp)
  8139cc:	d9801a04 	addi	r6,sp,104
  8139d0:	d9c02b15 	stw	r7,172(sp)
  8139d4:	dbc02a15 	stw	r15,168(sp)
  8139d8:	0812db80 	call	812db8 <__sprint_r.part.0>
  8139dc:	d9c02b17 	ldw	r7,172(sp)
  8139e0:	dbc02a17 	ldw	r15,168(sp)
  8139e4:	1000631e 	bne	r2,zero,813b74 <___vfiprintf_internal_r+0xca8>
  8139e8:	d9801b17 	ldw	r6,108(sp)
  8139ec:	d8801c17 	ldw	r2,112(sp)
  8139f0:	d811883a 	mov	r8,sp
  8139f4:	31400044 	addi	r5,r6,1
  8139f8:	003e4d06 	br	813330 <__alt_data_end+0xff813330>
  8139fc:	d9401b17 	ldw	r5,108(sp)
  813a00:	d8801c17 	ldw	r2,112(sp)
  813a04:	29000044 	addi	r4,r5,1
  813a08:	d8c01d87 	ldb	r3,118(sp)
  813a0c:	183e6726 	beq	r3,zero,8133ac <__alt_data_end+0xff8133ac>
  813a10:	00c00044 	movi	r3,1
  813a14:	d9401d84 	addi	r5,sp,118
  813a18:	10c5883a 	add	r2,r2,r3
  813a1c:	41400015 	stw	r5,0(r8)
  813a20:	40c00115 	stw	r3,4(r8)
  813a24:	d8801c15 	stw	r2,112(sp)
  813a28:	d9001b15 	stw	r4,108(sp)
  813a2c:	014001c4 	movi	r5,7
  813a30:	2900ab16 	blt	r5,r4,813ce0 <___vfiprintf_internal_r+0xe14>
  813a34:	200b883a 	mov	r5,r4
  813a38:	42000204 	addi	r8,r8,8
  813a3c:	21000044 	addi	r4,r4,1
  813a40:	003e5a06 	br	8133ac <__alt_data_end+0xff8133ac>
  813a44:	d9002017 	ldw	r4,128(sp)
  813a48:	d9402117 	ldw	r5,132(sp)
  813a4c:	d9801a04 	addi	r6,sp,104
  813a50:	d9c02b15 	stw	r7,172(sp)
  813a54:	db402a15 	stw	r13,168(sp)
  813a58:	0812db80 	call	812db8 <__sprint_r.part.0>
  813a5c:	d9c02b17 	ldw	r7,172(sp)
  813a60:	db402a17 	ldw	r13,168(sp)
  813a64:	1000431e 	bne	r2,zero,813b74 <___vfiprintf_internal_r+0xca8>
  813a68:	d9401b17 	ldw	r5,108(sp)
  813a6c:	d8801c17 	ldw	r2,112(sp)
  813a70:	d811883a 	mov	r8,sp
  813a74:	29000044 	addi	r4,r5,1
  813a78:	003e6706 	br	813418 <__alt_data_end+0xff813418>
  813a7c:	10803fcc 	andi	r2,r2,255
  813a80:	00c00044 	movi	r3,1
  813a84:	10fdfa1e 	bne	r2,r3,813270 <__alt_data_end+0xff813270>
  813a88:	6800021e 	bne	r13,zero,813a94 <___vfiprintf_internal_r+0xbc8>
  813a8c:	00800244 	movi	r2,9
  813a90:	1580222e 	bgeu	r2,r22,813b1c <___vfiprintf_internal_r+0xc50>
  813a94:	dc802415 	stw	r18,144(sp)
  813a98:	dc002515 	stw	r16,148(sp)
  813a9c:	dc401a04 	addi	r17,sp,104
  813aa0:	b021883a 	mov	r16,r22
  813aa4:	4827883a 	mov	r19,r9
  813aa8:	4029883a 	mov	r20,r8
  813aac:	702d883a 	mov	r22,r14
  813ab0:	6825883a 	mov	r18,r13
  813ab4:	8009883a 	mov	r4,r16
  813ab8:	900b883a 	mov	r5,r18
  813abc:	01800284 	movi	r6,10
  813ac0:	000f883a 	mov	r7,zero
  813ac4:	0814e1c0 	call	814e1c <__umoddi3>
  813ac8:	10800c04 	addi	r2,r2,48
  813acc:	8c7fffc4 	addi	r17,r17,-1
  813ad0:	8009883a 	mov	r4,r16
  813ad4:	900b883a 	mov	r5,r18
  813ad8:	01800284 	movi	r6,10
  813adc:	000f883a 	mov	r7,zero
  813ae0:	88800005 	stb	r2,0(r17)
  813ae4:	081485c0 	call	81485c <__udivdi3>
  813ae8:	1021883a 	mov	r16,r2
  813aec:	10c4b03a 	or	r2,r2,r3
  813af0:	1825883a 	mov	r18,r3
  813af4:	103fef1e 	bne	r2,zero,813ab4 <__alt_data_end+0xff813ab4>
  813af8:	dc802417 	ldw	r18,144(sp)
  813afc:	dc002517 	ldw	r16,148(sp)
  813b00:	a011883a 	mov	r8,r20
  813b04:	9813883a 	mov	r9,r19
  813b08:	b01d883a 	mov	r14,r22
  813b0c:	8829883a 	mov	r20,r17
  813b10:	d8c01e17 	ldw	r3,120(sp)
  813b14:	1d27c83a 	sub	r19,r3,r20
  813b18:	003de606 	br	8132b4 <__alt_data_end+0xff8132b4>
  813b1c:	b5800c04 	addi	r22,r22,48
  813b20:	dd8019c5 	stb	r22,103(sp)
  813b24:	dcc02717 	ldw	r19,156(sp)
  813b28:	dd0019c4 	addi	r20,sp,103
  813b2c:	003de106 	br	8132b4 <__alt_data_end+0xff8132b4>
  813b30:	d9002017 	ldw	r4,128(sp)
  813b34:	d9402117 	ldw	r5,132(sp)
  813b38:	d9801a04 	addi	r6,sp,104
  813b3c:	0812db80 	call	812db8 <__sprint_r.part.0>
  813b40:	10000c1e 	bne	r2,zero,813b74 <___vfiprintf_internal_r+0xca8>
  813b44:	d8801c17 	ldw	r2,112(sp)
  813b48:	8c80010e 	bge	r17,r18,813b50 <___vfiprintf_internal_r+0xc84>
  813b4c:	9023883a 	mov	r17,r18
  813b50:	d8c02317 	ldw	r3,140(sp)
  813b54:	1c47883a 	add	r3,r3,r17
  813b58:	d8c02315 	stw	r3,140(sp)
  813b5c:	103e7e26 	beq	r2,zero,813558 <__alt_data_end+0xff813558>
  813b60:	d9002017 	ldw	r4,128(sp)
  813b64:	d9402117 	ldw	r5,132(sp)
  813b68:	d9801a04 	addi	r6,sp,104
  813b6c:	0812db80 	call	812db8 <__sprint_r.part.0>
  813b70:	103e7926 	beq	r2,zero,813558 <__alt_data_end+0xff813558>
  813b74:	dd402117 	ldw	r21,132(sp)
  813b78:	a880030b 	ldhu	r2,12(r21)
  813b7c:	1080100c 	andi	r2,r2,64
  813b80:	103e881e 	bne	r2,zero,8135a4 <__alt_data_end+0xff8135a4>
  813b84:	d8802317 	ldw	r2,140(sp)
  813b88:	003e8706 	br	8135a8 <__alt_data_end+0xff8135a8>
  813b8c:	d9402117 	ldw	r5,132(sp)
  813b90:	b009883a 	mov	r4,r22
  813b94:	d9801a04 	addi	r6,sp,104
  813b98:	0812db80 	call	812db8 <__sprint_r.part.0>
  813b9c:	103ff51e 	bne	r2,zero,813b74 <__alt_data_end+0xff813b74>
  813ba0:	d9001b17 	ldw	r4,108(sp)
  813ba4:	d8801c17 	ldw	r2,112(sp)
  813ba8:	d811883a 	mov	r8,sp
  813bac:	21400044 	addi	r5,r4,1
  813bb0:	003e4d06 	br	8134e8 <__alt_data_end+0xff8134e8>
  813bb4:	1000aa1e 	bne	r2,zero,813e60 <___vfiprintf_internal_r+0xf94>
  813bb8:	00c00044 	movi	r3,1
  813bbc:	9805883a 	mov	r2,r19
  813bc0:	dd000015 	stw	r20,0(sp)
  813bc4:	dcc00115 	stw	r19,4(sp)
  813bc8:	dcc01c15 	stw	r19,112(sp)
  813bcc:	d8c01b15 	stw	r3,108(sp)
  813bd0:	d811883a 	mov	r8,sp
  813bd4:	42000204 	addi	r8,r8,8
  813bd8:	aac0010c 	andi	r11,r21,4
  813bdc:	583fda26 	beq	r11,zero,813b48 <__alt_data_end+0xff813b48>
  813be0:	9467c83a 	sub	r19,r18,r17
  813be4:	04fe3316 	blt	zero,r19,8134b4 <__alt_data_end+0xff8134b4>
  813be8:	003fd706 	br	813b48 <__alt_data_end+0xff813b48>
  813bec:	946dc83a 	sub	r22,r18,r17
  813bf0:	05bdfd0e 	bge	zero,r22,8133e8 <__alt_data_end+0xff8133e8>
  813bf4:	00c020b4 	movhi	r3,130
  813bf8:	18f38604 	addi	r3,r3,-12776
  813bfc:	01c00404 	movi	r7,16
  813c00:	d8c02415 	stw	r3,144(sp)
  813c04:	3d81530e 	bge	r7,r22,814154 <___vfiprintf_internal_r+0x1288>
  813c08:	8007883a 	mov	r3,r16
  813c0c:	034001c4 	movi	r13,7
  813c10:	b021883a 	mov	r16,r22
  813c14:	da402515 	stw	r9,148(sp)
  813c18:	182d883a 	mov	r22,r3
  813c1c:	00000506 	br	813c34 <___vfiprintf_internal_r+0xd68>
  813c20:	29800084 	addi	r6,r5,2
  813c24:	42000204 	addi	r8,r8,8
  813c28:	180b883a 	mov	r5,r3
  813c2c:	843ffc04 	addi	r16,r16,-16
  813c30:	3c000d0e 	bge	r7,r16,813c68 <___vfiprintf_internal_r+0xd9c>
  813c34:	10800404 	addi	r2,r2,16
  813c38:	28c00044 	addi	r3,r5,1
  813c3c:	45c00015 	stw	r23,0(r8)
  813c40:	41c00115 	stw	r7,4(r8)
  813c44:	d8801c15 	stw	r2,112(sp)
  813c48:	d8c01b15 	stw	r3,108(sp)
  813c4c:	68fff40e 	bge	r13,r3,813c20 <__alt_data_end+0xff813c20>
  813c50:	1000151e 	bne	r2,zero,813ca8 <___vfiprintf_internal_r+0xddc>
  813c54:	843ffc04 	addi	r16,r16,-16
  813c58:	01800044 	movi	r6,1
  813c5c:	000b883a 	mov	r5,zero
  813c60:	d811883a 	mov	r8,sp
  813c64:	3c3ff316 	blt	r7,r16,813c34 <__alt_data_end+0xff813c34>
  813c68:	da402517 	ldw	r9,148(sp)
  813c6c:	b007883a 	mov	r3,r22
  813c70:	802d883a 	mov	r22,r16
  813c74:	1821883a 	mov	r16,r3
  813c78:	d8c02417 	ldw	r3,144(sp)
  813c7c:	1585883a 	add	r2,r2,r22
  813c80:	45800115 	stw	r22,4(r8)
  813c84:	40c00015 	stw	r3,0(r8)
  813c88:	d8801c15 	stw	r2,112(sp)
  813c8c:	d9801b15 	stw	r6,108(sp)
  813c90:	00c001c4 	movi	r3,7
  813c94:	19806d16 	blt	r3,r6,813e4c <___vfiprintf_internal_r+0xf80>
  813c98:	42000204 	addi	r8,r8,8
  813c9c:	31000044 	addi	r4,r6,1
  813ca0:	300b883a 	mov	r5,r6
  813ca4:	003dd006 	br	8133e8 <__alt_data_end+0xff8133e8>
  813ca8:	d9002017 	ldw	r4,128(sp)
  813cac:	d9402117 	ldw	r5,132(sp)
  813cb0:	d9801a04 	addi	r6,sp,104
  813cb4:	d9c02b15 	stw	r7,172(sp)
  813cb8:	db402a15 	stw	r13,168(sp)
  813cbc:	0812db80 	call	812db8 <__sprint_r.part.0>
  813cc0:	d9c02b17 	ldw	r7,172(sp)
  813cc4:	db402a17 	ldw	r13,168(sp)
  813cc8:	103faa1e 	bne	r2,zero,813b74 <__alt_data_end+0xff813b74>
  813ccc:	d9401b17 	ldw	r5,108(sp)
  813cd0:	d8801c17 	ldw	r2,112(sp)
  813cd4:	d811883a 	mov	r8,sp
  813cd8:	29800044 	addi	r6,r5,1
  813cdc:	003fd306 	br	813c2c <__alt_data_end+0xff813c2c>
  813ce0:	1000401e 	bne	r2,zero,813de4 <___vfiprintf_internal_r+0xf18>
  813ce4:	68003b26 	beq	r13,zero,813dd4 <___vfiprintf_internal_r+0xf08>
  813ce8:	d9001d04 	addi	r4,sp,116
  813cec:	00800084 	movi	r2,2
  813cf0:	d9000015 	stw	r4,0(sp)
  813cf4:	d8800115 	stw	r2,4(sp)
  813cf8:	1809883a 	mov	r4,r3
  813cfc:	d811883a 	mov	r8,sp
  813d00:	003db406 	br	8133d4 <__alt_data_end+0xff8133d4>
  813d04:	1000451e 	bne	r2,zero,813e1c <___vfiprintf_internal_r+0xf50>
  813d08:	01000044 	movi	r4,1
  813d0c:	000b883a 	mov	r5,zero
  813d10:	d811883a 	mov	r8,sp
  813d14:	003db206 	br	8133e0 <__alt_data_end+0xff8133e0>
  813d18:	10803fcc 	andi	r2,r2,255
  813d1c:	1000071e 	bne	r2,zero,813d3c <___vfiprintf_internal_r+0xe70>
  813d20:	a880004c 	andi	r2,r21,1
  813d24:	10000526 	beq	r2,zero,813d3c <___vfiprintf_internal_r+0xe70>
  813d28:	00800c04 	movi	r2,48
  813d2c:	d88019c5 	stb	r2,103(sp)
  813d30:	dcc02717 	ldw	r19,156(sp)
  813d34:	dd0019c4 	addi	r20,sp,103
  813d38:	003d5e06 	br	8132b4 <__alt_data_end+0xff8132b4>
  813d3c:	dd001a04 	addi	r20,sp,104
  813d40:	003d5c06 	br	8132b4 <__alt_data_end+0xff8132b4>
  813d44:	1000971e 	bne	r2,zero,813fa4 <___vfiprintf_internal_r+0x10d8>
  813d48:	d8c01d87 	ldb	r3,118(sp)
  813d4c:	18005826 	beq	r3,zero,813eb0 <___vfiprintf_internal_r+0xfe4>
  813d50:	00800044 	movi	r2,1
  813d54:	d8c01d84 	addi	r3,sp,118
  813d58:	1009883a 	mov	r4,r2
  813d5c:	d8c00015 	stw	r3,0(sp)
  813d60:	d8800115 	stw	r2,4(sp)
  813d64:	d811883a 	mov	r8,sp
  813d68:	003f3206 	br	813a34 <__alt_data_end+0xff813a34>
  813d6c:	8023883a 	mov	r17,r16
  813d70:	003ca706 	br	813010 <__alt_data_end+0xff813010>
  813d74:	d9002017 	ldw	r4,128(sp)
  813d78:	d9402117 	ldw	r5,132(sp)
  813d7c:	d9801a04 	addi	r6,sp,104
  813d80:	0812db80 	call	812db8 <__sprint_r.part.0>
  813d84:	103f7b1e 	bne	r2,zero,813b74 <__alt_data_end+0xff813b74>
  813d88:	d8801c17 	ldw	r2,112(sp)
  813d8c:	d811883a 	mov	r8,sp
  813d90:	003f9106 	br	813bd8 <__alt_data_end+0xff813bd8>
  813d94:	00800084 	movi	r2,2
  813d98:	b348b03a 	or	r4,r22,r13
  813d9c:	003d2906 	br	813244 <__alt_data_end+0xff813244>
  813da0:	d8802217 	ldw	r2,136(sp)
  813da4:	001b883a 	mov	r13,zero
  813da8:	15800017 	ldw	r22,0(r2)
  813dac:	10800104 	addi	r2,r2,4
  813db0:	d8802215 	stw	r2,136(sp)
  813db4:	003ea706 	br	813854 <__alt_data_end+0xff813854>
  813db8:	d9002017 	ldw	r4,128(sp)
  813dbc:	d9402117 	ldw	r5,132(sp)
  813dc0:	d9801a04 	addi	r6,sp,104
  813dc4:	0812db80 	call	812db8 <__sprint_r.part.0>
  813dc8:	103f6a1e 	bne	r2,zero,813b74 <__alt_data_end+0xff813b74>
  813dcc:	d811883a 	mov	r8,sp
  813dd0:	003cff06 	br	8131d0 <__alt_data_end+0xff8131d0>
  813dd4:	000b883a 	mov	r5,zero
  813dd8:	1809883a 	mov	r4,r3
  813ddc:	d811883a 	mov	r8,sp
  813de0:	003d7f06 	br	8133e0 <__alt_data_end+0xff8133e0>
  813de4:	d9002017 	ldw	r4,128(sp)
  813de8:	d9402117 	ldw	r5,132(sp)
  813dec:	d9801a04 	addi	r6,sp,104
  813df0:	da402b15 	stw	r9,172(sp)
  813df4:	db402a15 	stw	r13,168(sp)
  813df8:	0812db80 	call	812db8 <__sprint_r.part.0>
  813dfc:	da402b17 	ldw	r9,172(sp)
  813e00:	db402a17 	ldw	r13,168(sp)
  813e04:	103f5b1e 	bne	r2,zero,813b74 <__alt_data_end+0xff813b74>
  813e08:	d9401b17 	ldw	r5,108(sp)
  813e0c:	d8801c17 	ldw	r2,112(sp)
  813e10:	d811883a 	mov	r8,sp
  813e14:	29000044 	addi	r4,r5,1
  813e18:	003d6406 	br	8133ac <__alt_data_end+0xff8133ac>
  813e1c:	d9002017 	ldw	r4,128(sp)
  813e20:	d9402117 	ldw	r5,132(sp)
  813e24:	d9801a04 	addi	r6,sp,104
  813e28:	da402b15 	stw	r9,172(sp)
  813e2c:	0812db80 	call	812db8 <__sprint_r.part.0>
  813e30:	da402b17 	ldw	r9,172(sp)
  813e34:	103f4f1e 	bne	r2,zero,813b74 <__alt_data_end+0xff813b74>
  813e38:	d9401b17 	ldw	r5,108(sp)
  813e3c:	d8801c17 	ldw	r2,112(sp)
  813e40:	d811883a 	mov	r8,sp
  813e44:	29000044 	addi	r4,r5,1
  813e48:	003d6506 	br	8133e0 <__alt_data_end+0xff8133e0>
  813e4c:	10009a1e 	bne	r2,zero,8140b8 <___vfiprintf_internal_r+0x11ec>
  813e50:	01000044 	movi	r4,1
  813e54:	000b883a 	mov	r5,zero
  813e58:	d811883a 	mov	r8,sp
  813e5c:	003d6206 	br	8133e8 <__alt_data_end+0xff8133e8>
  813e60:	d9002017 	ldw	r4,128(sp)
  813e64:	d9402117 	ldw	r5,132(sp)
  813e68:	d9801a04 	addi	r6,sp,104
  813e6c:	0812db80 	call	812db8 <__sprint_r.part.0>
  813e70:	103f401e 	bne	r2,zero,813b74 <__alt_data_end+0xff813b74>
  813e74:	d9001b17 	ldw	r4,108(sp)
  813e78:	d8801c17 	ldw	r2,112(sp)
  813e7c:	d811883a 	mov	r8,sp
  813e80:	21000044 	addi	r4,r4,1
  813e84:	003d7d06 	br	81347c <__alt_data_end+0xff81347c>
  813e88:	05adc83a 	sub	r22,zero,r22
  813e8c:	b004c03a 	cmpne	r2,r22,zero
  813e90:	035bc83a 	sub	r13,zero,r13
  813e94:	689bc83a 	sub	r13,r13,r2
  813e98:	03800b44 	movi	r14,45
  813e9c:	db801d85 	stb	r14,118(sp)
  813ea0:	4827883a 	mov	r19,r9
  813ea4:	00800044 	movi	r2,1
  813ea8:	b348b03a 	or	r4,r22,r13
  813eac:	003ce806 	br	813250 <__alt_data_end+0xff813250>
  813eb0:	000b883a 	mov	r5,zero
  813eb4:	01000044 	movi	r4,1
  813eb8:	d811883a 	mov	r8,sp
  813ebc:	683d4826 	beq	r13,zero,8133e0 <__alt_data_end+0xff8133e0>
  813ec0:	00800084 	movi	r2,2
  813ec4:	d8c01d04 	addi	r3,sp,116
  813ec8:	d8c00015 	stw	r3,0(sp)
  813ecc:	d8800115 	stw	r2,4(sp)
  813ed0:	003d4006 	br	8133d4 <__alt_data_end+0xff8133d4>
  813ed4:	00800084 	movi	r2,2
  813ed8:	003cda06 	br	813244 <__alt_data_end+0xff813244>
  813edc:	a880100c 	andi	r2,r21,64
  813ee0:	10004226 	beq	r2,zero,813fec <___vfiprintf_internal_r+0x1120>
  813ee4:	d8802217 	ldw	r2,136(sp)
  813ee8:	001b883a 	mov	r13,zero
  813eec:	1580000b 	ldhu	r22,0(r2)
  813ef0:	10800104 	addi	r2,r2,4
  813ef4:	d8802215 	stw	r2,136(sp)
  813ef8:	b009883a 	mov	r4,r22
  813efc:	0005883a 	mov	r2,zero
  813f00:	003cd006 	br	813244 <__alt_data_end+0xff813244>
  813f04:	80c00007 	ldb	r3,0(r16)
  813f08:	8005883a 	mov	r2,r16
  813f0c:	003c4d06 	br	813044 <__alt_data_end+0xff813044>
  813f10:	a880100c 	andi	r2,r21,64
  813f14:	10004426 	beq	r2,zero,814028 <___vfiprintf_internal_r+0x115c>
  813f18:	d8c02217 	ldw	r3,136(sp)
  813f1c:	001b883a 	mov	r13,zero
  813f20:	00800044 	movi	r2,1
  813f24:	1d80000b 	ldhu	r22,0(r3)
  813f28:	18c00104 	addi	r3,r3,4
  813f2c:	d8c02215 	stw	r3,136(sp)
  813f30:	b009883a 	mov	r4,r22
  813f34:	003cc306 	br	813244 <__alt_data_end+0xff813244>
  813f38:	a880040c 	andi	r2,r21,16
  813f3c:	1000091e 	bne	r2,zero,813f64 <___vfiprintf_internal_r+0x1098>
  813f40:	aac0100c 	andi	r11,r21,64
  813f44:	58000726 	beq	r11,zero,813f64 <___vfiprintf_internal_r+0x1098>
  813f48:	d8c02217 	ldw	r3,136(sp)
  813f4c:	d9002317 	ldw	r4,140(sp)
  813f50:	18800017 	ldw	r2,0(r3)
  813f54:	18c00104 	addi	r3,r3,4
  813f58:	d8c02215 	stw	r3,136(sp)
  813f5c:	1100000d 	sth	r4,0(r2)
  813f60:	003c0e06 	br	812f9c <__alt_data_end+0xff812f9c>
  813f64:	d8c02217 	ldw	r3,136(sp)
  813f68:	d9002317 	ldw	r4,140(sp)
  813f6c:	18800017 	ldw	r2,0(r3)
  813f70:	18c00104 	addi	r3,r3,4
  813f74:	d8c02215 	stw	r3,136(sp)
  813f78:	11000015 	stw	r4,0(r2)
  813f7c:	003c0706 	br	812f9c <__alt_data_end+0xff812f9c>
  813f80:	a880100c 	andi	r2,r21,64
  813f84:	10002126 	beq	r2,zero,81400c <___vfiprintf_internal_r+0x1140>
  813f88:	1d80000f 	ldh	r22,0(r3)
  813f8c:	d8c02217 	ldw	r3,136(sp)
  813f90:	b01bd7fa 	srai	r13,r22,31
  813f94:	18c00104 	addi	r3,r3,4
  813f98:	d8c02215 	stw	r3,136(sp)
  813f9c:	6805883a 	mov	r2,r13
  813fa0:	003dc406 	br	8136b4 <__alt_data_end+0xff8136b4>
  813fa4:	d9002017 	ldw	r4,128(sp)
  813fa8:	d9402117 	ldw	r5,132(sp)
  813fac:	d9801a04 	addi	r6,sp,104
  813fb0:	da402b15 	stw	r9,172(sp)
  813fb4:	db402a15 	stw	r13,168(sp)
  813fb8:	0812db80 	call	812db8 <__sprint_r.part.0>
  813fbc:	da402b17 	ldw	r9,172(sp)
  813fc0:	db402a17 	ldw	r13,168(sp)
  813fc4:	103eeb1e 	bne	r2,zero,813b74 <__alt_data_end+0xff813b74>
  813fc8:	d9401b17 	ldw	r5,108(sp)
  813fcc:	d8801c17 	ldw	r2,112(sp)
  813fd0:	d811883a 	mov	r8,sp
  813fd4:	29000044 	addi	r4,r5,1
  813fd8:	003e8b06 	br	813a08 <__alt_data_end+0xff813a08>
  813fdc:	9023883a 	mov	r17,r18
  813fe0:	003d5a06 	br	81354c <__alt_data_end+0xff81354c>
  813fe4:	4827883a 	mov	r19,r9
  813fe8:	003e3506 	br	8138c0 <__alt_data_end+0xff8138c0>
  813fec:	d8c02217 	ldw	r3,136(sp)
  813ff0:	001b883a 	mov	r13,zero
  813ff4:	0005883a 	mov	r2,zero
  813ff8:	1d800017 	ldw	r22,0(r3)
  813ffc:	18c00104 	addi	r3,r3,4
  814000:	d8c02215 	stw	r3,136(sp)
  814004:	b009883a 	mov	r4,r22
  814008:	003c8e06 	br	813244 <__alt_data_end+0xff813244>
  81400c:	1d800017 	ldw	r22,0(r3)
  814010:	d9002217 	ldw	r4,136(sp)
  814014:	b01bd7fa 	srai	r13,r22,31
  814018:	21000104 	addi	r4,r4,4
  81401c:	d9002215 	stw	r4,136(sp)
  814020:	6805883a 	mov	r2,r13
  814024:	003da306 	br	8136b4 <__alt_data_end+0xff8136b4>
  814028:	d9002217 	ldw	r4,136(sp)
  81402c:	001b883a 	mov	r13,zero
  814030:	00800044 	movi	r2,1
  814034:	25800017 	ldw	r22,0(r4)
  814038:	21000104 	addi	r4,r4,4
  81403c:	d9002215 	stw	r4,136(sp)
  814040:	b009883a 	mov	r4,r22
  814044:	003c7f06 	br	813244 <__alt_data_end+0xff813244>
  814048:	00c020b4 	movhi	r3,130
  81404c:	18f38604 	addi	r3,r3,-12776
  814050:	d8c02415 	stw	r3,144(sp)
  814054:	003cff06 	br	813454 <__alt_data_end+0xff813454>
  814058:	d8801c17 	ldw	r2,112(sp)
  81405c:	dd402117 	ldw	r21,132(sp)
  814060:	103ec526 	beq	r2,zero,813b78 <__alt_data_end+0xff813b78>
  814064:	d9002017 	ldw	r4,128(sp)
  814068:	a80b883a 	mov	r5,r21
  81406c:	d9801a04 	addi	r6,sp,104
  814070:	0812db80 	call	812db8 <__sprint_r.part.0>
  814074:	003ec006 	br	813b78 <__alt_data_end+0xff813b78>
  814078:	80800044 	addi	r2,r16,1
  81407c:	ad400814 	ori	r21,r21,32
  814080:	80c00047 	ldb	r3,1(r16)
  814084:	003bef06 	br	813044 <__alt_data_end+0xff813044>
  814088:	04a5c83a 	sub	r18,zero,r18
  81408c:	8005883a 	mov	r2,r16
  814090:	d8c02215 	stw	r3,136(sp)
  814094:	003d5306 	br	8135e4 <__alt_data_end+0xff8135e4>
  814098:	da002a15 	stw	r8,168(sp)
  81409c:	080cf640 	call	80cf64 <strlen>
  8140a0:	1027883a 	mov	r19,r2
  8140a4:	db801d83 	ldbu	r14,118(sp)
  8140a8:	dd802215 	stw	r22,136(sp)
  8140ac:	0013883a 	mov	r9,zero
  8140b0:	da002a17 	ldw	r8,168(sp)
  8140b4:	003c7f06 	br	8132b4 <__alt_data_end+0xff8132b4>
  8140b8:	d9002017 	ldw	r4,128(sp)
  8140bc:	d9402117 	ldw	r5,132(sp)
  8140c0:	d9801a04 	addi	r6,sp,104
  8140c4:	da402b15 	stw	r9,172(sp)
  8140c8:	0812db80 	call	812db8 <__sprint_r.part.0>
  8140cc:	da402b17 	ldw	r9,172(sp)
  8140d0:	103ea81e 	bne	r2,zero,813b74 <__alt_data_end+0xff813b74>
  8140d4:	d9401b17 	ldw	r5,108(sp)
  8140d8:	d8801c17 	ldw	r2,112(sp)
  8140dc:	d811883a 	mov	r8,sp
  8140e0:	29000044 	addi	r4,r5,1
  8140e4:	003cc006 	br	8133e8 <__alt_data_end+0xff8133e8>
  8140e8:	d9401b17 	ldw	r5,108(sp)
  8140ec:	010020b4 	movhi	r4,130
  8140f0:	21338a04 	addi	r4,r4,-12760
  8140f4:	d9002415 	stw	r4,144(sp)
  8140f8:	29400044 	addi	r5,r5,1
  8140fc:	003c9f06 	br	81337c <__alt_data_end+0xff81337c>
  814100:	00800184 	movi	r2,6
  814104:	1240012e 	bgeu	r2,r9,81410c <___vfiprintf_internal_r+0x1240>
  814108:	1013883a 	mov	r9,r2
  81410c:	4827883a 	mov	r19,r9
  814110:	4823883a 	mov	r17,r9
  814114:	48001116 	blt	r9,zero,81415c <___vfiprintf_internal_r+0x1290>
  814118:	050020b4 	movhi	r20,130
  81411c:	dd802215 	stw	r22,136(sp)
  814120:	a5332b04 	addi	r20,r20,-13140
  814124:	003db106 	br	8137ec <__alt_data_end+0xff8137ec>
  814128:	d9401b17 	ldw	r5,108(sp)
  81412c:	010020b4 	movhi	r4,130
  814130:	21338a04 	addi	r4,r4,-12760
  814134:	d9002415 	stw	r4,144(sp)
  814138:	29400044 	addi	r5,r5,1
  81413c:	003cf906 	br	813524 <__alt_data_end+0xff813524>
  814140:	4827883a 	mov	r19,r9
  814144:	db801d83 	ldbu	r14,118(sp)
  814148:	dd802215 	stw	r22,136(sp)
  81414c:	0013883a 	mov	r9,zero
  814150:	003c5806 	br	8132b4 <__alt_data_end+0xff8132b4>
  814154:	200d883a 	mov	r6,r4
  814158:	003ec706 	br	813c78 <__alt_data_end+0xff813c78>
  81415c:	0023883a 	mov	r17,zero
  814160:	003fed06 	br	814118 <__alt_data_end+0xff814118>
  814164:	d9002217 	ldw	r4,136(sp)
  814168:	22400017 	ldw	r9,0(r4)
  81416c:	20c00104 	addi	r3,r4,4
  814170:	d8c02215 	stw	r3,136(sp)
  814174:	483fc20e 	bge	r9,zero,814080 <__alt_data_end+0xff814080>
  814178:	027fffc4 	movi	r9,-1
  81417c:	80c00047 	ldb	r3,1(r16)
  814180:	003bb006 	br	813044 <__alt_data_end+0xff813044>
  814184:	8c80010e 	bge	r17,r18,81418c <___vfiprintf_internal_r+0x12c0>
  814188:	9023883a 	mov	r17,r18
  81418c:	d8802317 	ldw	r2,140(sp)
  814190:	1445883a 	add	r2,r2,r17
  814194:	d8802315 	stw	r2,140(sp)
  814198:	003cef06 	br	813558 <__alt_data_end+0xff813558>

0081419c <__vfiprintf_internal>:
  81419c:	2007883a 	mov	r3,r4
  8141a0:	010020b4 	movhi	r4,130
  8141a4:	213bcf04 	addi	r4,r4,-4292
  8141a8:	21000017 	ldw	r4,0(r4)
  8141ac:	2805883a 	mov	r2,r5
  8141b0:	300f883a 	mov	r7,r6
  8141b4:	180b883a 	mov	r5,r3
  8141b8:	100d883a 	mov	r6,r2
  8141bc:	0812ecc1 	jmpi	812ecc <___vfiprintf_internal_r>

008141c0 <__sbprintf>:
  8141c0:	2880030b 	ldhu	r2,12(r5)
  8141c4:	2ac01917 	ldw	r11,100(r5)
  8141c8:	2a80038b 	ldhu	r10,14(r5)
  8141cc:	2a400717 	ldw	r9,28(r5)
  8141d0:	2a000917 	ldw	r8,36(r5)
  8141d4:	defee204 	addi	sp,sp,-1144
  8141d8:	00c10004 	movi	r3,1024
  8141dc:	dc011a15 	stw	r16,1128(sp)
  8141e0:	10bfff4c 	andi	r2,r2,65533
  8141e4:	2821883a 	mov	r16,r5
  8141e8:	d8cb883a 	add	r5,sp,r3
  8141ec:	dc811c15 	stw	r18,1136(sp)
  8141f0:	dc411b15 	stw	r17,1132(sp)
  8141f4:	dfc11d15 	stw	ra,1140(sp)
  8141f8:	2025883a 	mov	r18,r4
  8141fc:	d881030d 	sth	r2,1036(sp)
  814200:	dac11915 	stw	r11,1124(sp)
  814204:	da81038d 	sth	r10,1038(sp)
  814208:	da410715 	stw	r9,1052(sp)
  81420c:	da010915 	stw	r8,1060(sp)
  814210:	dec10015 	stw	sp,1024(sp)
  814214:	dec10415 	stw	sp,1040(sp)
  814218:	d8c10215 	stw	r3,1032(sp)
  81421c:	d8c10515 	stw	r3,1044(sp)
  814220:	d8010615 	stw	zero,1048(sp)
  814224:	0812ecc0 	call	812ecc <___vfiprintf_internal_r>
  814228:	1023883a 	mov	r17,r2
  81422c:	10000416 	blt	r2,zero,814240 <__sbprintf+0x80>
  814230:	9009883a 	mov	r4,r18
  814234:	d9410004 	addi	r5,sp,1024
  814238:	080ac9c0 	call	80ac9c <_fflush_r>
  81423c:	10000d1e 	bne	r2,zero,814274 <__sbprintf+0xb4>
  814240:	d8c1030b 	ldhu	r3,1036(sp)
  814244:	18c0100c 	andi	r3,r3,64
  814248:	18000326 	beq	r3,zero,814258 <__sbprintf+0x98>
  81424c:	8080030b 	ldhu	r2,12(r16)
  814250:	10801014 	ori	r2,r2,64
  814254:	8080030d 	sth	r2,12(r16)
  814258:	8805883a 	mov	r2,r17
  81425c:	dfc11d17 	ldw	ra,1140(sp)
  814260:	dc811c17 	ldw	r18,1136(sp)
  814264:	dc411b17 	ldw	r17,1132(sp)
  814268:	dc011a17 	ldw	r16,1128(sp)
  81426c:	dec11e04 	addi	sp,sp,1144
  814270:	f800283a 	ret
  814274:	047fffc4 	movi	r17,-1
  814278:	003ff106 	br	814240 <__alt_data_end+0xff814240>

0081427c <__swbuf_r>:
  81427c:	defffc04 	addi	sp,sp,-16
  814280:	dc800215 	stw	r18,8(sp)
  814284:	dc400115 	stw	r17,4(sp)
  814288:	dc000015 	stw	r16,0(sp)
  81428c:	dfc00315 	stw	ra,12(sp)
  814290:	2025883a 	mov	r18,r4
  814294:	2823883a 	mov	r17,r5
  814298:	3021883a 	mov	r16,r6
  81429c:	20000226 	beq	r4,zero,8142a8 <__swbuf_r+0x2c>
  8142a0:	20800e17 	ldw	r2,56(r4)
  8142a4:	10004126 	beq	r2,zero,8143ac <__swbuf_r+0x130>
  8142a8:	80c00617 	ldw	r3,24(r16)
  8142ac:	8180030b 	ldhu	r6,12(r16)
  8142b0:	80c00215 	stw	r3,8(r16)
  8142b4:	30c0020c 	andi	r3,r6,8
  8142b8:	18003526 	beq	r3,zero,814390 <__swbuf_r+0x114>
  8142bc:	80c00417 	ldw	r3,16(r16)
  8142c0:	18003326 	beq	r3,zero,814390 <__swbuf_r+0x114>
  8142c4:	3088000c 	andi	r2,r6,8192
  8142c8:	8c403fcc 	andi	r17,r17,255
  8142cc:	10001726 	beq	r2,zero,81432c <__swbuf_r+0xb0>
  8142d0:	80800017 	ldw	r2,0(r16)
  8142d4:	81000517 	ldw	r4,20(r16)
  8142d8:	10c7c83a 	sub	r3,r2,r3
  8142dc:	19001d0e 	bge	r3,r4,814354 <__swbuf_r+0xd8>
  8142e0:	18c00044 	addi	r3,r3,1
  8142e4:	81400217 	ldw	r5,8(r16)
  8142e8:	11000044 	addi	r4,r2,1
  8142ec:	81000015 	stw	r4,0(r16)
  8142f0:	297fffc4 	addi	r5,r5,-1
  8142f4:	81400215 	stw	r5,8(r16)
  8142f8:	14400005 	stb	r17,0(r2)
  8142fc:	80800517 	ldw	r2,20(r16)
  814300:	10c01d26 	beq	r2,r3,814378 <__swbuf_r+0xfc>
  814304:	8080030b 	ldhu	r2,12(r16)
  814308:	1080004c 	andi	r2,r2,1
  81430c:	1000181e 	bne	r2,zero,814370 <__swbuf_r+0xf4>
  814310:	8805883a 	mov	r2,r17
  814314:	dfc00317 	ldw	ra,12(sp)
  814318:	dc800217 	ldw	r18,8(sp)
  81431c:	dc400117 	ldw	r17,4(sp)
  814320:	dc000017 	ldw	r16,0(sp)
  814324:	dec00404 	addi	sp,sp,16
  814328:	f800283a 	ret
  81432c:	81001917 	ldw	r4,100(r16)
  814330:	00b7ffc4 	movi	r2,-8193
  814334:	31880014 	ori	r6,r6,8192
  814338:	2084703a 	and	r2,r4,r2
  81433c:	80801915 	stw	r2,100(r16)
  814340:	80800017 	ldw	r2,0(r16)
  814344:	81000517 	ldw	r4,20(r16)
  814348:	8180030d 	sth	r6,12(r16)
  81434c:	10c7c83a 	sub	r3,r2,r3
  814350:	193fe316 	blt	r3,r4,8142e0 <__alt_data_end+0xff8142e0>
  814354:	9009883a 	mov	r4,r18
  814358:	800b883a 	mov	r5,r16
  81435c:	080ac9c0 	call	80ac9c <_fflush_r>
  814360:	1000091e 	bne	r2,zero,814388 <__swbuf_r+0x10c>
  814364:	80800017 	ldw	r2,0(r16)
  814368:	00c00044 	movi	r3,1
  81436c:	003fdd06 	br	8142e4 <__alt_data_end+0xff8142e4>
  814370:	00800284 	movi	r2,10
  814374:	88bfe61e 	bne	r17,r2,814310 <__alt_data_end+0xff814310>
  814378:	9009883a 	mov	r4,r18
  81437c:	800b883a 	mov	r5,r16
  814380:	080ac9c0 	call	80ac9c <_fflush_r>
  814384:	103fe226 	beq	r2,zero,814310 <__alt_data_end+0xff814310>
  814388:	00bfffc4 	movi	r2,-1
  81438c:	003fe106 	br	814314 <__alt_data_end+0xff814314>
  814390:	9009883a 	mov	r4,r18
  814394:	800b883a 	mov	r5,r16
  814398:	080f0880 	call	80f088 <__swsetup_r>
  81439c:	103ffa1e 	bne	r2,zero,814388 <__alt_data_end+0xff814388>
  8143a0:	8180030b 	ldhu	r6,12(r16)
  8143a4:	80c00417 	ldw	r3,16(r16)
  8143a8:	003fc606 	br	8142c4 <__alt_data_end+0xff8142c4>
  8143ac:	080b0780 	call	80b078 <__sinit>
  8143b0:	003fbd06 	br	8142a8 <__alt_data_end+0xff8142a8>

008143b4 <__swbuf>:
  8143b4:	00c020b4 	movhi	r3,130
  8143b8:	18fbcf04 	addi	r3,r3,-4292
  8143bc:	2005883a 	mov	r2,r4
  8143c0:	19000017 	ldw	r4,0(r3)
  8143c4:	280d883a 	mov	r6,r5
  8143c8:	100b883a 	mov	r5,r2
  8143cc:	081427c1 	jmpi	81427c <__swbuf_r>

008143d0 <_calloc_r>:
  8143d0:	298b383a 	mul	r5,r5,r6
  8143d4:	defffe04 	addi	sp,sp,-8
  8143d8:	dc000015 	stw	r16,0(sp)
  8143dc:	dfc00115 	stw	ra,4(sp)
  8143e0:	080c0600 	call	80c060 <_malloc_r>
  8143e4:	1021883a 	mov	r16,r2
  8143e8:	10002826 	beq	r2,zero,81448c <_calloc_r+0xbc>
  8143ec:	11bfff17 	ldw	r6,-4(r2)
  8143f0:	00bfff04 	movi	r2,-4
  8143f4:	00c00904 	movi	r3,36
  8143f8:	308c703a 	and	r6,r6,r2
  8143fc:	308d883a 	add	r6,r6,r2
  814400:	19801436 	bltu	r3,r6,814454 <_calloc_r+0x84>
  814404:	008004c4 	movi	r2,19
  814408:	11800936 	bltu	r2,r6,814430 <_calloc_r+0x60>
  81440c:	8005883a 	mov	r2,r16
  814410:	10000015 	stw	zero,0(r2)
  814414:	10000115 	stw	zero,4(r2)
  814418:	10000215 	stw	zero,8(r2)
  81441c:	8005883a 	mov	r2,r16
  814420:	dfc00117 	ldw	ra,4(sp)
  814424:	dc000017 	ldw	r16,0(sp)
  814428:	dec00204 	addi	sp,sp,8
  81442c:	f800283a 	ret
  814430:	80000015 	stw	zero,0(r16)
  814434:	80000115 	stw	zero,4(r16)
  814438:	008006c4 	movi	r2,27
  81443c:	11800d2e 	bgeu	r2,r6,814474 <_calloc_r+0xa4>
  814440:	80000215 	stw	zero,8(r16)
  814444:	80000315 	stw	zero,12(r16)
  814448:	30c00c26 	beq	r6,r3,81447c <_calloc_r+0xac>
  81444c:	80800404 	addi	r2,r16,16
  814450:	003fef06 	br	814410 <__alt_data_end+0xff814410>
  814454:	8009883a 	mov	r4,r16
  814458:	000b883a 	mov	r5,zero
  81445c:	080c8080 	call	80c808 <memset>
  814460:	8005883a 	mov	r2,r16
  814464:	dfc00117 	ldw	ra,4(sp)
  814468:	dc000017 	ldw	r16,0(sp)
  81446c:	dec00204 	addi	sp,sp,8
  814470:	f800283a 	ret
  814474:	80800204 	addi	r2,r16,8
  814478:	003fe506 	br	814410 <__alt_data_end+0xff814410>
  81447c:	80000415 	stw	zero,16(r16)
  814480:	80800604 	addi	r2,r16,24
  814484:	80000515 	stw	zero,20(r16)
  814488:	003fe106 	br	814410 <__alt_data_end+0xff814410>
  81448c:	0005883a 	mov	r2,zero
  814490:	003fe306 	br	814420 <__alt_data_end+0xff814420>

00814494 <_fputwc_r>:
  814494:	3080030b 	ldhu	r2,12(r6)
  814498:	defff804 	addi	sp,sp,-32
  81449c:	dcc00415 	stw	r19,16(sp)
  8144a0:	dc800315 	stw	r18,12(sp)
  8144a4:	dc000115 	stw	r16,4(sp)
  8144a8:	dfc00715 	stw	ra,28(sp)
  8144ac:	dd400615 	stw	r21,24(sp)
  8144b0:	dd000515 	stw	r20,20(sp)
  8144b4:	dc400215 	stw	r17,8(sp)
  8144b8:	10c8000c 	andi	r3,r2,8192
  8144bc:	3021883a 	mov	r16,r6
  8144c0:	2027883a 	mov	r19,r4
  8144c4:	2825883a 	mov	r18,r5
  8144c8:	1800051e 	bne	r3,zero,8144e0 <_fputwc_r+0x4c>
  8144cc:	30c01917 	ldw	r3,100(r6)
  8144d0:	10880014 	ori	r2,r2,8192
  8144d4:	3080030d 	sth	r2,12(r6)
  8144d8:	18880014 	ori	r2,r3,8192
  8144dc:	30801915 	stw	r2,100(r6)
  8144e0:	08111a00 	call	8111a0 <__locale_mb_cur_max>
  8144e4:	00c00044 	movi	r3,1
  8144e8:	10c03e26 	beq	r2,r3,8145e4 <_fputwc_r+0x150>
  8144ec:	9809883a 	mov	r4,r19
  8144f0:	d80b883a 	mov	r5,sp
  8144f4:	900d883a 	mov	r6,r18
  8144f8:	81c01704 	addi	r7,r16,92
  8144fc:	08146740 	call	814674 <_wcrtomb_r>
  814500:	1029883a 	mov	r20,r2
  814504:	00bfffc4 	movi	r2,-1
  814508:	a0802026 	beq	r20,r2,81458c <_fputwc_r+0xf8>
  81450c:	d9400003 	ldbu	r5,0(sp)
  814510:	a0001c26 	beq	r20,zero,814584 <_fputwc_r+0xf0>
  814514:	0023883a 	mov	r17,zero
  814518:	05400284 	movi	r21,10
  81451c:	00000906 	br	814544 <_fputwc_r+0xb0>
  814520:	80800017 	ldw	r2,0(r16)
  814524:	11400005 	stb	r5,0(r2)
  814528:	80c00017 	ldw	r3,0(r16)
  81452c:	18c00044 	addi	r3,r3,1
  814530:	80c00015 	stw	r3,0(r16)
  814534:	8c400044 	addi	r17,r17,1
  814538:	dc45883a 	add	r2,sp,r17
  81453c:	8d00112e 	bgeu	r17,r20,814584 <_fputwc_r+0xf0>
  814540:	11400003 	ldbu	r5,0(r2)
  814544:	80c00217 	ldw	r3,8(r16)
  814548:	18ffffc4 	addi	r3,r3,-1
  81454c:	80c00215 	stw	r3,8(r16)
  814550:	183ff30e 	bge	r3,zero,814520 <__alt_data_end+0xff814520>
  814554:	80800617 	ldw	r2,24(r16)
  814558:	18801916 	blt	r3,r2,8145c0 <_fputwc_r+0x12c>
  81455c:	80800017 	ldw	r2,0(r16)
  814560:	11400005 	stb	r5,0(r2)
  814564:	80800017 	ldw	r2,0(r16)
  814568:	10c00003 	ldbu	r3,0(r2)
  81456c:	10800044 	addi	r2,r2,1
  814570:	1d402326 	beq	r3,r21,814600 <_fputwc_r+0x16c>
  814574:	80800015 	stw	r2,0(r16)
  814578:	8c400044 	addi	r17,r17,1
  81457c:	dc45883a 	add	r2,sp,r17
  814580:	8d3fef36 	bltu	r17,r20,814540 <__alt_data_end+0xff814540>
  814584:	9005883a 	mov	r2,r18
  814588:	00000406 	br	81459c <_fputwc_r+0x108>
  81458c:	80c0030b 	ldhu	r3,12(r16)
  814590:	a005883a 	mov	r2,r20
  814594:	18c01014 	ori	r3,r3,64
  814598:	80c0030d 	sth	r3,12(r16)
  81459c:	dfc00717 	ldw	ra,28(sp)
  8145a0:	dd400617 	ldw	r21,24(sp)
  8145a4:	dd000517 	ldw	r20,20(sp)
  8145a8:	dcc00417 	ldw	r19,16(sp)
  8145ac:	dc800317 	ldw	r18,12(sp)
  8145b0:	dc400217 	ldw	r17,8(sp)
  8145b4:	dc000117 	ldw	r16,4(sp)
  8145b8:	dec00804 	addi	sp,sp,32
  8145bc:	f800283a 	ret
  8145c0:	9809883a 	mov	r4,r19
  8145c4:	29403fcc 	andi	r5,r5,255
  8145c8:	800d883a 	mov	r6,r16
  8145cc:	081427c0 	call	81427c <__swbuf_r>
  8145d0:	10bfffe0 	cmpeqi	r2,r2,-1
  8145d4:	10803fcc 	andi	r2,r2,255
  8145d8:	103fd626 	beq	r2,zero,814534 <__alt_data_end+0xff814534>
  8145dc:	00bfffc4 	movi	r2,-1
  8145e0:	003fee06 	br	81459c <__alt_data_end+0xff81459c>
  8145e4:	90ffffc4 	addi	r3,r18,-1
  8145e8:	01003f84 	movi	r4,254
  8145ec:	20ffbf36 	bltu	r4,r3,8144ec <__alt_data_end+0xff8144ec>
  8145f0:	900b883a 	mov	r5,r18
  8145f4:	dc800005 	stb	r18,0(sp)
  8145f8:	1029883a 	mov	r20,r2
  8145fc:	003fc506 	br	814514 <__alt_data_end+0xff814514>
  814600:	9809883a 	mov	r4,r19
  814604:	a80b883a 	mov	r5,r21
  814608:	800d883a 	mov	r6,r16
  81460c:	081427c0 	call	81427c <__swbuf_r>
  814610:	10bfffe0 	cmpeqi	r2,r2,-1
  814614:	003fef06 	br	8145d4 <__alt_data_end+0xff8145d4>

00814618 <fputwc>:
  814618:	008020b4 	movhi	r2,130
  81461c:	defffc04 	addi	sp,sp,-16
  814620:	10bbcf04 	addi	r2,r2,-4292
  814624:	dc000115 	stw	r16,4(sp)
  814628:	14000017 	ldw	r16,0(r2)
  81462c:	dc400215 	stw	r17,8(sp)
  814630:	dfc00315 	stw	ra,12(sp)
  814634:	2023883a 	mov	r17,r4
  814638:	280d883a 	mov	r6,r5
  81463c:	80000626 	beq	r16,zero,814658 <fputwc+0x40>
  814640:	80800e17 	ldw	r2,56(r16)
  814644:	1000041e 	bne	r2,zero,814658 <fputwc+0x40>
  814648:	8009883a 	mov	r4,r16
  81464c:	d9400015 	stw	r5,0(sp)
  814650:	080b0780 	call	80b078 <__sinit>
  814654:	d9800017 	ldw	r6,0(sp)
  814658:	8009883a 	mov	r4,r16
  81465c:	880b883a 	mov	r5,r17
  814660:	dfc00317 	ldw	ra,12(sp)
  814664:	dc400217 	ldw	r17,8(sp)
  814668:	dc000117 	ldw	r16,4(sp)
  81466c:	dec00404 	addi	sp,sp,16
  814670:	08144941 	jmpi	814494 <_fputwc_r>

00814674 <_wcrtomb_r>:
  814674:	defff604 	addi	sp,sp,-40
  814678:	008020b4 	movhi	r2,130
  81467c:	dc800815 	stw	r18,32(sp)
  814680:	dc400715 	stw	r17,28(sp)
  814684:	dc000615 	stw	r16,24(sp)
  814688:	10bbd304 	addi	r2,r2,-4276
  81468c:	dfc00915 	stw	ra,36(sp)
  814690:	2021883a 	mov	r16,r4
  814694:	3823883a 	mov	r17,r7
  814698:	14800017 	ldw	r18,0(r2)
  81469c:	28001426 	beq	r5,zero,8146f0 <_wcrtomb_r+0x7c>
  8146a0:	d9400415 	stw	r5,16(sp)
  8146a4:	d9800515 	stw	r6,20(sp)
  8146a8:	08111940 	call	811194 <__locale_charset>
  8146ac:	d9400417 	ldw	r5,16(sp)
  8146b0:	d9800517 	ldw	r6,20(sp)
  8146b4:	8009883a 	mov	r4,r16
  8146b8:	dc400015 	stw	r17,0(sp)
  8146bc:	100f883a 	mov	r7,r2
  8146c0:	903ee83a 	callr	r18
  8146c4:	00ffffc4 	movi	r3,-1
  8146c8:	10c0031e 	bne	r2,r3,8146d8 <_wcrtomb_r+0x64>
  8146cc:	88000015 	stw	zero,0(r17)
  8146d0:	00c02284 	movi	r3,138
  8146d4:	80c00015 	stw	r3,0(r16)
  8146d8:	dfc00917 	ldw	ra,36(sp)
  8146dc:	dc800817 	ldw	r18,32(sp)
  8146e0:	dc400717 	ldw	r17,28(sp)
  8146e4:	dc000617 	ldw	r16,24(sp)
  8146e8:	dec00a04 	addi	sp,sp,40
  8146ec:	f800283a 	ret
  8146f0:	08111940 	call	811194 <__locale_charset>
  8146f4:	8009883a 	mov	r4,r16
  8146f8:	dc400015 	stw	r17,0(sp)
  8146fc:	d9400104 	addi	r5,sp,4
  814700:	000d883a 	mov	r6,zero
  814704:	100f883a 	mov	r7,r2
  814708:	903ee83a 	callr	r18
  81470c:	003fed06 	br	8146c4 <__alt_data_end+0xff8146c4>

00814710 <wcrtomb>:
  814710:	defff604 	addi	sp,sp,-40
  814714:	008020b4 	movhi	r2,130
  814718:	dc800615 	stw	r18,24(sp)
  81471c:	dc400515 	stw	r17,20(sp)
  814720:	dc000415 	stw	r16,16(sp)
  814724:	10bbcf04 	addi	r2,r2,-4292
  814728:	dfc00915 	stw	ra,36(sp)
  81472c:	dd000815 	stw	r20,32(sp)
  814730:	dcc00715 	stw	r19,28(sp)
  814734:	2021883a 	mov	r16,r4
  814738:	3025883a 	mov	r18,r6
  81473c:	14400017 	ldw	r17,0(r2)
  814740:	20001826 	beq	r4,zero,8147a4 <wcrtomb+0x94>
  814744:	008020b4 	movhi	r2,130
  814748:	10bbd304 	addi	r2,r2,-4276
  81474c:	15000017 	ldw	r20,0(r2)
  814750:	2827883a 	mov	r19,r5
  814754:	08111940 	call	811194 <__locale_charset>
  814758:	8809883a 	mov	r4,r17
  81475c:	dc800015 	stw	r18,0(sp)
  814760:	800b883a 	mov	r5,r16
  814764:	980d883a 	mov	r6,r19
  814768:	100f883a 	mov	r7,r2
  81476c:	a03ee83a 	callr	r20
  814770:	00ffffc4 	movi	r3,-1
  814774:	10c0031e 	bne	r2,r3,814784 <wcrtomb+0x74>
  814778:	90000015 	stw	zero,0(r18)
  81477c:	00c02284 	movi	r3,138
  814780:	88c00015 	stw	r3,0(r17)
  814784:	dfc00917 	ldw	ra,36(sp)
  814788:	dd000817 	ldw	r20,32(sp)
  81478c:	dcc00717 	ldw	r19,28(sp)
  814790:	dc800617 	ldw	r18,24(sp)
  814794:	dc400517 	ldw	r17,20(sp)
  814798:	dc000417 	ldw	r16,16(sp)
  81479c:	dec00a04 	addi	sp,sp,40
  8147a0:	f800283a 	ret
  8147a4:	008020b4 	movhi	r2,130
  8147a8:	10bbd304 	addi	r2,r2,-4276
  8147ac:	14000017 	ldw	r16,0(r2)
  8147b0:	08111940 	call	811194 <__locale_charset>
  8147b4:	8809883a 	mov	r4,r17
  8147b8:	dc800015 	stw	r18,0(sp)
  8147bc:	d9400104 	addi	r5,sp,4
  8147c0:	000d883a 	mov	r6,zero
  8147c4:	100f883a 	mov	r7,r2
  8147c8:	803ee83a 	callr	r16
  8147cc:	003fe806 	br	814770 <__alt_data_end+0xff814770>

008147d0 <__ascii_wctomb>:
  8147d0:	28000526 	beq	r5,zero,8147e8 <__ascii_wctomb+0x18>
  8147d4:	00803fc4 	movi	r2,255
  8147d8:	11800536 	bltu	r2,r6,8147f0 <__ascii_wctomb+0x20>
  8147dc:	29800005 	stb	r6,0(r5)
  8147e0:	00800044 	movi	r2,1
  8147e4:	f800283a 	ret
  8147e8:	0005883a 	mov	r2,zero
  8147ec:	f800283a 	ret
  8147f0:	00802284 	movi	r2,138
  8147f4:	20800015 	stw	r2,0(r4)
  8147f8:	00bfffc4 	movi	r2,-1
  8147fc:	f800283a 	ret

00814800 <_wctomb_r>:
  814800:	008020b4 	movhi	r2,130
  814804:	defff904 	addi	sp,sp,-28
  814808:	10bbd304 	addi	r2,r2,-4276
  81480c:	dfc00615 	stw	ra,24(sp)
  814810:	dc400515 	stw	r17,20(sp)
  814814:	dc000415 	stw	r16,16(sp)
  814818:	3823883a 	mov	r17,r7
  81481c:	14000017 	ldw	r16,0(r2)
  814820:	d9000115 	stw	r4,4(sp)
  814824:	d9400215 	stw	r5,8(sp)
  814828:	d9800315 	stw	r6,12(sp)
  81482c:	08111940 	call	811194 <__locale_charset>
  814830:	d9000117 	ldw	r4,4(sp)
  814834:	d9400217 	ldw	r5,8(sp)
  814838:	d9800317 	ldw	r6,12(sp)
  81483c:	dc400015 	stw	r17,0(sp)
  814840:	100f883a 	mov	r7,r2
  814844:	803ee83a 	callr	r16
  814848:	dfc00617 	ldw	ra,24(sp)
  81484c:	dc400517 	ldw	r17,20(sp)
  814850:	dc000417 	ldw	r16,16(sp)
  814854:	dec00704 	addi	sp,sp,28
  814858:	f800283a 	ret

0081485c <__udivdi3>:
  81485c:	defff504 	addi	sp,sp,-44
  814860:	dcc00415 	stw	r19,16(sp)
  814864:	dc000115 	stw	r16,4(sp)
  814868:	dfc00a15 	stw	ra,40(sp)
  81486c:	df000915 	stw	fp,36(sp)
  814870:	ddc00815 	stw	r23,32(sp)
  814874:	dd800715 	stw	r22,28(sp)
  814878:	dd400615 	stw	r21,24(sp)
  81487c:	dd000515 	stw	r20,20(sp)
  814880:	dc800315 	stw	r18,12(sp)
  814884:	dc400215 	stw	r17,8(sp)
  814888:	2027883a 	mov	r19,r4
  81488c:	2821883a 	mov	r16,r5
  814890:	3800421e 	bne	r7,zero,81499c <__udivdi3+0x140>
  814894:	3025883a 	mov	r18,r6
  814898:	2023883a 	mov	r17,r4
  81489c:	2980542e 	bgeu	r5,r6,8149f0 <__udivdi3+0x194>
  8148a0:	00bfffd4 	movui	r2,65535
  8148a4:	282d883a 	mov	r22,r5
  8148a8:	1180a836 	bltu	r2,r6,814b4c <__udivdi3+0x2f0>
  8148ac:	00803fc4 	movi	r2,255
  8148b0:	1181422e 	bgeu	r2,r6,814dbc <__udivdi3+0x560>
  8148b4:	00800204 	movi	r2,8
  8148b8:	1007883a 	mov	r3,r2
  8148bc:	3084d83a 	srl	r2,r6,r2
  8148c0:	010020b4 	movhi	r4,130
  8148c4:	21338e04 	addi	r4,r4,-12744
  8148c8:	2085883a 	add	r2,r4,r2
  8148cc:	10800003 	ldbu	r2,0(r2)
  8148d0:	10c7883a 	add	r3,r2,r3
  8148d4:	00800804 	movi	r2,32
  8148d8:	10c5c83a 	sub	r2,r2,r3
  8148dc:	10000526 	beq	r2,zero,8148f4 <__udivdi3+0x98>
  8148e0:	80a0983a 	sll	r16,r16,r2
  8148e4:	98c6d83a 	srl	r3,r19,r3
  8148e8:	30a4983a 	sll	r18,r6,r2
  8148ec:	98a2983a 	sll	r17,r19,r2
  8148f0:	80ecb03a 	or	r22,r16,r3
  8148f4:	902ad43a 	srli	r21,r18,16
  8148f8:	b009883a 	mov	r4,r22
  8148fc:	953fffcc 	andi	r20,r18,65535
  814900:	a80b883a 	mov	r5,r21
  814904:	080a9880 	call	80a988 <__umodsi3>
  814908:	b009883a 	mov	r4,r22
  81490c:	a80b883a 	mov	r5,r21
  814910:	1027883a 	mov	r19,r2
  814914:	080a9800 	call	80a980 <__udivsi3>
  814918:	1021883a 	mov	r16,r2
  81491c:	8806d43a 	srli	r3,r17,16
  814920:	9804943a 	slli	r2,r19,16
  814924:	8527383a 	mul	r19,r16,r20
  814928:	10c4b03a 	or	r2,r2,r3
  81492c:	14c0052e 	bgeu	r2,r19,814944 <__udivdi3+0xe8>
  814930:	1485883a 	add	r2,r2,r18
  814934:	80ffffc4 	addi	r3,r16,-1
  814938:	14800136 	bltu	r2,r18,814940 <__udivdi3+0xe4>
  81493c:	14c13436 	bltu	r2,r19,814e10 <__udivdi3+0x5b4>
  814940:	1821883a 	mov	r16,r3
  814944:	14e7c83a 	sub	r19,r2,r19
  814948:	9809883a 	mov	r4,r19
  81494c:	a80b883a 	mov	r5,r21
  814950:	080a9880 	call	80a988 <__umodsi3>
  814954:	102d883a 	mov	r22,r2
  814958:	9809883a 	mov	r4,r19
  81495c:	a80b883a 	mov	r5,r21
  814960:	080a9800 	call	80a980 <__udivsi3>
  814964:	b02c943a 	slli	r22,r22,16
  814968:	1529383a 	mul	r20,r2,r20
  81496c:	8c7fffcc 	andi	r17,r17,65535
  814970:	b462b03a 	or	r17,r22,r17
  814974:	8d00052e 	bgeu	r17,r20,81498c <__udivdi3+0x130>
  814978:	8ca3883a 	add	r17,r17,r18
  81497c:	10ffffc4 	addi	r3,r2,-1
  814980:	8c80f636 	bltu	r17,r18,814d5c <__udivdi3+0x500>
  814984:	8d00f52e 	bgeu	r17,r20,814d5c <__udivdi3+0x500>
  814988:	10bfff84 	addi	r2,r2,-2
  81498c:	8020943a 	slli	r16,r16,16
  814990:	0007883a 	mov	r3,zero
  814994:	1404b03a 	or	r2,r2,r16
  814998:	00005b06 	br	814b08 <__udivdi3+0x2ac>
  81499c:	29c05836 	bltu	r5,r7,814b00 <__udivdi3+0x2a4>
  8149a0:	00bfffd4 	movui	r2,65535
  8149a4:	11c0642e 	bgeu	r2,r7,814b38 <__udivdi3+0x2dc>
  8149a8:	00804034 	movhi	r2,256
  8149ac:	10bfffc4 	addi	r2,r2,-1
  8149b0:	11c0f32e 	bgeu	r2,r7,814d80 <__udivdi3+0x524>
  8149b4:	00c00604 	movi	r3,24
  8149b8:	180b883a 	mov	r5,r3
  8149bc:	38c6d83a 	srl	r3,r7,r3
  8149c0:	008020b4 	movhi	r2,130
  8149c4:	10b38e04 	addi	r2,r2,-12744
  8149c8:	10c7883a 	add	r3,r2,r3
  8149cc:	18c00003 	ldbu	r3,0(r3)
  8149d0:	01000804 	movi	r4,32
  8149d4:	1947883a 	add	r3,r3,r5
  8149d8:	20e5c83a 	sub	r18,r4,r3
  8149dc:	9000661e 	bne	r18,zero,814b78 <__udivdi3+0x31c>
  8149e0:	3c00f936 	bltu	r7,r16,814dc8 <__udivdi3+0x56c>
  8149e4:	9985403a 	cmpgeu	r2,r19,r6
  8149e8:	0007883a 	mov	r3,zero
  8149ec:	00004606 	br	814b08 <__udivdi3+0x2ac>
  8149f0:	3000041e 	bne	r6,zero,814a04 <__udivdi3+0x1a8>
  8149f4:	01000044 	movi	r4,1
  8149f8:	000b883a 	mov	r5,zero
  8149fc:	080a9800 	call	80a980 <__udivsi3>
  814a00:	1025883a 	mov	r18,r2
  814a04:	00bfffd4 	movui	r2,65535
  814a08:	1480562e 	bgeu	r2,r18,814b64 <__udivdi3+0x308>
  814a0c:	00804034 	movhi	r2,256
  814a10:	10bfffc4 	addi	r2,r2,-1
  814a14:	1480e32e 	bgeu	r2,r18,814da4 <__udivdi3+0x548>
  814a18:	00800604 	movi	r2,24
  814a1c:	1007883a 	mov	r3,r2
  814a20:	9084d83a 	srl	r2,r18,r2
  814a24:	010020b4 	movhi	r4,130
  814a28:	21338e04 	addi	r4,r4,-12744
  814a2c:	2085883a 	add	r2,r4,r2
  814a30:	10800003 	ldbu	r2,0(r2)
  814a34:	10c5883a 	add	r2,r2,r3
  814a38:	00c00804 	movi	r3,32
  814a3c:	1887c83a 	sub	r3,r3,r2
  814a40:	1800911e 	bne	r3,zero,814c88 <__udivdi3+0x42c>
  814a44:	9028d43a 	srli	r20,r18,16
  814a48:	84a1c83a 	sub	r16,r16,r18
  814a4c:	957fffcc 	andi	r21,r18,65535
  814a50:	00c00044 	movi	r3,1
  814a54:	8009883a 	mov	r4,r16
  814a58:	a00b883a 	mov	r5,r20
  814a5c:	d8c00015 	stw	r3,0(sp)
  814a60:	080a9880 	call	80a988 <__umodsi3>
  814a64:	8009883a 	mov	r4,r16
  814a68:	a00b883a 	mov	r5,r20
  814a6c:	1027883a 	mov	r19,r2
  814a70:	080a9800 	call	80a980 <__udivsi3>
  814a74:	1021883a 	mov	r16,r2
  814a78:	880cd43a 	srli	r6,r17,16
  814a7c:	9804943a 	slli	r2,r19,16
  814a80:	8567383a 	mul	r19,r16,r21
  814a84:	d8c00017 	ldw	r3,0(sp)
  814a88:	1188b03a 	or	r4,r2,r6
  814a8c:	24c0052e 	bgeu	r4,r19,814aa4 <__udivdi3+0x248>
  814a90:	2489883a 	add	r4,r4,r18
  814a94:	80bfffc4 	addi	r2,r16,-1
  814a98:	24800136 	bltu	r4,r18,814aa0 <__udivdi3+0x244>
  814a9c:	24c0d936 	bltu	r4,r19,814e04 <__udivdi3+0x5a8>
  814aa0:	1021883a 	mov	r16,r2
  814aa4:	24e7c83a 	sub	r19,r4,r19
  814aa8:	9809883a 	mov	r4,r19
  814aac:	a00b883a 	mov	r5,r20
  814ab0:	d8c00015 	stw	r3,0(sp)
  814ab4:	080a9880 	call	80a988 <__umodsi3>
  814ab8:	102d883a 	mov	r22,r2
  814abc:	9809883a 	mov	r4,r19
  814ac0:	a00b883a 	mov	r5,r20
  814ac4:	080a9800 	call	80a980 <__udivsi3>
  814ac8:	b02c943a 	slli	r22,r22,16
  814acc:	156b383a 	mul	r21,r2,r21
  814ad0:	8c7fffcc 	andi	r17,r17,65535
  814ad4:	b462b03a 	or	r17,r22,r17
  814ad8:	d8c00017 	ldw	r3,0(sp)
  814adc:	8d40052e 	bgeu	r17,r21,814af4 <__udivdi3+0x298>
  814ae0:	8ca3883a 	add	r17,r17,r18
  814ae4:	113fffc4 	addi	r4,r2,-1
  814ae8:	8c809a36 	bltu	r17,r18,814d54 <__udivdi3+0x4f8>
  814aec:	8d40992e 	bgeu	r17,r21,814d54 <__udivdi3+0x4f8>
  814af0:	10bfff84 	addi	r2,r2,-2
  814af4:	8020943a 	slli	r16,r16,16
  814af8:	1404b03a 	or	r2,r2,r16
  814afc:	00000206 	br	814b08 <__udivdi3+0x2ac>
  814b00:	0007883a 	mov	r3,zero
  814b04:	0005883a 	mov	r2,zero
  814b08:	dfc00a17 	ldw	ra,40(sp)
  814b0c:	df000917 	ldw	fp,36(sp)
  814b10:	ddc00817 	ldw	r23,32(sp)
  814b14:	dd800717 	ldw	r22,28(sp)
  814b18:	dd400617 	ldw	r21,24(sp)
  814b1c:	dd000517 	ldw	r20,20(sp)
  814b20:	dcc00417 	ldw	r19,16(sp)
  814b24:	dc800317 	ldw	r18,12(sp)
  814b28:	dc400217 	ldw	r17,8(sp)
  814b2c:	dc000117 	ldw	r16,4(sp)
  814b30:	dec00b04 	addi	sp,sp,44
  814b34:	f800283a 	ret
  814b38:	00803fc4 	movi	r2,255
  814b3c:	11c0932e 	bgeu	r2,r7,814d8c <__udivdi3+0x530>
  814b40:	00c00204 	movi	r3,8
  814b44:	180b883a 	mov	r5,r3
  814b48:	003f9c06 	br	8149bc <__alt_data_end+0xff8149bc>
  814b4c:	00804034 	movhi	r2,256
  814b50:	10bfffc4 	addi	r2,r2,-1
  814b54:	1180902e 	bgeu	r2,r6,814d98 <__udivdi3+0x53c>
  814b58:	00800604 	movi	r2,24
  814b5c:	1007883a 	mov	r3,r2
  814b60:	003f5606 	br	8148bc <__alt_data_end+0xff8148bc>
  814b64:	00803fc4 	movi	r2,255
  814b68:	1480912e 	bgeu	r2,r18,814db0 <__udivdi3+0x554>
  814b6c:	00800204 	movi	r2,8
  814b70:	1007883a 	mov	r3,r2
  814b74:	003faa06 	br	814a20 <__alt_data_end+0xff814a20>
  814b78:	30eed83a 	srl	r23,r6,r3
  814b7c:	3c8e983a 	sll	r7,r7,r18
  814b80:	80f8d83a 	srl	fp,r16,r3
  814b84:	98c6d83a 	srl	r3,r19,r3
  814b88:	3deeb03a 	or	r23,r7,r23
  814b8c:	b828d43a 	srli	r20,r23,16
  814b90:	84a0983a 	sll	r16,r16,r18
  814b94:	e009883a 	mov	r4,fp
  814b98:	a00b883a 	mov	r5,r20
  814b9c:	80e2b03a 	or	r17,r16,r3
  814ba0:	34aa983a 	sll	r21,r6,r18
  814ba4:	080a9880 	call	80a988 <__umodsi3>
  814ba8:	e009883a 	mov	r4,fp
  814bac:	a00b883a 	mov	r5,r20
  814bb0:	102d883a 	mov	r22,r2
  814bb4:	080a9800 	call	80a980 <__udivsi3>
  814bb8:	1021883a 	mov	r16,r2
  814bbc:	bf3fffcc 	andi	fp,r23,65535
  814bc0:	b004943a 	slli	r2,r22,16
  814bc4:	8808d43a 	srli	r4,r17,16
  814bc8:	872d383a 	mul	r22,r16,fp
  814bcc:	1104b03a 	or	r2,r2,r4
  814bd0:	1580042e 	bgeu	r2,r22,814be4 <__udivdi3+0x388>
  814bd4:	15c5883a 	add	r2,r2,r23
  814bd8:	80ffffc4 	addi	r3,r16,-1
  814bdc:	15c0812e 	bgeu	r2,r23,814de4 <__udivdi3+0x588>
  814be0:	1821883a 	mov	r16,r3
  814be4:	15adc83a 	sub	r22,r2,r22
  814be8:	b009883a 	mov	r4,r22
  814bec:	a00b883a 	mov	r5,r20
  814bf0:	080a9880 	call	80a988 <__umodsi3>
  814bf4:	a00b883a 	mov	r5,r20
  814bf8:	b009883a 	mov	r4,r22
  814bfc:	d8800015 	stw	r2,0(sp)
  814c00:	080a9800 	call	80a980 <__udivsi3>
  814c04:	d8c00017 	ldw	r3,0(sp)
  814c08:	170b383a 	mul	r5,r2,fp
  814c0c:	8c7fffcc 	andi	r17,r17,65535
  814c10:	1806943a 	slli	r3,r3,16
  814c14:	1c46b03a 	or	r3,r3,r17
  814c18:	1940042e 	bgeu	r3,r5,814c2c <__udivdi3+0x3d0>
  814c1c:	1dc7883a 	add	r3,r3,r23
  814c20:	113fffc4 	addi	r4,r2,-1
  814c24:	1dc06b2e 	bgeu	r3,r23,814dd4 <__udivdi3+0x578>
  814c28:	2005883a 	mov	r2,r4
  814c2c:	8020943a 	slli	r16,r16,16
  814c30:	a9ffffcc 	andi	r7,r21,65535
  814c34:	a82ad43a 	srli	r21,r21,16
  814c38:	1404b03a 	or	r2,r2,r16
  814c3c:	113fffcc 	andi	r4,r2,65535
  814c40:	100cd43a 	srli	r6,r2,16
  814c44:	21d3383a 	mul	r9,r4,r7
  814c48:	2549383a 	mul	r4,r4,r21
  814c4c:	31cf383a 	mul	r7,r6,r7
  814c50:	4810d43a 	srli	r8,r9,16
  814c54:	1947c83a 	sub	r3,r3,r5
  814c58:	3909883a 	add	r4,r7,r4
  814c5c:	2209883a 	add	r4,r4,r8
  814c60:	354d383a 	mul	r6,r6,r21
  814c64:	21c0022e 	bgeu	r4,r7,814c70 <__udivdi3+0x414>
  814c68:	01400074 	movhi	r5,1
  814c6c:	314d883a 	add	r6,r6,r5
  814c70:	202ad43a 	srli	r21,r4,16
  814c74:	354d883a 	add	r6,r6,r21
  814c78:	19803f36 	bltu	r3,r6,814d78 <__udivdi3+0x51c>
  814c7c:	19803926 	beq	r3,r6,814d64 <__udivdi3+0x508>
  814c80:	0007883a 	mov	r3,zero
  814c84:	003fa006 	br	814b08 <__alt_data_end+0xff814b08>
  814c88:	90e4983a 	sll	r18,r18,r3
  814c8c:	80aad83a 	srl	r21,r16,r2
  814c90:	80e0983a 	sll	r16,r16,r3
  814c94:	9028d43a 	srli	r20,r18,16
  814c98:	9884d83a 	srl	r2,r19,r2
  814c9c:	a809883a 	mov	r4,r21
  814ca0:	a00b883a 	mov	r5,r20
  814ca4:	80acb03a 	or	r22,r16,r2
  814ca8:	98e2983a 	sll	r17,r19,r3
  814cac:	080a9880 	call	80a988 <__umodsi3>
  814cb0:	a809883a 	mov	r4,r21
  814cb4:	a00b883a 	mov	r5,r20
  814cb8:	1021883a 	mov	r16,r2
  814cbc:	080a9800 	call	80a980 <__udivsi3>
  814cc0:	957fffcc 	andi	r21,r18,65535
  814cc4:	8020943a 	slli	r16,r16,16
  814cc8:	b00ad43a 	srli	r5,r22,16
  814ccc:	1567383a 	mul	r19,r2,r21
  814cd0:	102f883a 	mov	r23,r2
  814cd4:	8148b03a 	or	r4,r16,r5
  814cd8:	24c0062e 	bgeu	r4,r19,814cf4 <__udivdi3+0x498>
  814cdc:	2489883a 	add	r4,r4,r18
  814ce0:	10bfffc4 	addi	r2,r2,-1
  814ce4:	24804536 	bltu	r4,r18,814dfc <__udivdi3+0x5a0>
  814ce8:	24c0442e 	bgeu	r4,r19,814dfc <__udivdi3+0x5a0>
  814cec:	bdffff84 	addi	r23,r23,-2
  814cf0:	2489883a 	add	r4,r4,r18
  814cf4:	24e7c83a 	sub	r19,r4,r19
  814cf8:	9809883a 	mov	r4,r19
  814cfc:	a00b883a 	mov	r5,r20
  814d00:	080a9880 	call	80a988 <__umodsi3>
  814d04:	1021883a 	mov	r16,r2
  814d08:	9809883a 	mov	r4,r19
  814d0c:	a00b883a 	mov	r5,r20
  814d10:	080a9800 	call	80a980 <__udivsi3>
  814d14:	8020943a 	slli	r16,r16,16
  814d18:	1007883a 	mov	r3,r2
  814d1c:	1545383a 	mul	r2,r2,r21
  814d20:	b13fffcc 	andi	r4,r22,65535
  814d24:	8108b03a 	or	r4,r16,r4
  814d28:	2080062e 	bgeu	r4,r2,814d44 <__udivdi3+0x4e8>
  814d2c:	2489883a 	add	r4,r4,r18
  814d30:	197fffc4 	addi	r5,r3,-1
  814d34:	24802f36 	bltu	r4,r18,814df4 <__udivdi3+0x598>
  814d38:	20802e2e 	bgeu	r4,r2,814df4 <__udivdi3+0x598>
  814d3c:	18ffff84 	addi	r3,r3,-2
  814d40:	2489883a 	add	r4,r4,r18
  814d44:	b82e943a 	slli	r23,r23,16
  814d48:	20a1c83a 	sub	r16,r4,r2
  814d4c:	1dc6b03a 	or	r3,r3,r23
  814d50:	003f4006 	br	814a54 <__alt_data_end+0xff814a54>
  814d54:	2005883a 	mov	r2,r4
  814d58:	003f6606 	br	814af4 <__alt_data_end+0xff814af4>
  814d5c:	1805883a 	mov	r2,r3
  814d60:	003f0a06 	br	81498c <__alt_data_end+0xff81498c>
  814d64:	2006943a 	slli	r3,r4,16
  814d68:	9c88983a 	sll	r4,r19,r18
  814d6c:	4a7fffcc 	andi	r9,r9,65535
  814d70:	1a47883a 	add	r3,r3,r9
  814d74:	20ffc22e 	bgeu	r4,r3,814c80 <__alt_data_end+0xff814c80>
  814d78:	10bfffc4 	addi	r2,r2,-1
  814d7c:	003fc006 	br	814c80 <__alt_data_end+0xff814c80>
  814d80:	00c00404 	movi	r3,16
  814d84:	180b883a 	mov	r5,r3
  814d88:	003f0c06 	br	8149bc <__alt_data_end+0xff8149bc>
  814d8c:	0007883a 	mov	r3,zero
  814d90:	000b883a 	mov	r5,zero
  814d94:	003f0906 	br	8149bc <__alt_data_end+0xff8149bc>
  814d98:	00800404 	movi	r2,16
  814d9c:	1007883a 	mov	r3,r2
  814da0:	003ec606 	br	8148bc <__alt_data_end+0xff8148bc>
  814da4:	00800404 	movi	r2,16
  814da8:	1007883a 	mov	r3,r2
  814dac:	003f1c06 	br	814a20 <__alt_data_end+0xff814a20>
  814db0:	0005883a 	mov	r2,zero
  814db4:	0007883a 	mov	r3,zero
  814db8:	003f1906 	br	814a20 <__alt_data_end+0xff814a20>
  814dbc:	0005883a 	mov	r2,zero
  814dc0:	0007883a 	mov	r3,zero
  814dc4:	003ebd06 	br	8148bc <__alt_data_end+0xff8148bc>
  814dc8:	0007883a 	mov	r3,zero
  814dcc:	00800044 	movi	r2,1
  814dd0:	003f4d06 	br	814b08 <__alt_data_end+0xff814b08>
  814dd4:	197f942e 	bgeu	r3,r5,814c28 <__alt_data_end+0xff814c28>
  814dd8:	10bfff84 	addi	r2,r2,-2
  814ddc:	1dc7883a 	add	r3,r3,r23
  814de0:	003f9206 	br	814c2c <__alt_data_end+0xff814c2c>
  814de4:	15bf7e2e 	bgeu	r2,r22,814be0 <__alt_data_end+0xff814be0>
  814de8:	843fff84 	addi	r16,r16,-2
  814dec:	15c5883a 	add	r2,r2,r23
  814df0:	003f7c06 	br	814be4 <__alt_data_end+0xff814be4>
  814df4:	2807883a 	mov	r3,r5
  814df8:	003fd206 	br	814d44 <__alt_data_end+0xff814d44>
  814dfc:	102f883a 	mov	r23,r2
  814e00:	003fbc06 	br	814cf4 <__alt_data_end+0xff814cf4>
  814e04:	843fff84 	addi	r16,r16,-2
  814e08:	2489883a 	add	r4,r4,r18
  814e0c:	003f2506 	br	814aa4 <__alt_data_end+0xff814aa4>
  814e10:	843fff84 	addi	r16,r16,-2
  814e14:	1485883a 	add	r2,r2,r18
  814e18:	003eca06 	br	814944 <__alt_data_end+0xff814944>

00814e1c <__umoddi3>:
  814e1c:	defff404 	addi	sp,sp,-48
  814e20:	ddc00915 	stw	r23,36(sp)
  814e24:	dc400315 	stw	r17,12(sp)
  814e28:	dc000215 	stw	r16,8(sp)
  814e2c:	dfc00b15 	stw	ra,44(sp)
  814e30:	df000a15 	stw	fp,40(sp)
  814e34:	dd800815 	stw	r22,32(sp)
  814e38:	dd400715 	stw	r21,28(sp)
  814e3c:	dd000615 	stw	r20,24(sp)
  814e40:	dcc00515 	stw	r19,20(sp)
  814e44:	dc800415 	stw	r18,16(sp)
  814e48:	2021883a 	mov	r16,r4
  814e4c:	2823883a 	mov	r17,r5
  814e50:	282f883a 	mov	r23,r5
  814e54:	3800381e 	bne	r7,zero,814f38 <__umoddi3+0x11c>
  814e58:	3027883a 	mov	r19,r6
  814e5c:	2029883a 	mov	r20,r4
  814e60:	29804e2e 	bgeu	r5,r6,814f9c <__umoddi3+0x180>
  814e64:	00bfffd4 	movui	r2,65535
  814e68:	11809c36 	bltu	r2,r6,8150dc <__umoddi3+0x2c0>
  814e6c:	00803fc4 	movi	r2,255
  814e70:	11813b2e 	bgeu	r2,r6,815360 <__umoddi3+0x544>
  814e74:	01400204 	movi	r5,8
  814e78:	2805883a 	mov	r2,r5
  814e7c:	314ad83a 	srl	r5,r6,r5
  814e80:	00c020b4 	movhi	r3,130
  814e84:	18f38e04 	addi	r3,r3,-12744
  814e88:	194b883a 	add	r5,r3,r5
  814e8c:	29000003 	ldbu	r4,0(r5)
  814e90:	2089883a 	add	r4,r4,r2
  814e94:	00800804 	movi	r2,32
  814e98:	1105c83a 	sub	r2,r2,r4
  814e9c:	1000ec26 	beq	r2,zero,815250 <__umoddi3+0x434>
  814ea0:	88a2983a 	sll	r17,r17,r2
  814ea4:	8108d83a 	srl	r4,r16,r4
  814ea8:	30a6983a 	sll	r19,r6,r2
  814eac:	80a8983a 	sll	r20,r16,r2
  814eb0:	1025883a 	mov	r18,r2
  814eb4:	892eb03a 	or	r23,r17,r4
  814eb8:	982cd43a 	srli	r22,r19,16
  814ebc:	b809883a 	mov	r4,r23
  814ec0:	9d7fffcc 	andi	r21,r19,65535
  814ec4:	b00b883a 	mov	r5,r22
  814ec8:	080a9880 	call	80a988 <__umodsi3>
  814ecc:	b809883a 	mov	r4,r23
  814ed0:	b00b883a 	mov	r5,r22
  814ed4:	1021883a 	mov	r16,r2
  814ed8:	080a9800 	call	80a980 <__udivsi3>
  814edc:	8020943a 	slli	r16,r16,16
  814ee0:	a00cd43a 	srli	r6,r20,16
  814ee4:	1545383a 	mul	r2,r2,r21
  814ee8:	8188b03a 	or	r4,r16,r6
  814eec:	2080042e 	bgeu	r4,r2,814f00 <__umoddi3+0xe4>
  814ef0:	24c9883a 	add	r4,r4,r19
  814ef4:	24c00236 	bltu	r4,r19,814f00 <__umoddi3+0xe4>
  814ef8:	2080012e 	bgeu	r4,r2,814f00 <__umoddi3+0xe4>
  814efc:	24c9883a 	add	r4,r4,r19
  814f00:	20a3c83a 	sub	r17,r4,r2
  814f04:	8809883a 	mov	r4,r17
  814f08:	b00b883a 	mov	r5,r22
  814f0c:	080a9880 	call	80a988 <__umodsi3>
  814f10:	8809883a 	mov	r4,r17
  814f14:	b00b883a 	mov	r5,r22
  814f18:	1021883a 	mov	r16,r2
  814f1c:	080a9800 	call	80a980 <__udivsi3>
  814f20:	8006943a 	slli	r3,r16,16
  814f24:	1545383a 	mul	r2,r2,r21
  814f28:	a13fffcc 	andi	r4,r20,65535
  814f2c:	1906b03a 	or	r3,r3,r4
  814f30:	1880532e 	bgeu	r3,r2,815080 <__umoddi3+0x264>
  814f34:	00004e06 	br	815070 <__umoddi3+0x254>
  814f38:	29c05536 	bltu	r5,r7,815090 <__umoddi3+0x274>
  814f3c:	00bfffd4 	movui	r2,65535
  814f40:	11c0612e 	bgeu	r2,r7,8150c8 <__umoddi3+0x2ac>
  814f44:	00804034 	movhi	r2,256
  814f48:	10bfffc4 	addi	r2,r2,-1
  814f4c:	11c0f82e 	bgeu	r2,r7,815330 <__umoddi3+0x514>
  814f50:	01400604 	movi	r5,24
  814f54:	282b883a 	mov	r21,r5
  814f58:	394ad83a 	srl	r5,r7,r5
  814f5c:	00c020b4 	movhi	r3,130
  814f60:	18f38e04 	addi	r3,r3,-12744
  814f64:	194b883a 	add	r5,r3,r5
  814f68:	28800003 	ldbu	r2,0(r5)
  814f6c:	00c00804 	movi	r3,32
  814f70:	156b883a 	add	r21,r2,r21
  814f74:	1d69c83a 	sub	r20,r3,r21
  814f78:	a000631e 	bne	r20,zero,815108 <__umoddi3+0x2ec>
  814f7c:	3c400136 	bltu	r7,r17,814f84 <__umoddi3+0x168>
  814f80:	81810436 	bltu	r16,r6,815394 <__umoddi3+0x578>
  814f84:	8185c83a 	sub	r2,r16,r6
  814f88:	89e3c83a 	sub	r17,r17,r7
  814f8c:	8087803a 	cmpltu	r3,r16,r2
  814f90:	88efc83a 	sub	r23,r17,r3
  814f94:	b807883a 	mov	r3,r23
  814f98:	00003f06 	br	815098 <__umoddi3+0x27c>
  814f9c:	3000041e 	bne	r6,zero,814fb0 <__umoddi3+0x194>
  814fa0:	01000044 	movi	r4,1
  814fa4:	000b883a 	mov	r5,zero
  814fa8:	080a9800 	call	80a980 <__udivsi3>
  814fac:	1027883a 	mov	r19,r2
  814fb0:	00bfffd4 	movui	r2,65535
  814fb4:	14c04f2e 	bgeu	r2,r19,8150f4 <__umoddi3+0x2d8>
  814fb8:	00804034 	movhi	r2,256
  814fbc:	10bfffc4 	addi	r2,r2,-1
  814fc0:	14c0e42e 	bgeu	r2,r19,815354 <__umoddi3+0x538>
  814fc4:	00800604 	movi	r2,24
  814fc8:	1007883a 	mov	r3,r2
  814fcc:	9884d83a 	srl	r2,r19,r2
  814fd0:	010020b4 	movhi	r4,130
  814fd4:	21338e04 	addi	r4,r4,-12744
  814fd8:	2085883a 	add	r2,r4,r2
  814fdc:	11000003 	ldbu	r4,0(r2)
  814fe0:	00800804 	movi	r2,32
  814fe4:	20c7883a 	add	r3,r4,r3
  814fe8:	10c5c83a 	sub	r2,r2,r3
  814fec:	10009a1e 	bne	r2,zero,815258 <__umoddi3+0x43c>
  814ff0:	982cd43a 	srli	r22,r19,16
  814ff4:	8ce3c83a 	sub	r17,r17,r19
  814ff8:	9c3fffcc 	andi	r16,r19,65535
  814ffc:	0025883a 	mov	r18,zero
  815000:	8809883a 	mov	r4,r17
  815004:	b00b883a 	mov	r5,r22
  815008:	080a9880 	call	80a988 <__umodsi3>
  81500c:	8809883a 	mov	r4,r17
  815010:	b00b883a 	mov	r5,r22
  815014:	102b883a 	mov	r21,r2
  815018:	080a9800 	call	80a980 <__udivsi3>
  81501c:	a806943a 	slli	r3,r21,16
  815020:	a008d43a 	srli	r4,r20,16
  815024:	1405383a 	mul	r2,r2,r16
  815028:	190cb03a 	or	r6,r3,r4
  81502c:	3080032e 	bgeu	r6,r2,81503c <__umoddi3+0x220>
  815030:	34cd883a 	add	r6,r6,r19
  815034:	34c00136 	bltu	r6,r19,81503c <__umoddi3+0x220>
  815038:	3080d436 	bltu	r6,r2,81538c <__umoddi3+0x570>
  81503c:	30abc83a 	sub	r21,r6,r2
  815040:	a809883a 	mov	r4,r21
  815044:	b00b883a 	mov	r5,r22
  815048:	080a9880 	call	80a988 <__umodsi3>
  81504c:	1023883a 	mov	r17,r2
  815050:	a809883a 	mov	r4,r21
  815054:	b00b883a 	mov	r5,r22
  815058:	080a9800 	call	80a980 <__udivsi3>
  81505c:	8822943a 	slli	r17,r17,16
  815060:	1405383a 	mul	r2,r2,r16
  815064:	a13fffcc 	andi	r4,r20,65535
  815068:	8906b03a 	or	r3,r17,r4
  81506c:	1880042e 	bgeu	r3,r2,815080 <__umoddi3+0x264>
  815070:	1cc7883a 	add	r3,r3,r19
  815074:	1cc00236 	bltu	r3,r19,815080 <__umoddi3+0x264>
  815078:	1880012e 	bgeu	r3,r2,815080 <__umoddi3+0x264>
  81507c:	1cc7883a 	add	r3,r3,r19
  815080:	1887c83a 	sub	r3,r3,r2
  815084:	1c84d83a 	srl	r2,r3,r18
  815088:	0007883a 	mov	r3,zero
  81508c:	00000206 	br	815098 <__umoddi3+0x27c>
  815090:	2005883a 	mov	r2,r4
  815094:	2807883a 	mov	r3,r5
  815098:	dfc00b17 	ldw	ra,44(sp)
  81509c:	df000a17 	ldw	fp,40(sp)
  8150a0:	ddc00917 	ldw	r23,36(sp)
  8150a4:	dd800817 	ldw	r22,32(sp)
  8150a8:	dd400717 	ldw	r21,28(sp)
  8150ac:	dd000617 	ldw	r20,24(sp)
  8150b0:	dcc00517 	ldw	r19,20(sp)
  8150b4:	dc800417 	ldw	r18,16(sp)
  8150b8:	dc400317 	ldw	r17,12(sp)
  8150bc:	dc000217 	ldw	r16,8(sp)
  8150c0:	dec00c04 	addi	sp,sp,48
  8150c4:	f800283a 	ret
  8150c8:	00803fc4 	movi	r2,255
  8150cc:	11c0952e 	bgeu	r2,r7,815324 <__umoddi3+0x508>
  8150d0:	01400204 	movi	r5,8
  8150d4:	282b883a 	mov	r21,r5
  8150d8:	003f9f06 	br	814f58 <__alt_data_end+0xff814f58>
  8150dc:	00804034 	movhi	r2,256
  8150e0:	10bfffc4 	addi	r2,r2,-1
  8150e4:	1180952e 	bgeu	r2,r6,81533c <__umoddi3+0x520>
  8150e8:	01400604 	movi	r5,24
  8150ec:	2805883a 	mov	r2,r5
  8150f0:	003f6206 	br	814e7c <__alt_data_end+0xff814e7c>
  8150f4:	00803fc4 	movi	r2,255
  8150f8:	14c0932e 	bgeu	r2,r19,815348 <__umoddi3+0x52c>
  8150fc:	00800204 	movi	r2,8
  815100:	1007883a 	mov	r3,r2
  815104:	003fb106 	br	814fcc <__alt_data_end+0xff814fcc>
  815108:	3548d83a 	srl	r4,r6,r21
  81510c:	3d0e983a 	sll	r7,r7,r20
  815110:	8d10983a 	sll	r8,r17,r20
  815114:	8d6cd83a 	srl	r22,r17,r21
  815118:	3922b03a 	or	r17,r7,r4
  81511c:	882ed43a 	srli	r23,r17,16
  815120:	8564d83a 	srl	r18,r16,r21
  815124:	b009883a 	mov	r4,r22
  815128:	b80b883a 	mov	r5,r23
  81512c:	44a4b03a 	or	r18,r8,r18
  815130:	3526983a 	sll	r19,r6,r20
  815134:	080a9880 	call	80a988 <__umodsi3>
  815138:	b009883a 	mov	r4,r22
  81513c:	b80b883a 	mov	r5,r23
  815140:	1039883a 	mov	fp,r2
  815144:	080a9800 	call	80a980 <__udivsi3>
  815148:	102d883a 	mov	r22,r2
  81514c:	8a3fffcc 	andi	r8,r17,65535
  815150:	e004943a 	slli	r2,fp,16
  815154:	900cd43a 	srli	r6,r18,16
  815158:	b239383a 	mul	fp,r22,r8
  81515c:	8520983a 	sll	r16,r16,r20
  815160:	118ab03a 	or	r5,r2,r6
  815164:	2f00042e 	bgeu	r5,fp,815178 <__umoddi3+0x35c>
  815168:	2c4b883a 	add	r5,r5,r17
  81516c:	b0bfffc4 	addi	r2,r22,-1
  815170:	2c40822e 	bgeu	r5,r17,81537c <__umoddi3+0x560>
  815174:	102d883a 	mov	r22,r2
  815178:	2f39c83a 	sub	fp,r5,fp
  81517c:	e009883a 	mov	r4,fp
  815180:	b80b883a 	mov	r5,r23
  815184:	da000115 	stw	r8,4(sp)
  815188:	080a9880 	call	80a988 <__umodsi3>
  81518c:	e009883a 	mov	r4,fp
  815190:	b80b883a 	mov	r5,r23
  815194:	d8800015 	stw	r2,0(sp)
  815198:	080a9800 	call	80a980 <__udivsi3>
  81519c:	d9800017 	ldw	r6,0(sp)
  8151a0:	da000117 	ldw	r8,4(sp)
  8151a4:	94bfffcc 	andi	r18,r18,65535
  8151a8:	300c943a 	slli	r6,r6,16
  8151ac:	1209383a 	mul	r4,r2,r8
  8151b0:	3490b03a 	or	r8,r6,r18
  8151b4:	4100042e 	bgeu	r8,r4,8151c8 <__umoddi3+0x3ac>
  8151b8:	4451883a 	add	r8,r8,r17
  8151bc:	10ffffc4 	addi	r3,r2,-1
  8151c0:	44406a2e 	bgeu	r8,r17,81536c <__umoddi3+0x550>
  8151c4:	1805883a 	mov	r2,r3
  8151c8:	b012943a 	slli	r9,r22,16
  8151cc:	9abfffcc 	andi	r10,r19,65535
  8151d0:	980ed43a 	srli	r7,r19,16
  8151d4:	124ab03a 	or	r5,r2,r9
  8151d8:	2a7fffcc 	andi	r9,r5,65535
  8151dc:	280ad43a 	srli	r5,r5,16
  8151e0:	4a8d383a 	mul	r6,r9,r10
  8151e4:	49d3383a 	mul	r9,r9,r7
  8151e8:	2a95383a 	mul	r10,r5,r10
  8151ec:	3004d43a 	srli	r2,r6,16
  8151f0:	4111c83a 	sub	r8,r8,r4
  8151f4:	5253883a 	add	r9,r10,r9
  8151f8:	4893883a 	add	r9,r9,r2
  8151fc:	29cb383a 	mul	r5,r5,r7
  815200:	4a80022e 	bgeu	r9,r10,81520c <__umoddi3+0x3f0>
  815204:	00800074 	movhi	r2,1
  815208:	288b883a 	add	r5,r5,r2
  81520c:	4808d43a 	srli	r4,r9,16
  815210:	4812943a 	slli	r9,r9,16
  815214:	31bfffcc 	andi	r6,r6,65535
  815218:	290b883a 	add	r5,r5,r4
  81521c:	498d883a 	add	r6,r9,r6
  815220:	41403a36 	bltu	r8,r5,81530c <__umoddi3+0x4f0>
  815224:	41405d26 	beq	r8,r5,81539c <__umoddi3+0x580>
  815228:	4149c83a 	sub	r4,r8,r5
  81522c:	300f883a 	mov	r7,r6
  815230:	81cfc83a 	sub	r7,r16,r7
  815234:	81c7803a 	cmpltu	r3,r16,r7
  815238:	20c7c83a 	sub	r3,r4,r3
  81523c:	1d44983a 	sll	r2,r3,r21
  815240:	3d0ed83a 	srl	r7,r7,r20
  815244:	1d06d83a 	srl	r3,r3,r20
  815248:	11c4b03a 	or	r2,r2,r7
  81524c:	003f9206 	br	815098 <__alt_data_end+0xff815098>
  815250:	0025883a 	mov	r18,zero
  815254:	003f1806 	br	814eb8 <__alt_data_end+0xff814eb8>
  815258:	98a6983a 	sll	r19,r19,r2
  81525c:	88e8d83a 	srl	r20,r17,r3
  815260:	80c6d83a 	srl	r3,r16,r3
  815264:	982cd43a 	srli	r22,r19,16
  815268:	88a2983a 	sll	r17,r17,r2
  81526c:	a009883a 	mov	r4,r20
  815270:	b00b883a 	mov	r5,r22
  815274:	88eab03a 	or	r21,r17,r3
  815278:	1025883a 	mov	r18,r2
  81527c:	080a9880 	call	80a988 <__umodsi3>
  815280:	a009883a 	mov	r4,r20
  815284:	b00b883a 	mov	r5,r22
  815288:	1023883a 	mov	r17,r2
  81528c:	080a9800 	call	80a980 <__udivsi3>
  815290:	9f3fffcc 	andi	fp,r19,65535
  815294:	8822943a 	slli	r17,r17,16
  815298:	a80ad43a 	srli	r5,r21,16
  81529c:	1705383a 	mul	r2,r2,fp
  8152a0:	84a8983a 	sll	r20,r16,r18
  8152a4:	8948b03a 	or	r4,r17,r5
  8152a8:	2080042e 	bgeu	r4,r2,8152bc <__umoddi3+0x4a0>
  8152ac:	24c9883a 	add	r4,r4,r19
  8152b0:	24c00236 	bltu	r4,r19,8152bc <__umoddi3+0x4a0>
  8152b4:	2080012e 	bgeu	r4,r2,8152bc <__umoddi3+0x4a0>
  8152b8:	24c9883a 	add	r4,r4,r19
  8152bc:	20afc83a 	sub	r23,r4,r2
  8152c0:	b809883a 	mov	r4,r23
  8152c4:	b00b883a 	mov	r5,r22
  8152c8:	080a9880 	call	80a988 <__umodsi3>
  8152cc:	1023883a 	mov	r17,r2
  8152d0:	b809883a 	mov	r4,r23
  8152d4:	b00b883a 	mov	r5,r22
  8152d8:	080a9800 	call	80a980 <__udivsi3>
  8152dc:	8822943a 	slli	r17,r17,16
  8152e0:	1705383a 	mul	r2,r2,fp
  8152e4:	a93fffcc 	andi	r4,r21,65535
  8152e8:	8908b03a 	or	r4,r17,r4
  8152ec:	2080042e 	bgeu	r4,r2,815300 <__umoddi3+0x4e4>
  8152f0:	24c9883a 	add	r4,r4,r19
  8152f4:	24c00236 	bltu	r4,r19,815300 <__umoddi3+0x4e4>
  8152f8:	2080012e 	bgeu	r4,r2,815300 <__umoddi3+0x4e4>
  8152fc:	24c9883a 	add	r4,r4,r19
  815300:	20a3c83a 	sub	r17,r4,r2
  815304:	e021883a 	mov	r16,fp
  815308:	003f3d06 	br	815000 <__alt_data_end+0xff815000>
  81530c:	34cfc83a 	sub	r7,r6,r19
  815310:	2c4bc83a 	sub	r5,r5,r17
  815314:	31cd803a 	cmpltu	r6,r6,r7
  815318:	298dc83a 	sub	r6,r5,r6
  81531c:	4189c83a 	sub	r4,r8,r6
  815320:	003fc306 	br	815230 <__alt_data_end+0xff815230>
  815324:	000b883a 	mov	r5,zero
  815328:	002b883a 	mov	r21,zero
  81532c:	003f0a06 	br	814f58 <__alt_data_end+0xff814f58>
  815330:	01400404 	movi	r5,16
  815334:	282b883a 	mov	r21,r5
  815338:	003f0706 	br	814f58 <__alt_data_end+0xff814f58>
  81533c:	01400404 	movi	r5,16
  815340:	2805883a 	mov	r2,r5
  815344:	003ecd06 	br	814e7c <__alt_data_end+0xff814e7c>
  815348:	0005883a 	mov	r2,zero
  81534c:	0007883a 	mov	r3,zero
  815350:	003f1e06 	br	814fcc <__alt_data_end+0xff814fcc>
  815354:	00800404 	movi	r2,16
  815358:	1007883a 	mov	r3,r2
  81535c:	003f1b06 	br	814fcc <__alt_data_end+0xff814fcc>
  815360:	000b883a 	mov	r5,zero
  815364:	0005883a 	mov	r2,zero
  815368:	003ec406 	br	814e7c <__alt_data_end+0xff814e7c>
  81536c:	413f952e 	bgeu	r8,r4,8151c4 <__alt_data_end+0xff8151c4>
  815370:	10bfff84 	addi	r2,r2,-2
  815374:	4451883a 	add	r8,r8,r17
  815378:	003f9306 	br	8151c8 <__alt_data_end+0xff8151c8>
  81537c:	2f3f7d2e 	bgeu	r5,fp,815174 <__alt_data_end+0xff815174>
  815380:	b5bfff84 	addi	r22,r22,-2
  815384:	2c4b883a 	add	r5,r5,r17
  815388:	003f7b06 	br	815178 <__alt_data_end+0xff815178>
  81538c:	34cd883a 	add	r6,r6,r19
  815390:	003f2a06 	br	81503c <__alt_data_end+0xff81503c>
  815394:	8005883a 	mov	r2,r16
  815398:	003efe06 	br	814f94 <__alt_data_end+0xff814f94>
  81539c:	81bfdb36 	bltu	r16,r6,81530c <__alt_data_end+0xff81530c>
  8153a0:	300f883a 	mov	r7,r6
  8153a4:	0009883a 	mov	r4,zero
  8153a8:	003fa106 	br	815230 <__alt_data_end+0xff815230>

008153ac <__adddf3>:
  8153ac:	02000434 	movhi	r8,16
  8153b0:	423fffc4 	addi	r8,r8,-1
  8153b4:	defffb04 	addi	sp,sp,-20
  8153b8:	2a12703a 	and	r9,r5,r8
  8153bc:	2806d7fa 	srli	r3,r5,31
  8153c0:	3a10703a 	and	r8,r7,r8
  8153c4:	3804d53a 	srli	r2,r7,20
  8153c8:	3014d77a 	srli	r10,r6,29
  8153cc:	dc000015 	stw	r16,0(sp)
  8153d0:	481290fa 	slli	r9,r9,3
  8153d4:	2820d53a 	srli	r16,r5,20
  8153d8:	401090fa 	slli	r8,r8,3
  8153dc:	200ad77a 	srli	r5,r4,29
  8153e0:	380ed7fa 	srli	r7,r7,31
  8153e4:	dc800215 	stw	r18,8(sp)
  8153e8:	dc400115 	stw	r17,4(sp)
  8153ec:	dfc00415 	stw	ra,16(sp)
  8153f0:	dcc00315 	stw	r19,12(sp)
  8153f4:	1c803fcc 	andi	r18,r3,255
  8153f8:	8401ffcc 	andi	r16,r16,2047
  8153fc:	494ab03a 	or	r5,r9,r5
  815400:	202290fa 	slli	r17,r4,3
  815404:	1081ffcc 	andi	r2,r2,2047
  815408:	4290b03a 	or	r8,r8,r10
  81540c:	300c90fa 	slli	r6,r6,3
  815410:	91c07026 	beq	r18,r7,8155d4 <__adddf3+0x228>
  815414:	8087c83a 	sub	r3,r16,r2
  815418:	00c0b30e 	bge	zero,r3,8156e8 <__adddf3+0x33c>
  81541c:	10002a1e 	bne	r2,zero,8154c8 <__adddf3+0x11c>
  815420:	4184b03a 	or	r2,r8,r6
  815424:	1000991e 	bne	r2,zero,81568c <__adddf3+0x2e0>
  815428:	888001cc 	andi	r2,r17,7
  81542c:	10005b26 	beq	r2,zero,81559c <__adddf3+0x1f0>
  815430:	88c003cc 	andi	r3,r17,15
  815434:	00800104 	movi	r2,4
  815438:	18805826 	beq	r3,r2,81559c <__adddf3+0x1f0>
  81543c:	89800104 	addi	r6,r17,4
  815440:	3463803a 	cmpltu	r17,r6,r17
  815444:	2c4b883a 	add	r5,r5,r17
  815448:	2880202c 	andhi	r2,r5,128
  81544c:	9007883a 	mov	r3,r18
  815450:	3023883a 	mov	r17,r6
  815454:	10005426 	beq	r2,zero,8155a8 <__adddf3+0x1fc>
  815458:	84000044 	addi	r16,r16,1
  81545c:	0081ffc4 	movi	r2,2047
  815460:	8080c126 	beq	r16,r2,815768 <__adddf3+0x3bc>
  815464:	013fe034 	movhi	r4,65408
  815468:	213fffc4 	addi	r4,r4,-1
  81546c:	290a703a 	and	r5,r5,r4
  815470:	2804977a 	slli	r2,r5,29
  815474:	280a927a 	slli	r5,r5,9
  815478:	8822d0fa 	srli	r17,r17,3
  81547c:	8401ffcc 	andi	r16,r16,2047
  815480:	2808d33a 	srli	r4,r5,12
  815484:	1444b03a 	or	r2,r2,r17
  815488:	8401ffcc 	andi	r16,r16,2047
  81548c:	800a953a 	slli	r5,r16,20
  815490:	18c03fcc 	andi	r3,r3,255
  815494:	04000434 	movhi	r16,16
  815498:	180697fa 	slli	r3,r3,31
  81549c:	843fffc4 	addi	r16,r16,-1
  8154a0:	2420703a 	and	r16,r4,r16
  8154a4:	8160b03a 	or	r16,r16,r5
  8154a8:	80c6b03a 	or	r3,r16,r3
  8154ac:	dfc00417 	ldw	ra,16(sp)
  8154b0:	dcc00317 	ldw	r19,12(sp)
  8154b4:	dc800217 	ldw	r18,8(sp)
  8154b8:	dc400117 	ldw	r17,4(sp)
  8154bc:	dc000017 	ldw	r16,0(sp)
  8154c0:	dec00504 	addi	sp,sp,20
  8154c4:	f800283a 	ret
  8154c8:	0081ffc4 	movi	r2,2047
  8154cc:	80bfd626 	beq	r16,r2,815428 <__alt_data_end+0xff815428>
  8154d0:	42002034 	orhi	r8,r8,128
  8154d4:	00800e04 	movi	r2,56
  8154d8:	10c0a616 	blt	r2,r3,815774 <__adddf3+0x3c8>
  8154dc:	008007c4 	movi	r2,31
  8154e0:	10c0c916 	blt	r2,r3,815808 <__adddf3+0x45c>
  8154e4:	00800804 	movi	r2,32
  8154e8:	10c5c83a 	sub	r2,r2,r3
  8154ec:	408e983a 	sll	r7,r8,r2
  8154f0:	30c8d83a 	srl	r4,r6,r3
  8154f4:	3084983a 	sll	r2,r6,r2
  8154f8:	40c6d83a 	srl	r3,r8,r3
  8154fc:	390cb03a 	or	r6,r7,r4
  815500:	1004c03a 	cmpne	r2,r2,zero
  815504:	308cb03a 	or	r6,r6,r2
  815508:	898dc83a 	sub	r6,r17,r6
  81550c:	89a3803a 	cmpltu	r17,r17,r6
  815510:	28cbc83a 	sub	r5,r5,r3
  815514:	2c4bc83a 	sub	r5,r5,r17
  815518:	3023883a 	mov	r17,r6
  81551c:	2880202c 	andhi	r2,r5,128
  815520:	10006d26 	beq	r2,zero,8156d8 <__adddf3+0x32c>
  815524:	04c02034 	movhi	r19,128
  815528:	9cffffc4 	addi	r19,r19,-1
  81552c:	2ce6703a 	and	r19,r5,r19
  815530:	98007e26 	beq	r19,zero,81572c <__adddf3+0x380>
  815534:	9809883a 	mov	r4,r19
  815538:	08179480 	call	817948 <__clzsi2>
  81553c:	10fffe04 	addi	r3,r2,-8
  815540:	010007c4 	movi	r4,31
  815544:	20c07f16 	blt	r4,r3,815744 <__adddf3+0x398>
  815548:	01400a04 	movi	r5,40
  81554c:	2885c83a 	sub	r2,r5,r2
  815550:	888ad83a 	srl	r5,r17,r2
  815554:	98e6983a 	sll	r19,r19,r3
  815558:	88e2983a 	sll	r17,r17,r3
  81555c:	2ce6b03a 	or	r19,r5,r19
  815560:	1c007c16 	blt	r3,r16,815754 <__adddf3+0x3a8>
  815564:	1c21c83a 	sub	r16,r3,r16
  815568:	81400044 	addi	r5,r16,1
  81556c:	00c007c4 	movi	r3,31
  815570:	19409816 	blt	r3,r5,8157d4 <__adddf3+0x428>
  815574:	1c21c83a 	sub	r16,r3,r16
  815578:	8c08983a 	sll	r4,r17,r16
  81557c:	8946d83a 	srl	r3,r17,r5
  815580:	9c20983a 	sll	r16,r19,r16
  815584:	2008c03a 	cmpne	r4,r4,zero
  815588:	994ad83a 	srl	r5,r19,r5
  81558c:	1c06b03a 	or	r3,r3,r16
  815590:	1922b03a 	or	r17,r3,r4
  815594:	0021883a 	mov	r16,zero
  815598:	003fa306 	br	815428 <__alt_data_end+0xff815428>
  81559c:	2880202c 	andhi	r2,r5,128
  8155a0:	9007883a 	mov	r3,r18
  8155a4:	103fac1e 	bne	r2,zero,815458 <__alt_data_end+0xff815458>
  8155a8:	2804977a 	slli	r2,r5,29
  8155ac:	8822d0fa 	srli	r17,r17,3
  8155b0:	0101ffc4 	movi	r4,2047
  8155b4:	280ad0fa 	srli	r5,r5,3
  8155b8:	1444b03a 	or	r2,r2,r17
  8155bc:	81002c26 	beq	r16,r4,815670 <__adddf3+0x2c4>
  8155c0:	8120703a 	and	r16,r16,r4
  8155c4:	01000434 	movhi	r4,16
  8155c8:	213fffc4 	addi	r4,r4,-1
  8155cc:	2908703a 	and	r4,r5,r4
  8155d0:	003fad06 	br	815488 <__alt_data_end+0xff815488>
  8155d4:	8089c83a 	sub	r4,r16,r2
  8155d8:	01006a0e 	bge	zero,r4,815784 <__adddf3+0x3d8>
  8155dc:	10003326 	beq	r2,zero,8156ac <__adddf3+0x300>
  8155e0:	0081ffc4 	movi	r2,2047
  8155e4:	80bf9026 	beq	r16,r2,815428 <__alt_data_end+0xff815428>
  8155e8:	42002034 	orhi	r8,r8,128
  8155ec:	00800e04 	movi	r2,56
  8155f0:	1100b116 	blt	r2,r4,8158b8 <__adddf3+0x50c>
  8155f4:	008007c4 	movi	r2,31
  8155f8:	1100e216 	blt	r2,r4,815984 <__adddf3+0x5d8>
  8155fc:	00800804 	movi	r2,32
  815600:	1105c83a 	sub	r2,r2,r4
  815604:	4092983a 	sll	r9,r8,r2
  815608:	310ed83a 	srl	r7,r6,r4
  81560c:	3084983a 	sll	r2,r6,r2
  815610:	4110d83a 	srl	r8,r8,r4
  815614:	49ccb03a 	or	r6,r9,r7
  815618:	1004c03a 	cmpne	r2,r2,zero
  81561c:	308cb03a 	or	r6,r6,r2
  815620:	344d883a 	add	r6,r6,r17
  815624:	3463803a 	cmpltu	r17,r6,r17
  815628:	414b883a 	add	r5,r8,r5
  81562c:	2c4b883a 	add	r5,r5,r17
  815630:	3023883a 	mov	r17,r6
  815634:	2880202c 	andhi	r2,r5,128
  815638:	10002726 	beq	r2,zero,8156d8 <__adddf3+0x32c>
  81563c:	84000044 	addi	r16,r16,1
  815640:	0081ffc4 	movi	r2,2047
  815644:	8080ae26 	beq	r16,r2,815900 <__adddf3+0x554>
  815648:	00bfe034 	movhi	r2,65408
  81564c:	10bfffc4 	addi	r2,r2,-1
  815650:	288a703a 	and	r5,r5,r2
  815654:	880cd07a 	srli	r6,r17,1
  815658:	280897fa 	slli	r4,r5,31
  81565c:	88c0004c 	andi	r3,r17,1
  815660:	30e2b03a 	or	r17,r6,r3
  815664:	280ad07a 	srli	r5,r5,1
  815668:	8922b03a 	or	r17,r17,r4
  81566c:	003f6e06 	br	815428 <__alt_data_end+0xff815428>
  815670:	1148b03a 	or	r4,r2,r5
  815674:	20003c26 	beq	r4,zero,815768 <__adddf3+0x3bc>
  815678:	29000234 	orhi	r4,r5,8
  81567c:	01400434 	movhi	r5,16
  815680:	297fffc4 	addi	r5,r5,-1
  815684:	2148703a 	and	r4,r4,r5
  815688:	003f7f06 	br	815488 <__alt_data_end+0xff815488>
  81568c:	18ffffc4 	addi	r3,r3,-1
  815690:	18004d1e 	bne	r3,zero,8157c8 <__adddf3+0x41c>
  815694:	898dc83a 	sub	r6,r17,r6
  815698:	89a3803a 	cmpltu	r17,r17,r6
  81569c:	2a0bc83a 	sub	r5,r5,r8
  8156a0:	2c4bc83a 	sub	r5,r5,r17
  8156a4:	3023883a 	mov	r17,r6
  8156a8:	003f9c06 	br	81551c <__alt_data_end+0xff81551c>
  8156ac:	4184b03a 	or	r2,r8,r6
  8156b0:	103f5d26 	beq	r2,zero,815428 <__alt_data_end+0xff815428>
  8156b4:	213fffc4 	addi	r4,r4,-1
  8156b8:	203fd926 	beq	r4,zero,815620 <__alt_data_end+0xff815620>
  8156bc:	0081ffc4 	movi	r2,2047
  8156c0:	80bfca1e 	bne	r16,r2,8155ec <__alt_data_end+0xff8155ec>
  8156c4:	003f5806 	br	815428 <__alt_data_end+0xff815428>
  8156c8:	10c8b03a 	or	r4,r2,r3
  8156cc:	20008b26 	beq	r4,zero,8158fc <__adddf3+0x550>
  8156d0:	100b883a 	mov	r5,r2
  8156d4:	1823883a 	mov	r17,r3
  8156d8:	888001cc 	andi	r2,r17,7
  8156dc:	103f541e 	bne	r2,zero,815430 <__alt_data_end+0xff815430>
  8156e0:	9007883a 	mov	r3,r18
  8156e4:	003fb006 	br	8155a8 <__alt_data_end+0xff8155a8>
  8156e8:	1800531e 	bne	r3,zero,815838 <__adddf3+0x48c>
  8156ec:	80800044 	addi	r2,r16,1
  8156f0:	1081ffcc 	andi	r2,r2,2047
  8156f4:	00c00044 	movi	r3,1
  8156f8:	1880990e 	bge	r3,r2,815960 <__adddf3+0x5b4>
  8156fc:	8985c83a 	sub	r2,r17,r6
  815700:	8887803a 	cmpltu	r3,r17,r2
  815704:	2a27c83a 	sub	r19,r5,r8
  815708:	98e7c83a 	sub	r19,r19,r3
  81570c:	98c0202c 	andhi	r3,r19,128
  815710:	18006226 	beq	r3,zero,81589c <__adddf3+0x4f0>
  815714:	3463c83a 	sub	r17,r6,r17
  815718:	4151c83a 	sub	r8,r8,r5
  81571c:	344d803a 	cmpltu	r6,r6,r17
  815720:	41a7c83a 	sub	r19,r8,r6
  815724:	3825883a 	mov	r18,r7
  815728:	983f821e 	bne	r19,zero,815534 <__alt_data_end+0xff815534>
  81572c:	8809883a 	mov	r4,r17
  815730:	08179480 	call	817948 <__clzsi2>
  815734:	10800804 	addi	r2,r2,32
  815738:	10fffe04 	addi	r3,r2,-8
  81573c:	010007c4 	movi	r4,31
  815740:	20ff810e 	bge	r4,r3,815548 <__alt_data_end+0xff815548>
  815744:	14fff604 	addi	r19,r2,-40
  815748:	8ce6983a 	sll	r19,r17,r19
  81574c:	0023883a 	mov	r17,zero
  815750:	1c3f840e 	bge	r3,r16,815564 <__alt_data_end+0xff815564>
  815754:	017fe034 	movhi	r5,65408
  815758:	297fffc4 	addi	r5,r5,-1
  81575c:	80e1c83a 	sub	r16,r16,r3
  815760:	994a703a 	and	r5,r19,r5
  815764:	003f3006 	br	815428 <__alt_data_end+0xff815428>
  815768:	0009883a 	mov	r4,zero
  81576c:	0005883a 	mov	r2,zero
  815770:	003f4506 	br	815488 <__alt_data_end+0xff815488>
  815774:	418cb03a 	or	r6,r8,r6
  815778:	300cc03a 	cmpne	r6,r6,zero
  81577c:	0007883a 	mov	r3,zero
  815780:	003f6106 	br	815508 <__alt_data_end+0xff815508>
  815784:	2000921e 	bne	r4,zero,8159d0 <__adddf3+0x624>
  815788:	80800044 	addi	r2,r16,1
  81578c:	11c1ffcc 	andi	r7,r2,2047
  815790:	01000044 	movi	r4,1
  815794:	21c0610e 	bge	r4,r7,81591c <__adddf3+0x570>
  815798:	0101ffc4 	movi	r4,2047
  81579c:	1100a326 	beq	r2,r4,815a2c <__adddf3+0x680>
  8157a0:	344d883a 	add	r6,r6,r17
  8157a4:	3463803a 	cmpltu	r17,r6,r17
  8157a8:	414b883a 	add	r5,r8,r5
  8157ac:	2c4b883a 	add	r5,r5,r17
  8157b0:	282297fa 	slli	r17,r5,31
  8157b4:	300cd07a 	srli	r6,r6,1
  8157b8:	280ad07a 	srli	r5,r5,1
  8157bc:	1021883a 	mov	r16,r2
  8157c0:	89a2b03a 	or	r17,r17,r6
  8157c4:	003f1806 	br	815428 <__alt_data_end+0xff815428>
  8157c8:	0081ffc4 	movi	r2,2047
  8157cc:	80bf411e 	bne	r16,r2,8154d4 <__alt_data_end+0xff8154d4>
  8157d0:	003f1506 	br	815428 <__alt_data_end+0xff815428>
  8157d4:	80bff844 	addi	r2,r16,-31
  8157d8:	00c00804 	movi	r3,32
  8157dc:	9884d83a 	srl	r2,r19,r2
  8157e0:	28c04a26 	beq	r5,r3,81590c <__adddf3+0x560>
  8157e4:	00c00fc4 	movi	r3,63
  8157e8:	1c21c83a 	sub	r16,r3,r16
  8157ec:	9c26983a 	sll	r19,r19,r16
  8157f0:	9c62b03a 	or	r17,r19,r17
  8157f4:	8822c03a 	cmpne	r17,r17,zero
  8157f8:	88a2b03a 	or	r17,r17,r2
  8157fc:	000b883a 	mov	r5,zero
  815800:	0021883a 	mov	r16,zero
  815804:	003fb406 	br	8156d8 <__alt_data_end+0xff8156d8>
  815808:	18bff804 	addi	r2,r3,-32
  81580c:	01000804 	movi	r4,32
  815810:	4084d83a 	srl	r2,r8,r2
  815814:	19003f26 	beq	r3,r4,815914 <__adddf3+0x568>
  815818:	01001004 	movi	r4,64
  81581c:	20c7c83a 	sub	r3,r4,r3
  815820:	40d0983a 	sll	r8,r8,r3
  815824:	418cb03a 	or	r6,r8,r6
  815828:	300cc03a 	cmpne	r6,r6,zero
  81582c:	308cb03a 	or	r6,r6,r2
  815830:	0007883a 	mov	r3,zero
  815834:	003f3406 	br	815508 <__alt_data_end+0xff815508>
  815838:	80002326 	beq	r16,zero,8158c8 <__adddf3+0x51c>
  81583c:	0101ffc4 	movi	r4,2047
  815840:	11005e26 	beq	r2,r4,8159bc <__adddf3+0x610>
  815844:	00c7c83a 	sub	r3,zero,r3
  815848:	29402034 	orhi	r5,r5,128
  81584c:	01000e04 	movi	r4,56
  815850:	20c07216 	blt	r4,r3,815a1c <__adddf3+0x670>
  815854:	010007c4 	movi	r4,31
  815858:	20c0ce16 	blt	r4,r3,815b94 <__adddf3+0x7e8>
  81585c:	01000804 	movi	r4,32
  815860:	20c9c83a 	sub	r4,r4,r3
  815864:	2914983a 	sll	r10,r5,r4
  815868:	88d2d83a 	srl	r9,r17,r3
  81586c:	8908983a 	sll	r4,r17,r4
  815870:	28c6d83a 	srl	r3,r5,r3
  815874:	5262b03a 	or	r17,r10,r9
  815878:	2008c03a 	cmpne	r4,r4,zero
  81587c:	8922b03a 	or	r17,r17,r4
  815880:	3463c83a 	sub	r17,r6,r17
  815884:	40c7c83a 	sub	r3,r8,r3
  815888:	344d803a 	cmpltu	r6,r6,r17
  81588c:	198bc83a 	sub	r5,r3,r6
  815890:	1021883a 	mov	r16,r2
  815894:	3825883a 	mov	r18,r7
  815898:	003f2006 	br	81551c <__alt_data_end+0xff81551c>
  81589c:	9886b03a 	or	r3,r19,r2
  8158a0:	1800141e 	bne	r3,zero,8158f4 <__adddf3+0x548>
  8158a4:	0007883a 	mov	r3,zero
  8158a8:	000b883a 	mov	r5,zero
  8158ac:	0023883a 	mov	r17,zero
  8158b0:	0021883a 	mov	r16,zero
  8158b4:	003f3c06 	br	8155a8 <__alt_data_end+0xff8155a8>
  8158b8:	418cb03a 	or	r6,r8,r6
  8158bc:	300cc03a 	cmpne	r6,r6,zero
  8158c0:	0011883a 	mov	r8,zero
  8158c4:	003f5606 	br	815620 <__alt_data_end+0xff815620>
  8158c8:	2c48b03a 	or	r4,r5,r17
  8158cc:	20003b26 	beq	r4,zero,8159bc <__adddf3+0x610>
  8158d0:	00c6303a 	nor	r3,zero,r3
  8158d4:	1800371e 	bne	r3,zero,8159b4 <__adddf3+0x608>
  8158d8:	3463c83a 	sub	r17,r6,r17
  8158dc:	414bc83a 	sub	r5,r8,r5
  8158e0:	344d803a 	cmpltu	r6,r6,r17
  8158e4:	298bc83a 	sub	r5,r5,r6
  8158e8:	1021883a 	mov	r16,r2
  8158ec:	3825883a 	mov	r18,r7
  8158f0:	003f0a06 	br	81551c <__alt_data_end+0xff81551c>
  8158f4:	1023883a 	mov	r17,r2
  8158f8:	003f0d06 	br	815530 <__alt_data_end+0xff815530>
  8158fc:	0007883a 	mov	r3,zero
  815900:	000b883a 	mov	r5,zero
  815904:	0023883a 	mov	r17,zero
  815908:	003f2706 	br	8155a8 <__alt_data_end+0xff8155a8>
  81590c:	0027883a 	mov	r19,zero
  815910:	003fb706 	br	8157f0 <__alt_data_end+0xff8157f0>
  815914:	0011883a 	mov	r8,zero
  815918:	003fc206 	br	815824 <__alt_data_end+0xff815824>
  81591c:	2c44b03a 	or	r2,r5,r17
  815920:	8000871e 	bne	r16,zero,815b40 <__adddf3+0x794>
  815924:	1000b126 	beq	r2,zero,815bec <__adddf3+0x840>
  815928:	4184b03a 	or	r2,r8,r6
  81592c:	103ebe26 	beq	r2,zero,815428 <__alt_data_end+0xff815428>
  815930:	3445883a 	add	r2,r6,r17
  815934:	1463803a 	cmpltu	r17,r2,r17
  815938:	414b883a 	add	r5,r8,r5
  81593c:	2c4b883a 	add	r5,r5,r17
  815940:	28c0202c 	andhi	r3,r5,128
  815944:	1023883a 	mov	r17,r2
  815948:	183f6326 	beq	r3,zero,8156d8 <__alt_data_end+0xff8156d8>
  81594c:	00bfe034 	movhi	r2,65408
  815950:	10bfffc4 	addi	r2,r2,-1
  815954:	2021883a 	mov	r16,r4
  815958:	288a703a 	and	r5,r5,r2
  81595c:	003eb206 	br	815428 <__alt_data_end+0xff815428>
  815960:	2c44b03a 	or	r2,r5,r17
  815964:	8000251e 	bne	r16,zero,8159fc <__adddf3+0x650>
  815968:	10004b1e 	bne	r2,zero,815a98 <__adddf3+0x6ec>
  81596c:	4184b03a 	or	r2,r8,r6
  815970:	103fe226 	beq	r2,zero,8158fc <__alt_data_end+0xff8158fc>
  815974:	400b883a 	mov	r5,r8
  815978:	3023883a 	mov	r17,r6
  81597c:	3825883a 	mov	r18,r7
  815980:	003ea906 	br	815428 <__alt_data_end+0xff815428>
  815984:	20bff804 	addi	r2,r4,-32
  815988:	01c00804 	movi	r7,32
  81598c:	4084d83a 	srl	r2,r8,r2
  815990:	21c07e26 	beq	r4,r7,815b8c <__adddf3+0x7e0>
  815994:	01c01004 	movi	r7,64
  815998:	3909c83a 	sub	r4,r7,r4
  81599c:	4110983a 	sll	r8,r8,r4
  8159a0:	418cb03a 	or	r6,r8,r6
  8159a4:	300cc03a 	cmpne	r6,r6,zero
  8159a8:	308cb03a 	or	r6,r6,r2
  8159ac:	0011883a 	mov	r8,zero
  8159b0:	003f1b06 	br	815620 <__alt_data_end+0xff815620>
  8159b4:	0101ffc4 	movi	r4,2047
  8159b8:	113fa41e 	bne	r2,r4,81584c <__alt_data_end+0xff81584c>
  8159bc:	400b883a 	mov	r5,r8
  8159c0:	3023883a 	mov	r17,r6
  8159c4:	1021883a 	mov	r16,r2
  8159c8:	3825883a 	mov	r18,r7
  8159cc:	003e9606 	br	815428 <__alt_data_end+0xff815428>
  8159d0:	80001a1e 	bne	r16,zero,815a3c <__adddf3+0x690>
  8159d4:	2c4eb03a 	or	r7,r5,r17
  8159d8:	38005526 	beq	r7,zero,815b30 <__adddf3+0x784>
  8159dc:	0108303a 	nor	r4,zero,r4
  8159e0:	2000511e 	bne	r4,zero,815b28 <__adddf3+0x77c>
  8159e4:	89a3883a 	add	r17,r17,r6
  8159e8:	414b883a 	add	r5,r8,r5
  8159ec:	898d803a 	cmpltu	r6,r17,r6
  8159f0:	298b883a 	add	r5,r5,r6
  8159f4:	1021883a 	mov	r16,r2
  8159f8:	003f0e06 	br	815634 <__alt_data_end+0xff815634>
  8159fc:	1000341e 	bne	r2,zero,815ad0 <__adddf3+0x724>
  815a00:	4184b03a 	or	r2,r8,r6
  815a04:	10006f26 	beq	r2,zero,815bc4 <__adddf3+0x818>
  815a08:	400b883a 	mov	r5,r8
  815a0c:	3023883a 	mov	r17,r6
  815a10:	3825883a 	mov	r18,r7
  815a14:	0401ffc4 	movi	r16,2047
  815a18:	003e8306 	br	815428 <__alt_data_end+0xff815428>
  815a1c:	2c62b03a 	or	r17,r5,r17
  815a20:	8822c03a 	cmpne	r17,r17,zero
  815a24:	0007883a 	mov	r3,zero
  815a28:	003f9506 	br	815880 <__alt_data_end+0xff815880>
  815a2c:	1021883a 	mov	r16,r2
  815a30:	000b883a 	mov	r5,zero
  815a34:	0023883a 	mov	r17,zero
  815a38:	003edb06 	br	8155a8 <__alt_data_end+0xff8155a8>
  815a3c:	01c1ffc4 	movi	r7,2047
  815a40:	11c03b26 	beq	r2,r7,815b30 <__adddf3+0x784>
  815a44:	0109c83a 	sub	r4,zero,r4
  815a48:	29402034 	orhi	r5,r5,128
  815a4c:	01c00e04 	movi	r7,56
  815a50:	39006216 	blt	r7,r4,815bdc <__adddf3+0x830>
  815a54:	01c007c4 	movi	r7,31
  815a58:	39006b16 	blt	r7,r4,815c08 <__adddf3+0x85c>
  815a5c:	01c00804 	movi	r7,32
  815a60:	390fc83a 	sub	r7,r7,r4
  815a64:	29d4983a 	sll	r10,r5,r7
  815a68:	8912d83a 	srl	r9,r17,r4
  815a6c:	89ce983a 	sll	r7,r17,r7
  815a70:	2908d83a 	srl	r4,r5,r4
  815a74:	5262b03a 	or	r17,r10,r9
  815a78:	380ac03a 	cmpne	r5,r7,zero
  815a7c:	8962b03a 	or	r17,r17,r5
  815a80:	89a3883a 	add	r17,r17,r6
  815a84:	2211883a 	add	r8,r4,r8
  815a88:	898d803a 	cmpltu	r6,r17,r6
  815a8c:	418b883a 	add	r5,r8,r6
  815a90:	1021883a 	mov	r16,r2
  815a94:	003ee706 	br	815634 <__alt_data_end+0xff815634>
  815a98:	4184b03a 	or	r2,r8,r6
  815a9c:	103e6226 	beq	r2,zero,815428 <__alt_data_end+0xff815428>
  815aa0:	8987c83a 	sub	r3,r17,r6
  815aa4:	88c9803a 	cmpltu	r4,r17,r3
  815aa8:	2a05c83a 	sub	r2,r5,r8
  815aac:	1105c83a 	sub	r2,r2,r4
  815ab0:	1100202c 	andhi	r4,r2,128
  815ab4:	203f0426 	beq	r4,zero,8156c8 <__alt_data_end+0xff8156c8>
  815ab8:	3463c83a 	sub	r17,r6,r17
  815abc:	414bc83a 	sub	r5,r8,r5
  815ac0:	344d803a 	cmpltu	r6,r6,r17
  815ac4:	298bc83a 	sub	r5,r5,r6
  815ac8:	3825883a 	mov	r18,r7
  815acc:	003e5606 	br	815428 <__alt_data_end+0xff815428>
  815ad0:	4184b03a 	or	r2,r8,r6
  815ad4:	10002b26 	beq	r2,zero,815b84 <__adddf3+0x7d8>
  815ad8:	2804d0fa 	srli	r2,r5,3
  815adc:	8822d0fa 	srli	r17,r17,3
  815ae0:	280a977a 	slli	r5,r5,29
  815ae4:	10c0022c 	andhi	r3,r2,8
  815ae8:	2c62b03a 	or	r17,r5,r17
  815aec:	18000826 	beq	r3,zero,815b10 <__adddf3+0x764>
  815af0:	4008d0fa 	srli	r4,r8,3
  815af4:	20c0022c 	andhi	r3,r4,8
  815af8:	1800051e 	bne	r3,zero,815b10 <__adddf3+0x764>
  815afc:	300cd0fa 	srli	r6,r6,3
  815b00:	4010977a 	slli	r8,r8,29
  815b04:	2005883a 	mov	r2,r4
  815b08:	3825883a 	mov	r18,r7
  815b0c:	41a2b03a 	or	r17,r8,r6
  815b10:	880ad77a 	srli	r5,r17,29
  815b14:	100490fa 	slli	r2,r2,3
  815b18:	882290fa 	slli	r17,r17,3
  815b1c:	0401ffc4 	movi	r16,2047
  815b20:	288ab03a 	or	r5,r5,r2
  815b24:	003e4006 	br	815428 <__alt_data_end+0xff815428>
  815b28:	01c1ffc4 	movi	r7,2047
  815b2c:	11ffc71e 	bne	r2,r7,815a4c <__alt_data_end+0xff815a4c>
  815b30:	400b883a 	mov	r5,r8
  815b34:	3023883a 	mov	r17,r6
  815b38:	1021883a 	mov	r16,r2
  815b3c:	003e3a06 	br	815428 <__alt_data_end+0xff815428>
  815b40:	10002d26 	beq	r2,zero,815bf8 <__adddf3+0x84c>
  815b44:	4184b03a 	or	r2,r8,r6
  815b48:	10000e26 	beq	r2,zero,815b84 <__adddf3+0x7d8>
  815b4c:	2804d0fa 	srli	r2,r5,3
  815b50:	8822d0fa 	srli	r17,r17,3
  815b54:	280a977a 	slli	r5,r5,29
  815b58:	10c0022c 	andhi	r3,r2,8
  815b5c:	2c62b03a 	or	r17,r5,r17
  815b60:	183feb26 	beq	r3,zero,815b10 <__alt_data_end+0xff815b10>
  815b64:	4008d0fa 	srli	r4,r8,3
  815b68:	20c0022c 	andhi	r3,r4,8
  815b6c:	183fe81e 	bne	r3,zero,815b10 <__alt_data_end+0xff815b10>
  815b70:	300cd0fa 	srli	r6,r6,3
  815b74:	4010977a 	slli	r8,r8,29
  815b78:	2005883a 	mov	r2,r4
  815b7c:	41a2b03a 	or	r17,r8,r6
  815b80:	003fe306 	br	815b10 <__alt_data_end+0xff815b10>
  815b84:	0401ffc4 	movi	r16,2047
  815b88:	003e2706 	br	815428 <__alt_data_end+0xff815428>
  815b8c:	0011883a 	mov	r8,zero
  815b90:	003f8306 	br	8159a0 <__alt_data_end+0xff8159a0>
  815b94:	193ff804 	addi	r4,r3,-32
  815b98:	02400804 	movi	r9,32
  815b9c:	2908d83a 	srl	r4,r5,r4
  815ba0:	1a402526 	beq	r3,r9,815c38 <__adddf3+0x88c>
  815ba4:	02401004 	movi	r9,64
  815ba8:	48c7c83a 	sub	r3,r9,r3
  815bac:	28ca983a 	sll	r5,r5,r3
  815bb0:	2c62b03a 	or	r17,r5,r17
  815bb4:	8822c03a 	cmpne	r17,r17,zero
  815bb8:	8922b03a 	or	r17,r17,r4
  815bbc:	0007883a 	mov	r3,zero
  815bc0:	003f2f06 	br	815880 <__alt_data_end+0xff815880>
  815bc4:	01402034 	movhi	r5,128
  815bc8:	0007883a 	mov	r3,zero
  815bcc:	297fffc4 	addi	r5,r5,-1
  815bd0:	047ffe04 	movi	r17,-8
  815bd4:	0401ffc4 	movi	r16,2047
  815bd8:	003e7306 	br	8155a8 <__alt_data_end+0xff8155a8>
  815bdc:	2c62b03a 	or	r17,r5,r17
  815be0:	8822c03a 	cmpne	r17,r17,zero
  815be4:	0009883a 	mov	r4,zero
  815be8:	003fa506 	br	815a80 <__alt_data_end+0xff815a80>
  815bec:	400b883a 	mov	r5,r8
  815bf0:	3023883a 	mov	r17,r6
  815bf4:	003e0c06 	br	815428 <__alt_data_end+0xff815428>
  815bf8:	400b883a 	mov	r5,r8
  815bfc:	3023883a 	mov	r17,r6
  815c00:	0401ffc4 	movi	r16,2047
  815c04:	003e0806 	br	815428 <__alt_data_end+0xff815428>
  815c08:	21fff804 	addi	r7,r4,-32
  815c0c:	02400804 	movi	r9,32
  815c10:	29ced83a 	srl	r7,r5,r7
  815c14:	22400a26 	beq	r4,r9,815c40 <__adddf3+0x894>
  815c18:	02401004 	movi	r9,64
  815c1c:	4909c83a 	sub	r4,r9,r4
  815c20:	290a983a 	sll	r5,r5,r4
  815c24:	2c62b03a 	or	r17,r5,r17
  815c28:	8822c03a 	cmpne	r17,r17,zero
  815c2c:	89e2b03a 	or	r17,r17,r7
  815c30:	0009883a 	mov	r4,zero
  815c34:	003f9206 	br	815a80 <__alt_data_end+0xff815a80>
  815c38:	000b883a 	mov	r5,zero
  815c3c:	003fdc06 	br	815bb0 <__alt_data_end+0xff815bb0>
  815c40:	000b883a 	mov	r5,zero
  815c44:	003ff706 	br	815c24 <__alt_data_end+0xff815c24>

00815c48 <__divdf3>:
  815c48:	defff204 	addi	sp,sp,-56
  815c4c:	dd000815 	stw	r20,32(sp)
  815c50:	2828d53a 	srli	r20,r5,20
  815c54:	dd800a15 	stw	r22,40(sp)
  815c58:	282cd7fa 	srli	r22,r5,31
  815c5c:	dc000415 	stw	r16,16(sp)
  815c60:	04000434 	movhi	r16,16
  815c64:	df000c15 	stw	fp,48(sp)
  815c68:	dcc00715 	stw	r19,28(sp)
  815c6c:	dc800615 	stw	r18,24(sp)
  815c70:	dc400515 	stw	r17,20(sp)
  815c74:	843fffc4 	addi	r16,r16,-1
  815c78:	dfc00d15 	stw	ra,52(sp)
  815c7c:	ddc00b15 	stw	r23,44(sp)
  815c80:	dd400915 	stw	r21,36(sp)
  815c84:	a501ffcc 	andi	r20,r20,2047
  815c88:	2025883a 	mov	r18,r4
  815c8c:	2027883a 	mov	r19,r4
  815c90:	2c22703a 	and	r17,r5,r16
  815c94:	b7003fcc 	andi	fp,r22,255
  815c98:	a0005e26 	beq	r20,zero,815e14 <__divdf3+0x1cc>
  815c9c:	0081ffc4 	movi	r2,2047
  815ca0:	a0803526 	beq	r20,r2,815d78 <__divdf3+0x130>
  815ca4:	8c000434 	orhi	r16,r17,16
  815ca8:	2004d77a 	srli	r2,r4,29
  815cac:	802090fa 	slli	r16,r16,3
  815cb0:	202690fa 	slli	r19,r4,3
  815cb4:	a53f0044 	addi	r20,r20,-1023
  815cb8:	80a2b03a 	or	r17,r16,r2
  815cbc:	0025883a 	mov	r18,zero
  815cc0:	0011883a 	mov	r8,zero
  815cc4:	380ad53a 	srli	r5,r7,20
  815cc8:	382ed7fa 	srli	r23,r7,31
  815ccc:	04000434 	movhi	r16,16
  815cd0:	843fffc4 	addi	r16,r16,-1
  815cd4:	2941ffcc 	andi	r5,r5,2047
  815cd8:	302b883a 	mov	r21,r6
  815cdc:	3c20703a 	and	r16,r7,r16
  815ce0:	ba403fcc 	andi	r9,r23,255
  815ce4:	28006726 	beq	r5,zero,815e84 <__divdf3+0x23c>
  815ce8:	0081ffc4 	movi	r2,2047
  815cec:	28805f26 	beq	r5,r2,815e6c <__divdf3+0x224>
  815cf0:	84000434 	orhi	r16,r16,16
  815cf4:	3004d77a 	srli	r2,r6,29
  815cf8:	802090fa 	slli	r16,r16,3
  815cfc:	302a90fa 	slli	r21,r6,3
  815d00:	297f0044 	addi	r5,r5,-1023
  815d04:	80a0b03a 	or	r16,r16,r2
  815d08:	000f883a 	mov	r7,zero
  815d0c:	3c86b03a 	or	r3,r7,r18
  815d10:	180690ba 	slli	r3,r3,2
  815d14:	00802074 	movhi	r2,129
  815d18:	10974e04 	addi	r2,r2,23864
  815d1c:	1887883a 	add	r3,r3,r2
  815d20:	18c00017 	ldw	r3,0(r3)
  815d24:	b5c8f03a 	xor	r4,r22,r23
  815d28:	200d883a 	mov	r6,r4
  815d2c:	24803fcc 	andi	r18,r4,255
  815d30:	a169c83a 	sub	r20,r20,r5
  815d34:	1800683a 	jmp	r3
  815d38:	00815f80 	call	815f8 <__reset-0x77ea08>
  815d3c:	00815db0 	cmpltui	r2,zero,1398
  815d40:	00815f44 	movi	r2,1405
  815d44:	00815d94 	movui	r2,1398
  815d48:	00815f44 	movi	r2,1405
  815d4c:	00815f18 	cmpnei	r2,zero,1404
  815d50:	00815f44 	movi	r2,1405
  815d54:	00815d94 	movui	r2,1398
  815d58:	00815db0 	cmpltui	r2,zero,1398
  815d5c:	00815db0 	cmpltui	r2,zero,1398
  815d60:	00815f18 	cmpnei	r2,zero,1404
  815d64:	00815d94 	movui	r2,1398
  815d68:	00815da4 	muli	r2,zero,1398
  815d6c:	00815da4 	muli	r2,zero,1398
  815d70:	00815da4 	muli	r2,zero,1398
  815d74:	00815f54 	movui	r2,1405
  815d78:	8904b03a 	or	r2,r17,r4
  815d7c:	1000631e 	bne	r2,zero,815f0c <__divdf3+0x2c4>
  815d80:	04800204 	movi	r18,8
  815d84:	0023883a 	mov	r17,zero
  815d88:	0027883a 	mov	r19,zero
  815d8c:	02000084 	movi	r8,2
  815d90:	003fcc06 	br	815cc4 <__alt_data_end+0xff815cc4>
  815d94:	8023883a 	mov	r17,r16
  815d98:	a827883a 	mov	r19,r21
  815d9c:	4839883a 	mov	fp,r9
  815da0:	3811883a 	mov	r8,r7
  815da4:	00800084 	movi	r2,2
  815da8:	40812a1e 	bne	r8,r2,816254 <__divdf3+0x60c>
  815dac:	e025883a 	mov	r18,fp
  815db0:	9180004c 	andi	r6,r18,1
  815db4:	0101ffc4 	movi	r4,2047
  815db8:	000b883a 	mov	r5,zero
  815dbc:	0027883a 	mov	r19,zero
  815dc0:	2008953a 	slli	r4,r4,20
  815dc4:	30c03fcc 	andi	r3,r6,255
  815dc8:	04000434 	movhi	r16,16
  815dcc:	180697fa 	slli	r3,r3,31
  815dd0:	843fffc4 	addi	r16,r16,-1
  815dd4:	2c20703a 	and	r16,r5,r16
  815dd8:	8120b03a 	or	r16,r16,r4
  815ddc:	80c6b03a 	or	r3,r16,r3
  815de0:	9805883a 	mov	r2,r19
  815de4:	dfc00d17 	ldw	ra,52(sp)
  815de8:	df000c17 	ldw	fp,48(sp)
  815dec:	ddc00b17 	ldw	r23,44(sp)
  815df0:	dd800a17 	ldw	r22,40(sp)
  815df4:	dd400917 	ldw	r21,36(sp)
  815df8:	dd000817 	ldw	r20,32(sp)
  815dfc:	dcc00717 	ldw	r19,28(sp)
  815e00:	dc800617 	ldw	r18,24(sp)
  815e04:	dc400517 	ldw	r17,20(sp)
  815e08:	dc000417 	ldw	r16,16(sp)
  815e0c:	dec00e04 	addi	sp,sp,56
  815e10:	f800283a 	ret
  815e14:	8904b03a 	or	r2,r17,r4
  815e18:	10003726 	beq	r2,zero,815ef8 <__divdf3+0x2b0>
  815e1c:	88011c26 	beq	r17,zero,816290 <__divdf3+0x648>
  815e20:	8809883a 	mov	r4,r17
  815e24:	d9800315 	stw	r6,12(sp)
  815e28:	d9c00115 	stw	r7,4(sp)
  815e2c:	08179480 	call	817948 <__clzsi2>
  815e30:	d9800317 	ldw	r6,12(sp)
  815e34:	d9c00117 	ldw	r7,4(sp)
  815e38:	1007883a 	mov	r3,r2
  815e3c:	01000a04 	movi	r4,40
  815e40:	1cfffe04 	addi	r19,r3,-8
  815e44:	20c9c83a 	sub	r4,r4,r3
  815e48:	8cca983a 	sll	r5,r17,r19
  815e4c:	9108d83a 	srl	r4,r18,r4
  815e50:	94e6983a 	sll	r19,r18,r19
  815e54:	2162b03a 	or	r17,r4,r5
  815e58:	053f0344 	movi	r20,-1011
  815e5c:	a0e9c83a 	sub	r20,r20,r3
  815e60:	0025883a 	mov	r18,zero
  815e64:	0011883a 	mov	r8,zero
  815e68:	003f9606 	br	815cc4 <__alt_data_end+0xff815cc4>
  815e6c:	8184b03a 	or	r2,r16,r6
  815e70:	10001f1e 	bne	r2,zero,815ef0 <__divdf3+0x2a8>
  815e74:	0021883a 	mov	r16,zero
  815e78:	002b883a 	mov	r21,zero
  815e7c:	01c00084 	movi	r7,2
  815e80:	003fa206 	br	815d0c <__alt_data_end+0xff815d0c>
  815e84:	8184b03a 	or	r2,r16,r6
  815e88:	10001526 	beq	r2,zero,815ee0 <__divdf3+0x298>
  815e8c:	80010c26 	beq	r16,zero,8162c0 <__divdf3+0x678>
  815e90:	8009883a 	mov	r4,r16
  815e94:	d9800315 	stw	r6,12(sp)
  815e98:	da000215 	stw	r8,8(sp)
  815e9c:	da400015 	stw	r9,0(sp)
  815ea0:	08179480 	call	817948 <__clzsi2>
  815ea4:	d9800317 	ldw	r6,12(sp)
  815ea8:	da000217 	ldw	r8,8(sp)
  815eac:	da400017 	ldw	r9,0(sp)
  815eb0:	1007883a 	mov	r3,r2
  815eb4:	01000a04 	movi	r4,40
  815eb8:	1d7ffe04 	addi	r21,r3,-8
  815ebc:	20c9c83a 	sub	r4,r4,r3
  815ec0:	8560983a 	sll	r16,r16,r21
  815ec4:	3108d83a 	srl	r4,r6,r4
  815ec8:	356a983a 	sll	r21,r6,r21
  815ecc:	2420b03a 	or	r16,r4,r16
  815ed0:	017f0344 	movi	r5,-1011
  815ed4:	28cbc83a 	sub	r5,r5,r3
  815ed8:	000f883a 	mov	r7,zero
  815edc:	003f8b06 	br	815d0c <__alt_data_end+0xff815d0c>
  815ee0:	0021883a 	mov	r16,zero
  815ee4:	002b883a 	mov	r21,zero
  815ee8:	01c00044 	movi	r7,1
  815eec:	003f8706 	br	815d0c <__alt_data_end+0xff815d0c>
  815ef0:	01c000c4 	movi	r7,3
  815ef4:	003f8506 	br	815d0c <__alt_data_end+0xff815d0c>
  815ef8:	04800104 	movi	r18,4
  815efc:	0023883a 	mov	r17,zero
  815f00:	0027883a 	mov	r19,zero
  815f04:	02000044 	movi	r8,1
  815f08:	003f6e06 	br	815cc4 <__alt_data_end+0xff815cc4>
  815f0c:	04800304 	movi	r18,12
  815f10:	020000c4 	movi	r8,3
  815f14:	003f6b06 	br	815cc4 <__alt_data_end+0xff815cc4>
  815f18:	01400434 	movhi	r5,16
  815f1c:	000d883a 	mov	r6,zero
  815f20:	297fffc4 	addi	r5,r5,-1
  815f24:	04ffffc4 	movi	r19,-1
  815f28:	0101ffc4 	movi	r4,2047
  815f2c:	003fa406 	br	815dc0 <__alt_data_end+0xff815dc0>
  815f30:	043f0084 	movi	r16,-1022
  815f34:	8521c83a 	sub	r16,r16,r20
  815f38:	00800e04 	movi	r2,56
  815f3c:	1401200e 	bge	r2,r16,8163c0 <__divdf3+0x778>
  815f40:	9180004c 	andi	r6,r18,1
  815f44:	0009883a 	mov	r4,zero
  815f48:	000b883a 	mov	r5,zero
  815f4c:	0027883a 	mov	r19,zero
  815f50:	003f9b06 	br	815dc0 <__alt_data_end+0xff815dc0>
  815f54:	8880022c 	andhi	r2,r17,8
  815f58:	1000c726 	beq	r2,zero,816278 <__divdf3+0x630>
  815f5c:	8080022c 	andhi	r2,r16,8
  815f60:	1000c51e 	bne	r2,zero,816278 <__divdf3+0x630>
  815f64:	00800434 	movhi	r2,16
  815f68:	81400234 	orhi	r5,r16,8
  815f6c:	10bfffc4 	addi	r2,r2,-1
  815f70:	b80d883a 	mov	r6,r23
  815f74:	288a703a 	and	r5,r5,r2
  815f78:	a827883a 	mov	r19,r21
  815f7c:	003fea06 	br	815f28 <__alt_data_end+0xff815f28>
  815f80:	8440ea36 	bltu	r16,r17,81632c <__divdf3+0x6e4>
  815f84:	8c00e826 	beq	r17,r16,816328 <__divdf3+0x6e0>
  815f88:	a53fffc4 	addi	r20,r20,-1
  815f8c:	882d883a 	mov	r22,r17
  815f90:	000d883a 	mov	r6,zero
  815f94:	a804d63a 	srli	r2,r21,24
  815f98:	8020923a 	slli	r16,r16,8
  815f9c:	b009883a 	mov	r4,r22
  815fa0:	d9800315 	stw	r6,12(sp)
  815fa4:	1420b03a 	or	r16,r2,r16
  815fa8:	802ed43a 	srli	r23,r16,16
  815fac:	873fffcc 	andi	fp,r16,65535
  815fb0:	a82a923a 	slli	r21,r21,8
  815fb4:	b80b883a 	mov	r5,r23
  815fb8:	080a9800 	call	80a980 <__udivsi3>
  815fbc:	b009883a 	mov	r4,r22
  815fc0:	b80b883a 	mov	r5,r23
  815fc4:	1023883a 	mov	r17,r2
  815fc8:	080a9880 	call	80a988 <__umodsi3>
  815fcc:	1004943a 	slli	r2,r2,16
  815fd0:	9808d43a 	srli	r4,r19,16
  815fd4:	8f2d383a 	mul	r22,r17,fp
  815fd8:	d9800317 	ldw	r6,12(sp)
  815fdc:	1106b03a 	or	r3,r2,r4
  815fe0:	1d80062e 	bgeu	r3,r22,815ffc <__divdf3+0x3b4>
  815fe4:	1c07883a 	add	r3,r3,r16
  815fe8:	88bfffc4 	addi	r2,r17,-1
  815fec:	1c00dc36 	bltu	r3,r16,816360 <__divdf3+0x718>
  815ff0:	1d80db2e 	bgeu	r3,r22,816360 <__divdf3+0x718>
  815ff4:	8c7fff84 	addi	r17,r17,-2
  815ff8:	1c07883a 	add	r3,r3,r16
  815ffc:	1dadc83a 	sub	r22,r3,r22
  816000:	b009883a 	mov	r4,r22
  816004:	b80b883a 	mov	r5,r23
  816008:	d9800315 	stw	r6,12(sp)
  81600c:	080a9800 	call	80a980 <__udivsi3>
  816010:	b009883a 	mov	r4,r22
  816014:	b80b883a 	mov	r5,r23
  816018:	d8800015 	stw	r2,0(sp)
  81601c:	080a9880 	call	80a988 <__umodsi3>
  816020:	da400017 	ldw	r9,0(sp)
  816024:	1004943a 	slli	r2,r2,16
  816028:	9cffffcc 	andi	r19,r19,65535
  81602c:	4f07383a 	mul	r3,r9,fp
  816030:	14c8b03a 	or	r4,r2,r19
  816034:	d9800317 	ldw	r6,12(sp)
  816038:	20c0062e 	bgeu	r4,r3,816054 <__divdf3+0x40c>
  81603c:	2409883a 	add	r4,r4,r16
  816040:	48bfffc4 	addi	r2,r9,-1
  816044:	2400c436 	bltu	r4,r16,816358 <__divdf3+0x710>
  816048:	20c0c32e 	bgeu	r4,r3,816358 <__divdf3+0x710>
  81604c:	4a7fff84 	addi	r9,r9,-2
  816050:	2409883a 	add	r4,r4,r16
  816054:	8822943a 	slli	r17,r17,16
  816058:	a80ed43a 	srli	r7,r21,16
  81605c:	aa3fffcc 	andi	r8,r21,65535
  816060:	4c62b03a 	or	r17,r9,r17
  816064:	8816d43a 	srli	r11,r17,16
  816068:	897fffcc 	andi	r5,r17,65535
  81606c:	2a15383a 	mul	r10,r5,r8
  816070:	5a19383a 	mul	r12,r11,r8
  816074:	29cb383a 	mul	r5,r5,r7
  816078:	5012d43a 	srli	r9,r10,16
  81607c:	20c5c83a 	sub	r2,r4,r3
  816080:	614b883a 	add	r5,r12,r5
  816084:	2a4b883a 	add	r5,r5,r9
  816088:	59c7383a 	mul	r3,r11,r7
  81608c:	2b00022e 	bgeu	r5,r12,816098 <__divdf3+0x450>
  816090:	01000074 	movhi	r4,1
  816094:	1907883a 	add	r3,r3,r4
  816098:	2808d43a 	srli	r4,r5,16
  81609c:	280a943a 	slli	r5,r5,16
  8160a0:	54ffffcc 	andi	r19,r10,65535
  8160a4:	1907883a 	add	r3,r3,r4
  8160a8:	2ccb883a 	add	r5,r5,r19
  8160ac:	10c09336 	bltu	r2,r3,8162fc <__divdf3+0x6b4>
  8160b0:	10c0ad26 	beq	r2,r3,816368 <__divdf3+0x720>
  8160b4:	10c7c83a 	sub	r3,r2,r3
  8160b8:	3167c83a 	sub	r19,r6,r5
  8160bc:	34ed803a 	cmpltu	r22,r6,r19
  8160c0:	1dadc83a 	sub	r22,r3,r22
  8160c4:	b400b226 	beq	r22,r16,816390 <__divdf3+0x748>
  8160c8:	b009883a 	mov	r4,r22
  8160cc:	b80b883a 	mov	r5,r23
  8160d0:	d9c00115 	stw	r7,4(sp)
  8160d4:	da000215 	stw	r8,8(sp)
  8160d8:	080a9800 	call	80a980 <__udivsi3>
  8160dc:	b009883a 	mov	r4,r22
  8160e0:	b80b883a 	mov	r5,r23
  8160e4:	d8800315 	stw	r2,12(sp)
  8160e8:	080a9880 	call	80a988 <__umodsi3>
  8160ec:	d9800317 	ldw	r6,12(sp)
  8160f0:	1004943a 	slli	r2,r2,16
  8160f4:	9808d43a 	srli	r4,r19,16
  8160f8:	372d383a 	mul	r22,r6,fp
  8160fc:	d9c00117 	ldw	r7,4(sp)
  816100:	1106b03a 	or	r3,r2,r4
  816104:	da000217 	ldw	r8,8(sp)
  816108:	1d80062e 	bgeu	r3,r22,816124 <__divdf3+0x4dc>
  81610c:	1c07883a 	add	r3,r3,r16
  816110:	30bfffc4 	addi	r2,r6,-1
  816114:	1c00a036 	bltu	r3,r16,816398 <__divdf3+0x750>
  816118:	1d809f2e 	bgeu	r3,r22,816398 <__divdf3+0x750>
  81611c:	31bfff84 	addi	r6,r6,-2
  816120:	1c07883a 	add	r3,r3,r16
  816124:	1dadc83a 	sub	r22,r3,r22
  816128:	b009883a 	mov	r4,r22
  81612c:	b80b883a 	mov	r5,r23
  816130:	d9800315 	stw	r6,12(sp)
  816134:	d9c00115 	stw	r7,4(sp)
  816138:	da000215 	stw	r8,8(sp)
  81613c:	080a9800 	call	80a980 <__udivsi3>
  816140:	b009883a 	mov	r4,r22
  816144:	b80b883a 	mov	r5,r23
  816148:	d8800015 	stw	r2,0(sp)
  81614c:	080a9880 	call	80a988 <__umodsi3>
  816150:	da400017 	ldw	r9,0(sp)
  816154:	1004943a 	slli	r2,r2,16
  816158:	993fffcc 	andi	r4,r19,65535
  81615c:	4f39383a 	mul	fp,r9,fp
  816160:	1106b03a 	or	r3,r2,r4
  816164:	d9800317 	ldw	r6,12(sp)
  816168:	d9c00117 	ldw	r7,4(sp)
  81616c:	da000217 	ldw	r8,8(sp)
  816170:	1f00062e 	bgeu	r3,fp,81618c <__divdf3+0x544>
  816174:	1c07883a 	add	r3,r3,r16
  816178:	48bfffc4 	addi	r2,r9,-1
  81617c:	1c008836 	bltu	r3,r16,8163a0 <__divdf3+0x758>
  816180:	1f00872e 	bgeu	r3,fp,8163a0 <__divdf3+0x758>
  816184:	4a7fff84 	addi	r9,r9,-2
  816188:	1c07883a 	add	r3,r3,r16
  81618c:	3008943a 	slli	r4,r6,16
  816190:	1f07c83a 	sub	r3,r3,fp
  816194:	4926b03a 	or	r19,r9,r4
  816198:	993fffcc 	andi	r4,r19,65535
  81619c:	980cd43a 	srli	r6,r19,16
  8161a0:	220b383a 	mul	r5,r4,r8
  8161a4:	21c5383a 	mul	r2,r4,r7
  8161a8:	3211383a 	mul	r8,r6,r8
  8161ac:	2808d43a 	srli	r4,r5,16
  8161b0:	31cf383a 	mul	r7,r6,r7
  8161b4:	4085883a 	add	r2,r8,r2
  8161b8:	1105883a 	add	r2,r2,r4
  8161bc:	1200022e 	bgeu	r2,r8,8161c8 <__divdf3+0x580>
  8161c0:	01000074 	movhi	r4,1
  8161c4:	390f883a 	add	r7,r7,r4
  8161c8:	1008d43a 	srli	r4,r2,16
  8161cc:	1004943a 	slli	r2,r2,16
  8161d0:	297fffcc 	andi	r5,r5,65535
  8161d4:	390f883a 	add	r7,r7,r4
  8161d8:	1145883a 	add	r2,r2,r5
  8161dc:	19c06536 	bltu	r3,r7,816374 <__divdf3+0x72c>
  8161e0:	19c09f26 	beq	r3,r7,816460 <__divdf3+0x818>
  8161e4:	9cc00054 	ori	r19,r19,1
  8161e8:	a100ffc4 	addi	r4,r20,1023
  8161ec:	013f500e 	bge	zero,r4,815f30 <__alt_data_end+0xff815f30>
  8161f0:	988001cc 	andi	r2,r19,7
  8161f4:	10000726 	beq	r2,zero,816214 <__divdf3+0x5cc>
  8161f8:	98c003cc 	andi	r3,r19,15
  8161fc:	00800104 	movi	r2,4
  816200:	18800426 	beq	r3,r2,816214 <__divdf3+0x5cc>
  816204:	9885883a 	add	r2,r19,r2
  816208:	14e1803a 	cmpltu	r16,r2,r19
  81620c:	8c23883a 	add	r17,r17,r16
  816210:	1027883a 	mov	r19,r2
  816214:	8880402c 	andhi	r2,r17,256
  816218:	10000426 	beq	r2,zero,81622c <__divdf3+0x5e4>
  81621c:	00bfc034 	movhi	r2,65280
  816220:	10bfffc4 	addi	r2,r2,-1
  816224:	a1010004 	addi	r4,r20,1024
  816228:	88a2703a 	and	r17,r17,r2
  81622c:	0081ff84 	movi	r2,2046
  816230:	113edf16 	blt	r2,r4,815db0 <__alt_data_end+0xff815db0>
  816234:	9826d0fa 	srli	r19,r19,3
  816238:	8804977a 	slli	r2,r17,29
  81623c:	8820927a 	slli	r16,r17,9
  816240:	2101ffcc 	andi	r4,r4,2047
  816244:	14e6b03a 	or	r19,r2,r19
  816248:	800ad33a 	srli	r5,r16,12
  81624c:	9180004c 	andi	r6,r18,1
  816250:	003edb06 	br	815dc0 <__alt_data_end+0xff815dc0>
  816254:	008000c4 	movi	r2,3
  816258:	4080a826 	beq	r8,r2,8164fc <__divdf3+0x8b4>
  81625c:	00800044 	movi	r2,1
  816260:	4080551e 	bne	r8,r2,8163b8 <__divdf3+0x770>
  816264:	e00d883a 	mov	r6,fp
  816268:	0009883a 	mov	r4,zero
  81626c:	000b883a 	mov	r5,zero
  816270:	0027883a 	mov	r19,zero
  816274:	003ed206 	br	815dc0 <__alt_data_end+0xff815dc0>
  816278:	00800434 	movhi	r2,16
  81627c:	89400234 	orhi	r5,r17,8
  816280:	10bfffc4 	addi	r2,r2,-1
  816284:	b00d883a 	mov	r6,r22
  816288:	288a703a 	and	r5,r5,r2
  81628c:	003f2606 	br	815f28 <__alt_data_end+0xff815f28>
  816290:	d9800315 	stw	r6,12(sp)
  816294:	d9c00115 	stw	r7,4(sp)
  816298:	08179480 	call	817948 <__clzsi2>
  81629c:	10c00804 	addi	r3,r2,32
  8162a0:	010009c4 	movi	r4,39
  8162a4:	d9800317 	ldw	r6,12(sp)
  8162a8:	d9c00117 	ldw	r7,4(sp)
  8162ac:	20fee30e 	bge	r4,r3,815e3c <__alt_data_end+0xff815e3c>
  8162b0:	117ffe04 	addi	r5,r2,-8
  8162b4:	9162983a 	sll	r17,r18,r5
  8162b8:	0027883a 	mov	r19,zero
  8162bc:	003ee606 	br	815e58 <__alt_data_end+0xff815e58>
  8162c0:	3009883a 	mov	r4,r6
  8162c4:	d9800315 	stw	r6,12(sp)
  8162c8:	da000215 	stw	r8,8(sp)
  8162cc:	da400015 	stw	r9,0(sp)
  8162d0:	08179480 	call	817948 <__clzsi2>
  8162d4:	10c00804 	addi	r3,r2,32
  8162d8:	010009c4 	movi	r4,39
  8162dc:	d9800317 	ldw	r6,12(sp)
  8162e0:	da000217 	ldw	r8,8(sp)
  8162e4:	da400017 	ldw	r9,0(sp)
  8162e8:	20fef20e 	bge	r4,r3,815eb4 <__alt_data_end+0xff815eb4>
  8162ec:	10bffe04 	addi	r2,r2,-8
  8162f0:	a8a0983a 	sll	r16,r21,r2
  8162f4:	002b883a 	mov	r21,zero
  8162f8:	003ef506 	br	815ed0 <__alt_data_end+0xff815ed0>
  8162fc:	354d883a 	add	r6,r6,r21
  816300:	3549803a 	cmpltu	r4,r6,r21
  816304:	2409883a 	add	r4,r4,r16
  816308:	2089883a 	add	r4,r4,r2
  81630c:	88bfffc4 	addi	r2,r17,-1
  816310:	81000c2e 	bgeu	r16,r4,816344 <__divdf3+0x6fc>
  816314:	20c04436 	bltu	r4,r3,816428 <__divdf3+0x7e0>
  816318:	19006f26 	beq	r3,r4,8164d8 <__divdf3+0x890>
  81631c:	20c7c83a 	sub	r3,r4,r3
  816320:	1023883a 	mov	r17,r2
  816324:	003f6406 	br	8160b8 <__alt_data_end+0xff8160b8>
  816328:	9d7f1736 	bltu	r19,r21,815f88 <__alt_data_end+0xff815f88>
  81632c:	9806d07a 	srli	r3,r19,1
  816330:	880497fa 	slli	r2,r17,31
  816334:	980c97fa 	slli	r6,r19,31
  816338:	882cd07a 	srli	r22,r17,1
  81633c:	18a6b03a 	or	r19,r3,r2
  816340:	003f1406 	br	815f94 <__alt_data_end+0xff815f94>
  816344:	243ff51e 	bne	r4,r16,81631c <__alt_data_end+0xff81631c>
  816348:	357ff22e 	bgeu	r6,r21,816314 <__alt_data_end+0xff816314>
  81634c:	80c7c83a 	sub	r3,r16,r3
  816350:	1023883a 	mov	r17,r2
  816354:	003f5806 	br	8160b8 <__alt_data_end+0xff8160b8>
  816358:	1013883a 	mov	r9,r2
  81635c:	003f3d06 	br	816054 <__alt_data_end+0xff816054>
  816360:	1023883a 	mov	r17,r2
  816364:	003f2506 	br	815ffc <__alt_data_end+0xff815ffc>
  816368:	317fe436 	bltu	r6,r5,8162fc <__alt_data_end+0xff8162fc>
  81636c:	0007883a 	mov	r3,zero
  816370:	003f5106 	br	8160b8 <__alt_data_end+0xff8160b8>
  816374:	1c07883a 	add	r3,r3,r16
  816378:	993fffc4 	addi	r4,r19,-1
  81637c:	1c000a2e 	bgeu	r3,r16,8163a8 <__divdf3+0x760>
  816380:	2027883a 	mov	r19,r4
  816384:	19ff971e 	bne	r3,r7,8161e4 <__alt_data_end+0xff8161e4>
  816388:	a8bf961e 	bne	r21,r2,8161e4 <__alt_data_end+0xff8161e4>
  81638c:	003f9606 	br	8161e8 <__alt_data_end+0xff8161e8>
  816390:	04ffffc4 	movi	r19,-1
  816394:	003f9406 	br	8161e8 <__alt_data_end+0xff8161e8>
  816398:	100d883a 	mov	r6,r2
  81639c:	003f6106 	br	816124 <__alt_data_end+0xff816124>
  8163a0:	1013883a 	mov	r9,r2
  8163a4:	003f7906 	br	81618c <__alt_data_end+0xff81618c>
  8163a8:	19c02636 	bltu	r3,r7,816444 <__divdf3+0x7fc>
  8163ac:	38c04d26 	beq	r7,r3,8164e4 <__divdf3+0x89c>
  8163b0:	2027883a 	mov	r19,r4
  8163b4:	003f8b06 	br	8161e4 <__alt_data_end+0xff8161e4>
  8163b8:	e025883a 	mov	r18,fp
  8163bc:	003f8a06 	br	8161e8 <__alt_data_end+0xff8161e8>
  8163c0:	008007c4 	movi	r2,31
  8163c4:	14002a16 	blt	r2,r16,816470 <__divdf3+0x828>
  8163c8:	a5010784 	addi	r20,r20,1054
  8163cc:	8d04983a 	sll	r2,r17,r20
  8163d0:	9c06d83a 	srl	r3,r19,r16
  8163d4:	9d28983a 	sll	r20,r19,r20
  8163d8:	8c20d83a 	srl	r16,r17,r16
  8163dc:	1886b03a 	or	r3,r3,r2
  8163e0:	a004c03a 	cmpne	r2,r20,zero
  8163e4:	1884b03a 	or	r2,r3,r2
  8163e8:	10c001cc 	andi	r3,r2,7
  8163ec:	18000726 	beq	r3,zero,81640c <__divdf3+0x7c4>
  8163f0:	110003cc 	andi	r4,r2,15
  8163f4:	00c00104 	movi	r3,4
  8163f8:	20c00426 	beq	r4,r3,81640c <__divdf3+0x7c4>
  8163fc:	10c00104 	addi	r3,r2,4
  816400:	1885803a 	cmpltu	r2,r3,r2
  816404:	80a1883a 	add	r16,r16,r2
  816408:	1805883a 	mov	r2,r3
  81640c:	80c0202c 	andhi	r3,r16,128
  816410:	18002d26 	beq	r3,zero,8164c8 <__divdf3+0x880>
  816414:	9180004c 	andi	r6,r18,1
  816418:	01000044 	movi	r4,1
  81641c:	000b883a 	mov	r5,zero
  816420:	0027883a 	mov	r19,zero
  816424:	003e6606 	br	815dc0 <__alt_data_end+0xff815dc0>
  816428:	354d883a 	add	r6,r6,r21
  81642c:	356d803a 	cmpltu	r22,r6,r21
  816430:	b42d883a 	add	r22,r22,r16
  816434:	b12d883a 	add	r22,r22,r4
  816438:	8c7fff84 	addi	r17,r17,-2
  81643c:	b0c7c83a 	sub	r3,r22,r3
  816440:	003f1d06 	br	8160b8 <__alt_data_end+0xff8160b8>
  816444:	ad4b883a 	add	r5,r21,r21
  816448:	2d6b803a 	cmpltu	r21,r5,r21
  81644c:	ac2b883a 	add	r21,r21,r16
  816450:	1d47883a 	add	r3,r3,r21
  816454:	993fff84 	addi	r4,r19,-2
  816458:	282b883a 	mov	r21,r5
  81645c:	003fc806 	br	816380 <__alt_data_end+0xff816380>
  816460:	103fc41e 	bne	r2,zero,816374 <__alt_data_end+0xff816374>
  816464:	002b883a 	mov	r21,zero
  816468:	a8bf5e1e 	bne	r21,r2,8161e4 <__alt_data_end+0xff8161e4>
  81646c:	003f5e06 	br	8161e8 <__alt_data_end+0xff8161e8>
  816470:	00bef884 	movi	r2,-1054
  816474:	1505c83a 	sub	r2,r2,r20
  816478:	00c00804 	movi	r3,32
  81647c:	8884d83a 	srl	r2,r17,r2
  816480:	80c01c26 	beq	r16,r3,8164f4 <__divdf3+0x8ac>
  816484:	a0c10f84 	addi	r3,r20,1086
  816488:	88c6983a 	sll	r3,r17,r3
  81648c:	1cc6b03a 	or	r3,r3,r19
  816490:	1806c03a 	cmpne	r3,r3,zero
  816494:	1884b03a 	or	r2,r3,r2
  816498:	140001cc 	andi	r16,r2,7
  81649c:	8000061e 	bne	r16,zero,8164b8 <__divdf3+0x870>
  8164a0:	000b883a 	mov	r5,zero
  8164a4:	1004d0fa 	srli	r2,r2,3
  8164a8:	9180004c 	andi	r6,r18,1
  8164ac:	0009883a 	mov	r4,zero
  8164b0:	1426b03a 	or	r19,r2,r16
  8164b4:	003e4206 	br	815dc0 <__alt_data_end+0xff815dc0>
  8164b8:	110003cc 	andi	r4,r2,15
  8164bc:	00c00104 	movi	r3,4
  8164c0:	0021883a 	mov	r16,zero
  8164c4:	20ffcd1e 	bne	r4,r3,8163fc <__alt_data_end+0xff8163fc>
  8164c8:	800a927a 	slli	r5,r16,9
  8164cc:	8020977a 	slli	r16,r16,29
  8164d0:	280ad33a 	srli	r5,r5,12
  8164d4:	003ff306 	br	8164a4 <__alt_data_end+0xff8164a4>
  8164d8:	317fd336 	bltu	r6,r5,816428 <__alt_data_end+0xff816428>
  8164dc:	1023883a 	mov	r17,r2
  8164e0:	003fa206 	br	81636c <__alt_data_end+0xff81636c>
  8164e4:	a8bfd736 	bltu	r21,r2,816444 <__alt_data_end+0xff816444>
  8164e8:	2027883a 	mov	r19,r4
  8164ec:	a8bf3d1e 	bne	r21,r2,8161e4 <__alt_data_end+0xff8161e4>
  8164f0:	003f3d06 	br	8161e8 <__alt_data_end+0xff8161e8>
  8164f4:	0007883a 	mov	r3,zero
  8164f8:	003fe406 	br	81648c <__alt_data_end+0xff81648c>
  8164fc:	00800434 	movhi	r2,16
  816500:	89400234 	orhi	r5,r17,8
  816504:	10bfffc4 	addi	r2,r2,-1
  816508:	e00d883a 	mov	r6,fp
  81650c:	288a703a 	and	r5,r5,r2
  816510:	003e8506 	br	815f28 <__alt_data_end+0xff815f28>

00816514 <__eqdf2>:
  816514:	2804d53a 	srli	r2,r5,20
  816518:	3806d53a 	srli	r3,r7,20
  81651c:	02000434 	movhi	r8,16
  816520:	423fffc4 	addi	r8,r8,-1
  816524:	1081ffcc 	andi	r2,r2,2047
  816528:	0241ffc4 	movi	r9,2047
  81652c:	2a14703a 	and	r10,r5,r8
  816530:	18c1ffcc 	andi	r3,r3,2047
  816534:	3a10703a 	and	r8,r7,r8
  816538:	280ad7fa 	srli	r5,r5,31
  81653c:	380ed7fa 	srli	r7,r7,31
  816540:	12400f26 	beq	r2,r9,816580 <__eqdf2+0x6c>
  816544:	0241ffc4 	movi	r9,2047
  816548:	1a400326 	beq	r3,r9,816558 <__eqdf2+0x44>
  81654c:	10c00526 	beq	r2,r3,816564 <__eqdf2+0x50>
  816550:	00800044 	movi	r2,1
  816554:	f800283a 	ret
  816558:	4192b03a 	or	r9,r8,r6
  81655c:	483ffc1e 	bne	r9,zero,816550 <__alt_data_end+0xff816550>
  816560:	10fffb1e 	bne	r2,r3,816550 <__alt_data_end+0xff816550>
  816564:	523ffa1e 	bne	r10,r8,816550 <__alt_data_end+0xff816550>
  816568:	21bff91e 	bne	r4,r6,816550 <__alt_data_end+0xff816550>
  81656c:	29c00826 	beq	r5,r7,816590 <__eqdf2+0x7c>
  816570:	103ff71e 	bne	r2,zero,816550 <__alt_data_end+0xff816550>
  816574:	5104b03a 	or	r2,r10,r4
  816578:	1004c03a 	cmpne	r2,r2,zero
  81657c:	f800283a 	ret
  816580:	5112b03a 	or	r9,r10,r4
  816584:	483fef26 	beq	r9,zero,816544 <__alt_data_end+0xff816544>
  816588:	00800044 	movi	r2,1
  81658c:	f800283a 	ret
  816590:	0005883a 	mov	r2,zero
  816594:	f800283a 	ret

00816598 <__gedf2>:
  816598:	2804d53a 	srli	r2,r5,20
  81659c:	3806d53a 	srli	r3,r7,20
  8165a0:	02000434 	movhi	r8,16
  8165a4:	423fffc4 	addi	r8,r8,-1
  8165a8:	0241ffc4 	movi	r9,2047
  8165ac:	1081ffcc 	andi	r2,r2,2047
  8165b0:	2a14703a 	and	r10,r5,r8
  8165b4:	1a46703a 	and	r3,r3,r9
  8165b8:	3a10703a 	and	r8,r7,r8
  8165bc:	280ad7fa 	srli	r5,r5,31
  8165c0:	380ed7fa 	srli	r7,r7,31
  8165c4:	12400b26 	beq	r2,r9,8165f4 <__gedf2+0x5c>
  8165c8:	1a401626 	beq	r3,r9,816624 <__gedf2+0x8c>
  8165cc:	10000c1e 	bne	r2,zero,816600 <__gedf2+0x68>
  8165d0:	5112b03a 	or	r9,r10,r4
  8165d4:	4813003a 	cmpeq	r9,r9,zero
  8165d8:	4817883a 	mov	r11,r9
  8165dc:	18000c1e 	bne	r3,zero,816610 <__gedf2+0x78>
  8165e0:	4198b03a 	or	r12,r8,r6
  8165e4:	60000a1e 	bne	r12,zero,816610 <__gedf2+0x78>
  8165e8:	48001326 	beq	r9,zero,816638 <__gedf2+0xa0>
  8165ec:	0005883a 	mov	r2,zero
  8165f0:	f800283a 	ret
  8165f4:	5112b03a 	or	r9,r10,r4
  8165f8:	4800191e 	bne	r9,zero,816660 <__gedf2+0xc8>
  8165fc:	18800926 	beq	r3,r2,816624 <__gedf2+0x8c>
  816600:	18000b1e 	bne	r3,zero,816630 <__gedf2+0x98>
  816604:	4192b03a 	or	r9,r8,r6
  816608:	0017883a 	mov	r11,zero
  81660c:	48000a26 	beq	r9,zero,816638 <__gedf2+0xa0>
  816610:	39c03fcc 	andi	r7,r7,255
  816614:	58000726 	beq	r11,zero,816634 <__gedf2+0x9c>
  816618:	3800081e 	bne	r7,zero,81663c <__gedf2+0xa4>
  81661c:	00bfffc4 	movi	r2,-1
  816620:	f800283a 	ret
  816624:	4192b03a 	or	r9,r8,r6
  816628:	48000d1e 	bne	r9,zero,816660 <__gedf2+0xc8>
  81662c:	103fe826 	beq	r2,zero,8165d0 <__alt_data_end+0xff8165d0>
  816630:	39c03fcc 	andi	r7,r7,255
  816634:	29c00326 	beq	r5,r7,816644 <__gedf2+0xac>
  816638:	283ff81e 	bne	r5,zero,81661c <__alt_data_end+0xff81661c>
  81663c:	00800044 	movi	r2,1
  816640:	f800283a 	ret
  816644:	18bffc16 	blt	r3,r2,816638 <__alt_data_end+0xff816638>
  816648:	10c00316 	blt	r2,r3,816658 <__gedf2+0xc0>
  81664c:	42bffa36 	bltu	r8,r10,816638 <__alt_data_end+0xff816638>
  816650:	52000526 	beq	r10,r8,816668 <__gedf2+0xd0>
  816654:	523fe52e 	bgeu	r10,r8,8165ec <__alt_data_end+0xff8165ec>
  816658:	283ff026 	beq	r5,zero,81661c <__alt_data_end+0xff81661c>
  81665c:	003ff706 	br	81663c <__alt_data_end+0xff81663c>
  816660:	00bfff84 	movi	r2,-2
  816664:	f800283a 	ret
  816668:	313ff336 	bltu	r6,r4,816638 <__alt_data_end+0xff816638>
  81666c:	21bfdf2e 	bgeu	r4,r6,8165ec <__alt_data_end+0xff8165ec>
  816670:	283fea26 	beq	r5,zero,81661c <__alt_data_end+0xff81661c>
  816674:	003ff106 	br	81663c <__alt_data_end+0xff81663c>

00816678 <__ledf2>:
  816678:	2804d53a 	srli	r2,r5,20
  81667c:	3810d53a 	srli	r8,r7,20
  816680:	00c00434 	movhi	r3,16
  816684:	18ffffc4 	addi	r3,r3,-1
  816688:	0241ffc4 	movi	r9,2047
  81668c:	1081ffcc 	andi	r2,r2,2047
  816690:	28d4703a 	and	r10,r5,r3
  816694:	4250703a 	and	r8,r8,r9
  816698:	38c6703a 	and	r3,r7,r3
  81669c:	280ad7fa 	srli	r5,r5,31
  8166a0:	380ed7fa 	srli	r7,r7,31
  8166a4:	12400b26 	beq	r2,r9,8166d4 <__ledf2+0x5c>
  8166a8:	42401926 	beq	r8,r9,816710 <__ledf2+0x98>
  8166ac:	10000c1e 	bne	r2,zero,8166e0 <__ledf2+0x68>
  8166b0:	5112b03a 	or	r9,r10,r4
  8166b4:	4813003a 	cmpeq	r9,r9,zero
  8166b8:	4817883a 	mov	r11,r9
  8166bc:	40000f26 	beq	r8,zero,8166fc <__ledf2+0x84>
  8166c0:	39c03fcc 	andi	r7,r7,255
  8166c4:	58001826 	beq	r11,zero,816728 <__ledf2+0xb0>
  8166c8:	38000a1e 	bne	r7,zero,8166f4 <__ledf2+0x7c>
  8166cc:	00bfffc4 	movi	r2,-1
  8166d0:	f800283a 	ret
  8166d4:	5112b03a 	or	r9,r10,r4
  8166d8:	48000f1e 	bne	r9,zero,816718 <__ledf2+0xa0>
  8166dc:	40800c26 	beq	r8,r2,816710 <__ledf2+0x98>
  8166e0:	4000101e 	bne	r8,zero,816724 <__ledf2+0xac>
  8166e4:	1992b03a 	or	r9,r3,r6
  8166e8:	0017883a 	mov	r11,zero
  8166ec:	483ff41e 	bne	r9,zero,8166c0 <__alt_data_end+0xff8166c0>
  8166f0:	283ff61e 	bne	r5,zero,8166cc <__alt_data_end+0xff8166cc>
  8166f4:	00800044 	movi	r2,1
  8166f8:	f800283a 	ret
  8166fc:	1998b03a 	or	r12,r3,r6
  816700:	603fef1e 	bne	r12,zero,8166c0 <__alt_data_end+0xff8166c0>
  816704:	483ffa26 	beq	r9,zero,8166f0 <__alt_data_end+0xff8166f0>
  816708:	0005883a 	mov	r2,zero
  81670c:	f800283a 	ret
  816710:	1992b03a 	or	r9,r3,r6
  816714:	48000226 	beq	r9,zero,816720 <__ledf2+0xa8>
  816718:	00800084 	movi	r2,2
  81671c:	f800283a 	ret
  816720:	103fe326 	beq	r2,zero,8166b0 <__alt_data_end+0xff8166b0>
  816724:	39c03fcc 	andi	r7,r7,255
  816728:	29fff11e 	bne	r5,r7,8166f0 <__alt_data_end+0xff8166f0>
  81672c:	40bff016 	blt	r8,r2,8166f0 <__alt_data_end+0xff8166f0>
  816730:	12000316 	blt	r2,r8,816740 <__ledf2+0xc8>
  816734:	1abfee36 	bltu	r3,r10,8166f0 <__alt_data_end+0xff8166f0>
  816738:	50c00326 	beq	r10,r3,816748 <__ledf2+0xd0>
  81673c:	50fff22e 	bgeu	r10,r3,816708 <__alt_data_end+0xff816708>
  816740:	283fe226 	beq	r5,zero,8166cc <__alt_data_end+0xff8166cc>
  816744:	003feb06 	br	8166f4 <__alt_data_end+0xff8166f4>
  816748:	313fe936 	bltu	r6,r4,8166f0 <__alt_data_end+0xff8166f0>
  81674c:	21bfee2e 	bgeu	r4,r6,816708 <__alt_data_end+0xff816708>
  816750:	283fde26 	beq	r5,zero,8166cc <__alt_data_end+0xff8166cc>
  816754:	003fe706 	br	8166f4 <__alt_data_end+0xff8166f4>

00816758 <__muldf3>:
  816758:	defff204 	addi	sp,sp,-56
  81675c:	2804d53a 	srli	r2,r5,20
  816760:	dd800a15 	stw	r22,40(sp)
  816764:	282cd7fa 	srli	r22,r5,31
  816768:	dc000415 	stw	r16,16(sp)
  81676c:	04000434 	movhi	r16,16
  816770:	df000c15 	stw	fp,48(sp)
  816774:	dd000815 	stw	r20,32(sp)
  816778:	dcc00715 	stw	r19,28(sp)
  81677c:	dc800615 	stw	r18,24(sp)
  816780:	dc400515 	stw	r17,20(sp)
  816784:	843fffc4 	addi	r16,r16,-1
  816788:	dfc00d15 	stw	ra,52(sp)
  81678c:	ddc00b15 	stw	r23,44(sp)
  816790:	dd400915 	stw	r21,36(sp)
  816794:	1501ffcc 	andi	r20,r2,2047
  816798:	2023883a 	mov	r17,r4
  81679c:	2025883a 	mov	r18,r4
  8167a0:	2c20703a 	and	r16,r5,r16
  8167a4:	b027883a 	mov	r19,r22
  8167a8:	b7003fcc 	andi	fp,r22,255
  8167ac:	a0005926 	beq	r20,zero,816914 <__muldf3+0x1bc>
  8167b0:	0081ffc4 	movi	r2,2047
  8167b4:	a0803426 	beq	r20,r2,816888 <__muldf3+0x130>
  8167b8:	84000434 	orhi	r16,r16,16
  8167bc:	2004d77a 	srli	r2,r4,29
  8167c0:	802090fa 	slli	r16,r16,3
  8167c4:	202490fa 	slli	r18,r4,3
  8167c8:	a53f0044 	addi	r20,r20,-1023
  8167cc:	80a0b03a 	or	r16,r16,r2
  8167d0:	002b883a 	mov	r21,zero
  8167d4:	0015883a 	mov	r10,zero
  8167d8:	3812d53a 	srli	r9,r7,20
  8167dc:	3806d7fa 	srli	r3,r7,31
  8167e0:	02000434 	movhi	r8,16
  8167e4:	423fffc4 	addi	r8,r8,-1
  8167e8:	4941ffcc 	andi	r5,r9,2047
  8167ec:	302f883a 	mov	r23,r6
  8167f0:	3a22703a 	and	r17,r7,r8
  8167f4:	1ac03fcc 	andi	r11,r3,255
  8167f8:	28006226 	beq	r5,zero,816984 <__muldf3+0x22c>
  8167fc:	0081ffc4 	movi	r2,2047
  816800:	28805a26 	beq	r5,r2,81696c <__muldf3+0x214>
  816804:	8a000434 	orhi	r8,r17,16
  816808:	3004d77a 	srli	r2,r6,29
  81680c:	401090fa 	slli	r8,r8,3
  816810:	302e90fa 	slli	r23,r6,3
  816814:	297f0044 	addi	r5,r5,-1023
  816818:	40a2b03a 	or	r17,r8,r2
  81681c:	0013883a 	mov	r9,zero
  816820:	4d4cb03a 	or	r6,r9,r21
  816824:	300c90ba 	slli	r6,r6,2
  816828:	02002074 	movhi	r8,129
  81682c:	421a1204 	addi	r8,r8,26696
  816830:	320d883a 	add	r6,r6,r8
  816834:	31800017 	ldw	r6,0(r6)
  816838:	a14b883a 	add	r5,r20,r5
  81683c:	1dacf03a 	xor	r22,r3,r22
  816840:	2b000044 	addi	r12,r5,1
  816844:	3000683a 	jmp	r6
  816848:	00816a84 	movi	r2,1450
  81684c:	00816a70 	cmpltui	r2,zero,1449
  816850:	00816a70 	cmpltui	r2,zero,1449
  816854:	00816a5c 	xori	r2,zero,1449
  816858:	008168a4 	muli	r2,zero,1442
  81685c:	008168a4 	muli	r2,zero,1442
  816860:	00816a44 	movi	r2,1449
  816864:	00816a5c 	xori	r2,zero,1449
  816868:	008168a4 	muli	r2,zero,1442
  81686c:	00816a44 	movi	r2,1449
  816870:	008168a4 	muli	r2,zero,1442
  816874:	00816a5c 	xori	r2,zero,1449
  816878:	008168a8 	cmpgeui	r2,zero,1442
  81687c:	008168a8 	cmpgeui	r2,zero,1442
  816880:	008168a8 	cmpgeui	r2,zero,1442
  816884:	00816c80 	call	816c8 <__reset-0x77e938>
  816888:	8104b03a 	or	r2,r16,r4
  81688c:	10006a1e 	bne	r2,zero,816a38 <__muldf3+0x2e0>
  816890:	05400204 	movi	r21,8
  816894:	0021883a 	mov	r16,zero
  816898:	0025883a 	mov	r18,zero
  81689c:	02800084 	movi	r10,2
  8168a0:	003fcd06 	br	8167d8 <__alt_data_end+0xff8167d8>
  8168a4:	b039883a 	mov	fp,r22
  8168a8:	00800084 	movi	r2,2
  8168ac:	50804e1e 	bne	r10,r2,8169e8 <__muldf3+0x290>
  8168b0:	e4c0004c 	andi	r19,fp,1
  8168b4:	0101ffc4 	movi	r4,2047
  8168b8:	0021883a 	mov	r16,zero
  8168bc:	0025883a 	mov	r18,zero
  8168c0:	2008953a 	slli	r4,r4,20
  8168c4:	98c03fcc 	andi	r3,r19,255
  8168c8:	01400434 	movhi	r5,16
  8168cc:	297fffc4 	addi	r5,r5,-1
  8168d0:	180697fa 	slli	r3,r3,31
  8168d4:	8160703a 	and	r16,r16,r5
  8168d8:	8120b03a 	or	r16,r16,r4
  8168dc:	80c6b03a 	or	r3,r16,r3
  8168e0:	9005883a 	mov	r2,r18
  8168e4:	dfc00d17 	ldw	ra,52(sp)
  8168e8:	df000c17 	ldw	fp,48(sp)
  8168ec:	ddc00b17 	ldw	r23,44(sp)
  8168f0:	dd800a17 	ldw	r22,40(sp)
  8168f4:	dd400917 	ldw	r21,36(sp)
  8168f8:	dd000817 	ldw	r20,32(sp)
  8168fc:	dcc00717 	ldw	r19,28(sp)
  816900:	dc800617 	ldw	r18,24(sp)
  816904:	dc400517 	ldw	r17,20(sp)
  816908:	dc000417 	ldw	r16,16(sp)
  81690c:	dec00e04 	addi	sp,sp,56
  816910:	f800283a 	ret
  816914:	8104b03a 	or	r2,r16,r4
  816918:	10004226 	beq	r2,zero,816a24 <__muldf3+0x2cc>
  81691c:	8000f926 	beq	r16,zero,816d04 <__muldf3+0x5ac>
  816920:	8009883a 	mov	r4,r16
  816924:	d9800315 	stw	r6,12(sp)
  816928:	d9c00015 	stw	r7,0(sp)
  81692c:	08179480 	call	817948 <__clzsi2>
  816930:	d9800317 	ldw	r6,12(sp)
  816934:	d9c00017 	ldw	r7,0(sp)
  816938:	1007883a 	mov	r3,r2
  81693c:	01000a04 	movi	r4,40
  816940:	18bffe04 	addi	r2,r3,-8
  816944:	20c9c83a 	sub	r4,r4,r3
  816948:	80a0983a 	sll	r16,r16,r2
  81694c:	8908d83a 	srl	r4,r17,r4
  816950:	88a4983a 	sll	r18,r17,r2
  816954:	2420b03a 	or	r16,r4,r16
  816958:	017f0344 	movi	r5,-1011
  81695c:	28e9c83a 	sub	r20,r5,r3
  816960:	002b883a 	mov	r21,zero
  816964:	0015883a 	mov	r10,zero
  816968:	003f9b06 	br	8167d8 <__alt_data_end+0xff8167d8>
  81696c:	8984b03a 	or	r2,r17,r6
  816970:	10002a1e 	bne	r2,zero,816a1c <__muldf3+0x2c4>
  816974:	0023883a 	mov	r17,zero
  816978:	002f883a 	mov	r23,zero
  81697c:	02400084 	movi	r9,2
  816980:	003fa706 	br	816820 <__alt_data_end+0xff816820>
  816984:	8984b03a 	or	r2,r17,r6
  816988:	10002026 	beq	r2,zero,816a0c <__muldf3+0x2b4>
  81698c:	8800cc26 	beq	r17,zero,816cc0 <__muldf3+0x568>
  816990:	8809883a 	mov	r4,r17
  816994:	d8c00215 	stw	r3,8(sp)
  816998:	d9800315 	stw	r6,12(sp)
  81699c:	da800015 	stw	r10,0(sp)
  8169a0:	dac00115 	stw	r11,4(sp)
  8169a4:	08179480 	call	817948 <__clzsi2>
  8169a8:	d8c00217 	ldw	r3,8(sp)
  8169ac:	d9800317 	ldw	r6,12(sp)
  8169b0:	da800017 	ldw	r10,0(sp)
  8169b4:	dac00117 	ldw	r11,4(sp)
  8169b8:	1009883a 	mov	r4,r2
  8169bc:	01400a04 	movi	r5,40
  8169c0:	25fffe04 	addi	r23,r4,-8
  8169c4:	290bc83a 	sub	r5,r5,r4
  8169c8:	8dd0983a 	sll	r8,r17,r23
  8169cc:	314ad83a 	srl	r5,r6,r5
  8169d0:	35ee983a 	sll	r23,r6,r23
  8169d4:	2a22b03a 	or	r17,r5,r8
  8169d8:	017f0344 	movi	r5,-1011
  8169dc:	290bc83a 	sub	r5,r5,r4
  8169e0:	0013883a 	mov	r9,zero
  8169e4:	003f8e06 	br	816820 <__alt_data_end+0xff816820>
  8169e8:	008000c4 	movi	r2,3
  8169ec:	50811d26 	beq	r10,r2,816e64 <__muldf3+0x70c>
  8169f0:	00800044 	movi	r2,1
  8169f4:	5080e01e 	bne	r10,r2,816d78 <__muldf3+0x620>
  8169f8:	e0a6703a 	and	r19,fp,r2
  8169fc:	0009883a 	mov	r4,zero
  816a00:	0021883a 	mov	r16,zero
  816a04:	0025883a 	mov	r18,zero
  816a08:	003fad06 	br	8168c0 <__alt_data_end+0xff8168c0>
  816a0c:	0023883a 	mov	r17,zero
  816a10:	002f883a 	mov	r23,zero
  816a14:	02400044 	movi	r9,1
  816a18:	003f8106 	br	816820 <__alt_data_end+0xff816820>
  816a1c:	024000c4 	movi	r9,3
  816a20:	003f7f06 	br	816820 <__alt_data_end+0xff816820>
  816a24:	05400104 	movi	r21,4
  816a28:	0021883a 	mov	r16,zero
  816a2c:	0025883a 	mov	r18,zero
  816a30:	02800044 	movi	r10,1
  816a34:	003f6806 	br	8167d8 <__alt_data_end+0xff8167d8>
  816a38:	05400304 	movi	r21,12
  816a3c:	028000c4 	movi	r10,3
  816a40:	003f6506 	br	8167d8 <__alt_data_end+0xff8167d8>
  816a44:	04000434 	movhi	r16,16
  816a48:	0027883a 	mov	r19,zero
  816a4c:	843fffc4 	addi	r16,r16,-1
  816a50:	04bfffc4 	movi	r18,-1
  816a54:	0101ffc4 	movi	r4,2047
  816a58:	003f9906 	br	8168c0 <__alt_data_end+0xff8168c0>
  816a5c:	8821883a 	mov	r16,r17
  816a60:	b825883a 	mov	r18,r23
  816a64:	5839883a 	mov	fp,r11
  816a68:	4815883a 	mov	r10,r9
  816a6c:	003f8e06 	br	8168a8 <__alt_data_end+0xff8168a8>
  816a70:	8821883a 	mov	r16,r17
  816a74:	b825883a 	mov	r18,r23
  816a78:	b039883a 	mov	fp,r22
  816a7c:	4815883a 	mov	r10,r9
  816a80:	003f8906 	br	8168a8 <__alt_data_end+0xff8168a8>
  816a84:	b80cd43a 	srli	r6,r23,16
  816a88:	9006d43a 	srli	r3,r18,16
  816a8c:	90bfffcc 	andi	r2,r18,65535
  816a90:	bdffffcc 	andi	r23,r23,65535
  816a94:	b891383a 	mul	r8,r23,r2
  816a98:	b8c9383a 	mul	r4,r23,r3
  816a9c:	309b383a 	mul	r13,r6,r2
  816aa0:	400ed43a 	srli	r7,r8,16
  816aa4:	30df383a 	mul	r15,r6,r3
  816aa8:	235b883a 	add	r13,r4,r13
  816aac:	69db883a 	add	r13,r13,r7
  816ab0:	6900022e 	bgeu	r13,r4,816abc <__muldf3+0x364>
  816ab4:	01000074 	movhi	r4,1
  816ab8:	791f883a 	add	r15,r15,r4
  816abc:	8828d43a 	srli	r20,r17,16
  816ac0:	8c7fffcc 	andi	r17,r17,65535
  816ac4:	888f383a 	mul	r7,r17,r2
  816ac8:	88d3383a 	mul	r9,r17,r3
  816acc:	a0a5383a 	mul	r18,r20,r2
  816ad0:	3816d43a 	srli	r11,r7,16
  816ad4:	6814943a 	slli	r10,r13,16
  816ad8:	4ca5883a 	add	r18,r9,r18
  816adc:	423fffcc 	andi	r8,r8,65535
  816ae0:	92e5883a 	add	r18,r18,r11
  816ae4:	6808d43a 	srli	r4,r13,16
  816ae8:	5215883a 	add	r10,r10,r8
  816aec:	a0c7383a 	mul	r3,r20,r3
  816af0:	9240022e 	bgeu	r18,r9,816afc <__muldf3+0x3a4>
  816af4:	00800074 	movhi	r2,1
  816af8:	1887883a 	add	r3,r3,r2
  816afc:	802ad43a 	srli	r21,r16,16
  816b00:	80bfffcc 	andi	r2,r16,65535
  816b04:	b893383a 	mul	r9,r23,r2
  816b08:	3091383a 	mul	r8,r6,r2
  816b0c:	bd6f383a 	mul	r23,r23,r21
  816b10:	9026943a 	slli	r19,r18,16
  816b14:	481ad43a 	srli	r13,r9,16
  816b18:	9024d43a 	srli	r18,r18,16
  816b1c:	39ffffcc 	andi	r7,r7,65535
  816b20:	ba11883a 	add	r8,r23,r8
  816b24:	99e7883a 	add	r19,r19,r7
  816b28:	4351883a 	add	r8,r8,r13
  816b2c:	1c97883a 	add	r11,r3,r18
  816b30:	354d383a 	mul	r6,r6,r21
  816b34:	9925883a 	add	r18,r19,r4
  816b38:	45c0022e 	bgeu	r8,r23,816b44 <__muldf3+0x3ec>
  816b3c:	00c00074 	movhi	r3,1
  816b40:	30cd883a 	add	r6,r6,r3
  816b44:	8889383a 	mul	r4,r17,r2
  816b48:	8d63383a 	mul	r17,r17,r21
  816b4c:	a085383a 	mul	r2,r20,r2
  816b50:	200ed43a 	srli	r7,r4,16
  816b54:	401cd43a 	srli	r14,r8,16
  816b58:	401a943a 	slli	r13,r8,16
  816b5c:	8885883a 	add	r2,r17,r2
  816b60:	4a3fffcc 	andi	r8,r9,65535
  816b64:	11c5883a 	add	r2,r2,r7
  816b68:	339d883a 	add	r14,r6,r14
  816b6c:	6a11883a 	add	r8,r13,r8
  816b70:	a561383a 	mul	r16,r20,r21
  816b74:	1440022e 	bgeu	r2,r17,816b80 <__muldf3+0x428>
  816b78:	00c00074 	movhi	r3,1
  816b7c:	80e1883a 	add	r16,r16,r3
  816b80:	1006943a 	slli	r3,r2,16
  816b84:	213fffcc 	andi	r4,r4,65535
  816b88:	93db883a 	add	r13,r18,r15
  816b8c:	1909883a 	add	r4,r3,r4
  816b90:	22c7883a 	add	r3,r4,r11
  816b94:	6cd3803a 	cmpltu	r9,r13,r19
  816b98:	6a09883a 	add	r4,r13,r8
  816b9c:	1a5b883a 	add	r13,r3,r9
  816ba0:	2211803a 	cmpltu	r8,r4,r8
  816ba4:	734d883a 	add	r6,r14,r13
  816ba8:	100ed43a 	srli	r7,r2,16
  816bac:	6a53803a 	cmpltu	r9,r13,r9
  816bb0:	3205883a 	add	r2,r6,r8
  816bb4:	1ac7803a 	cmpltu	r3,r3,r11
  816bb8:	1211803a 	cmpltu	r8,r2,r8
  816bbc:	48c6b03a 	or	r3,r9,r3
  816bc0:	338d803a 	cmpltu	r6,r6,r14
  816bc4:	19c7883a 	add	r3,r3,r7
  816bc8:	418cb03a 	or	r6,r8,r6
  816bcc:	1987883a 	add	r3,r3,r6
  816bd0:	2024927a 	slli	r18,r4,9
  816bd4:	1c07883a 	add	r3,r3,r16
  816bd8:	1806927a 	slli	r3,r3,9
  816bdc:	1020d5fa 	srli	r16,r2,23
  816be0:	2008d5fa 	srli	r4,r4,23
  816be4:	9294b03a 	or	r10,r18,r10
  816be8:	1004927a 	slli	r2,r2,9
  816bec:	5024c03a 	cmpne	r18,r10,zero
  816bf0:	1c20b03a 	or	r16,r3,r16
  816bf4:	9108b03a 	or	r4,r18,r4
  816bf8:	80c0402c 	andhi	r3,r16,256
  816bfc:	20a4b03a 	or	r18,r4,r2
  816c00:	18000726 	beq	r3,zero,816c20 <__muldf3+0x4c8>
  816c04:	9006d07a 	srli	r3,r18,1
  816c08:	800897fa 	slli	r4,r16,31
  816c0c:	9080004c 	andi	r2,r18,1
  816c10:	8020d07a 	srli	r16,r16,1
  816c14:	10c4b03a 	or	r2,r2,r3
  816c18:	1124b03a 	or	r18,r2,r4
  816c1c:	600b883a 	mov	r5,r12
  816c20:	2900ffc4 	addi	r4,r5,1023
  816c24:	01004b0e 	bge	zero,r4,816d54 <__muldf3+0x5fc>
  816c28:	908001cc 	andi	r2,r18,7
  816c2c:	10000726 	beq	r2,zero,816c4c <__muldf3+0x4f4>
  816c30:	90c003cc 	andi	r3,r18,15
  816c34:	00800104 	movi	r2,4
  816c38:	18800426 	beq	r3,r2,816c4c <__muldf3+0x4f4>
  816c3c:	9087883a 	add	r3,r18,r2
  816c40:	1c85803a 	cmpltu	r2,r3,r18
  816c44:	80a1883a 	add	r16,r16,r2
  816c48:	1825883a 	mov	r18,r3
  816c4c:	8080402c 	andhi	r2,r16,256
  816c50:	10000426 	beq	r2,zero,816c64 <__muldf3+0x50c>
  816c54:	00bfc034 	movhi	r2,65280
  816c58:	10bfffc4 	addi	r2,r2,-1
  816c5c:	29010004 	addi	r4,r5,1024
  816c60:	80a0703a 	and	r16,r16,r2
  816c64:	0081ff84 	movi	r2,2046
  816c68:	1100320e 	bge	r2,r4,816d34 <__muldf3+0x5dc>
  816c6c:	b4c0004c 	andi	r19,r22,1
  816c70:	0101ffc4 	movi	r4,2047
  816c74:	0021883a 	mov	r16,zero
  816c78:	0025883a 	mov	r18,zero
  816c7c:	003f1006 	br	8168c0 <__alt_data_end+0xff8168c0>
  816c80:	8080022c 	andhi	r2,r16,8
  816c84:	10000926 	beq	r2,zero,816cac <__muldf3+0x554>
  816c88:	8880022c 	andhi	r2,r17,8
  816c8c:	1000071e 	bne	r2,zero,816cac <__muldf3+0x554>
  816c90:	00800434 	movhi	r2,16
  816c94:	8c000234 	orhi	r16,r17,8
  816c98:	10bfffc4 	addi	r2,r2,-1
  816c9c:	1827883a 	mov	r19,r3
  816ca0:	80a0703a 	and	r16,r16,r2
  816ca4:	b825883a 	mov	r18,r23
  816ca8:	003f6a06 	br	816a54 <__alt_data_end+0xff816a54>
  816cac:	00800434 	movhi	r2,16
  816cb0:	84000234 	orhi	r16,r16,8
  816cb4:	10bfffc4 	addi	r2,r2,-1
  816cb8:	80a0703a 	and	r16,r16,r2
  816cbc:	003f6506 	br	816a54 <__alt_data_end+0xff816a54>
  816cc0:	3009883a 	mov	r4,r6
  816cc4:	d8c00215 	stw	r3,8(sp)
  816cc8:	d9800315 	stw	r6,12(sp)
  816ccc:	da800015 	stw	r10,0(sp)
  816cd0:	dac00115 	stw	r11,4(sp)
  816cd4:	08179480 	call	817948 <__clzsi2>
  816cd8:	11000804 	addi	r4,r2,32
  816cdc:	014009c4 	movi	r5,39
  816ce0:	d8c00217 	ldw	r3,8(sp)
  816ce4:	d9800317 	ldw	r6,12(sp)
  816ce8:	da800017 	ldw	r10,0(sp)
  816cec:	dac00117 	ldw	r11,4(sp)
  816cf0:	293f320e 	bge	r5,r4,8169bc <__alt_data_end+0xff8169bc>
  816cf4:	10bffe04 	addi	r2,r2,-8
  816cf8:	b8a2983a 	sll	r17,r23,r2
  816cfc:	002f883a 	mov	r23,zero
  816d00:	003f3506 	br	8169d8 <__alt_data_end+0xff8169d8>
  816d04:	d9800315 	stw	r6,12(sp)
  816d08:	d9c00015 	stw	r7,0(sp)
  816d0c:	08179480 	call	817948 <__clzsi2>
  816d10:	10c00804 	addi	r3,r2,32
  816d14:	010009c4 	movi	r4,39
  816d18:	d9800317 	ldw	r6,12(sp)
  816d1c:	d9c00017 	ldw	r7,0(sp)
  816d20:	20ff060e 	bge	r4,r3,81693c <__alt_data_end+0xff81693c>
  816d24:	10bffe04 	addi	r2,r2,-8
  816d28:	88a0983a 	sll	r16,r17,r2
  816d2c:	0025883a 	mov	r18,zero
  816d30:	003f0906 	br	816958 <__alt_data_end+0xff816958>
  816d34:	9004d0fa 	srli	r2,r18,3
  816d38:	8024977a 	slli	r18,r16,29
  816d3c:	8020927a 	slli	r16,r16,9
  816d40:	2101ffcc 	andi	r4,r4,2047
  816d44:	90a4b03a 	or	r18,r18,r2
  816d48:	8020d33a 	srli	r16,r16,12
  816d4c:	b4c0004c 	andi	r19,r22,1
  816d50:	003edb06 	br	8168c0 <__alt_data_end+0xff8168c0>
  816d54:	00ff0084 	movi	r3,-1022
  816d58:	1947c83a 	sub	r3,r3,r5
  816d5c:	00800e04 	movi	r2,56
  816d60:	10c0080e 	bge	r2,r3,816d84 <__muldf3+0x62c>
  816d64:	b4c0004c 	andi	r19,r22,1
  816d68:	0009883a 	mov	r4,zero
  816d6c:	0021883a 	mov	r16,zero
  816d70:	0025883a 	mov	r18,zero
  816d74:	003ed206 	br	8168c0 <__alt_data_end+0xff8168c0>
  816d78:	600b883a 	mov	r5,r12
  816d7c:	e02d883a 	mov	r22,fp
  816d80:	003fa706 	br	816c20 <__alt_data_end+0xff816c20>
  816d84:	008007c4 	movi	r2,31
  816d88:	10c01816 	blt	r2,r3,816dec <__muldf3+0x694>
  816d8c:	29410784 	addi	r5,r5,1054
  816d90:	8144983a 	sll	r2,r16,r5
  816d94:	90c8d83a 	srl	r4,r18,r3
  816d98:	914a983a 	sll	r5,r18,r5
  816d9c:	80c6d83a 	srl	r3,r16,r3
  816da0:	2088b03a 	or	r4,r4,r2
  816da4:	2804c03a 	cmpne	r2,r5,zero
  816da8:	2084b03a 	or	r2,r4,r2
  816dac:	110001cc 	andi	r4,r2,7
  816db0:	20000726 	beq	r4,zero,816dd0 <__muldf3+0x678>
  816db4:	114003cc 	andi	r5,r2,15
  816db8:	01000104 	movi	r4,4
  816dbc:	29000426 	beq	r5,r4,816dd0 <__muldf3+0x678>
  816dc0:	11000104 	addi	r4,r2,4
  816dc4:	2085803a 	cmpltu	r2,r4,r2
  816dc8:	1887883a 	add	r3,r3,r2
  816dcc:	2005883a 	mov	r2,r4
  816dd0:	1900202c 	andhi	r4,r3,128
  816dd4:	20001826 	beq	r4,zero,816e38 <__muldf3+0x6e0>
  816dd8:	b4c0004c 	andi	r19,r22,1
  816ddc:	01000044 	movi	r4,1
  816de0:	0021883a 	mov	r16,zero
  816de4:	0025883a 	mov	r18,zero
  816de8:	003eb506 	br	8168c0 <__alt_data_end+0xff8168c0>
  816dec:	00bef884 	movi	r2,-1054
  816df0:	1145c83a 	sub	r2,r2,r5
  816df4:	8088d83a 	srl	r4,r16,r2
  816df8:	00800804 	movi	r2,32
  816dfc:	18801726 	beq	r3,r2,816e5c <__muldf3+0x704>
  816e00:	28810f84 	addi	r2,r5,1086
  816e04:	8084983a 	sll	r2,r16,r2
  816e08:	1484b03a 	or	r2,r2,r18
  816e0c:	1004c03a 	cmpne	r2,r2,zero
  816e10:	1104b03a 	or	r2,r2,r4
  816e14:	10c001cc 	andi	r3,r2,7
  816e18:	18000b1e 	bne	r3,zero,816e48 <__muldf3+0x6f0>
  816e1c:	0021883a 	mov	r16,zero
  816e20:	1004d0fa 	srli	r2,r2,3
  816e24:	b4c0004c 	andi	r19,r22,1
  816e28:	0009883a 	mov	r4,zero
  816e2c:	10e4b03a 	or	r18,r2,r3
  816e30:	003ea306 	br	8168c0 <__alt_data_end+0xff8168c0>
  816e34:	0007883a 	mov	r3,zero
  816e38:	1820927a 	slli	r16,r3,9
  816e3c:	1806977a 	slli	r3,r3,29
  816e40:	8020d33a 	srli	r16,r16,12
  816e44:	003ff606 	br	816e20 <__alt_data_end+0xff816e20>
  816e48:	110003cc 	andi	r4,r2,15
  816e4c:	00c00104 	movi	r3,4
  816e50:	20fff826 	beq	r4,r3,816e34 <__alt_data_end+0xff816e34>
  816e54:	0007883a 	mov	r3,zero
  816e58:	003fd906 	br	816dc0 <__alt_data_end+0xff816dc0>
  816e5c:	0005883a 	mov	r2,zero
  816e60:	003fe906 	br	816e08 <__alt_data_end+0xff816e08>
  816e64:	00800434 	movhi	r2,16
  816e68:	84000234 	orhi	r16,r16,8
  816e6c:	10bfffc4 	addi	r2,r2,-1
  816e70:	e4c0004c 	andi	r19,fp,1
  816e74:	80a0703a 	and	r16,r16,r2
  816e78:	003ef606 	br	816a54 <__alt_data_end+0xff816a54>

00816e7c <__subdf3>:
  816e7c:	00c00434 	movhi	r3,16
  816e80:	18ffffc4 	addi	r3,r3,-1
  816e84:	defffb04 	addi	sp,sp,-20
  816e88:	28d2703a 	and	r9,r5,r3
  816e8c:	3814d53a 	srli	r10,r7,20
  816e90:	38c6703a 	and	r3,r7,r3
  816e94:	3004d77a 	srli	r2,r6,29
  816e98:	dc800215 	stw	r18,8(sp)
  816e9c:	dc000015 	stw	r16,0(sp)
  816ea0:	2824d7fa 	srli	r18,r5,31
  816ea4:	2820d53a 	srli	r16,r5,20
  816ea8:	481290fa 	slli	r9,r9,3
  816eac:	200ad77a 	srli	r5,r4,29
  816eb0:	180690fa 	slli	r3,r3,3
  816eb4:	dc400115 	stw	r17,4(sp)
  816eb8:	dfc00415 	stw	ra,16(sp)
  816ebc:	202290fa 	slli	r17,r4,3
  816ec0:	dcc00315 	stw	r19,12(sp)
  816ec4:	5281ffcc 	andi	r10,r10,2047
  816ec8:	0101ffc4 	movi	r4,2047
  816ecc:	9011883a 	mov	r8,r18
  816ed0:	8401ffcc 	andi	r16,r16,2047
  816ed4:	94803fcc 	andi	r18,r18,255
  816ed8:	494ab03a 	or	r5,r9,r5
  816edc:	380ed7fa 	srli	r7,r7,31
  816ee0:	1886b03a 	or	r3,r3,r2
  816ee4:	300c90fa 	slli	r6,r6,3
  816ee8:	51009026 	beq	r10,r4,81712c <__subdf3+0x2b0>
  816eec:	39c0005c 	xori	r7,r7,1
  816ef0:	8285c83a 	sub	r2,r16,r10
  816ef4:	91c06f26 	beq	r18,r7,8170b4 <__subdf3+0x238>
  816ef8:	0080b10e 	bge	zero,r2,8171c0 <__subdf3+0x344>
  816efc:	50002a1e 	bne	r10,zero,816fa8 <__subdf3+0x12c>
  816f00:	1988b03a 	or	r4,r3,r6
  816f04:	2000941e 	bne	r4,zero,817158 <__subdf3+0x2dc>
  816f08:	888001cc 	andi	r2,r17,7
  816f0c:	10005b26 	beq	r2,zero,81707c <__subdf3+0x200>
  816f10:	88c003cc 	andi	r3,r17,15
  816f14:	00800104 	movi	r2,4
  816f18:	18805826 	beq	r3,r2,81707c <__subdf3+0x200>
  816f1c:	88c00104 	addi	r3,r17,4
  816f20:	1c63803a 	cmpltu	r17,r3,r17
  816f24:	2c4b883a 	add	r5,r5,r17
  816f28:	2880202c 	andhi	r2,r5,128
  816f2c:	9200004c 	andi	r8,r18,1
  816f30:	1823883a 	mov	r17,r3
  816f34:	10005426 	beq	r2,zero,817088 <__subdf3+0x20c>
  816f38:	84000044 	addi	r16,r16,1
  816f3c:	0081ffc4 	movi	r2,2047
  816f40:	8080bf26 	beq	r16,r2,817240 <__subdf3+0x3c4>
  816f44:	013fe034 	movhi	r4,65408
  816f48:	213fffc4 	addi	r4,r4,-1
  816f4c:	290a703a 	and	r5,r5,r4
  816f50:	2804977a 	slli	r2,r5,29
  816f54:	280a927a 	slli	r5,r5,9
  816f58:	8822d0fa 	srli	r17,r17,3
  816f5c:	8401ffcc 	andi	r16,r16,2047
  816f60:	2808d33a 	srli	r4,r5,12
  816f64:	1444b03a 	or	r2,r2,r17
  816f68:	8401ffcc 	andi	r16,r16,2047
  816f6c:	800a953a 	slli	r5,r16,20
  816f70:	40c03fcc 	andi	r3,r8,255
  816f74:	04000434 	movhi	r16,16
  816f78:	180697fa 	slli	r3,r3,31
  816f7c:	843fffc4 	addi	r16,r16,-1
  816f80:	2420703a 	and	r16,r4,r16
  816f84:	8160b03a 	or	r16,r16,r5
  816f88:	80c6b03a 	or	r3,r16,r3
  816f8c:	dfc00417 	ldw	ra,16(sp)
  816f90:	dcc00317 	ldw	r19,12(sp)
  816f94:	dc800217 	ldw	r18,8(sp)
  816f98:	dc400117 	ldw	r17,4(sp)
  816f9c:	dc000017 	ldw	r16,0(sp)
  816fa0:	dec00504 	addi	sp,sp,20
  816fa4:	f800283a 	ret
  816fa8:	0101ffc4 	movi	r4,2047
  816fac:	813fd626 	beq	r16,r4,816f08 <__alt_data_end+0xff816f08>
  816fb0:	18c02034 	orhi	r3,r3,128
  816fb4:	01000e04 	movi	r4,56
  816fb8:	2080a416 	blt	r4,r2,81724c <__subdf3+0x3d0>
  816fbc:	010007c4 	movi	r4,31
  816fc0:	2080c716 	blt	r4,r2,8172e0 <__subdf3+0x464>
  816fc4:	01000804 	movi	r4,32
  816fc8:	2089c83a 	sub	r4,r4,r2
  816fcc:	1910983a 	sll	r8,r3,r4
  816fd0:	308ed83a 	srl	r7,r6,r2
  816fd4:	3108983a 	sll	r4,r6,r4
  816fd8:	1884d83a 	srl	r2,r3,r2
  816fdc:	41ccb03a 	or	r6,r8,r7
  816fe0:	2008c03a 	cmpne	r4,r4,zero
  816fe4:	310cb03a 	or	r6,r6,r4
  816fe8:	898dc83a 	sub	r6,r17,r6
  816fec:	89a3803a 	cmpltu	r17,r17,r6
  816ff0:	288bc83a 	sub	r5,r5,r2
  816ff4:	2c4bc83a 	sub	r5,r5,r17
  816ff8:	3023883a 	mov	r17,r6
  816ffc:	2880202c 	andhi	r2,r5,128
  817000:	10006b26 	beq	r2,zero,8171b0 <__subdf3+0x334>
  817004:	04c02034 	movhi	r19,128
  817008:	9cffffc4 	addi	r19,r19,-1
  81700c:	2ce6703a 	and	r19,r5,r19
  817010:	98007c26 	beq	r19,zero,817204 <__subdf3+0x388>
  817014:	9809883a 	mov	r4,r19
  817018:	08179480 	call	817948 <__clzsi2>
  81701c:	10fffe04 	addi	r3,r2,-8
  817020:	010007c4 	movi	r4,31
  817024:	20c07d16 	blt	r4,r3,81721c <__subdf3+0x3a0>
  817028:	01400a04 	movi	r5,40
  81702c:	2885c83a 	sub	r2,r5,r2
  817030:	888ad83a 	srl	r5,r17,r2
  817034:	98e6983a 	sll	r19,r19,r3
  817038:	88e2983a 	sll	r17,r17,r3
  81703c:	2ce6b03a 	or	r19,r5,r19
  817040:	1c007a16 	blt	r3,r16,81722c <__subdf3+0x3b0>
  817044:	1c21c83a 	sub	r16,r3,r16
  817048:	81400044 	addi	r5,r16,1
  81704c:	00c007c4 	movi	r3,31
  817050:	19409616 	blt	r3,r5,8172ac <__subdf3+0x430>
  817054:	1c21c83a 	sub	r16,r3,r16
  817058:	8c08983a 	sll	r4,r17,r16
  81705c:	8946d83a 	srl	r3,r17,r5
  817060:	9c20983a 	sll	r16,r19,r16
  817064:	2008c03a 	cmpne	r4,r4,zero
  817068:	994ad83a 	srl	r5,r19,r5
  81706c:	1c06b03a 	or	r3,r3,r16
  817070:	1922b03a 	or	r17,r3,r4
  817074:	0021883a 	mov	r16,zero
  817078:	003fa306 	br	816f08 <__alt_data_end+0xff816f08>
  81707c:	2880202c 	andhi	r2,r5,128
  817080:	9200004c 	andi	r8,r18,1
  817084:	103fac1e 	bne	r2,zero,816f38 <__alt_data_end+0xff816f38>
  817088:	2804977a 	slli	r2,r5,29
  81708c:	8822d0fa 	srli	r17,r17,3
  817090:	00c1ffc4 	movi	r3,2047
  817094:	280ad0fa 	srli	r5,r5,3
  817098:	1444b03a 	or	r2,r2,r17
  81709c:	80c02726 	beq	r16,r3,81713c <__subdf3+0x2c0>
  8170a0:	01000434 	movhi	r4,16
  8170a4:	213fffc4 	addi	r4,r4,-1
  8170a8:	80e0703a 	and	r16,r16,r3
  8170ac:	2908703a 	and	r4,r5,r4
  8170b0:	003fad06 	br	816f68 <__alt_data_end+0xff816f68>
  8170b4:	0080690e 	bge	zero,r2,81725c <__subdf3+0x3e0>
  8170b8:	50002f26 	beq	r10,zero,817178 <__subdf3+0x2fc>
  8170bc:	0101ffc4 	movi	r4,2047
  8170c0:	813f9126 	beq	r16,r4,816f08 <__alt_data_end+0xff816f08>
  8170c4:	18c02034 	orhi	r3,r3,128
  8170c8:	01000e04 	movi	r4,56
  8170cc:	2080b00e 	bge	r4,r2,817390 <__subdf3+0x514>
  8170d0:	198cb03a 	or	r6,r3,r6
  8170d4:	300ec03a 	cmpne	r7,r6,zero
  8170d8:	0005883a 	mov	r2,zero
  8170dc:	3c4f883a 	add	r7,r7,r17
  8170e0:	3c63803a 	cmpltu	r17,r7,r17
  8170e4:	114b883a 	add	r5,r2,r5
  8170e8:	2c4b883a 	add	r5,r5,r17
  8170ec:	3823883a 	mov	r17,r7
  8170f0:	2880202c 	andhi	r2,r5,128
  8170f4:	10002e26 	beq	r2,zero,8171b0 <__subdf3+0x334>
  8170f8:	84000044 	addi	r16,r16,1
  8170fc:	0081ffc4 	movi	r2,2047
  817100:	8080de26 	beq	r16,r2,81747c <__subdf3+0x600>
  817104:	00bfe034 	movhi	r2,65408
  817108:	10bfffc4 	addi	r2,r2,-1
  81710c:	288a703a 	and	r5,r5,r2
  817110:	880cd07a 	srli	r6,r17,1
  817114:	280897fa 	slli	r4,r5,31
  817118:	88c0004c 	andi	r3,r17,1
  81711c:	30e2b03a 	or	r17,r6,r3
  817120:	280ad07a 	srli	r5,r5,1
  817124:	8922b03a 	or	r17,r17,r4
  817128:	003f7706 	br	816f08 <__alt_data_end+0xff816f08>
  81712c:	1984b03a 	or	r2,r3,r6
  817130:	103f6e26 	beq	r2,zero,816eec <__alt_data_end+0xff816eec>
  817134:	39c03fcc 	andi	r7,r7,255
  817138:	003f6d06 	br	816ef0 <__alt_data_end+0xff816ef0>
  81713c:	1146b03a 	or	r3,r2,r5
  817140:	18003f26 	beq	r3,zero,817240 <__subdf3+0x3c4>
  817144:	00c00434 	movhi	r3,16
  817148:	29000234 	orhi	r4,r5,8
  81714c:	18ffffc4 	addi	r3,r3,-1
  817150:	20c8703a 	and	r4,r4,r3
  817154:	003f8406 	br	816f68 <__alt_data_end+0xff816f68>
  817158:	10bfffc4 	addi	r2,r2,-1
  81715c:	1000501e 	bne	r2,zero,8172a0 <__subdf3+0x424>
  817160:	898fc83a 	sub	r7,r17,r6
  817164:	89e3803a 	cmpltu	r17,r17,r7
  817168:	28cbc83a 	sub	r5,r5,r3
  81716c:	2c4bc83a 	sub	r5,r5,r17
  817170:	3823883a 	mov	r17,r7
  817174:	003fa106 	br	816ffc <__alt_data_end+0xff816ffc>
  817178:	1988b03a 	or	r4,r3,r6
  81717c:	203f6226 	beq	r4,zero,816f08 <__alt_data_end+0xff816f08>
  817180:	10bfffc4 	addi	r2,r2,-1
  817184:	10009b1e 	bne	r2,zero,8173f4 <__subdf3+0x578>
  817188:	344d883a 	add	r6,r6,r17
  81718c:	3463803a 	cmpltu	r17,r6,r17
  817190:	194b883a 	add	r5,r3,r5
  817194:	2c4b883a 	add	r5,r5,r17
  817198:	3023883a 	mov	r17,r6
  81719c:	003fd406 	br	8170f0 <__alt_data_end+0xff8170f0>
  8171a0:	1106b03a 	or	r3,r2,r4
  8171a4:	1800b426 	beq	r3,zero,817478 <__subdf3+0x5fc>
  8171a8:	100b883a 	mov	r5,r2
  8171ac:	2023883a 	mov	r17,r4
  8171b0:	888001cc 	andi	r2,r17,7
  8171b4:	103f561e 	bne	r2,zero,816f10 <__alt_data_end+0xff816f10>
  8171b8:	9200004c 	andi	r8,r18,1
  8171bc:	003fb206 	br	817088 <__alt_data_end+0xff817088>
  8171c0:	1000531e 	bne	r2,zero,817310 <__subdf3+0x494>
  8171c4:	80800044 	addi	r2,r16,1
  8171c8:	1081ffcc 	andi	r2,r2,2047
  8171cc:	01000044 	movi	r4,1
  8171d0:	2080a00e 	bge	r4,r2,817454 <__subdf3+0x5d8>
  8171d4:	8985c83a 	sub	r2,r17,r6
  8171d8:	8889803a 	cmpltu	r4,r17,r2
  8171dc:	28e7c83a 	sub	r19,r5,r3
  8171e0:	9927c83a 	sub	r19,r19,r4
  8171e4:	9900202c 	andhi	r4,r19,128
  8171e8:	20006226 	beq	r4,zero,817374 <__subdf3+0x4f8>
  8171ec:	3463c83a 	sub	r17,r6,r17
  8171f0:	194bc83a 	sub	r5,r3,r5
  8171f4:	344d803a 	cmpltu	r6,r6,r17
  8171f8:	29a7c83a 	sub	r19,r5,r6
  8171fc:	3825883a 	mov	r18,r7
  817200:	983f841e 	bne	r19,zero,817014 <__alt_data_end+0xff817014>
  817204:	8809883a 	mov	r4,r17
  817208:	08179480 	call	817948 <__clzsi2>
  81720c:	10800804 	addi	r2,r2,32
  817210:	10fffe04 	addi	r3,r2,-8
  817214:	010007c4 	movi	r4,31
  817218:	20ff830e 	bge	r4,r3,817028 <__alt_data_end+0xff817028>
  81721c:	14fff604 	addi	r19,r2,-40
  817220:	8ce6983a 	sll	r19,r17,r19
  817224:	0023883a 	mov	r17,zero
  817228:	1c3f860e 	bge	r3,r16,817044 <__alt_data_end+0xff817044>
  81722c:	017fe034 	movhi	r5,65408
  817230:	297fffc4 	addi	r5,r5,-1
  817234:	80e1c83a 	sub	r16,r16,r3
  817238:	994a703a 	and	r5,r19,r5
  81723c:	003f3206 	br	816f08 <__alt_data_end+0xff816f08>
  817240:	0009883a 	mov	r4,zero
  817244:	0005883a 	mov	r2,zero
  817248:	003f4706 	br	816f68 <__alt_data_end+0xff816f68>
  81724c:	198cb03a 	or	r6,r3,r6
  817250:	300cc03a 	cmpne	r6,r6,zero
  817254:	0005883a 	mov	r2,zero
  817258:	003f6306 	br	816fe8 <__alt_data_end+0xff816fe8>
  81725c:	10009d1e 	bne	r2,zero,8174d4 <__subdf3+0x658>
  817260:	81c00044 	addi	r7,r16,1
  817264:	3881ffcc 	andi	r2,r7,2047
  817268:	02400044 	movi	r9,1
  81726c:	4880680e 	bge	r9,r2,817410 <__subdf3+0x594>
  817270:	0081ffc4 	movi	r2,2047
  817274:	3880ae26 	beq	r7,r2,817530 <__subdf3+0x6b4>
  817278:	344d883a 	add	r6,r6,r17
  81727c:	3463803a 	cmpltu	r17,r6,r17
  817280:	194b883a 	add	r5,r3,r5
  817284:	2c4b883a 	add	r5,r5,r17
  817288:	282297fa 	slli	r17,r5,31
  81728c:	300cd07a 	srli	r6,r6,1
  817290:	280ad07a 	srli	r5,r5,1
  817294:	3821883a 	mov	r16,r7
  817298:	89a2b03a 	or	r17,r17,r6
  81729c:	003f1a06 	br	816f08 <__alt_data_end+0xff816f08>
  8172a0:	0101ffc4 	movi	r4,2047
  8172a4:	813f431e 	bne	r16,r4,816fb4 <__alt_data_end+0xff816fb4>
  8172a8:	003f1706 	br	816f08 <__alt_data_end+0xff816f08>
  8172ac:	80bff844 	addi	r2,r16,-31
  8172b0:	00c00804 	movi	r3,32
  8172b4:	9884d83a 	srl	r2,r19,r2
  8172b8:	28c05126 	beq	r5,r3,817400 <__subdf3+0x584>
  8172bc:	00c00fc4 	movi	r3,63
  8172c0:	1c21c83a 	sub	r16,r3,r16
  8172c4:	9c26983a 	sll	r19,r19,r16
  8172c8:	9c62b03a 	or	r17,r19,r17
  8172cc:	8822c03a 	cmpne	r17,r17,zero
  8172d0:	88a2b03a 	or	r17,r17,r2
  8172d4:	000b883a 	mov	r5,zero
  8172d8:	0021883a 	mov	r16,zero
  8172dc:	003fb406 	br	8171b0 <__alt_data_end+0xff8171b0>
  8172e0:	113ff804 	addi	r4,r2,-32
  8172e4:	01c00804 	movi	r7,32
  8172e8:	1908d83a 	srl	r4,r3,r4
  8172ec:	11c04626 	beq	r2,r7,817408 <__subdf3+0x58c>
  8172f0:	01c01004 	movi	r7,64
  8172f4:	3885c83a 	sub	r2,r7,r2
  8172f8:	1884983a 	sll	r2,r3,r2
  8172fc:	118cb03a 	or	r6,r2,r6
  817300:	300cc03a 	cmpne	r6,r6,zero
  817304:	310cb03a 	or	r6,r6,r4
  817308:	0005883a 	mov	r2,zero
  81730c:	003f3606 	br	816fe8 <__alt_data_end+0xff816fe8>
  817310:	80002b26 	beq	r16,zero,8173c0 <__subdf3+0x544>
  817314:	0101ffc4 	movi	r4,2047
  817318:	51006926 	beq	r10,r4,8174c0 <__subdf3+0x644>
  81731c:	0085c83a 	sub	r2,zero,r2
  817320:	29402034 	orhi	r5,r5,128
  817324:	01000e04 	movi	r4,56
  817328:	20807d16 	blt	r4,r2,817520 <__subdf3+0x6a4>
  81732c:	010007c4 	movi	r4,31
  817330:	2080d916 	blt	r4,r2,817698 <__subdf3+0x81c>
  817334:	01000804 	movi	r4,32
  817338:	2089c83a 	sub	r4,r4,r2
  81733c:	2912983a 	sll	r9,r5,r4
  817340:	8890d83a 	srl	r8,r17,r2
  817344:	8908983a 	sll	r4,r17,r4
  817348:	2884d83a 	srl	r2,r5,r2
  81734c:	4a22b03a 	or	r17,r9,r8
  817350:	2008c03a 	cmpne	r4,r4,zero
  817354:	8922b03a 	or	r17,r17,r4
  817358:	3463c83a 	sub	r17,r6,r17
  81735c:	1885c83a 	sub	r2,r3,r2
  817360:	344d803a 	cmpltu	r6,r6,r17
  817364:	118bc83a 	sub	r5,r2,r6
  817368:	5021883a 	mov	r16,r10
  81736c:	3825883a 	mov	r18,r7
  817370:	003f2206 	br	816ffc <__alt_data_end+0xff816ffc>
  817374:	9886b03a 	or	r3,r19,r2
  817378:	18001c1e 	bne	r3,zero,8173ec <__subdf3+0x570>
  81737c:	0011883a 	mov	r8,zero
  817380:	000b883a 	mov	r5,zero
  817384:	0023883a 	mov	r17,zero
  817388:	0021883a 	mov	r16,zero
  81738c:	003f3e06 	br	817088 <__alt_data_end+0xff817088>
  817390:	010007c4 	movi	r4,31
  817394:	20803c16 	blt	r4,r2,817488 <__subdf3+0x60c>
  817398:	01000804 	movi	r4,32
  81739c:	2089c83a 	sub	r4,r4,r2
  8173a0:	1912983a 	sll	r9,r3,r4
  8173a4:	308ed83a 	srl	r7,r6,r2
  8173a8:	3108983a 	sll	r4,r6,r4
  8173ac:	1884d83a 	srl	r2,r3,r2
  8173b0:	49ceb03a 	or	r7,r9,r7
  8173b4:	2008c03a 	cmpne	r4,r4,zero
  8173b8:	390eb03a 	or	r7,r7,r4
  8173bc:	003f4706 	br	8170dc <__alt_data_end+0xff8170dc>
  8173c0:	2c48b03a 	or	r4,r5,r17
  8173c4:	20003e26 	beq	r4,zero,8174c0 <__subdf3+0x644>
  8173c8:	0084303a 	nor	r2,zero,r2
  8173cc:	10003a1e 	bne	r2,zero,8174b8 <__subdf3+0x63c>
  8173d0:	3463c83a 	sub	r17,r6,r17
  8173d4:	194bc83a 	sub	r5,r3,r5
  8173d8:	344d803a 	cmpltu	r6,r6,r17
  8173dc:	298bc83a 	sub	r5,r5,r6
  8173e0:	5021883a 	mov	r16,r10
  8173e4:	3825883a 	mov	r18,r7
  8173e8:	003f0406 	br	816ffc <__alt_data_end+0xff816ffc>
  8173ec:	1023883a 	mov	r17,r2
  8173f0:	003f0706 	br	817010 <__alt_data_end+0xff817010>
  8173f4:	0101ffc4 	movi	r4,2047
  8173f8:	813f331e 	bne	r16,r4,8170c8 <__alt_data_end+0xff8170c8>
  8173fc:	003ec206 	br	816f08 <__alt_data_end+0xff816f08>
  817400:	0027883a 	mov	r19,zero
  817404:	003fb006 	br	8172c8 <__alt_data_end+0xff8172c8>
  817408:	0005883a 	mov	r2,zero
  81740c:	003fbb06 	br	8172fc <__alt_data_end+0xff8172fc>
  817410:	2c44b03a 	or	r2,r5,r17
  817414:	80008b1e 	bne	r16,zero,817644 <__subdf3+0x7c8>
  817418:	1000b526 	beq	r2,zero,8176f0 <__subdf3+0x874>
  81741c:	1984b03a 	or	r2,r3,r6
  817420:	103eb926 	beq	r2,zero,816f08 <__alt_data_end+0xff816f08>
  817424:	3449883a 	add	r4,r6,r17
  817428:	2463803a 	cmpltu	r17,r4,r17
  81742c:	194b883a 	add	r5,r3,r5
  817430:	2c4b883a 	add	r5,r5,r17
  817434:	2880202c 	andhi	r2,r5,128
  817438:	2023883a 	mov	r17,r4
  81743c:	103f5c26 	beq	r2,zero,8171b0 <__alt_data_end+0xff8171b0>
  817440:	00bfe034 	movhi	r2,65408
  817444:	10bfffc4 	addi	r2,r2,-1
  817448:	4821883a 	mov	r16,r9
  81744c:	288a703a 	and	r5,r5,r2
  817450:	003ead06 	br	816f08 <__alt_data_end+0xff816f08>
  817454:	2c44b03a 	or	r2,r5,r17
  817458:	8000291e 	bne	r16,zero,817500 <__subdf3+0x684>
  81745c:	10004f1e 	bne	r2,zero,81759c <__subdf3+0x720>
  817460:	1984b03a 	or	r2,r3,r6
  817464:	10000426 	beq	r2,zero,817478 <__subdf3+0x5fc>
  817468:	180b883a 	mov	r5,r3
  81746c:	3023883a 	mov	r17,r6
  817470:	3825883a 	mov	r18,r7
  817474:	003ea406 	br	816f08 <__alt_data_end+0xff816f08>
  817478:	0011883a 	mov	r8,zero
  81747c:	000b883a 	mov	r5,zero
  817480:	0023883a 	mov	r17,zero
  817484:	003f0006 	br	817088 <__alt_data_end+0xff817088>
  817488:	11fff804 	addi	r7,r2,-32
  81748c:	19c8d83a 	srl	r4,r3,r7
  817490:	01c00804 	movi	r7,32
  817494:	11c07e26 	beq	r2,r7,817690 <__subdf3+0x814>
  817498:	01c01004 	movi	r7,64
  81749c:	3885c83a 	sub	r2,r7,r2
  8174a0:	1884983a 	sll	r2,r3,r2
  8174a4:	118cb03a 	or	r6,r2,r6
  8174a8:	300ec03a 	cmpne	r7,r6,zero
  8174ac:	390eb03a 	or	r7,r7,r4
  8174b0:	0005883a 	mov	r2,zero
  8174b4:	003f0906 	br	8170dc <__alt_data_end+0xff8170dc>
  8174b8:	0101ffc4 	movi	r4,2047
  8174bc:	513f991e 	bne	r10,r4,817324 <__alt_data_end+0xff817324>
  8174c0:	180b883a 	mov	r5,r3
  8174c4:	3023883a 	mov	r17,r6
  8174c8:	5021883a 	mov	r16,r10
  8174cc:	3825883a 	mov	r18,r7
  8174d0:	003e8d06 	br	816f08 <__alt_data_end+0xff816f08>
  8174d4:	80001a1e 	bne	r16,zero,817540 <__subdf3+0x6c4>
  8174d8:	2c48b03a 	or	r4,r5,r17
  8174dc:	20005526 	beq	r4,zero,817634 <__subdf3+0x7b8>
  8174e0:	0084303a 	nor	r2,zero,r2
  8174e4:	1000511e 	bne	r2,zero,81762c <__subdf3+0x7b0>
  8174e8:	89a3883a 	add	r17,r17,r6
  8174ec:	194b883a 	add	r5,r3,r5
  8174f0:	898d803a 	cmpltu	r6,r17,r6
  8174f4:	298b883a 	add	r5,r5,r6
  8174f8:	5021883a 	mov	r16,r10
  8174fc:	003efc06 	br	8170f0 <__alt_data_end+0xff8170f0>
  817500:	1000341e 	bne	r2,zero,8175d4 <__subdf3+0x758>
  817504:	1984b03a 	or	r2,r3,r6
  817508:	10006f26 	beq	r2,zero,8176c8 <__subdf3+0x84c>
  81750c:	180b883a 	mov	r5,r3
  817510:	3023883a 	mov	r17,r6
  817514:	3825883a 	mov	r18,r7
  817518:	0401ffc4 	movi	r16,2047
  81751c:	003e7a06 	br	816f08 <__alt_data_end+0xff816f08>
  817520:	2c62b03a 	or	r17,r5,r17
  817524:	8822c03a 	cmpne	r17,r17,zero
  817528:	0005883a 	mov	r2,zero
  81752c:	003f8a06 	br	817358 <__alt_data_end+0xff817358>
  817530:	3821883a 	mov	r16,r7
  817534:	000b883a 	mov	r5,zero
  817538:	0023883a 	mov	r17,zero
  81753c:	003ed206 	br	817088 <__alt_data_end+0xff817088>
  817540:	0101ffc4 	movi	r4,2047
  817544:	51003b26 	beq	r10,r4,817634 <__subdf3+0x7b8>
  817548:	0085c83a 	sub	r2,zero,r2
  81754c:	29402034 	orhi	r5,r5,128
  817550:	01000e04 	movi	r4,56
  817554:	20806216 	blt	r4,r2,8176e0 <__subdf3+0x864>
  817558:	010007c4 	movi	r4,31
  81755c:	20806b16 	blt	r4,r2,81770c <__subdf3+0x890>
  817560:	01000804 	movi	r4,32
  817564:	2089c83a 	sub	r4,r4,r2
  817568:	2912983a 	sll	r9,r5,r4
  81756c:	888ed83a 	srl	r7,r17,r2
  817570:	8908983a 	sll	r4,r17,r4
  817574:	2884d83a 	srl	r2,r5,r2
  817578:	49e2b03a 	or	r17,r9,r7
  81757c:	2008c03a 	cmpne	r4,r4,zero
  817580:	8922b03a 	or	r17,r17,r4
  817584:	89a3883a 	add	r17,r17,r6
  817588:	10c5883a 	add	r2,r2,r3
  81758c:	898d803a 	cmpltu	r6,r17,r6
  817590:	118b883a 	add	r5,r2,r6
  817594:	5021883a 	mov	r16,r10
  817598:	003ed506 	br	8170f0 <__alt_data_end+0xff8170f0>
  81759c:	1984b03a 	or	r2,r3,r6
  8175a0:	103e5926 	beq	r2,zero,816f08 <__alt_data_end+0xff816f08>
  8175a4:	8989c83a 	sub	r4,r17,r6
  8175a8:	8911803a 	cmpltu	r8,r17,r4
  8175ac:	28c5c83a 	sub	r2,r5,r3
  8175b0:	1205c83a 	sub	r2,r2,r8
  8175b4:	1200202c 	andhi	r8,r2,128
  8175b8:	403ef926 	beq	r8,zero,8171a0 <__alt_data_end+0xff8171a0>
  8175bc:	3463c83a 	sub	r17,r6,r17
  8175c0:	194bc83a 	sub	r5,r3,r5
  8175c4:	344d803a 	cmpltu	r6,r6,r17
  8175c8:	298bc83a 	sub	r5,r5,r6
  8175cc:	3825883a 	mov	r18,r7
  8175d0:	003e4d06 	br	816f08 <__alt_data_end+0xff816f08>
  8175d4:	1984b03a 	or	r2,r3,r6
  8175d8:	10002b26 	beq	r2,zero,817688 <__subdf3+0x80c>
  8175dc:	2808d0fa 	srli	r4,r5,3
  8175e0:	8822d0fa 	srli	r17,r17,3
  8175e4:	280a977a 	slli	r5,r5,29
  8175e8:	2080022c 	andhi	r2,r4,8
  8175ec:	2c62b03a 	or	r17,r5,r17
  8175f0:	10000826 	beq	r2,zero,817614 <__subdf3+0x798>
  8175f4:	1810d0fa 	srli	r8,r3,3
  8175f8:	4080022c 	andhi	r2,r8,8
  8175fc:	1000051e 	bne	r2,zero,817614 <__subdf3+0x798>
  817600:	300cd0fa 	srli	r6,r6,3
  817604:	1804977a 	slli	r2,r3,29
  817608:	4009883a 	mov	r4,r8
  81760c:	3825883a 	mov	r18,r7
  817610:	11a2b03a 	or	r17,r2,r6
  817614:	880ad77a 	srli	r5,r17,29
  817618:	200890fa 	slli	r4,r4,3
  81761c:	882290fa 	slli	r17,r17,3
  817620:	0401ffc4 	movi	r16,2047
  817624:	290ab03a 	or	r5,r5,r4
  817628:	003e3706 	br	816f08 <__alt_data_end+0xff816f08>
  81762c:	0101ffc4 	movi	r4,2047
  817630:	513fc71e 	bne	r10,r4,817550 <__alt_data_end+0xff817550>
  817634:	180b883a 	mov	r5,r3
  817638:	3023883a 	mov	r17,r6
  81763c:	5021883a 	mov	r16,r10
  817640:	003e3106 	br	816f08 <__alt_data_end+0xff816f08>
  817644:	10002d26 	beq	r2,zero,8176fc <__subdf3+0x880>
  817648:	1984b03a 	or	r2,r3,r6
  81764c:	10000e26 	beq	r2,zero,817688 <__subdf3+0x80c>
  817650:	2808d0fa 	srli	r4,r5,3
  817654:	8822d0fa 	srli	r17,r17,3
  817658:	280a977a 	slli	r5,r5,29
  81765c:	2080022c 	andhi	r2,r4,8
  817660:	2c62b03a 	or	r17,r5,r17
  817664:	103feb26 	beq	r2,zero,817614 <__alt_data_end+0xff817614>
  817668:	180ed0fa 	srli	r7,r3,3
  81766c:	3880022c 	andhi	r2,r7,8
  817670:	103fe81e 	bne	r2,zero,817614 <__alt_data_end+0xff817614>
  817674:	300cd0fa 	srli	r6,r6,3
  817678:	1804977a 	slli	r2,r3,29
  81767c:	3809883a 	mov	r4,r7
  817680:	11a2b03a 	or	r17,r2,r6
  817684:	003fe306 	br	817614 <__alt_data_end+0xff817614>
  817688:	0401ffc4 	movi	r16,2047
  81768c:	003e1e06 	br	816f08 <__alt_data_end+0xff816f08>
  817690:	0005883a 	mov	r2,zero
  817694:	003f8306 	br	8174a4 <__alt_data_end+0xff8174a4>
  817698:	113ff804 	addi	r4,r2,-32
  81769c:	02000804 	movi	r8,32
  8176a0:	2908d83a 	srl	r4,r5,r4
  8176a4:	12002526 	beq	r2,r8,81773c <__subdf3+0x8c0>
  8176a8:	02001004 	movi	r8,64
  8176ac:	4085c83a 	sub	r2,r8,r2
  8176b0:	288a983a 	sll	r5,r5,r2
  8176b4:	2c62b03a 	or	r17,r5,r17
  8176b8:	8822c03a 	cmpne	r17,r17,zero
  8176bc:	8922b03a 	or	r17,r17,r4
  8176c0:	0005883a 	mov	r2,zero
  8176c4:	003f2406 	br	817358 <__alt_data_end+0xff817358>
  8176c8:	01402034 	movhi	r5,128
  8176cc:	0011883a 	mov	r8,zero
  8176d0:	297fffc4 	addi	r5,r5,-1
  8176d4:	047ffe04 	movi	r17,-8
  8176d8:	0401ffc4 	movi	r16,2047
  8176dc:	003e6a06 	br	817088 <__alt_data_end+0xff817088>
  8176e0:	2c62b03a 	or	r17,r5,r17
  8176e4:	8822c03a 	cmpne	r17,r17,zero
  8176e8:	0005883a 	mov	r2,zero
  8176ec:	003fa506 	br	817584 <__alt_data_end+0xff817584>
  8176f0:	180b883a 	mov	r5,r3
  8176f4:	3023883a 	mov	r17,r6
  8176f8:	003e0306 	br	816f08 <__alt_data_end+0xff816f08>
  8176fc:	180b883a 	mov	r5,r3
  817700:	3023883a 	mov	r17,r6
  817704:	0401ffc4 	movi	r16,2047
  817708:	003dff06 	br	816f08 <__alt_data_end+0xff816f08>
  81770c:	113ff804 	addi	r4,r2,-32
  817710:	01c00804 	movi	r7,32
  817714:	2908d83a 	srl	r4,r5,r4
  817718:	11c00a26 	beq	r2,r7,817744 <__subdf3+0x8c8>
  81771c:	01c01004 	movi	r7,64
  817720:	3885c83a 	sub	r2,r7,r2
  817724:	288a983a 	sll	r5,r5,r2
  817728:	2c62b03a 	or	r17,r5,r17
  81772c:	8822c03a 	cmpne	r17,r17,zero
  817730:	8922b03a 	or	r17,r17,r4
  817734:	0005883a 	mov	r2,zero
  817738:	003f9206 	br	817584 <__alt_data_end+0xff817584>
  81773c:	000b883a 	mov	r5,zero
  817740:	003fdc06 	br	8176b4 <__alt_data_end+0xff8176b4>
  817744:	000b883a 	mov	r5,zero
  817748:	003ff706 	br	817728 <__alt_data_end+0xff817728>

0081774c <__fixdfsi>:
  81774c:	2806d53a 	srli	r3,r5,20
  817750:	00800434 	movhi	r2,16
  817754:	10bfffc4 	addi	r2,r2,-1
  817758:	18c1ffcc 	andi	r3,r3,2047
  81775c:	0180ff84 	movi	r6,1022
  817760:	2884703a 	and	r2,r5,r2
  817764:	280ad7fa 	srli	r5,r5,31
  817768:	30c0130e 	bge	r6,r3,8177b8 <__fixdfsi+0x6c>
  81776c:	01810744 	movi	r6,1053
  817770:	30c00d16 	blt	r6,r3,8177a8 <__fixdfsi+0x5c>
  817774:	01810cc4 	movi	r6,1075
  817778:	30cdc83a 	sub	r6,r6,r3
  81777c:	01c007c4 	movi	r7,31
  817780:	10800434 	orhi	r2,r2,16
  817784:	39800e0e 	bge	r7,r6,8177c0 <__fixdfsi+0x74>
  817788:	010104c4 	movi	r4,1043
  81778c:	20c7c83a 	sub	r3,r4,r3
  817790:	10c6d83a 	srl	r3,r2,r3
  817794:	29403fcc 	andi	r5,r5,255
  817798:	0145c83a 	sub	r2,zero,r5
  81779c:	1884f03a 	xor	r2,r3,r2
  8177a0:	1145883a 	add	r2,r2,r5
  8177a4:	f800283a 	ret
  8177a8:	00a00034 	movhi	r2,32768
  8177ac:	10bfffc4 	addi	r2,r2,-1
  8177b0:	2885883a 	add	r2,r5,r2
  8177b4:	f800283a 	ret
  8177b8:	0005883a 	mov	r2,zero
  8177bc:	f800283a 	ret
  8177c0:	18fefb44 	addi	r3,r3,-1043
  8177c4:	2188d83a 	srl	r4,r4,r6
  8177c8:	10c6983a 	sll	r3,r2,r3
  8177cc:	20c6b03a 	or	r3,r4,r3
  8177d0:	003ff006 	br	817794 <__alt_data_end+0xff817794>

008177d4 <__floatsidf>:
  8177d4:	defffd04 	addi	sp,sp,-12
  8177d8:	dc400115 	stw	r17,4(sp)
  8177dc:	dfc00215 	stw	ra,8(sp)
  8177e0:	dc000015 	stw	r16,0(sp)
  8177e4:	2023883a 	mov	r17,r4
  8177e8:	20001426 	beq	r4,zero,81783c <__floatsidf+0x68>
  8177ec:	2020d7fa 	srli	r16,r4,31
  8177f0:	80000126 	beq	r16,zero,8177f8 <__floatsidf+0x24>
  8177f4:	0123c83a 	sub	r17,zero,r4
  8177f8:	8809883a 	mov	r4,r17
  8177fc:	08179480 	call	817948 <__clzsi2>
  817800:	01410784 	movi	r5,1054
  817804:	00c00284 	movi	r3,10
  817808:	288bc83a 	sub	r5,r5,r2
  81780c:	18801c16 	blt	r3,r2,817880 <__floatsidf+0xac>
  817810:	00c002c4 	movi	r3,11
  817814:	1887c83a 	sub	r3,r3,r2
  817818:	88c8d83a 	srl	r4,r17,r3
  81781c:	00c00434 	movhi	r3,16
  817820:	18ffffc4 	addi	r3,r3,-1
  817824:	10800544 	addi	r2,r2,21
  817828:	20c8703a 	and	r4,r4,r3
  81782c:	8884983a 	sll	r2,r17,r2
  817830:	28c1ffcc 	andi	r3,r5,2047
  817834:	800d883a 	mov	r6,r16
  817838:	00000406 	br	81784c <__floatsidf+0x78>
  81783c:	000d883a 	mov	r6,zero
  817840:	0007883a 	mov	r3,zero
  817844:	0009883a 	mov	r4,zero
  817848:	0005883a 	mov	r2,zero
  81784c:	180a953a 	slli	r5,r3,20
  817850:	31803fcc 	andi	r6,r6,255
  817854:	00c00434 	movhi	r3,16
  817858:	300c97fa 	slli	r6,r6,31
  81785c:	18ffffc4 	addi	r3,r3,-1
  817860:	20c6703a 	and	r3,r4,r3
  817864:	1946b03a 	or	r3,r3,r5
  817868:	1986b03a 	or	r3,r3,r6
  81786c:	dfc00217 	ldw	ra,8(sp)
  817870:	dc400117 	ldw	r17,4(sp)
  817874:	dc000017 	ldw	r16,0(sp)
  817878:	dec00304 	addi	sp,sp,12
  81787c:	f800283a 	ret
  817880:	10fffd44 	addi	r3,r2,-11
  817884:	88c8983a 	sll	r4,r17,r3
  817888:	00800434 	movhi	r2,16
  81788c:	10bfffc4 	addi	r2,r2,-1
  817890:	2088703a 	and	r4,r4,r2
  817894:	28c1ffcc 	andi	r3,r5,2047
  817898:	800d883a 	mov	r6,r16
  81789c:	0005883a 	mov	r2,zero
  8178a0:	003fea06 	br	81784c <__alt_data_end+0xff81784c>

008178a4 <__floatunsidf>:
  8178a4:	defffe04 	addi	sp,sp,-8
  8178a8:	dc000015 	stw	r16,0(sp)
  8178ac:	dfc00115 	stw	ra,4(sp)
  8178b0:	2021883a 	mov	r16,r4
  8178b4:	20001026 	beq	r4,zero,8178f8 <__floatunsidf+0x54>
  8178b8:	08179480 	call	817948 <__clzsi2>
  8178bc:	01410784 	movi	r5,1054
  8178c0:	100d883a 	mov	r6,r2
  8178c4:	288bc83a 	sub	r5,r5,r2
  8178c8:	00800284 	movi	r2,10
  8178cc:	11801616 	blt	r2,r6,817928 <__floatunsidf+0x84>
  8178d0:	008002c4 	movi	r2,11
  8178d4:	1185c83a 	sub	r2,r2,r6
  8178d8:	8084d83a 	srl	r2,r16,r2
  8178dc:	00c00434 	movhi	r3,16
  8178e0:	31c00544 	addi	r7,r6,21
  8178e4:	18ffffc4 	addi	r3,r3,-1
  8178e8:	81e0983a 	sll	r16,r16,r7
  8178ec:	10cc703a 	and	r6,r2,r3
  8178f0:	2941ffcc 	andi	r5,r5,2047
  8178f4:	00000206 	br	817900 <__floatunsidf+0x5c>
  8178f8:	000b883a 	mov	r5,zero
  8178fc:	000d883a 	mov	r6,zero
  817900:	280a953a 	slli	r5,r5,20
  817904:	00c00434 	movhi	r3,16
  817908:	18ffffc4 	addi	r3,r3,-1
  81790c:	30c6703a 	and	r3,r6,r3
  817910:	8005883a 	mov	r2,r16
  817914:	1946b03a 	or	r3,r3,r5
  817918:	dfc00117 	ldw	ra,4(sp)
  81791c:	dc000017 	ldw	r16,0(sp)
  817920:	dec00204 	addi	sp,sp,8
  817924:	f800283a 	ret
  817928:	31bffd44 	addi	r6,r6,-11
  81792c:	818c983a 	sll	r6,r16,r6
  817930:	00800434 	movhi	r2,16
  817934:	10bfffc4 	addi	r2,r2,-1
  817938:	2941ffcc 	andi	r5,r5,2047
  81793c:	0021883a 	mov	r16,zero
  817940:	308c703a 	and	r6,r6,r2
  817944:	003fee06 	br	817900 <__alt_data_end+0xff817900>

00817948 <__clzsi2>:
  817948:	00bfffd4 	movui	r2,65535
  81794c:	11000b36 	bltu	r2,r4,81797c <__clzsi2+0x34>
  817950:	00803fc4 	movi	r2,255
  817954:	1100122e 	bgeu	r2,r4,8179a0 <__clzsi2+0x58>
  817958:	00c00204 	movi	r3,8
  81795c:	01400604 	movi	r5,24
  817960:	20c8d83a 	srl	r4,r4,r3
  817964:	008020b4 	movhi	r2,130
  817968:	10b38e04 	addi	r2,r2,-12744
  81796c:	1109883a 	add	r4,r2,r4
  817970:	20800003 	ldbu	r2,0(r4)
  817974:	2885c83a 	sub	r2,r5,r2
  817978:	f800283a 	ret
  81797c:	00804034 	movhi	r2,256
  817980:	10bfffc4 	addi	r2,r2,-1
  817984:	11000336 	bltu	r2,r4,817994 <__clzsi2+0x4c>
  817988:	00c00404 	movi	r3,16
  81798c:	180b883a 	mov	r5,r3
  817990:	003ff306 	br	817960 <__alt_data_end+0xff817960>
  817994:	00c00604 	movi	r3,24
  817998:	01400204 	movi	r5,8
  81799c:	003ff006 	br	817960 <__alt_data_end+0xff817960>
  8179a0:	0007883a 	mov	r3,zero
  8179a4:	01400804 	movi	r5,32
  8179a8:	003fed06 	br	817960 <__alt_data_end+0xff817960>

008179ac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8179ac:	defff504 	addi	sp,sp,-44
  8179b0:	df000a15 	stw	fp,40(sp)
  8179b4:	df000a04 	addi	fp,sp,40
  8179b8:	e13ffc15 	stw	r4,-16(fp)
  8179bc:	e17ffd15 	stw	r5,-12(fp)
  8179c0:	e1bffe15 	stw	r6,-8(fp)
  8179c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8179c8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8179cc:	008020b4 	movhi	r2,130
  8179d0:	10834f04 	addi	r2,r2,3388
  8179d4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8179d8:	10003f26 	beq	r2,zero,817ad8 <alt_alarm_start+0x12c>
  {
    if (alarm)
  8179dc:	e0bffc17 	ldw	r2,-16(fp)
  8179e0:	10003b26 	beq	r2,zero,817ad0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  8179e4:	e0bffc17 	ldw	r2,-16(fp)
  8179e8:	e0fffe17 	ldw	r3,-8(fp)
  8179ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8179f0:	e0bffc17 	ldw	r2,-16(fp)
  8179f4:	e0ffff17 	ldw	r3,-4(fp)
  8179f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8179fc:	0005303a 	rdctl	r2,status
  817a00:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817a04:	e0fff817 	ldw	r3,-32(fp)
  817a08:	00bfff84 	movi	r2,-2
  817a0c:	1884703a 	and	r2,r3,r2
  817a10:	1001703a 	wrctl	status,r2
  
  return context;
  817a14:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  817a18:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  817a1c:	008020b4 	movhi	r2,130
  817a20:	10835004 	addi	r2,r2,3392
  817a24:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  817a28:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  817a2c:	e0fffd17 	ldw	r3,-12(fp)
  817a30:	e0bff617 	ldw	r2,-40(fp)
  817a34:	1885883a 	add	r2,r3,r2
  817a38:	10c00044 	addi	r3,r2,1
  817a3c:	e0bffc17 	ldw	r2,-16(fp)
  817a40:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  817a44:	e0bffc17 	ldw	r2,-16(fp)
  817a48:	10c00217 	ldw	r3,8(r2)
  817a4c:	e0bff617 	ldw	r2,-40(fp)
  817a50:	1880042e 	bgeu	r3,r2,817a64 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  817a54:	e0bffc17 	ldw	r2,-16(fp)
  817a58:	00c00044 	movi	r3,1
  817a5c:	10c00405 	stb	r3,16(r2)
  817a60:	00000206 	br	817a6c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  817a64:	e0bffc17 	ldw	r2,-16(fp)
  817a68:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  817a6c:	e0fffc17 	ldw	r3,-16(fp)
  817a70:	008020b4 	movhi	r2,130
  817a74:	10bbdc04 	addi	r2,r2,-4240
  817a78:	e0bff915 	stw	r2,-28(fp)
  817a7c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  817a80:	e0bffa17 	ldw	r2,-24(fp)
  817a84:	e0fff917 	ldw	r3,-28(fp)
  817a88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  817a8c:	e0bff917 	ldw	r2,-28(fp)
  817a90:	10c00017 	ldw	r3,0(r2)
  817a94:	e0bffa17 	ldw	r2,-24(fp)
  817a98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  817a9c:	e0bff917 	ldw	r2,-28(fp)
  817aa0:	10800017 	ldw	r2,0(r2)
  817aa4:	e0fffa17 	ldw	r3,-24(fp)
  817aa8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  817aac:	e0bff917 	ldw	r2,-28(fp)
  817ab0:	e0fffa17 	ldw	r3,-24(fp)
  817ab4:	10c00015 	stw	r3,0(r2)
  817ab8:	e0bff717 	ldw	r2,-36(fp)
  817abc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817ac0:	e0bffb17 	ldw	r2,-20(fp)
  817ac4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  817ac8:	0005883a 	mov	r2,zero
  817acc:	00000306 	br	817adc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  817ad0:	00bffa84 	movi	r2,-22
  817ad4:	00000106 	br	817adc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  817ad8:	00bfde84 	movi	r2,-134
  }
}
  817adc:	e037883a 	mov	sp,fp
  817ae0:	df000017 	ldw	fp,0(sp)
  817ae4:	dec00104 	addi	sp,sp,4
  817ae8:	f800283a 	ret

00817aec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817aec:	defffe04 	addi	sp,sp,-8
  817af0:	dfc00115 	stw	ra,4(sp)
  817af4:	df000015 	stw	fp,0(sp)
  817af8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817afc:	008020b4 	movhi	r2,130
  817b00:	10bbd904 	addi	r2,r2,-4252
  817b04:	10800017 	ldw	r2,0(r2)
  817b08:	10000526 	beq	r2,zero,817b20 <alt_get_errno+0x34>
  817b0c:	008020b4 	movhi	r2,130
  817b10:	10bbd904 	addi	r2,r2,-4252
  817b14:	10800017 	ldw	r2,0(r2)
  817b18:	103ee83a 	callr	r2
  817b1c:	00000206 	br	817b28 <alt_get_errno+0x3c>
  817b20:	008020b4 	movhi	r2,130
  817b24:	10834404 	addi	r2,r2,3344
}
  817b28:	e037883a 	mov	sp,fp
  817b2c:	dfc00117 	ldw	ra,4(sp)
  817b30:	df000017 	ldw	fp,0(sp)
  817b34:	dec00204 	addi	sp,sp,8
  817b38:	f800283a 	ret

00817b3c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  817b3c:	defffb04 	addi	sp,sp,-20
  817b40:	dfc00415 	stw	ra,16(sp)
  817b44:	df000315 	stw	fp,12(sp)
  817b48:	df000304 	addi	fp,sp,12
  817b4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  817b50:	e0bfff17 	ldw	r2,-4(fp)
  817b54:	10000616 	blt	r2,zero,817b70 <close+0x34>
  817b58:	e0bfff17 	ldw	r2,-4(fp)
  817b5c:	10c00324 	muli	r3,r2,12
  817b60:	008020b4 	movhi	r2,130
  817b64:	10b6c004 	addi	r2,r2,-9472
  817b68:	1885883a 	add	r2,r3,r2
  817b6c:	00000106 	br	817b74 <close+0x38>
  817b70:	0005883a 	mov	r2,zero
  817b74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  817b78:	e0bffd17 	ldw	r2,-12(fp)
  817b7c:	10001926 	beq	r2,zero,817be4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  817b80:	e0bffd17 	ldw	r2,-12(fp)
  817b84:	10800017 	ldw	r2,0(r2)
  817b88:	10800417 	ldw	r2,16(r2)
  817b8c:	10000626 	beq	r2,zero,817ba8 <close+0x6c>
  817b90:	e0bffd17 	ldw	r2,-12(fp)
  817b94:	10800017 	ldw	r2,0(r2)
  817b98:	10800417 	ldw	r2,16(r2)
  817b9c:	e13ffd17 	ldw	r4,-12(fp)
  817ba0:	103ee83a 	callr	r2
  817ba4:	00000106 	br	817bac <close+0x70>
  817ba8:	0005883a 	mov	r2,zero
  817bac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  817bb0:	e13fff17 	ldw	r4,-4(fp)
  817bb4:	08188c80 	call	8188c8 <alt_release_fd>
    if (rval < 0)
  817bb8:	e0bffe17 	ldw	r2,-8(fp)
  817bbc:	1000070e 	bge	r2,zero,817bdc <close+0xa0>
    {
      ALT_ERRNO = -rval;
  817bc0:	0817aec0 	call	817aec <alt_get_errno>
  817bc4:	1007883a 	mov	r3,r2
  817bc8:	e0bffe17 	ldw	r2,-8(fp)
  817bcc:	0085c83a 	sub	r2,zero,r2
  817bd0:	18800015 	stw	r2,0(r3)
      return -1;
  817bd4:	00bfffc4 	movi	r2,-1
  817bd8:	00000706 	br	817bf8 <close+0xbc>
    }
    return 0;
  817bdc:	0005883a 	mov	r2,zero
  817be0:	00000506 	br	817bf8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  817be4:	0817aec0 	call	817aec <alt_get_errno>
  817be8:	1007883a 	mov	r3,r2
  817bec:	00801444 	movi	r2,81
  817bf0:	18800015 	stw	r2,0(r3)
    return -1;
  817bf4:	00bfffc4 	movi	r2,-1
  }
}
  817bf8:	e037883a 	mov	sp,fp
  817bfc:	dfc00117 	ldw	ra,4(sp)
  817c00:	df000017 	ldw	fp,0(sp)
  817c04:	dec00204 	addi	sp,sp,8
  817c08:	f800283a 	ret

00817c0c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  817c0c:	defffc04 	addi	sp,sp,-16
  817c10:	df000315 	stw	fp,12(sp)
  817c14:	df000304 	addi	fp,sp,12
  817c18:	e13ffd15 	stw	r4,-12(fp)
  817c1c:	e17ffe15 	stw	r5,-8(fp)
  817c20:	e1bfff15 	stw	r6,-4(fp)
  return len;
  817c24:	e0bfff17 	ldw	r2,-4(fp)
}
  817c28:	e037883a 	mov	sp,fp
  817c2c:	df000017 	ldw	fp,0(sp)
  817c30:	dec00104 	addi	sp,sp,4
  817c34:	f800283a 	ret

00817c38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817c38:	defffe04 	addi	sp,sp,-8
  817c3c:	dfc00115 	stw	ra,4(sp)
  817c40:	df000015 	stw	fp,0(sp)
  817c44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817c48:	008020b4 	movhi	r2,130
  817c4c:	10bbd904 	addi	r2,r2,-4252
  817c50:	10800017 	ldw	r2,0(r2)
  817c54:	10000526 	beq	r2,zero,817c6c <alt_get_errno+0x34>
  817c58:	008020b4 	movhi	r2,130
  817c5c:	10bbd904 	addi	r2,r2,-4252
  817c60:	10800017 	ldw	r2,0(r2)
  817c64:	103ee83a 	callr	r2
  817c68:	00000206 	br	817c74 <alt_get_errno+0x3c>
  817c6c:	008020b4 	movhi	r2,130
  817c70:	10834404 	addi	r2,r2,3344
}
  817c74:	e037883a 	mov	sp,fp
  817c78:	dfc00117 	ldw	ra,4(sp)
  817c7c:	df000017 	ldw	fp,0(sp)
  817c80:	dec00204 	addi	sp,sp,8
  817c84:	f800283a 	ret

00817c88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  817c88:	defffb04 	addi	sp,sp,-20
  817c8c:	dfc00415 	stw	ra,16(sp)
  817c90:	df000315 	stw	fp,12(sp)
  817c94:	df000304 	addi	fp,sp,12
  817c98:	e13ffe15 	stw	r4,-8(fp)
  817c9c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  817ca0:	e0bffe17 	ldw	r2,-8(fp)
  817ca4:	10000616 	blt	r2,zero,817cc0 <fstat+0x38>
  817ca8:	e0bffe17 	ldw	r2,-8(fp)
  817cac:	10c00324 	muli	r3,r2,12
  817cb0:	008020b4 	movhi	r2,130
  817cb4:	10b6c004 	addi	r2,r2,-9472
  817cb8:	1885883a 	add	r2,r3,r2
  817cbc:	00000106 	br	817cc4 <fstat+0x3c>
  817cc0:	0005883a 	mov	r2,zero
  817cc4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  817cc8:	e0bffd17 	ldw	r2,-12(fp)
  817ccc:	10001026 	beq	r2,zero,817d10 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  817cd0:	e0bffd17 	ldw	r2,-12(fp)
  817cd4:	10800017 	ldw	r2,0(r2)
  817cd8:	10800817 	ldw	r2,32(r2)
  817cdc:	10000726 	beq	r2,zero,817cfc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  817ce0:	e0bffd17 	ldw	r2,-12(fp)
  817ce4:	10800017 	ldw	r2,0(r2)
  817ce8:	10800817 	ldw	r2,32(r2)
  817cec:	e13ffd17 	ldw	r4,-12(fp)
  817cf0:	e17fff17 	ldw	r5,-4(fp)
  817cf4:	103ee83a 	callr	r2
  817cf8:	00000a06 	br	817d24 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  817cfc:	e0bfff17 	ldw	r2,-4(fp)
  817d00:	00c80004 	movi	r3,8192
  817d04:	10c00115 	stw	r3,4(r2)
      return 0;
  817d08:	0005883a 	mov	r2,zero
  817d0c:	00000506 	br	817d24 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  817d10:	0817c380 	call	817c38 <alt_get_errno>
  817d14:	1007883a 	mov	r3,r2
  817d18:	00801444 	movi	r2,81
  817d1c:	18800015 	stw	r2,0(r3)
    return -1;
  817d20:	00bfffc4 	movi	r2,-1
  }
}
  817d24:	e037883a 	mov	sp,fp
  817d28:	dfc00117 	ldw	ra,4(sp)
  817d2c:	df000017 	ldw	fp,0(sp)
  817d30:	dec00204 	addi	sp,sp,8
  817d34:	f800283a 	ret

00817d38 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  817d38:	defff004 	addi	sp,sp,-64
  817d3c:	df000f15 	stw	fp,60(sp)
  817d40:	df000f04 	addi	fp,sp,60
  817d44:	e13ffd15 	stw	r4,-12(fp)
  817d48:	e17ffe15 	stw	r5,-8(fp)
  817d4c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  817d50:	00bffa84 	movi	r2,-22
  817d54:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  817d58:	e0bffd17 	ldw	r2,-12(fp)
  817d5c:	10800828 	cmpgeui	r2,r2,32
  817d60:	10005c1e 	bne	r2,zero,817ed4 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817d64:	0005303a 	rdctl	r2,status
  817d68:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817d6c:	e0fff317 	ldw	r3,-52(fp)
  817d70:	00bfff84 	movi	r2,-2
  817d74:	1884703a 	and	r2,r3,r2
  817d78:	1001703a 	wrctl	status,r2
  
  return context;
  817d7c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  817d80:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
  817d84:	008020b4 	movhi	r2,130
  817d88:	1086a104 	addi	r2,r2,6788
  817d8c:	e0fffd17 	ldw	r3,-12(fp)
  817d90:	180690fa 	slli	r3,r3,3
  817d94:	10c5883a 	add	r2,r2,r3
  817d98:	e0ffff17 	ldw	r3,-4(fp)
  817d9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  817da0:	008020b4 	movhi	r2,130
  817da4:	1086a104 	addi	r2,r2,6788
  817da8:	e0fffd17 	ldw	r3,-12(fp)
  817dac:	180690fa 	slli	r3,r3,3
  817db0:	18c00104 	addi	r3,r3,4
  817db4:	10c5883a 	add	r2,r2,r3
  817db8:	e0fffe17 	ldw	r3,-8(fp)
  817dbc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  817dc0:	e0bfff17 	ldw	r2,-4(fp)
  817dc4:	10001f26 	beq	r2,zero,817e44 <alt_irq_register+0x10c>
  817dc8:	e0bffd17 	ldw	r2,-12(fp)
  817dcc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817dd0:	0005303a 	rdctl	r2,status
  817dd4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817dd8:	e0fff517 	ldw	r3,-44(fp)
  817ddc:	00bfff84 	movi	r2,-2
  817de0:	1884703a 	and	r2,r3,r2
  817de4:	1001703a 	wrctl	status,r2
  
  return context;
  817de8:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  817dec:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
  817df0:	e0bff417 	ldw	r2,-48(fp)
  817df4:	00c00044 	movi	r3,1
  817df8:	1884983a 	sll	r2,r3,r2
  817dfc:	1007883a 	mov	r3,r2
  817e00:	008020b4 	movhi	r2,130
  817e04:	10834b04 	addi	r2,r2,3372
  817e08:	10800017 	ldw	r2,0(r2)
  817e0c:	1886b03a 	or	r3,r3,r2
  817e10:	008020b4 	movhi	r2,130
  817e14:	10834b04 	addi	r2,r2,3372
  817e18:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  817e1c:	008020b4 	movhi	r2,130
  817e20:	10834b04 	addi	r2,r2,3372
  817e24:	10800017 	ldw	r2,0(r2)
  817e28:	100170fa 	wrctl	ienable,r2
  817e2c:	e0bff617 	ldw	r2,-40(fp)
  817e30:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817e34:	e0bff717 	ldw	r2,-36(fp)
  817e38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  817e3c:	0005883a 	mov	r2,zero
  817e40:	00001f06 	br	817ec0 <alt_irq_register+0x188>
  817e44:	e0bffd17 	ldw	r2,-12(fp)
  817e48:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817e4c:	0005303a 	rdctl	r2,status
  817e50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817e54:	e0fff917 	ldw	r3,-28(fp)
  817e58:	00bfff84 	movi	r2,-2
  817e5c:	1884703a 	and	r2,r3,r2
  817e60:	1001703a 	wrctl	status,r2
  
  return context;
  817e64:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  817e68:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
  817e6c:	e0bff817 	ldw	r2,-32(fp)
  817e70:	00c00044 	movi	r3,1
  817e74:	1884983a 	sll	r2,r3,r2
  817e78:	0084303a 	nor	r2,zero,r2
  817e7c:	1007883a 	mov	r3,r2
  817e80:	008020b4 	movhi	r2,130
  817e84:	10834b04 	addi	r2,r2,3372
  817e88:	10800017 	ldw	r2,0(r2)
  817e8c:	1886703a 	and	r3,r3,r2
  817e90:	008020b4 	movhi	r2,130
  817e94:	10834b04 	addi	r2,r2,3372
  817e98:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  817e9c:	008020b4 	movhi	r2,130
  817ea0:	10834b04 	addi	r2,r2,3372
  817ea4:	10800017 	ldw	r2,0(r2)
  817ea8:	100170fa 	wrctl	ienable,r2
  817eac:	e0bffa17 	ldw	r2,-24(fp)
  817eb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817eb4:	e0bffb17 	ldw	r2,-20(fp)
  817eb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  817ebc:	0005883a 	mov	r2,zero
  817ec0:	e0bff115 	stw	r2,-60(fp)
  817ec4:	e0bff217 	ldw	r2,-56(fp)
  817ec8:	e0bffc15 	stw	r2,-16(fp)
  817ecc:	e0bffc17 	ldw	r2,-16(fp)
  817ed0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  817ed4:	e0bff117 	ldw	r2,-60(fp)
}
  817ed8:	e037883a 	mov	sp,fp
  817edc:	df000017 	ldw	fp,0(sp)
  817ee0:	dec00104 	addi	sp,sp,4
  817ee4:	f800283a 	ret

00817ee8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817ee8:	defffe04 	addi	sp,sp,-8
  817eec:	dfc00115 	stw	ra,4(sp)
  817ef0:	df000015 	stw	fp,0(sp)
  817ef4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817ef8:	008020b4 	movhi	r2,130
  817efc:	10bbd904 	addi	r2,r2,-4252
  817f00:	10800017 	ldw	r2,0(r2)
  817f04:	10000526 	beq	r2,zero,817f1c <alt_get_errno+0x34>
  817f08:	008020b4 	movhi	r2,130
  817f0c:	10bbd904 	addi	r2,r2,-4252
  817f10:	10800017 	ldw	r2,0(r2)
  817f14:	103ee83a 	callr	r2
  817f18:	00000206 	br	817f24 <alt_get_errno+0x3c>
  817f1c:	008020b4 	movhi	r2,130
  817f20:	10834404 	addi	r2,r2,3344
}
  817f24:	e037883a 	mov	sp,fp
  817f28:	dfc00117 	ldw	ra,4(sp)
  817f2c:	df000017 	ldw	fp,0(sp)
  817f30:	dec00204 	addi	sp,sp,8
  817f34:	f800283a 	ret

00817f38 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  817f38:	deffed04 	addi	sp,sp,-76
  817f3c:	dfc01215 	stw	ra,72(sp)
  817f40:	df001115 	stw	fp,68(sp)
  817f44:	df001104 	addi	fp,sp,68
  817f48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  817f4c:	e0bfff17 	ldw	r2,-4(fp)
  817f50:	10000616 	blt	r2,zero,817f6c <isatty+0x34>
  817f54:	e0bfff17 	ldw	r2,-4(fp)
  817f58:	10c00324 	muli	r3,r2,12
  817f5c:	008020b4 	movhi	r2,130
  817f60:	10b6c004 	addi	r2,r2,-9472
  817f64:	1885883a 	add	r2,r3,r2
  817f68:	00000106 	br	817f70 <isatty+0x38>
  817f6c:	0005883a 	mov	r2,zero
  817f70:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  817f74:	e0bfef17 	ldw	r2,-68(fp)
  817f78:	10000e26 	beq	r2,zero,817fb4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  817f7c:	e0bfef17 	ldw	r2,-68(fp)
  817f80:	10800017 	ldw	r2,0(r2)
  817f84:	10800817 	ldw	r2,32(r2)
  817f88:	1000021e 	bne	r2,zero,817f94 <isatty+0x5c>
    {
      return 1;
  817f8c:	00800044 	movi	r2,1
  817f90:	00000d06 	br	817fc8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  817f94:	e0bff004 	addi	r2,fp,-64
  817f98:	e13fff17 	ldw	r4,-4(fp)
  817f9c:	100b883a 	mov	r5,r2
  817fa0:	0817c880 	call	817c88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  817fa4:	e0bff117 	ldw	r2,-60(fp)
  817fa8:	10880020 	cmpeqi	r2,r2,8192
  817fac:	10803fcc 	andi	r2,r2,255
  817fb0:	00000506 	br	817fc8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  817fb4:	0817ee80 	call	817ee8 <alt_get_errno>
  817fb8:	1007883a 	mov	r3,r2
  817fbc:	00801444 	movi	r2,81
  817fc0:	18800015 	stw	r2,0(r3)
    return 0;
  817fc4:	0005883a 	mov	r2,zero
  }
}
  817fc8:	e037883a 	mov	sp,fp
  817fcc:	dfc00117 	ldw	ra,4(sp)
  817fd0:	df000017 	ldw	fp,0(sp)
  817fd4:	dec00204 	addi	sp,sp,8
  817fd8:	f800283a 	ret

00817fdc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  817fdc:	defffc04 	addi	sp,sp,-16
  817fe0:	df000315 	stw	fp,12(sp)
  817fe4:	df000304 	addi	fp,sp,12
  817fe8:	e13ffd15 	stw	r4,-12(fp)
  817fec:	e17ffe15 	stw	r5,-8(fp)
  817ff0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  817ff4:	e0fffe17 	ldw	r3,-8(fp)
  817ff8:	e0bffd17 	ldw	r2,-12(fp)
  817ffc:	18800c26 	beq	r3,r2,818030 <alt_load_section+0x54>
  {
    while( to != end )
  818000:	00000806 	br	818024 <alt_load_section+0x48>
    {
      *to++ = *from++;
  818004:	e0bffe17 	ldw	r2,-8(fp)
  818008:	10c00104 	addi	r3,r2,4
  81800c:	e0fffe15 	stw	r3,-8(fp)
  818010:	e0fffd17 	ldw	r3,-12(fp)
  818014:	19000104 	addi	r4,r3,4
  818018:	e13ffd15 	stw	r4,-12(fp)
  81801c:	18c00017 	ldw	r3,0(r3)
  818020:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  818024:	e0fffe17 	ldw	r3,-8(fp)
  818028:	e0bfff17 	ldw	r2,-4(fp)
  81802c:	18bff51e 	bne	r3,r2,818004 <__alt_data_end+0xff818004>
    {
      *to++ = *from++;
    }
  }
}
  818030:	e037883a 	mov	sp,fp
  818034:	df000017 	ldw	fp,0(sp)
  818038:	dec00104 	addi	sp,sp,4
  81803c:	f800283a 	ret

00818040 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  818040:	defffe04 	addi	sp,sp,-8
  818044:	dfc00115 	stw	ra,4(sp)
  818048:	df000015 	stw	fp,0(sp)
  81804c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  818050:	010020b4 	movhi	r4,130
  818054:	213be004 	addi	r4,r4,-4224
  818058:	014020b4 	movhi	r5,130
  81805c:	29748d04 	addi	r5,r5,-11724
  818060:	018020b4 	movhi	r6,130
  818064:	31bbe004 	addi	r6,r6,-4224
  818068:	0817fdc0 	call	817fdc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  81806c:	01002034 	movhi	r4,128
  818070:	21000804 	addi	r4,r4,32
  818074:	01402034 	movhi	r5,128
  818078:	29400804 	addi	r5,r5,32
  81807c:	01802034 	movhi	r6,128
  818080:	31809104 	addi	r6,r6,580
  818084:	0817fdc0 	call	817fdc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  818088:	010020b4 	movhi	r4,130
  81808c:	21312204 	addi	r4,r4,-15224
  818090:	014020b4 	movhi	r5,130
  818094:	29712204 	addi	r5,r5,-15224
  818098:	018020b4 	movhi	r6,130
  81809c:	31b48d04 	addi	r6,r6,-11724
  8180a0:	0817fdc0 	call	817fdc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8180a4:	081b8640 	call	81b864 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8180a8:	081bcac0 	call	81bcac <alt_icache_flush_all>
}
  8180ac:	e037883a 	mov	sp,fp
  8180b0:	dfc00117 	ldw	ra,4(sp)
  8180b4:	df000017 	ldw	fp,0(sp)
  8180b8:	dec00204 	addi	sp,sp,8
  8180bc:	f800283a 	ret

008180c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8180c0:	defffe04 	addi	sp,sp,-8
  8180c4:	dfc00115 	stw	ra,4(sp)
  8180c8:	df000015 	stw	fp,0(sp)
  8180cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8180d0:	008020b4 	movhi	r2,130
  8180d4:	10bbd904 	addi	r2,r2,-4252
  8180d8:	10800017 	ldw	r2,0(r2)
  8180dc:	10000526 	beq	r2,zero,8180f4 <alt_get_errno+0x34>
  8180e0:	008020b4 	movhi	r2,130
  8180e4:	10bbd904 	addi	r2,r2,-4252
  8180e8:	10800017 	ldw	r2,0(r2)
  8180ec:	103ee83a 	callr	r2
  8180f0:	00000206 	br	8180fc <alt_get_errno+0x3c>
  8180f4:	008020b4 	movhi	r2,130
  8180f8:	10834404 	addi	r2,r2,3344
}
  8180fc:	e037883a 	mov	sp,fp
  818100:	dfc00117 	ldw	ra,4(sp)
  818104:	df000017 	ldw	fp,0(sp)
  818108:	dec00204 	addi	sp,sp,8
  81810c:	f800283a 	ret

00818110 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  818110:	defff904 	addi	sp,sp,-28
  818114:	dfc00615 	stw	ra,24(sp)
  818118:	df000515 	stw	fp,20(sp)
  81811c:	df000504 	addi	fp,sp,20
  818120:	e13ffd15 	stw	r4,-12(fp)
  818124:	e17ffe15 	stw	r5,-8(fp)
  818128:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  81812c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  818130:	e0bffd17 	ldw	r2,-12(fp)
  818134:	10000616 	blt	r2,zero,818150 <lseek+0x40>
  818138:	e0bffd17 	ldw	r2,-12(fp)
  81813c:	10c00324 	muli	r3,r2,12
  818140:	008020b4 	movhi	r2,130
  818144:	10b6c004 	addi	r2,r2,-9472
  818148:	1885883a 	add	r2,r3,r2
  81814c:	00000106 	br	818154 <lseek+0x44>
  818150:	0005883a 	mov	r2,zero
  818154:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  818158:	e0bffc17 	ldw	r2,-16(fp)
  81815c:	10001026 	beq	r2,zero,8181a0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  818160:	e0bffc17 	ldw	r2,-16(fp)
  818164:	10800017 	ldw	r2,0(r2)
  818168:	10800717 	ldw	r2,28(r2)
  81816c:	10000926 	beq	r2,zero,818194 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  818170:	e0bffc17 	ldw	r2,-16(fp)
  818174:	10800017 	ldw	r2,0(r2)
  818178:	10800717 	ldw	r2,28(r2)
  81817c:	e13ffc17 	ldw	r4,-16(fp)
  818180:	e17ffe17 	ldw	r5,-8(fp)
  818184:	e1bfff17 	ldw	r6,-4(fp)
  818188:	103ee83a 	callr	r2
  81818c:	e0bffb15 	stw	r2,-20(fp)
  818190:	00000506 	br	8181a8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  818194:	00bfde84 	movi	r2,-134
  818198:	e0bffb15 	stw	r2,-20(fp)
  81819c:	00000206 	br	8181a8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  8181a0:	00bfebc4 	movi	r2,-81
  8181a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  8181a8:	e0bffb17 	ldw	r2,-20(fp)
  8181ac:	1000070e 	bge	r2,zero,8181cc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  8181b0:	08180c00 	call	8180c0 <alt_get_errno>
  8181b4:	1007883a 	mov	r3,r2
  8181b8:	e0bffb17 	ldw	r2,-20(fp)
  8181bc:	0085c83a 	sub	r2,zero,r2
  8181c0:	18800015 	stw	r2,0(r3)
    rc = -1;
  8181c4:	00bfffc4 	movi	r2,-1
  8181c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  8181cc:	e0bffb17 	ldw	r2,-20(fp)
}
  8181d0:	e037883a 	mov	sp,fp
  8181d4:	dfc00117 	ldw	ra,4(sp)
  8181d8:	df000017 	ldw	fp,0(sp)
  8181dc:	dec00204 	addi	sp,sp,8
  8181e0:	f800283a 	ret

008181e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8181e4:	defffd04 	addi	sp,sp,-12
  8181e8:	dfc00215 	stw	ra,8(sp)
  8181ec:	df000115 	stw	fp,4(sp)
  8181f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8181f4:	0009883a 	mov	r4,zero
  8181f8:	0818cf40 	call	818cf4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8181fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  818200:	0818d280 	call	818d28 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  818204:	010020b4 	movhi	r4,130
  818208:	2133d104 	addi	r4,r4,-12476
  81820c:	014020b4 	movhi	r5,130
  818210:	2973d104 	addi	r5,r5,-12476
  818214:	018020b4 	movhi	r6,130
  818218:	31b3d104 	addi	r6,r6,-12476
  81821c:	081bd9c0 	call	81bd9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  818220:	081b99c0 	call	81b99c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  818224:	010020b4 	movhi	r4,130
  818228:	212e7e04 	addi	r4,r4,-17928
  81822c:	081c0e40 	call	81c0e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  818230:	d1278317 	ldw	r4,-25076(gp)
  818234:	d0e78417 	ldw	r3,-25072(gp)
  818238:	d0a78517 	ldw	r2,-25068(gp)
  81823c:	180b883a 	mov	r5,r3
  818240:	100d883a 	mov	r6,r2
  818244:	08082c00 	call	8082c0 <main>
  818248:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  81824c:	01000044 	movi	r4,1
  818250:	0817b3c0 	call	817b3c <close>
  exit (result);
  818254:	e13fff17 	ldw	r4,-4(fp)
  818258:	081c0f80 	call	81c0f8 <exit>

0081825c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  81825c:	defffe04 	addi	sp,sp,-8
  818260:	df000115 	stw	fp,4(sp)
  818264:	df000104 	addi	fp,sp,4
  818268:	e13fff15 	stw	r4,-4(fp)
}
  81826c:	e037883a 	mov	sp,fp
  818270:	df000017 	ldw	fp,0(sp)
  818274:	dec00104 	addi	sp,sp,4
  818278:	f800283a 	ret

0081827c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  81827c:	defffe04 	addi	sp,sp,-8
  818280:	df000115 	stw	fp,4(sp)
  818284:	df000104 	addi	fp,sp,4
  818288:	e13fff15 	stw	r4,-4(fp)
}
  81828c:	e037883a 	mov	sp,fp
  818290:	df000017 	ldw	fp,0(sp)
  818294:	dec00104 	addi	sp,sp,4
  818298:	f800283a 	ret

0081829c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81829c:	defffe04 	addi	sp,sp,-8
  8182a0:	dfc00115 	stw	ra,4(sp)
  8182a4:	df000015 	stw	fp,0(sp)
  8182a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8182ac:	008020b4 	movhi	r2,130
  8182b0:	10bbd904 	addi	r2,r2,-4252
  8182b4:	10800017 	ldw	r2,0(r2)
  8182b8:	10000526 	beq	r2,zero,8182d0 <alt_get_errno+0x34>
  8182bc:	008020b4 	movhi	r2,130
  8182c0:	10bbd904 	addi	r2,r2,-4252
  8182c4:	10800017 	ldw	r2,0(r2)
  8182c8:	103ee83a 	callr	r2
  8182cc:	00000206 	br	8182d8 <alt_get_errno+0x3c>
  8182d0:	008020b4 	movhi	r2,130
  8182d4:	10834404 	addi	r2,r2,3344
}
  8182d8:	e037883a 	mov	sp,fp
  8182dc:	dfc00117 	ldw	ra,4(sp)
  8182e0:	df000017 	ldw	fp,0(sp)
  8182e4:	dec00204 	addi	sp,sp,8
  8182e8:	f800283a 	ret

008182ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8182ec:	defffd04 	addi	sp,sp,-12
  8182f0:	df000215 	stw	fp,8(sp)
  8182f4:	df000204 	addi	fp,sp,8
  8182f8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8182fc:	e0bfff17 	ldw	r2,-4(fp)
  818300:	10800217 	ldw	r2,8(r2)
  818304:	10d00034 	orhi	r3,r2,16384
  818308:	e0bfff17 	ldw	r2,-4(fp)
  81830c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  818310:	e03ffe15 	stw	zero,-8(fp)
  818314:	00001d06 	br	81838c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  818318:	008020b4 	movhi	r2,130
  81831c:	10b6c004 	addi	r2,r2,-9472
  818320:	e0fffe17 	ldw	r3,-8(fp)
  818324:	18c00324 	muli	r3,r3,12
  818328:	10c5883a 	add	r2,r2,r3
  81832c:	10c00017 	ldw	r3,0(r2)
  818330:	e0bfff17 	ldw	r2,-4(fp)
  818334:	10800017 	ldw	r2,0(r2)
  818338:	1880111e 	bne	r3,r2,818380 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81833c:	008020b4 	movhi	r2,130
  818340:	10b6c004 	addi	r2,r2,-9472
  818344:	e0fffe17 	ldw	r3,-8(fp)
  818348:	18c00324 	muli	r3,r3,12
  81834c:	18c00204 	addi	r3,r3,8
  818350:	10c5883a 	add	r2,r2,r3
  818354:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  818358:	1000090e 	bge	r2,zero,818380 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  81835c:	e0bffe17 	ldw	r2,-8(fp)
  818360:	10c00324 	muli	r3,r2,12
  818364:	008020b4 	movhi	r2,130
  818368:	10b6c004 	addi	r2,r2,-9472
  81836c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  818370:	e0bfff17 	ldw	r2,-4(fp)
  818374:	18800226 	beq	r3,r2,818380 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  818378:	00bffcc4 	movi	r2,-13
  81837c:	00000a06 	br	8183a8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  818380:	e0bffe17 	ldw	r2,-8(fp)
  818384:	10800044 	addi	r2,r2,1
  818388:	e0bffe15 	stw	r2,-8(fp)
  81838c:	008020b4 	movhi	r2,130
  818390:	10bbd804 	addi	r2,r2,-4256
  818394:	10800017 	ldw	r2,0(r2)
  818398:	1007883a 	mov	r3,r2
  81839c:	e0bffe17 	ldw	r2,-8(fp)
  8183a0:	18bfdd2e 	bgeu	r3,r2,818318 <__alt_data_end+0xff818318>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8183a4:	0005883a 	mov	r2,zero
}
  8183a8:	e037883a 	mov	sp,fp
  8183ac:	df000017 	ldw	fp,0(sp)
  8183b0:	dec00104 	addi	sp,sp,4
  8183b4:	f800283a 	ret

008183b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8183b8:	defff604 	addi	sp,sp,-40
  8183bc:	dfc00915 	stw	ra,36(sp)
  8183c0:	df000815 	stw	fp,32(sp)
  8183c4:	df000804 	addi	fp,sp,32
  8183c8:	e13ffd15 	stw	r4,-12(fp)
  8183cc:	e17ffe15 	stw	r5,-8(fp)
  8183d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8183d4:	00bfffc4 	movi	r2,-1
  8183d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8183dc:	00bffb44 	movi	r2,-19
  8183e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8183e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8183e8:	e13ffd17 	ldw	r4,-12(fp)
  8183ec:	014020b4 	movhi	r5,130
  8183f0:	297bd604 	addi	r5,r5,-4264
  8183f4:	081ba540 	call	81ba54 <alt_find_dev>
  8183f8:	e0bff815 	stw	r2,-32(fp)
  8183fc:	e0bff817 	ldw	r2,-32(fp)
  818400:	1000051e 	bne	r2,zero,818418 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  818404:	e13ffd17 	ldw	r4,-12(fp)
  818408:	081bae40 	call	81bae4 <alt_find_file>
  81840c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  818410:	00800044 	movi	r2,1
  818414:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  818418:	e0bff817 	ldw	r2,-32(fp)
  81841c:	10002926 	beq	r2,zero,8184c4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  818420:	e13ff817 	ldw	r4,-32(fp)
  818424:	081bbf80 	call	81bbf8 <alt_get_fd>
  818428:	e0bff915 	stw	r2,-28(fp)
  81842c:	e0bff917 	ldw	r2,-28(fp)
  818430:	1000030e 	bge	r2,zero,818440 <open+0x88>
    {
      status = index;
  818434:	e0bff917 	ldw	r2,-28(fp)
  818438:	e0bffa15 	stw	r2,-24(fp)
  81843c:	00002306 	br	8184cc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  818440:	e0bff917 	ldw	r2,-28(fp)
  818444:	10c00324 	muli	r3,r2,12
  818448:	008020b4 	movhi	r2,130
  81844c:	10b6c004 	addi	r2,r2,-9472
  818450:	1885883a 	add	r2,r3,r2
  818454:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  818458:	e0fffe17 	ldw	r3,-8(fp)
  81845c:	00900034 	movhi	r2,16384
  818460:	10bfffc4 	addi	r2,r2,-1
  818464:	1886703a 	and	r3,r3,r2
  818468:	e0bffc17 	ldw	r2,-16(fp)
  81846c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  818470:	e0bffb17 	ldw	r2,-20(fp)
  818474:	1000051e 	bne	r2,zero,81848c <open+0xd4>
  818478:	e13ffc17 	ldw	r4,-16(fp)
  81847c:	08182ec0 	call	8182ec <alt_file_locked>
  818480:	e0bffa15 	stw	r2,-24(fp)
  818484:	e0bffa17 	ldw	r2,-24(fp)
  818488:	10001016 	blt	r2,zero,8184cc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81848c:	e0bff817 	ldw	r2,-32(fp)
  818490:	10800317 	ldw	r2,12(r2)
  818494:	10000826 	beq	r2,zero,8184b8 <open+0x100>
  818498:	e0bff817 	ldw	r2,-32(fp)
  81849c:	10800317 	ldw	r2,12(r2)
  8184a0:	e13ffc17 	ldw	r4,-16(fp)
  8184a4:	e17ffd17 	ldw	r5,-12(fp)
  8184a8:	e1bffe17 	ldw	r6,-8(fp)
  8184ac:	e1ffff17 	ldw	r7,-4(fp)
  8184b0:	103ee83a 	callr	r2
  8184b4:	00000106 	br	8184bc <open+0x104>
  8184b8:	0005883a 	mov	r2,zero
  8184bc:	e0bffa15 	stw	r2,-24(fp)
  8184c0:	00000206 	br	8184cc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8184c4:	00bffb44 	movi	r2,-19
  8184c8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8184cc:	e0bffa17 	ldw	r2,-24(fp)
  8184d0:	1000090e 	bge	r2,zero,8184f8 <open+0x140>
  {
    alt_release_fd (index);  
  8184d4:	e13ff917 	ldw	r4,-28(fp)
  8184d8:	08188c80 	call	8188c8 <alt_release_fd>
    ALT_ERRNO = -status;
  8184dc:	081829c0 	call	81829c <alt_get_errno>
  8184e0:	1007883a 	mov	r3,r2
  8184e4:	e0bffa17 	ldw	r2,-24(fp)
  8184e8:	0085c83a 	sub	r2,zero,r2
  8184ec:	18800015 	stw	r2,0(r3)
    return -1;
  8184f0:	00bfffc4 	movi	r2,-1
  8184f4:	00000106 	br	8184fc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  8184f8:	e0bff917 	ldw	r2,-28(fp)
}
  8184fc:	e037883a 	mov	sp,fp
  818500:	dfc00117 	ldw	ra,4(sp)
  818504:	df000017 	ldw	fp,0(sp)
  818508:	dec00204 	addi	sp,sp,8
  81850c:	f800283a 	ret

00818510 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  818510:	defff204 	addi	sp,sp,-56
  818514:	dfc00a15 	stw	ra,40(sp)
  818518:	df000915 	stw	fp,36(sp)
  81851c:	df000904 	addi	fp,sp,36
  818520:	e1400215 	stw	r5,8(fp)
  818524:	e1800315 	stw	r6,12(fp)
  818528:	e1c00415 	stw	r7,16(fp)
  81852c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
  818530:	e0800204 	addi	r2,fp,8
  818534:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  818538:	e0bfff17 	ldw	r2,-4(fp)
  81853c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  818540:	00007106 	br	818708 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  818544:	e0bff807 	ldb	r2,-32(fp)
  818548:	10800960 	cmpeqi	r2,r2,37
  81854c:	1000041e 	bne	r2,zero,818560 <alt_printf+0x50>
        {
            alt_putchar(c);
  818550:	e0bff807 	ldb	r2,-32(fp)
  818554:	1009883a 	mov	r4,r2
  818558:	08187380 	call	818738 <alt_putchar>
  81855c:	00006a06 	br	818708 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  818560:	e0bff717 	ldw	r2,-36(fp)
  818564:	10c00044 	addi	r3,r2,1
  818568:	e0fff715 	stw	r3,-36(fp)
  81856c:	10800003 	ldbu	r2,0(r2)
  818570:	e0bff805 	stb	r2,-32(fp)
  818574:	e0bff807 	ldb	r2,-32(fp)
  818578:	10006226 	beq	r2,zero,818704 <alt_printf+0x1f4>
            {
                if (c == '%')
  81857c:	e0bff807 	ldb	r2,-32(fp)
  818580:	10800958 	cmpnei	r2,r2,37
  818584:	1000041e 	bne	r2,zero,818598 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  818588:	e0bff807 	ldb	r2,-32(fp)
  81858c:	1009883a 	mov	r4,r2
  818590:	08187380 	call	818738 <alt_putchar>
  818594:	00005c06 	br	818708 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
  818598:	e0bff807 	ldb	r2,-32(fp)
  81859c:	108018d8 	cmpnei	r2,r2,99
  8185a0:	1000081e 	bne	r2,zero,8185c4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  8185a4:	e0bffe17 	ldw	r2,-8(fp)
  8185a8:	10c00104 	addi	r3,r2,4
  8185ac:	e0fffe15 	stw	r3,-8(fp)
  8185b0:	10800017 	ldw	r2,0(r2)
  8185b4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  8185b8:	e13ffd17 	ldw	r4,-12(fp)
  8185bc:	08187380 	call	818738 <alt_putchar>
  8185c0:	00005106 	br	818708 <alt_printf+0x1f8>
                }
                else if (c == 'x')
  8185c4:	e0bff807 	ldb	r2,-32(fp)
  8185c8:	10801e18 	cmpnei	r2,r2,120
  8185cc:	1000341e 	bne	r2,zero,8186a0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  8185d0:	e0bffe17 	ldw	r2,-8(fp)
  8185d4:	10c00104 	addi	r3,r2,4
  8185d8:	e0fffe15 	stw	r3,-8(fp)
  8185dc:	10800017 	ldw	r2,0(r2)
  8185e0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  8185e4:	e0bffb17 	ldw	r2,-20(fp)
  8185e8:	1000031e 	bne	r2,zero,8185f8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  8185ec:	01000c04 	movi	r4,48
  8185f0:	08187380 	call	818738 <alt_putchar>
                        continue;
  8185f4:	00004406 	br	818708 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  8185f8:	00800704 	movi	r2,28
  8185fc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  818600:	00000306 	br	818610 <alt_printf+0x100>
                        digit_shift -= 4;
  818604:	e0bff917 	ldw	r2,-28(fp)
  818608:	10bfff04 	addi	r2,r2,-4
  81860c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  818610:	00c003c4 	movi	r3,15
  818614:	e0bff917 	ldw	r2,-28(fp)
  818618:	1884983a 	sll	r2,r3,r2
  81861c:	1007883a 	mov	r3,r2
  818620:	e0bffb17 	ldw	r2,-20(fp)
  818624:	1884703a 	and	r2,r3,r2
  818628:	103ff626 	beq	r2,zero,818604 <__alt_data_end+0xff818604>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  81862c:	00001906 	br	818694 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  818630:	00c003c4 	movi	r3,15
  818634:	e0bff917 	ldw	r2,-28(fp)
  818638:	1884983a 	sll	r2,r3,r2
  81863c:	1007883a 	mov	r3,r2
  818640:	e0bffb17 	ldw	r2,-20(fp)
  818644:	1886703a 	and	r3,r3,r2
  818648:	e0bff917 	ldw	r2,-28(fp)
  81864c:	1884d83a 	srl	r2,r3,r2
  818650:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  818654:	e0bffc17 	ldw	r2,-16(fp)
  818658:	108002a8 	cmpgeui	r2,r2,10
  81865c:	1000041e 	bne	r2,zero,818670 <alt_printf+0x160>
                            c = '0' + digit;
  818660:	e0bffc17 	ldw	r2,-16(fp)
  818664:	10800c04 	addi	r2,r2,48
  818668:	e0bff805 	stb	r2,-32(fp)
  81866c:	00000306 	br	81867c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  818670:	e0bffc17 	ldw	r2,-16(fp)
  818674:	108015c4 	addi	r2,r2,87
  818678:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  81867c:	e0bff807 	ldb	r2,-32(fp)
  818680:	1009883a 	mov	r4,r2
  818684:	08187380 	call	818738 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  818688:	e0bff917 	ldw	r2,-28(fp)
  81868c:	10bfff04 	addi	r2,r2,-4
  818690:	e0bff915 	stw	r2,-28(fp)
  818694:	e0bff917 	ldw	r2,-28(fp)
  818698:	103fe50e 	bge	r2,zero,818630 <__alt_data_end+0xff818630>
  81869c:	00001a06 	br	818708 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  8186a0:	e0bff807 	ldb	r2,-32(fp)
  8186a4:	10801cd8 	cmpnei	r2,r2,115
  8186a8:	1000151e 	bne	r2,zero,818700 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  8186ac:	e0bffe17 	ldw	r2,-8(fp)
  8186b0:	10c00104 	addi	r3,r2,4
  8186b4:	e0fffe15 	stw	r3,-8(fp)
  8186b8:	10800017 	ldw	r2,0(r2)
  8186bc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  8186c0:	00000906 	br	8186e8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
  8186c4:	e0bffa17 	ldw	r2,-24(fp)
  8186c8:	10c00044 	addi	r3,r2,1
  8186cc:	e0fffa15 	stw	r3,-24(fp)
  8186d0:	10800003 	ldbu	r2,0(r2)
  8186d4:	10803fcc 	andi	r2,r2,255
  8186d8:	1080201c 	xori	r2,r2,128
  8186dc:	10bfe004 	addi	r2,r2,-128
  8186e0:	1009883a 	mov	r4,r2
  8186e4:	08187380 	call	818738 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  8186e8:	e0bffa17 	ldw	r2,-24(fp)
  8186ec:	10800003 	ldbu	r2,0(r2)
  8186f0:	10803fcc 	andi	r2,r2,255
  8186f4:	1080201c 	xori	r2,r2,128
  8186f8:	10bfe004 	addi	r2,r2,-128
  8186fc:	103ff11e 	bne	r2,zero,8186c4 <__alt_data_end+0xff8186c4>
  818700:	00000106 	br	818708 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  818704:	00000706 	br	818724 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  818708:	e0bff717 	ldw	r2,-36(fp)
  81870c:	10c00044 	addi	r3,r2,1
  818710:	e0fff715 	stw	r3,-36(fp)
  818714:	10800003 	ldbu	r2,0(r2)
  818718:	e0bff805 	stb	r2,-32(fp)
  81871c:	e0bff807 	ldb	r2,-32(fp)
  818720:	103f881e 	bne	r2,zero,818544 <__alt_data_end+0xff818544>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  818724:	e037883a 	mov	sp,fp
  818728:	dfc00117 	ldw	ra,4(sp)
  81872c:	df000017 	ldw	fp,0(sp)
  818730:	dec00504 	addi	sp,sp,20
  818734:	f800283a 	ret

00818738 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  818738:	defffd04 	addi	sp,sp,-12
  81873c:	dfc00215 	stw	ra,8(sp)
  818740:	df000115 	stw	fp,4(sp)
  818744:	df000104 	addi	fp,sp,4
  818748:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  81874c:	008020b4 	movhi	r2,130
  818750:	10bbcf04 	addi	r2,r2,-4292
  818754:	10800017 	ldw	r2,0(r2)
  818758:	10800217 	ldw	r2,8(r2)
  81875c:	e13fff17 	ldw	r4,-4(fp)
  818760:	100b883a 	mov	r5,r2
  818764:	08126100 	call	812610 <putc>
#endif
#endif
}
  818768:	e037883a 	mov	sp,fp
  81876c:	dfc00117 	ldw	ra,4(sp)
  818770:	df000017 	ldw	fp,0(sp)
  818774:	dec00204 	addi	sp,sp,8
  818778:	f800283a 	ret

0081877c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81877c:	defffe04 	addi	sp,sp,-8
  818780:	dfc00115 	stw	ra,4(sp)
  818784:	df000015 	stw	fp,0(sp)
  818788:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81878c:	008020b4 	movhi	r2,130
  818790:	10bbd904 	addi	r2,r2,-4252
  818794:	10800017 	ldw	r2,0(r2)
  818798:	10000526 	beq	r2,zero,8187b0 <alt_get_errno+0x34>
  81879c:	008020b4 	movhi	r2,130
  8187a0:	10bbd904 	addi	r2,r2,-4252
  8187a4:	10800017 	ldw	r2,0(r2)
  8187a8:	103ee83a 	callr	r2
  8187ac:	00000206 	br	8187b8 <alt_get_errno+0x3c>
  8187b0:	008020b4 	movhi	r2,130
  8187b4:	10834404 	addi	r2,r2,3344
}
  8187b8:	e037883a 	mov	sp,fp
  8187bc:	dfc00117 	ldw	ra,4(sp)
  8187c0:	df000017 	ldw	fp,0(sp)
  8187c4:	dec00204 	addi	sp,sp,8
  8187c8:	f800283a 	ret

008187cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8187cc:	defff904 	addi	sp,sp,-28
  8187d0:	dfc00615 	stw	ra,24(sp)
  8187d4:	df000515 	stw	fp,20(sp)
  8187d8:	df000504 	addi	fp,sp,20
  8187dc:	e13ffd15 	stw	r4,-12(fp)
  8187e0:	e17ffe15 	stw	r5,-8(fp)
  8187e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8187e8:	e0bffd17 	ldw	r2,-12(fp)
  8187ec:	10000616 	blt	r2,zero,818808 <read+0x3c>
  8187f0:	e0bffd17 	ldw	r2,-12(fp)
  8187f4:	10c00324 	muli	r3,r2,12
  8187f8:	008020b4 	movhi	r2,130
  8187fc:	10b6c004 	addi	r2,r2,-9472
  818800:	1885883a 	add	r2,r3,r2
  818804:	00000106 	br	81880c <read+0x40>
  818808:	0005883a 	mov	r2,zero
  81880c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  818810:	e0bffb17 	ldw	r2,-20(fp)
  818814:	10002226 	beq	r2,zero,8188a0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  818818:	e0bffb17 	ldw	r2,-20(fp)
  81881c:	10800217 	ldw	r2,8(r2)
  818820:	108000cc 	andi	r2,r2,3
  818824:	10800060 	cmpeqi	r2,r2,1
  818828:	1000181e 	bne	r2,zero,81888c <read+0xc0>
        (fd->dev->read))
  81882c:	e0bffb17 	ldw	r2,-20(fp)
  818830:	10800017 	ldw	r2,0(r2)
  818834:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  818838:	10001426 	beq	r2,zero,81888c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  81883c:	e0bffb17 	ldw	r2,-20(fp)
  818840:	10800017 	ldw	r2,0(r2)
  818844:	10800517 	ldw	r2,20(r2)
  818848:	e0ffff17 	ldw	r3,-4(fp)
  81884c:	e13ffb17 	ldw	r4,-20(fp)
  818850:	e17ffe17 	ldw	r5,-8(fp)
  818854:	180d883a 	mov	r6,r3
  818858:	103ee83a 	callr	r2
  81885c:	e0bffc15 	stw	r2,-16(fp)
  818860:	e0bffc17 	ldw	r2,-16(fp)
  818864:	1000070e 	bge	r2,zero,818884 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  818868:	081877c0 	call	81877c <alt_get_errno>
  81886c:	1007883a 	mov	r3,r2
  818870:	e0bffc17 	ldw	r2,-16(fp)
  818874:	0085c83a 	sub	r2,zero,r2
  818878:	18800015 	stw	r2,0(r3)
          return -1;
  81887c:	00bfffc4 	movi	r2,-1
  818880:	00000c06 	br	8188b4 <read+0xe8>
        }
        return rval;
  818884:	e0bffc17 	ldw	r2,-16(fp)
  818888:	00000a06 	br	8188b4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  81888c:	081877c0 	call	81877c <alt_get_errno>
  818890:	1007883a 	mov	r3,r2
  818894:	00800344 	movi	r2,13
  818898:	18800015 	stw	r2,0(r3)
  81889c:	00000406 	br	8188b0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8188a0:	081877c0 	call	81877c <alt_get_errno>
  8188a4:	1007883a 	mov	r3,r2
  8188a8:	00801444 	movi	r2,81
  8188ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8188b0:	00bfffc4 	movi	r2,-1
}
  8188b4:	e037883a 	mov	sp,fp
  8188b8:	dfc00117 	ldw	ra,4(sp)
  8188bc:	df000017 	ldw	fp,0(sp)
  8188c0:	dec00204 	addi	sp,sp,8
  8188c4:	f800283a 	ret

008188c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8188c8:	defffe04 	addi	sp,sp,-8
  8188cc:	df000115 	stw	fp,4(sp)
  8188d0:	df000104 	addi	fp,sp,4
  8188d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8188d8:	e0bfff17 	ldw	r2,-4(fp)
  8188dc:	108000d0 	cmplti	r2,r2,3
  8188e0:	10000d1e 	bne	r2,zero,818918 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8188e4:	008020b4 	movhi	r2,130
  8188e8:	10b6c004 	addi	r2,r2,-9472
  8188ec:	e0ffff17 	ldw	r3,-4(fp)
  8188f0:	18c00324 	muli	r3,r3,12
  8188f4:	18c00204 	addi	r3,r3,8
  8188f8:	10c5883a 	add	r2,r2,r3
  8188fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  818900:	008020b4 	movhi	r2,130
  818904:	10b6c004 	addi	r2,r2,-9472
  818908:	e0ffff17 	ldw	r3,-4(fp)
  81890c:	18c00324 	muli	r3,r3,12
  818910:	10c5883a 	add	r2,r2,r3
  818914:	10000015 	stw	zero,0(r2)
  }
}
  818918:	e037883a 	mov	sp,fp
  81891c:	df000017 	ldw	fp,0(sp)
  818920:	dec00104 	addi	sp,sp,4
  818924:	f800283a 	ret

00818928 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  818928:	defff904 	addi	sp,sp,-28
  81892c:	df000615 	stw	fp,24(sp)
  818930:	df000604 	addi	fp,sp,24
  818934:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  818938:	0005303a 	rdctl	r2,status
  81893c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  818940:	e0fffc17 	ldw	r3,-16(fp)
  818944:	00bfff84 	movi	r2,-2
  818948:	1884703a 	and	r2,r3,r2
  81894c:	1001703a 	wrctl	status,r2
  
  return context;
  818950:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  818954:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  818958:	d0a01217 	ldw	r2,-32696(gp)
  81895c:	10c000c4 	addi	r3,r2,3
  818960:	00bfff04 	movi	r2,-4
  818964:	1884703a 	and	r2,r3,r2
  818968:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81896c:	d0e01217 	ldw	r3,-32696(gp)
  818970:	e0bfff17 	ldw	r2,-4(fp)
  818974:	1887883a 	add	r3,r3,r2
  818978:	00804034 	movhi	r2,256
  81897c:	10800004 	addi	r2,r2,0
  818980:	10c0062e 	bgeu	r2,r3,81899c <sbrk+0x74>
  818984:	e0bffa17 	ldw	r2,-24(fp)
  818988:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81898c:	e0bffd17 	ldw	r2,-12(fp)
  818990:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  818994:	00bfffc4 	movi	r2,-1
  818998:	00000b06 	br	8189c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  81899c:	d0a01217 	ldw	r2,-32696(gp)
  8189a0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  8189a4:	d0e01217 	ldw	r3,-32696(gp)
  8189a8:	e0bfff17 	ldw	r2,-4(fp)
  8189ac:	1885883a 	add	r2,r3,r2
  8189b0:	d0a01215 	stw	r2,-32696(gp)
  8189b4:	e0bffa17 	ldw	r2,-24(fp)
  8189b8:	e0bffe15 	stw	r2,-8(fp)
  8189bc:	e0bffe17 	ldw	r2,-8(fp)
  8189c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8189c4:	e0bffb17 	ldw	r2,-20(fp)
} 
  8189c8:	e037883a 	mov	sp,fp
  8189cc:	df000017 	ldw	fp,0(sp)
  8189d0:	dec00104 	addi	sp,sp,4
  8189d4:	f800283a 	ret

008189d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8189d8:	defffa04 	addi	sp,sp,-24
  8189dc:	df000515 	stw	fp,20(sp)
  8189e0:	df000504 	addi	fp,sp,20
  8189e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8189e8:	0005303a 	rdctl	r2,status
  8189ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8189f0:	e0fffc17 	ldw	r3,-16(fp)
  8189f4:	00bfff84 	movi	r2,-2
  8189f8:	1884703a 	and	r2,r3,r2
  8189fc:	1001703a 	wrctl	status,r2
  
  return context;
  818a00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  818a04:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  818a08:	e0bfff17 	ldw	r2,-4(fp)
  818a0c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  818a10:	e0bffd17 	ldw	r2,-12(fp)
  818a14:	10800017 	ldw	r2,0(r2)
  818a18:	e0fffd17 	ldw	r3,-12(fp)
  818a1c:	18c00117 	ldw	r3,4(r3)
  818a20:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  818a24:	e0bffd17 	ldw	r2,-12(fp)
  818a28:	10800117 	ldw	r2,4(r2)
  818a2c:	e0fffd17 	ldw	r3,-12(fp)
  818a30:	18c00017 	ldw	r3,0(r3)
  818a34:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  818a38:	e0bffd17 	ldw	r2,-12(fp)
  818a3c:	e0fffd17 	ldw	r3,-12(fp)
  818a40:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  818a44:	e0bffd17 	ldw	r2,-12(fp)
  818a48:	e0fffd17 	ldw	r3,-12(fp)
  818a4c:	10c00015 	stw	r3,0(r2)
  818a50:	e0bffb17 	ldw	r2,-20(fp)
  818a54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  818a58:	e0bffe17 	ldw	r2,-8(fp)
  818a5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  818a60:	e037883a 	mov	sp,fp
  818a64:	df000017 	ldw	fp,0(sp)
  818a68:	dec00104 	addi	sp,sp,4
  818a6c:	f800283a 	ret

00818a70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  818a70:	defffb04 	addi	sp,sp,-20
  818a74:	dfc00415 	stw	ra,16(sp)
  818a78:	df000315 	stw	fp,12(sp)
  818a7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  818a80:	d0a01317 	ldw	r2,-32692(gp)
  818a84:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  818a88:	d0a78717 	ldw	r2,-25060(gp)
  818a8c:	10800044 	addi	r2,r2,1
  818a90:	d0a78715 	stw	r2,-25060(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  818a94:	00002e06 	br	818b50 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  818a98:	e0bffd17 	ldw	r2,-12(fp)
  818a9c:	10800017 	ldw	r2,0(r2)
  818aa0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  818aa4:	e0bffd17 	ldw	r2,-12(fp)
  818aa8:	10800403 	ldbu	r2,16(r2)
  818aac:	10803fcc 	andi	r2,r2,255
  818ab0:	10000426 	beq	r2,zero,818ac4 <alt_tick+0x54>
  818ab4:	d0a78717 	ldw	r2,-25060(gp)
  818ab8:	1000021e 	bne	r2,zero,818ac4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  818abc:	e0bffd17 	ldw	r2,-12(fp)
  818ac0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  818ac4:	e0bffd17 	ldw	r2,-12(fp)
  818ac8:	10800217 	ldw	r2,8(r2)
  818acc:	d0e78717 	ldw	r3,-25060(gp)
  818ad0:	18801d36 	bltu	r3,r2,818b48 <alt_tick+0xd8>
  818ad4:	e0bffd17 	ldw	r2,-12(fp)
  818ad8:	10800403 	ldbu	r2,16(r2)
  818adc:	10803fcc 	andi	r2,r2,255
  818ae0:	1000191e 	bne	r2,zero,818b48 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  818ae4:	e0bffd17 	ldw	r2,-12(fp)
  818ae8:	10800317 	ldw	r2,12(r2)
  818aec:	e0fffd17 	ldw	r3,-12(fp)
  818af0:	18c00517 	ldw	r3,20(r3)
  818af4:	1809883a 	mov	r4,r3
  818af8:	103ee83a 	callr	r2
  818afc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  818b00:	e0bfff17 	ldw	r2,-4(fp)
  818b04:	1000031e 	bne	r2,zero,818b14 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  818b08:	e13ffd17 	ldw	r4,-12(fp)
  818b0c:	08189d80 	call	8189d8 <alt_alarm_stop>
  818b10:	00000d06 	br	818b48 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  818b14:	e0bffd17 	ldw	r2,-12(fp)
  818b18:	10c00217 	ldw	r3,8(r2)
  818b1c:	e0bfff17 	ldw	r2,-4(fp)
  818b20:	1887883a 	add	r3,r3,r2
  818b24:	e0bffd17 	ldw	r2,-12(fp)
  818b28:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  818b2c:	e0bffd17 	ldw	r2,-12(fp)
  818b30:	10c00217 	ldw	r3,8(r2)
  818b34:	d0a78717 	ldw	r2,-25060(gp)
  818b38:	1880032e 	bgeu	r3,r2,818b48 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  818b3c:	e0bffd17 	ldw	r2,-12(fp)
  818b40:	00c00044 	movi	r3,1
  818b44:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  818b48:	e0bffe17 	ldw	r2,-8(fp)
  818b4c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  818b50:	e0fffd17 	ldw	r3,-12(fp)
  818b54:	d0a01304 	addi	r2,gp,-32692
  818b58:	18bfcf1e 	bne	r3,r2,818a98 <__alt_data_end+0xff818a98>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  818b5c:	0001883a 	nop
}
  818b60:	e037883a 	mov	sp,fp
  818b64:	dfc00117 	ldw	ra,4(sp)
  818b68:	df000017 	ldw	fp,0(sp)
  818b6c:	dec00204 	addi	sp,sp,8
  818b70:	f800283a 	ret

00818b74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  818b74:	defffe04 	addi	sp,sp,-8
  818b78:	dfc00115 	stw	ra,4(sp)
  818b7c:	df000015 	stw	fp,0(sp)
  818b80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  818b84:	008020b4 	movhi	r2,130
  818b88:	10bbd904 	addi	r2,r2,-4252
  818b8c:	10800017 	ldw	r2,0(r2)
  818b90:	10000526 	beq	r2,zero,818ba8 <alt_get_errno+0x34>
  818b94:	008020b4 	movhi	r2,130
  818b98:	10bbd904 	addi	r2,r2,-4252
  818b9c:	10800017 	ldw	r2,0(r2)
  818ba0:	103ee83a 	callr	r2
  818ba4:	00000206 	br	818bb0 <alt_get_errno+0x3c>
  818ba8:	008020b4 	movhi	r2,130
  818bac:	10834404 	addi	r2,r2,3344
}
  818bb0:	e037883a 	mov	sp,fp
  818bb4:	dfc00117 	ldw	ra,4(sp)
  818bb8:	df000017 	ldw	fp,0(sp)
  818bbc:	dec00204 	addi	sp,sp,8
  818bc0:	f800283a 	ret

00818bc4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  818bc4:	defff904 	addi	sp,sp,-28
  818bc8:	dfc00615 	stw	ra,24(sp)
  818bcc:	df000515 	stw	fp,20(sp)
  818bd0:	df000504 	addi	fp,sp,20
  818bd4:	e13ffd15 	stw	r4,-12(fp)
  818bd8:	e17ffe15 	stw	r5,-8(fp)
  818bdc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  818be0:	e0bffd17 	ldw	r2,-12(fp)
  818be4:	10000616 	blt	r2,zero,818c00 <write+0x3c>
  818be8:	e0bffd17 	ldw	r2,-12(fp)
  818bec:	10c00324 	muli	r3,r2,12
  818bf0:	008020b4 	movhi	r2,130
  818bf4:	10b6c004 	addi	r2,r2,-9472
  818bf8:	1885883a 	add	r2,r3,r2
  818bfc:	00000106 	br	818c04 <write+0x40>
  818c00:	0005883a 	mov	r2,zero
  818c04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  818c08:	e0bffb17 	ldw	r2,-20(fp)
  818c0c:	10002126 	beq	r2,zero,818c94 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  818c10:	e0bffb17 	ldw	r2,-20(fp)
  818c14:	10800217 	ldw	r2,8(r2)
  818c18:	108000cc 	andi	r2,r2,3
  818c1c:	10001826 	beq	r2,zero,818c80 <write+0xbc>
  818c20:	e0bffb17 	ldw	r2,-20(fp)
  818c24:	10800017 	ldw	r2,0(r2)
  818c28:	10800617 	ldw	r2,24(r2)
  818c2c:	10001426 	beq	r2,zero,818c80 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  818c30:	e0bffb17 	ldw	r2,-20(fp)
  818c34:	10800017 	ldw	r2,0(r2)
  818c38:	10800617 	ldw	r2,24(r2)
  818c3c:	e0ffff17 	ldw	r3,-4(fp)
  818c40:	e13ffb17 	ldw	r4,-20(fp)
  818c44:	e17ffe17 	ldw	r5,-8(fp)
  818c48:	180d883a 	mov	r6,r3
  818c4c:	103ee83a 	callr	r2
  818c50:	e0bffc15 	stw	r2,-16(fp)
  818c54:	e0bffc17 	ldw	r2,-16(fp)
  818c58:	1000070e 	bge	r2,zero,818c78 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  818c5c:	0818b740 	call	818b74 <alt_get_errno>
  818c60:	1007883a 	mov	r3,r2
  818c64:	e0bffc17 	ldw	r2,-16(fp)
  818c68:	0085c83a 	sub	r2,zero,r2
  818c6c:	18800015 	stw	r2,0(r3)
        return -1;
  818c70:	00bfffc4 	movi	r2,-1
  818c74:	00000c06 	br	818ca8 <write+0xe4>
      }
      return rval;
  818c78:	e0bffc17 	ldw	r2,-16(fp)
  818c7c:	00000a06 	br	818ca8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  818c80:	0818b740 	call	818b74 <alt_get_errno>
  818c84:	1007883a 	mov	r3,r2
  818c88:	00800344 	movi	r2,13
  818c8c:	18800015 	stw	r2,0(r3)
  818c90:	00000406 	br	818ca4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  818c94:	0818b740 	call	818b74 <alt_get_errno>
  818c98:	1007883a 	mov	r3,r2
  818c9c:	00801444 	movi	r2,81
  818ca0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  818ca4:	00bfffc4 	movi	r2,-1
}
  818ca8:	e037883a 	mov	sp,fp
  818cac:	dfc00117 	ldw	ra,4(sp)
  818cb0:	df000017 	ldw	fp,0(sp)
  818cb4:	dec00204 	addi	sp,sp,8
  818cb8:	f800283a 	ret

00818cbc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  818cbc:	defffd04 	addi	sp,sp,-12
  818cc0:	dfc00215 	stw	ra,8(sp)
  818cc4:	df000115 	stw	fp,4(sp)
  818cc8:	df000104 	addi	fp,sp,4
  818ccc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  818cd0:	e13fff17 	ldw	r4,-4(fp)
  818cd4:	014020b4 	movhi	r5,130
  818cd8:	297bd604 	addi	r5,r5,-4264
  818cdc:	081b8f80 	call	81b8f8 <alt_dev_llist_insert>
}
  818ce0:	e037883a 	mov	sp,fp
  818ce4:	dfc00117 	ldw	ra,4(sp)
  818ce8:	df000017 	ldw	fp,0(sp)
  818cec:	dec00204 	addi	sp,sp,8
  818cf0:	f800283a 	ret

00818cf4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  818cf4:	defffd04 	addi	sp,sp,-12
  818cf8:	dfc00215 	stw	ra,8(sp)
  818cfc:	df000115 	stw	fp,4(sp)
  818d00:	df000104 	addi	fp,sp,4
  818d04:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  818d08:	081be440 	call	81be44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  818d0c:	00800044 	movi	r2,1
  818d10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  818d14:	e037883a 	mov	sp,fp
  818d18:	dfc00117 	ldw	ra,4(sp)
  818d1c:	df000017 	ldw	fp,0(sp)
  818d20:	dec00204 	addi	sp,sp,8
  818d24:	f800283a 	ret

00818d28 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  818d28:	defffe04 	addi	sp,sp,-8
  818d2c:	dfc00115 	stw	ra,4(sp)
  818d30:	df000015 	stw	fp,0(sp)
  818d34:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  818d38:	01004034 	movhi	r4,256
  818d3c:	21042004 	addi	r4,r4,4224
  818d40:	000b883a 	mov	r5,zero
  818d44:	01800104 	movi	r6,4
  818d48:	01c0fa04 	movi	r7,1000
  818d4c:	081a7640 	call	81a764 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  818d50:	010020b4 	movhi	r4,130
  818d54:	21372a04 	addi	r4,r4,-9048
  818d58:	000b883a 	mov	r5,zero
  818d5c:	000d883a 	mov	r6,zero
  818d60:	0818f3c0 	call	818f3c <altera_avalon_jtag_uart_init>
  818d64:	010020b4 	movhi	r4,130
  818d68:	21372004 	addi	r4,r4,-9088
  818d6c:	0818cbc0 	call	818cbc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  818d70:	010020b4 	movhi	r4,130
  818d74:	213b4204 	addi	r4,r4,-4856
  818d78:	081a5540 	call	81a554 <altera_avalon_lcd_16207_init>
  818d7c:	010020b4 	movhi	r4,130
  818d80:	213b3804 	addi	r4,r4,-4896
  818d84:	0818cbc0 	call	818cbc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  818d88:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  818d8c:	010020b4 	movhi	r4,130
  818d90:	213b8a04 	addi	r4,r4,-4568
  818d94:	000b883a 	mov	r5,zero
  818d98:	018000c4 	movi	r6,3
  818d9c:	081a8f40 	call	81a8f4 <altera_avalon_uart_init>
  818da0:	010020b4 	movhi	r4,130
  818da4:	213b8004 	addi	r4,r4,-4608
  818da8:	0818cbc0 	call	818cbc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  818dac:	010020b4 	movhi	r4,130
  818db0:	213bb104 	addi	r4,r4,-4412
  818db4:	0818cbc0 	call	818cbc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  818db8:	010020b4 	movhi	r4,130
  818dbc:	213bbd04 	addi	r4,r4,-4364
  818dc0:	0818cbc0 	call	818cbc <alt_dev_reg>
}
  818dc4:	e037883a 	mov	sp,fp
  818dc8:	dfc00117 	ldw	ra,4(sp)
  818dcc:	df000017 	ldw	fp,0(sp)
  818dd0:	dec00204 	addi	sp,sp,8
  818dd4:	f800283a 	ret

00818dd8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  818dd8:	defffa04 	addi	sp,sp,-24
  818ddc:	dfc00515 	stw	ra,20(sp)
  818de0:	df000415 	stw	fp,16(sp)
  818de4:	df000404 	addi	fp,sp,16
  818de8:	e13ffd15 	stw	r4,-12(fp)
  818dec:	e17ffe15 	stw	r5,-8(fp)
  818df0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  818df4:	e0bffd17 	ldw	r2,-12(fp)
  818df8:	10800017 	ldw	r2,0(r2)
  818dfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  818e00:	e0bffc17 	ldw	r2,-16(fp)
  818e04:	10c00a04 	addi	r3,r2,40
  818e08:	e0bffd17 	ldw	r2,-12(fp)
  818e0c:	10800217 	ldw	r2,8(r2)
  818e10:	1809883a 	mov	r4,r3
  818e14:	e17ffe17 	ldw	r5,-8(fp)
  818e18:	e1bfff17 	ldw	r6,-4(fp)
  818e1c:	100f883a 	mov	r7,r2
  818e20:	08193f80 	call	8193f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  818e24:	e037883a 	mov	sp,fp
  818e28:	dfc00117 	ldw	ra,4(sp)
  818e2c:	df000017 	ldw	fp,0(sp)
  818e30:	dec00204 	addi	sp,sp,8
  818e34:	f800283a 	ret

00818e38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  818e38:	defffa04 	addi	sp,sp,-24
  818e3c:	dfc00515 	stw	ra,20(sp)
  818e40:	df000415 	stw	fp,16(sp)
  818e44:	df000404 	addi	fp,sp,16
  818e48:	e13ffd15 	stw	r4,-12(fp)
  818e4c:	e17ffe15 	stw	r5,-8(fp)
  818e50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  818e54:	e0bffd17 	ldw	r2,-12(fp)
  818e58:	10800017 	ldw	r2,0(r2)
  818e5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  818e60:	e0bffc17 	ldw	r2,-16(fp)
  818e64:	10c00a04 	addi	r3,r2,40
  818e68:	e0bffd17 	ldw	r2,-12(fp)
  818e6c:	10800217 	ldw	r2,8(r2)
  818e70:	1809883a 	mov	r4,r3
  818e74:	e17ffe17 	ldw	r5,-8(fp)
  818e78:	e1bfff17 	ldw	r6,-4(fp)
  818e7c:	100f883a 	mov	r7,r2
  818e80:	08196040 	call	819604 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  818e84:	e037883a 	mov	sp,fp
  818e88:	dfc00117 	ldw	ra,4(sp)
  818e8c:	df000017 	ldw	fp,0(sp)
  818e90:	dec00204 	addi	sp,sp,8
  818e94:	f800283a 	ret

00818e98 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  818e98:	defffc04 	addi	sp,sp,-16
  818e9c:	dfc00315 	stw	ra,12(sp)
  818ea0:	df000215 	stw	fp,8(sp)
  818ea4:	df000204 	addi	fp,sp,8
  818ea8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  818eac:	e0bfff17 	ldw	r2,-4(fp)
  818eb0:	10800017 	ldw	r2,0(r2)
  818eb4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  818eb8:	e0bffe17 	ldw	r2,-8(fp)
  818ebc:	10c00a04 	addi	r3,r2,40
  818ec0:	e0bfff17 	ldw	r2,-4(fp)
  818ec4:	10800217 	ldw	r2,8(r2)
  818ec8:	1809883a 	mov	r4,r3
  818ecc:	100b883a 	mov	r5,r2
  818ed0:	08192a40 	call	8192a4 <altera_avalon_jtag_uart_close>
}
  818ed4:	e037883a 	mov	sp,fp
  818ed8:	dfc00117 	ldw	ra,4(sp)
  818edc:	df000017 	ldw	fp,0(sp)
  818ee0:	dec00204 	addi	sp,sp,8
  818ee4:	f800283a 	ret

00818ee8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  818ee8:	defffa04 	addi	sp,sp,-24
  818eec:	dfc00515 	stw	ra,20(sp)
  818ef0:	df000415 	stw	fp,16(sp)
  818ef4:	df000404 	addi	fp,sp,16
  818ef8:	e13ffd15 	stw	r4,-12(fp)
  818efc:	e17ffe15 	stw	r5,-8(fp)
  818f00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  818f04:	e0bffd17 	ldw	r2,-12(fp)
  818f08:	10800017 	ldw	r2,0(r2)
  818f0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  818f10:	e0bffc17 	ldw	r2,-16(fp)
  818f14:	10800a04 	addi	r2,r2,40
  818f18:	1009883a 	mov	r4,r2
  818f1c:	e17ffe17 	ldw	r5,-8(fp)
  818f20:	e1bfff17 	ldw	r6,-4(fp)
  818f24:	081930c0 	call	81930c <altera_avalon_jtag_uart_ioctl>
}
  818f28:	e037883a 	mov	sp,fp
  818f2c:	dfc00117 	ldw	ra,4(sp)
  818f30:	df000017 	ldw	fp,0(sp)
  818f34:	dec00204 	addi	sp,sp,8
  818f38:	f800283a 	ret

00818f3c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  818f3c:	defffb04 	addi	sp,sp,-20
  818f40:	dfc00415 	stw	ra,16(sp)
  818f44:	df000315 	stw	fp,12(sp)
  818f48:	df000304 	addi	fp,sp,12
  818f4c:	e13ffd15 	stw	r4,-12(fp)
  818f50:	e17ffe15 	stw	r5,-8(fp)
  818f54:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  818f58:	e0bffd17 	ldw	r2,-12(fp)
  818f5c:	00c00044 	movi	r3,1
  818f60:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  818f64:	e0bffd17 	ldw	r2,-12(fp)
  818f68:	10800017 	ldw	r2,0(r2)
  818f6c:	10800104 	addi	r2,r2,4
  818f70:	1007883a 	mov	r3,r2
  818f74:	e0bffd17 	ldw	r2,-12(fp)
  818f78:	10800817 	ldw	r2,32(r2)
  818f7c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  818f80:	e0bfff17 	ldw	r2,-4(fp)
  818f84:	1009883a 	mov	r4,r2
  818f88:	e17ffd17 	ldw	r5,-12(fp)
  818f8c:	018020b4 	movhi	r6,130
  818f90:	31a3fd04 	addi	r6,r6,-28684
  818f94:	0817d380 	call	817d38 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  818f98:	e0bffd17 	ldw	r2,-12(fp)
  818f9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  818fa0:	e0bffd17 	ldw	r2,-12(fp)
  818fa4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  818fa8:	008020b4 	movhi	r2,130
  818fac:	10834f04 	addi	r2,r2,3388
  818fb0:	10800017 	ldw	r2,0(r2)
  818fb4:	1809883a 	mov	r4,r3
  818fb8:	100b883a 	mov	r5,r2
  818fbc:	018020b4 	movhi	r6,130
  818fc0:	31a47f04 	addi	r6,r6,-28164
  818fc4:	e1fffd17 	ldw	r7,-12(fp)
  818fc8:	08179ac0 	call	8179ac <alt_alarm_start>
  818fcc:	1000040e 	bge	r2,zero,818fe0 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  818fd0:	e0fffd17 	ldw	r3,-12(fp)
  818fd4:	00a00034 	movhi	r2,32768
  818fd8:	10bfffc4 	addi	r2,r2,-1
  818fdc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  818fe0:	e037883a 	mov	sp,fp
  818fe4:	dfc00117 	ldw	ra,4(sp)
  818fe8:	df000017 	ldw	fp,0(sp)
  818fec:	dec00204 	addi	sp,sp,8
  818ff0:	f800283a 	ret

00818ff4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  818ff4:	defff704 	addi	sp,sp,-36
  818ff8:	df000815 	stw	fp,32(sp)
  818ffc:	df000804 	addi	fp,sp,32
  819000:	e13ffe15 	stw	r4,-8(fp)
  819004:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  819008:	e0bffe17 	ldw	r2,-8(fp)
  81900c:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  819010:	e0bffa17 	ldw	r2,-24(fp)
  819014:	10800017 	ldw	r2,0(r2)
  819018:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81901c:	e0bffb17 	ldw	r2,-20(fp)
  819020:	10800104 	addi	r2,r2,4
  819024:	10800037 	ldwio	r2,0(r2)
  819028:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  81902c:	e0bffc17 	ldw	r2,-16(fp)
  819030:	1080c00c 	andi	r2,r2,768
  819034:	1000011e 	bne	r2,zero,81903c <altera_avalon_jtag_uart_irq+0x48>
      break;
  819038:	00006c06 	br	8191ec <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81903c:	e0bffc17 	ldw	r2,-16(fp)
  819040:	1080400c 	andi	r2,r2,256
  819044:	10003426 	beq	r2,zero,819118 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  819048:	00800074 	movhi	r2,1
  81904c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819050:	e0bffa17 	ldw	r2,-24(fp)
  819054:	10800a17 	ldw	r2,40(r2)
  819058:	10800044 	addi	r2,r2,1
  81905c:	1081ffcc 	andi	r2,r2,2047
  819060:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  819064:	e0bffa17 	ldw	r2,-24(fp)
  819068:	10c00b17 	ldw	r3,44(r2)
  81906c:	e0bffd17 	ldw	r2,-12(fp)
  819070:	1880011e 	bne	r3,r2,819078 <altera_avalon_jtag_uart_irq+0x84>
          break;
  819074:	00001606 	br	8190d0 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  819078:	e0bffb17 	ldw	r2,-20(fp)
  81907c:	10800037 	ldwio	r2,0(r2)
  819080:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  819084:	e0bff817 	ldw	r2,-32(fp)
  819088:	10a0000c 	andi	r2,r2,32768
  81908c:	1000011e 	bne	r2,zero,819094 <altera_avalon_jtag_uart_irq+0xa0>
          break;
  819090:	00000f06 	br	8190d0 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  819094:	e0bffa17 	ldw	r2,-24(fp)
  819098:	10800a17 	ldw	r2,40(r2)
  81909c:	e0fff817 	ldw	r3,-32(fp)
  8190a0:	1809883a 	mov	r4,r3
  8190a4:	e0fffa17 	ldw	r3,-24(fp)
  8190a8:	1885883a 	add	r2,r3,r2
  8190ac:	10800e04 	addi	r2,r2,56
  8190b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8190b4:	e0bffa17 	ldw	r2,-24(fp)
  8190b8:	10800a17 	ldw	r2,40(r2)
  8190bc:	10800044 	addi	r2,r2,1
  8190c0:	10c1ffcc 	andi	r3,r2,2047
  8190c4:	e0bffa17 	ldw	r2,-24(fp)
  8190c8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8190cc:	003fe006 	br	819050 <__alt_data_end+0xff819050>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8190d0:	e0bff817 	ldw	r2,-32(fp)
  8190d4:	10bfffec 	andhi	r2,r2,65535
  8190d8:	10000f26 	beq	r2,zero,819118 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8190dc:	e0bffa17 	ldw	r2,-24(fp)
  8190e0:	10c00817 	ldw	r3,32(r2)
  8190e4:	00bfff84 	movi	r2,-2
  8190e8:	1886703a 	and	r3,r3,r2
  8190ec:	e0bffa17 	ldw	r2,-24(fp)
  8190f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8190f4:	e0bffb17 	ldw	r2,-20(fp)
  8190f8:	10800104 	addi	r2,r2,4
  8190fc:	1007883a 	mov	r3,r2
  819100:	e0bffa17 	ldw	r2,-24(fp)
  819104:	10800817 	ldw	r2,32(r2)
  819108:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81910c:	e0bffb17 	ldw	r2,-20(fp)
  819110:	10800104 	addi	r2,r2,4
  819114:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  819118:	e0bffc17 	ldw	r2,-16(fp)
  81911c:	1080800c 	andi	r2,r2,512
  819120:	10003126 	beq	r2,zero,8191e8 <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  819124:	e0bffc17 	ldw	r2,-16(fp)
  819128:	1004d43a 	srli	r2,r2,16
  81912c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  819130:	00001406 	br	819184 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  819134:	e0bffb17 	ldw	r2,-20(fp)
  819138:	e0fffa17 	ldw	r3,-24(fp)
  81913c:	18c00d17 	ldw	r3,52(r3)
  819140:	e13ffa17 	ldw	r4,-24(fp)
  819144:	20c7883a 	add	r3,r4,r3
  819148:	18c20e04 	addi	r3,r3,2104
  81914c:	18c00003 	ldbu	r3,0(r3)
  819150:	18c03fcc 	andi	r3,r3,255
  819154:	18c0201c 	xori	r3,r3,128
  819158:	18ffe004 	addi	r3,r3,-128
  81915c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  819160:	e0bffa17 	ldw	r2,-24(fp)
  819164:	10800d17 	ldw	r2,52(r2)
  819168:	10800044 	addi	r2,r2,1
  81916c:	10c1ffcc 	andi	r3,r2,2047
  819170:	e0bffa17 	ldw	r2,-24(fp)
  819174:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  819178:	e0bff917 	ldw	r2,-28(fp)
  81917c:	10bfffc4 	addi	r2,r2,-1
  819180:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  819184:	e0bff917 	ldw	r2,-28(fp)
  819188:	10000526 	beq	r2,zero,8191a0 <altera_avalon_jtag_uart_irq+0x1ac>
  81918c:	e0bffa17 	ldw	r2,-24(fp)
  819190:	10c00d17 	ldw	r3,52(r2)
  819194:	e0bffa17 	ldw	r2,-24(fp)
  819198:	10800c17 	ldw	r2,48(r2)
  81919c:	18bfe51e 	bne	r3,r2,819134 <__alt_data_end+0xff819134>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8191a0:	e0bff917 	ldw	r2,-28(fp)
  8191a4:	10001026 	beq	r2,zero,8191e8 <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8191a8:	e0bffa17 	ldw	r2,-24(fp)
  8191ac:	10c00817 	ldw	r3,32(r2)
  8191b0:	00bfff44 	movi	r2,-3
  8191b4:	1886703a 	and	r3,r3,r2
  8191b8:	e0bffa17 	ldw	r2,-24(fp)
  8191bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8191c0:	e0bffa17 	ldw	r2,-24(fp)
  8191c4:	10800017 	ldw	r2,0(r2)
  8191c8:	10800104 	addi	r2,r2,4
  8191cc:	1007883a 	mov	r3,r2
  8191d0:	e0bffa17 	ldw	r2,-24(fp)
  8191d4:	10800817 	ldw	r2,32(r2)
  8191d8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8191dc:	e0bffb17 	ldw	r2,-20(fp)
  8191e0:	10800104 	addi	r2,r2,4
  8191e4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8191e8:	003f8c06 	br	81901c <__alt_data_end+0xff81901c>
}
  8191ec:	e037883a 	mov	sp,fp
  8191f0:	df000017 	ldw	fp,0(sp)
  8191f4:	dec00104 	addi	sp,sp,4
  8191f8:	f800283a 	ret

008191fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8191fc:	defff804 	addi	sp,sp,-32
  819200:	df000715 	stw	fp,28(sp)
  819204:	df000704 	addi	fp,sp,28
  819208:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  81920c:	e0bffb17 	ldw	r2,-20(fp)
  819210:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  819214:	e0bff917 	ldw	r2,-28(fp)
  819218:	10800017 	ldw	r2,0(r2)
  81921c:	10800104 	addi	r2,r2,4
  819220:	10800037 	ldwio	r2,0(r2)
  819224:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  819228:	e0bffa17 	ldw	r2,-24(fp)
  81922c:	1081000c 	andi	r2,r2,1024
  819230:	10000b26 	beq	r2,zero,819260 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  819234:	e0bff917 	ldw	r2,-28(fp)
  819238:	10800017 	ldw	r2,0(r2)
  81923c:	10800104 	addi	r2,r2,4
  819240:	1007883a 	mov	r3,r2
  819244:	e0bff917 	ldw	r2,-28(fp)
  819248:	10800817 	ldw	r2,32(r2)
  81924c:	10810014 	ori	r2,r2,1024
  819250:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  819254:	e0bff917 	ldw	r2,-28(fp)
  819258:	10000915 	stw	zero,36(r2)
  81925c:	00000a06 	br	819288 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  819260:	e0bff917 	ldw	r2,-28(fp)
  819264:	10c00917 	ldw	r3,36(r2)
  819268:	00a00034 	movhi	r2,32768
  81926c:	10bfff04 	addi	r2,r2,-4
  819270:	10c00536 	bltu	r2,r3,819288 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  819274:	e0bff917 	ldw	r2,-28(fp)
  819278:	10800917 	ldw	r2,36(r2)
  81927c:	10c00044 	addi	r3,r2,1
  819280:	e0bff917 	ldw	r2,-28(fp)
  819284:	10c00915 	stw	r3,36(r2)
  819288:	008020b4 	movhi	r2,130
  81928c:	10834f04 	addi	r2,r2,3388
  819290:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  819294:	e037883a 	mov	sp,fp
  819298:	df000017 	ldw	fp,0(sp)
  81929c:	dec00104 	addi	sp,sp,4
  8192a0:	f800283a 	ret

008192a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8192a4:	defffd04 	addi	sp,sp,-12
  8192a8:	df000215 	stw	fp,8(sp)
  8192ac:	df000204 	addi	fp,sp,8
  8192b0:	e13ffe15 	stw	r4,-8(fp)
  8192b4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8192b8:	00000506 	br	8192d0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8192bc:	e0bfff17 	ldw	r2,-4(fp)
  8192c0:	1090000c 	andi	r2,r2,16384
  8192c4:	10000226 	beq	r2,zero,8192d0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8192c8:	00bffd44 	movi	r2,-11
  8192cc:	00000b06 	br	8192fc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8192d0:	e0bffe17 	ldw	r2,-8(fp)
  8192d4:	10c00d17 	ldw	r3,52(r2)
  8192d8:	e0bffe17 	ldw	r2,-8(fp)
  8192dc:	10800c17 	ldw	r2,48(r2)
  8192e0:	18800526 	beq	r3,r2,8192f8 <altera_avalon_jtag_uart_close+0x54>
  8192e4:	e0bffe17 	ldw	r2,-8(fp)
  8192e8:	10c00917 	ldw	r3,36(r2)
  8192ec:	e0bffe17 	ldw	r2,-8(fp)
  8192f0:	10800117 	ldw	r2,4(r2)
  8192f4:	18bff136 	bltu	r3,r2,8192bc <__alt_data_end+0xff8192bc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8192f8:	0005883a 	mov	r2,zero
}
  8192fc:	e037883a 	mov	sp,fp
  819300:	df000017 	ldw	fp,0(sp)
  819304:	dec00104 	addi	sp,sp,4
  819308:	f800283a 	ret

0081930c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  81930c:	defffa04 	addi	sp,sp,-24
  819310:	df000515 	stw	fp,20(sp)
  819314:	df000504 	addi	fp,sp,20
  819318:	e13ffd15 	stw	r4,-12(fp)
  81931c:	e17ffe15 	stw	r5,-8(fp)
  819320:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  819324:	00bff9c4 	movi	r2,-25
  819328:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  81932c:	e0bffe17 	ldw	r2,-8(fp)
  819330:	10da8060 	cmpeqi	r3,r2,27137
  819334:	1800031e 	bne	r3,zero,819344 <altera_avalon_jtag_uart_ioctl+0x38>
  819338:	109a80a0 	cmpeqi	r2,r2,27138
  81933c:	1000191e 	bne	r2,zero,8193a4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  819340:	00002806 	br	8193e4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  819344:	e0bffd17 	ldw	r2,-12(fp)
  819348:	10c00117 	ldw	r3,4(r2)
  81934c:	00a00034 	movhi	r2,32768
  819350:	10bfffc4 	addi	r2,r2,-1
  819354:	18801226 	beq	r3,r2,8193a0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  819358:	e0bfff17 	ldw	r2,-4(fp)
  81935c:	10800017 	ldw	r2,0(r2)
  819360:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  819364:	e0bffc17 	ldw	r2,-16(fp)
  819368:	10800090 	cmplti	r2,r2,2
  81936c:	1000061e 	bne	r2,zero,819388 <altera_avalon_jtag_uart_ioctl+0x7c>
  819370:	e0fffc17 	ldw	r3,-16(fp)
  819374:	00a00034 	movhi	r2,32768
  819378:	10bfffc4 	addi	r2,r2,-1
  81937c:	18800226 	beq	r3,r2,819388 <altera_avalon_jtag_uart_ioctl+0x7c>
  819380:	e0bffc17 	ldw	r2,-16(fp)
  819384:	00000206 	br	819390 <altera_avalon_jtag_uart_ioctl+0x84>
  819388:	00a00034 	movhi	r2,32768
  81938c:	10bfff84 	addi	r2,r2,-2
  819390:	e0fffd17 	ldw	r3,-12(fp)
  819394:	18800115 	stw	r2,4(r3)
      rc = 0;
  819398:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  81939c:	00001106 	br	8193e4 <altera_avalon_jtag_uart_ioctl+0xd8>
  8193a0:	00001006 	br	8193e4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8193a4:	e0bffd17 	ldw	r2,-12(fp)
  8193a8:	10c00117 	ldw	r3,4(r2)
  8193ac:	00a00034 	movhi	r2,32768
  8193b0:	10bfffc4 	addi	r2,r2,-1
  8193b4:	18800a26 	beq	r3,r2,8193e0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8193b8:	e0bffd17 	ldw	r2,-12(fp)
  8193bc:	10c00917 	ldw	r3,36(r2)
  8193c0:	e0bffd17 	ldw	r2,-12(fp)
  8193c4:	10800117 	ldw	r2,4(r2)
  8193c8:	1885803a 	cmpltu	r2,r3,r2
  8193cc:	10c03fcc 	andi	r3,r2,255
  8193d0:	e0bfff17 	ldw	r2,-4(fp)
  8193d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8193d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8193dc:	00000006 	br	8193e0 <altera_avalon_jtag_uart_ioctl+0xd4>
  8193e0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8193e4:	e0bffb17 	ldw	r2,-20(fp)
}
  8193e8:	e037883a 	mov	sp,fp
  8193ec:	df000017 	ldw	fp,0(sp)
  8193f0:	dec00104 	addi	sp,sp,4
  8193f4:	f800283a 	ret

008193f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8193f8:	defff304 	addi	sp,sp,-52
  8193fc:	dfc00c15 	stw	ra,48(sp)
  819400:	df000b15 	stw	fp,44(sp)
  819404:	df000b04 	addi	fp,sp,44
  819408:	e13ffc15 	stw	r4,-16(fp)
  81940c:	e17ffd15 	stw	r5,-12(fp)
  819410:	e1bffe15 	stw	r6,-8(fp)
  819414:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  819418:	e0bffd17 	ldw	r2,-12(fp)
  81941c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  819420:	00004906 	br	819548 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  819424:	e0bffc17 	ldw	r2,-16(fp)
  819428:	10800a17 	ldw	r2,40(r2)
  81942c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  819430:	e0bffc17 	ldw	r2,-16(fp)
  819434:	10800b17 	ldw	r2,44(r2)
  819438:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  81943c:	e0fff717 	ldw	r3,-36(fp)
  819440:	e0bff817 	ldw	r2,-32(fp)
  819444:	18800536 	bltu	r3,r2,81945c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  819448:	e0fff717 	ldw	r3,-36(fp)
  81944c:	e0bff817 	ldw	r2,-32(fp)
  819450:	1885c83a 	sub	r2,r3,r2
  819454:	e0bff615 	stw	r2,-40(fp)
  819458:	00000406 	br	81946c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81945c:	00c20004 	movi	r3,2048
  819460:	e0bff817 	ldw	r2,-32(fp)
  819464:	1885c83a 	sub	r2,r3,r2
  819468:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81946c:	e0bff617 	ldw	r2,-40(fp)
  819470:	1000011e 	bne	r2,zero,819478 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  819474:	00001d06 	br	8194ec <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  819478:	e0fffe17 	ldw	r3,-8(fp)
  81947c:	e0bff617 	ldw	r2,-40(fp)
  819480:	1880022e 	bgeu	r3,r2,81948c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  819484:	e0bffe17 	ldw	r2,-8(fp)
  819488:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81948c:	e0bff817 	ldw	r2,-32(fp)
  819490:	10800e04 	addi	r2,r2,56
  819494:	e0fffc17 	ldw	r3,-16(fp)
  819498:	1885883a 	add	r2,r3,r2
  81949c:	e13ff517 	ldw	r4,-44(fp)
  8194a0:	100b883a 	mov	r5,r2
  8194a4:	e1bff617 	ldw	r6,-40(fp)
  8194a8:	081133c0 	call	81133c <memcpy>
      ptr   += n;
  8194ac:	e0fff517 	ldw	r3,-44(fp)
  8194b0:	e0bff617 	ldw	r2,-40(fp)
  8194b4:	1885883a 	add	r2,r3,r2
  8194b8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8194bc:	e0fffe17 	ldw	r3,-8(fp)
  8194c0:	e0bff617 	ldw	r2,-40(fp)
  8194c4:	1885c83a 	sub	r2,r3,r2
  8194c8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8194cc:	e0fff817 	ldw	r3,-32(fp)
  8194d0:	e0bff617 	ldw	r2,-40(fp)
  8194d4:	1885883a 	add	r2,r3,r2
  8194d8:	10c1ffcc 	andi	r3,r2,2047
  8194dc:	e0bffc17 	ldw	r2,-16(fp)
  8194e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8194e4:	e0bffe17 	ldw	r2,-8(fp)
  8194e8:	00bfce16 	blt	zero,r2,819424 <__alt_data_end+0xff819424>

    /* If we read any data then return it */
    if (ptr != buffer)
  8194ec:	e0fff517 	ldw	r3,-44(fp)
  8194f0:	e0bffd17 	ldw	r2,-12(fp)
  8194f4:	18800126 	beq	r3,r2,8194fc <altera_avalon_jtag_uart_read+0x104>
      break;
  8194f8:	00001506 	br	819550 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8194fc:	e0bfff17 	ldw	r2,-4(fp)
  819500:	1090000c 	andi	r2,r2,16384
  819504:	10000126 	beq	r2,zero,81950c <altera_avalon_jtag_uart_read+0x114>
      break;
  819508:	00001106 	br	819550 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  81950c:	0001883a 	nop
  819510:	e0bffc17 	ldw	r2,-16(fp)
  819514:	10c00a17 	ldw	r3,40(r2)
  819518:	e0bff717 	ldw	r2,-36(fp)
  81951c:	1880051e 	bne	r3,r2,819534 <altera_avalon_jtag_uart_read+0x13c>
  819520:	e0bffc17 	ldw	r2,-16(fp)
  819524:	10c00917 	ldw	r3,36(r2)
  819528:	e0bffc17 	ldw	r2,-16(fp)
  81952c:	10800117 	ldw	r2,4(r2)
  819530:	18bff736 	bltu	r3,r2,819510 <__alt_data_end+0xff819510>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  819534:	e0bffc17 	ldw	r2,-16(fp)
  819538:	10c00a17 	ldw	r3,40(r2)
  81953c:	e0bff717 	ldw	r2,-36(fp)
  819540:	1880011e 	bne	r3,r2,819548 <altera_avalon_jtag_uart_read+0x150>
      break;
  819544:	00000206 	br	819550 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  819548:	e0bffe17 	ldw	r2,-8(fp)
  81954c:	00bfb516 	blt	zero,r2,819424 <__alt_data_end+0xff819424>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  819550:	e0fff517 	ldw	r3,-44(fp)
  819554:	e0bffd17 	ldw	r2,-12(fp)
  819558:	18801826 	beq	r3,r2,8195bc <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81955c:	0005303a 	rdctl	r2,status
  819560:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819564:	e0fffa17 	ldw	r3,-24(fp)
  819568:	00bfff84 	movi	r2,-2
  81956c:	1884703a 	and	r2,r3,r2
  819570:	1001703a 	wrctl	status,r2
  
  return context;
  819574:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  819578:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81957c:	e0bffc17 	ldw	r2,-16(fp)
  819580:	10800817 	ldw	r2,32(r2)
  819584:	10c00054 	ori	r3,r2,1
  819588:	e0bffc17 	ldw	r2,-16(fp)
  81958c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  819590:	e0bffc17 	ldw	r2,-16(fp)
  819594:	10800017 	ldw	r2,0(r2)
  819598:	10800104 	addi	r2,r2,4
  81959c:	1007883a 	mov	r3,r2
  8195a0:	e0bffc17 	ldw	r2,-16(fp)
  8195a4:	10800817 	ldw	r2,32(r2)
  8195a8:	18800035 	stwio	r2,0(r3)
  8195ac:	e0bff917 	ldw	r2,-28(fp)
  8195b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8195b4:	e0bffb17 	ldw	r2,-20(fp)
  8195b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8195bc:	e0fff517 	ldw	r3,-44(fp)
  8195c0:	e0bffd17 	ldw	r2,-12(fp)
  8195c4:	18800426 	beq	r3,r2,8195d8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
  8195c8:	e0fff517 	ldw	r3,-44(fp)
  8195cc:	e0bffd17 	ldw	r2,-12(fp)
  8195d0:	1885c83a 	sub	r2,r3,r2
  8195d4:	00000606 	br	8195f0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
  8195d8:	e0bfff17 	ldw	r2,-4(fp)
  8195dc:	1090000c 	andi	r2,r2,16384
  8195e0:	10000226 	beq	r2,zero,8195ec <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
  8195e4:	00bffd44 	movi	r2,-11
  8195e8:	00000106 	br	8195f0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
  8195ec:	00bffec4 	movi	r2,-5
}
  8195f0:	e037883a 	mov	sp,fp
  8195f4:	dfc00117 	ldw	ra,4(sp)
  8195f8:	df000017 	ldw	fp,0(sp)
  8195fc:	dec00204 	addi	sp,sp,8
  819600:	f800283a 	ret

00819604 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  819604:	defff304 	addi	sp,sp,-52
  819608:	dfc00c15 	stw	ra,48(sp)
  81960c:	df000b15 	stw	fp,44(sp)
  819610:	df000b04 	addi	fp,sp,44
  819614:	e13ffc15 	stw	r4,-16(fp)
  819618:	e17ffd15 	stw	r5,-12(fp)
  81961c:	e1bffe15 	stw	r6,-8(fp)
  819620:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  819624:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  819628:	e0bffd17 	ldw	r2,-12(fp)
  81962c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  819630:	00003806 	br	819714 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  819634:	e0bffc17 	ldw	r2,-16(fp)
  819638:	10800c17 	ldw	r2,48(r2)
  81963c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  819640:	e0bffc17 	ldw	r2,-16(fp)
  819644:	10800d17 	ldw	r2,52(r2)
  819648:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  81964c:	e0fff817 	ldw	r3,-32(fp)
  819650:	e0bff517 	ldw	r2,-44(fp)
  819654:	1880062e 	bgeu	r3,r2,819670 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  819658:	e0fff517 	ldw	r3,-44(fp)
  81965c:	e0bff817 	ldw	r2,-32(fp)
  819660:	1885c83a 	sub	r2,r3,r2
  819664:	10bfffc4 	addi	r2,r2,-1
  819668:	e0bff615 	stw	r2,-40(fp)
  81966c:	00000b06 	br	81969c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  819670:	e0bff517 	ldw	r2,-44(fp)
  819674:	10000526 	beq	r2,zero,81968c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  819678:	00c20004 	movi	r3,2048
  81967c:	e0bff817 	ldw	r2,-32(fp)
  819680:	1885c83a 	sub	r2,r3,r2
  819684:	e0bff615 	stw	r2,-40(fp)
  819688:	00000406 	br	81969c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81968c:	00c1ffc4 	movi	r3,2047
  819690:	e0bff817 	ldw	r2,-32(fp)
  819694:	1885c83a 	sub	r2,r3,r2
  819698:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81969c:	e0bff617 	ldw	r2,-40(fp)
  8196a0:	1000011e 	bne	r2,zero,8196a8 <altera_avalon_jtag_uart_write+0xa4>
        break;
  8196a4:	00001d06 	br	81971c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
  8196a8:	e0fffe17 	ldw	r3,-8(fp)
  8196ac:	e0bff617 	ldw	r2,-40(fp)
  8196b0:	1880022e 	bgeu	r3,r2,8196bc <altera_avalon_jtag_uart_write+0xb8>
        n = count;
  8196b4:	e0bffe17 	ldw	r2,-8(fp)
  8196b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8196bc:	e0bff817 	ldw	r2,-32(fp)
  8196c0:	10820e04 	addi	r2,r2,2104
  8196c4:	e0fffc17 	ldw	r3,-16(fp)
  8196c8:	1885883a 	add	r2,r3,r2
  8196cc:	1009883a 	mov	r4,r2
  8196d0:	e17ffd17 	ldw	r5,-12(fp)
  8196d4:	e1bff617 	ldw	r6,-40(fp)
  8196d8:	081133c0 	call	81133c <memcpy>
      ptr   += n;
  8196dc:	e0fffd17 	ldw	r3,-12(fp)
  8196e0:	e0bff617 	ldw	r2,-40(fp)
  8196e4:	1885883a 	add	r2,r3,r2
  8196e8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8196ec:	e0fffe17 	ldw	r3,-8(fp)
  8196f0:	e0bff617 	ldw	r2,-40(fp)
  8196f4:	1885c83a 	sub	r2,r3,r2
  8196f8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8196fc:	e0fff817 	ldw	r3,-32(fp)
  819700:	e0bff617 	ldw	r2,-40(fp)
  819704:	1885883a 	add	r2,r3,r2
  819708:	10c1ffcc 	andi	r3,r2,2047
  81970c:	e0bffc17 	ldw	r2,-16(fp)
  819710:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  819714:	e0bffe17 	ldw	r2,-8(fp)
  819718:	00bfc616 	blt	zero,r2,819634 <__alt_data_end+0xff819634>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81971c:	0005303a 	rdctl	r2,status
  819720:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  819724:	e0fffa17 	ldw	r3,-24(fp)
  819728:	00bfff84 	movi	r2,-2
  81972c:	1884703a 	and	r2,r3,r2
  819730:	1001703a 	wrctl	status,r2
  
  return context;
  819734:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  819738:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81973c:	e0bffc17 	ldw	r2,-16(fp)
  819740:	10800817 	ldw	r2,32(r2)
  819744:	10c00094 	ori	r3,r2,2
  819748:	e0bffc17 	ldw	r2,-16(fp)
  81974c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  819750:	e0bffc17 	ldw	r2,-16(fp)
  819754:	10800017 	ldw	r2,0(r2)
  819758:	10800104 	addi	r2,r2,4
  81975c:	1007883a 	mov	r3,r2
  819760:	e0bffc17 	ldw	r2,-16(fp)
  819764:	10800817 	ldw	r2,32(r2)
  819768:	18800035 	stwio	r2,0(r3)
  81976c:	e0bff917 	ldw	r2,-28(fp)
  819770:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  819774:	e0bffb17 	ldw	r2,-20(fp)
  819778:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81977c:	e0bffe17 	ldw	r2,-8(fp)
  819780:	0080120e 	bge	zero,r2,8197cc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  819784:	e0bfff17 	ldw	r2,-4(fp)
  819788:	1090000c 	andi	r2,r2,16384
  81978c:	10000126 	beq	r2,zero,819794 <altera_avalon_jtag_uart_write+0x190>
        break;
  819790:	00001006 	br	8197d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  819794:	0001883a 	nop
  819798:	e0bffc17 	ldw	r2,-16(fp)
  81979c:	10c00d17 	ldw	r3,52(r2)
  8197a0:	e0bff517 	ldw	r2,-44(fp)
  8197a4:	1880051e 	bne	r3,r2,8197bc <altera_avalon_jtag_uart_write+0x1b8>
  8197a8:	e0bffc17 	ldw	r2,-16(fp)
  8197ac:	10c00917 	ldw	r3,36(r2)
  8197b0:	e0bffc17 	ldw	r2,-16(fp)
  8197b4:	10800117 	ldw	r2,4(r2)
  8197b8:	18bff736 	bltu	r3,r2,819798 <__alt_data_end+0xff819798>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8197bc:	e0bffc17 	ldw	r2,-16(fp)
  8197c0:	10800917 	ldw	r2,36(r2)
  8197c4:	10000126 	beq	r2,zero,8197cc <altera_avalon_jtag_uart_write+0x1c8>
         break;
  8197c8:	00000206 	br	8197d4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  8197cc:	e0bffe17 	ldw	r2,-8(fp)
  8197d0:	00bf9716 	blt	zero,r2,819630 <__alt_data_end+0xff819630>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8197d4:	e0fffd17 	ldw	r3,-12(fp)
  8197d8:	e0bff717 	ldw	r2,-36(fp)
  8197dc:	18800426 	beq	r3,r2,8197f0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  8197e0:	e0fffd17 	ldw	r3,-12(fp)
  8197e4:	e0bff717 	ldw	r2,-36(fp)
  8197e8:	1885c83a 	sub	r2,r3,r2
  8197ec:	00000606 	br	819808 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  8197f0:	e0bfff17 	ldw	r2,-4(fp)
  8197f4:	1090000c 	andi	r2,r2,16384
  8197f8:	10000226 	beq	r2,zero,819804 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  8197fc:	00bffd44 	movi	r2,-11
  819800:	00000106 	br	819808 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  819804:	00bffec4 	movi	r2,-5
}
  819808:	e037883a 	mov	sp,fp
  81980c:	dfc00117 	ldw	ra,4(sp)
  819810:	df000017 	ldw	fp,0(sp)
  819814:	dec00204 	addi	sp,sp,8
  819818:	f800283a 	ret

0081981c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  81981c:	defffa04 	addi	sp,sp,-24
  819820:	dfc00515 	stw	ra,20(sp)
  819824:	df000415 	stw	fp,16(sp)
  819828:	df000404 	addi	fp,sp,16
  81982c:	e13ffe15 	stw	r4,-8(fp)
  819830:	2805883a 	mov	r2,r5
  819834:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  819838:	e0bffe17 	ldw	r2,-8(fp)
  81983c:	10800017 	ldw	r2,0(r2)
  819840:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  819844:	008003f4 	movhi	r2,15
  819848:	10909004 	addi	r2,r2,16960
  81984c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  819850:	e0bffe17 	ldw	r2,-8(fp)
  819854:	10800803 	ldbu	r2,32(r2)
  819858:	10803fcc 	andi	r2,r2,255
  81985c:	1080201c 	xori	r2,r2,128
  819860:	10bfe004 	addi	r2,r2,-128
  819864:	10000126 	beq	r2,zero,81986c <lcd_write_command+0x50>
    return;
  819868:	00001406 	br	8198bc <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81986c:	00000906 	br	819894 <lcd_write_command+0x78>
    if (--i == 0)
  819870:	e0bffc17 	ldw	r2,-16(fp)
  819874:	10bfffc4 	addi	r2,r2,-1
  819878:	e0bffc15 	stw	r2,-16(fp)
  81987c:	e0bffc17 	ldw	r2,-16(fp)
  819880:	1000041e 	bne	r2,zero,819894 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  819884:	e0bffe17 	ldw	r2,-8(fp)
  819888:	00c00044 	movi	r3,1
  81988c:	10c00805 	stb	r3,32(r2)
      return;
  819890:	00000a06 	br	8198bc <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  819894:	e0bffd17 	ldw	r2,-12(fp)
  819898:	10800104 	addi	r2,r2,4
  81989c:	10800037 	ldwio	r2,0(r2)
  8198a0:	1080200c 	andi	r2,r2,128
  8198a4:	103ff21e 	bne	r2,zero,819870 <__alt_data_end+0xff819870>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8198a8:	01001904 	movi	r4,100
  8198ac:	081be140 	call	81be14 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8198b0:	e0bffd17 	ldw	r2,-12(fp)
  8198b4:	e0ffff03 	ldbu	r3,-4(fp)
  8198b8:	10c00035 	stwio	r3,0(r2)
}
  8198bc:	e037883a 	mov	sp,fp
  8198c0:	dfc00117 	ldw	ra,4(sp)
  8198c4:	df000017 	ldw	fp,0(sp)
  8198c8:	dec00204 	addi	sp,sp,8
  8198cc:	f800283a 	ret

008198d0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8198d0:	defffa04 	addi	sp,sp,-24
  8198d4:	dfc00515 	stw	ra,20(sp)
  8198d8:	df000415 	stw	fp,16(sp)
  8198dc:	df000404 	addi	fp,sp,16
  8198e0:	e13ffe15 	stw	r4,-8(fp)
  8198e4:	2805883a 	mov	r2,r5
  8198e8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8198ec:	e0bffe17 	ldw	r2,-8(fp)
  8198f0:	10800017 	ldw	r2,0(r2)
  8198f4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8198f8:	008003f4 	movhi	r2,15
  8198fc:	10909004 	addi	r2,r2,16960
  819900:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  819904:	e0bffe17 	ldw	r2,-8(fp)
  819908:	10800803 	ldbu	r2,32(r2)
  81990c:	10803fcc 	andi	r2,r2,255
  819910:	1080201c 	xori	r2,r2,128
  819914:	10bfe004 	addi	r2,r2,-128
  819918:	10000126 	beq	r2,zero,819920 <lcd_write_data+0x50>
    return;
  81991c:	00001c06 	br	819990 <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  819920:	00000906 	br	819948 <lcd_write_data+0x78>
    if (--i == 0)
  819924:	e0bffc17 	ldw	r2,-16(fp)
  819928:	10bfffc4 	addi	r2,r2,-1
  81992c:	e0bffc15 	stw	r2,-16(fp)
  819930:	e0bffc17 	ldw	r2,-16(fp)
  819934:	1000041e 	bne	r2,zero,819948 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  819938:	e0bffe17 	ldw	r2,-8(fp)
  81993c:	00c00044 	movi	r3,1
  819940:	10c00805 	stb	r3,32(r2)
      return;
  819944:	00001206 	br	819990 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  819948:	e0bffd17 	ldw	r2,-12(fp)
  81994c:	10800104 	addi	r2,r2,4
  819950:	10800037 	ldwio	r2,0(r2)
  819954:	1080200c 	andi	r2,r2,128
  819958:	103ff21e 	bne	r2,zero,819924 <__alt_data_end+0xff819924>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81995c:	01001904 	movi	r4,100
  819960:	081be140 	call	81be14 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  819964:	e0bffd17 	ldw	r2,-12(fp)
  819968:	10800204 	addi	r2,r2,8
  81996c:	1007883a 	mov	r3,r2
  819970:	e0bfff03 	ldbu	r2,-4(fp)
  819974:	18800035 	stwio	r2,0(r3)

  sp->address++;
  819978:	e0bffe17 	ldw	r2,-8(fp)
  81997c:	108008c3 	ldbu	r2,35(r2)
  819980:	10800044 	addi	r2,r2,1
  819984:	1007883a 	mov	r3,r2
  819988:	e0bffe17 	ldw	r2,-8(fp)
  81998c:	10c008c5 	stb	r3,35(r2)
}
  819990:	e037883a 	mov	sp,fp
  819994:	dfc00117 	ldw	ra,4(sp)
  819998:	df000017 	ldw	fp,0(sp)
  81999c:	dec00204 	addi	sp,sp,8
  8199a0:	f800283a 	ret

008199a4 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8199a4:	defffc04 	addi	sp,sp,-16
  8199a8:	dfc00315 	stw	ra,12(sp)
  8199ac:	df000215 	stw	fp,8(sp)
  8199b0:	df000204 	addi	fp,sp,8
  8199b4:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8199b8:	e13fff17 	ldw	r4,-4(fp)
  8199bc:	01400044 	movi	r5,1
  8199c0:	081981c0 	call	81981c <lcd_write_command>

  sp->x = 0;
  8199c4:	e0bfff17 	ldw	r2,-4(fp)
  8199c8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8199cc:	e0bfff17 	ldw	r2,-4(fp)
  8199d0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8199d4:	e0bfff17 	ldw	r2,-4(fp)
  8199d8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8199dc:	e03ffe15 	stw	zero,-8(fp)
  8199e0:	00001b06 	br	819a50 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8199e4:	e0bffe17 	ldw	r2,-8(fp)
  8199e8:	108018e4 	muli	r2,r2,99
  8199ec:	10801004 	addi	r2,r2,64
  8199f0:	e0ffff17 	ldw	r3,-4(fp)
  8199f4:	1885883a 	add	r2,r3,r2
  8199f8:	1009883a 	mov	r4,r2
  8199fc:	01400804 	movi	r5,32
  819a00:	01801444 	movi	r6,81
  819a04:	080c8080 	call	80c808 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  819a08:	e0bffe17 	ldw	r2,-8(fp)
  819a0c:	108018e4 	muli	r2,r2,99
  819a10:	10800c04 	addi	r2,r2,48
  819a14:	e0ffff17 	ldw	r3,-4(fp)
  819a18:	1885883a 	add	r2,r3,r2
  819a1c:	1009883a 	mov	r4,r2
  819a20:	01400804 	movi	r5,32
  819a24:	01800404 	movi	r6,16
  819a28:	080c8080 	call	80c808 <memset>
    sp->line[y].width = 0;
  819a2c:	e0ffff17 	ldw	r3,-4(fp)
  819a30:	e0bffe17 	ldw	r2,-8(fp)
  819a34:	108018e4 	muli	r2,r2,99
  819a38:	10802404 	addi	r2,r2,144
  819a3c:	1885883a 	add	r2,r3,r2
  819a40:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  819a44:	e0bffe17 	ldw	r2,-8(fp)
  819a48:	10800044 	addi	r2,r2,1
  819a4c:	e0bffe15 	stw	r2,-8(fp)
  819a50:	e0bffe17 	ldw	r2,-8(fp)
  819a54:	10800090 	cmplti	r2,r2,2
  819a58:	103fe21e 	bne	r2,zero,8199e4 <__alt_data_end+0xff8199e4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  819a5c:	e037883a 	mov	sp,fp
  819a60:	dfc00117 	ldw	ra,4(sp)
  819a64:	df000017 	ldw	fp,0(sp)
  819a68:	dec00204 	addi	sp,sp,8
  819a6c:	f800283a 	ret

00819a70 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  819a70:	defff704 	addi	sp,sp,-36
  819a74:	dfc00815 	stw	ra,32(sp)
  819a78:	df000715 	stw	fp,28(sp)
  819a7c:	df000704 	addi	fp,sp,28
  819a80:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  819a84:	e0bfff17 	ldw	r2,-4(fp)
  819a88:	10800943 	ldbu	r2,37(r2)
  819a8c:	10803fcc 	andi	r2,r2,255
  819a90:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  819a94:	e03ff915 	stw	zero,-28(fp)
  819a98:	00006706 	br	819c38 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  819a9c:	e0ffff17 	ldw	r3,-4(fp)
  819aa0:	e0bff917 	ldw	r2,-28(fp)
  819aa4:	108018e4 	muli	r2,r2,99
  819aa8:	10802404 	addi	r2,r2,144
  819aac:	1885883a 	add	r2,r3,r2
  819ab0:	10800043 	ldbu	r2,1(r2)
  819ab4:	10803fcc 	andi	r2,r2,255
  819ab8:	1080201c 	xori	r2,r2,128
  819abc:	10bfe004 	addi	r2,r2,-128
  819ac0:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  819ac4:	e0ffff17 	ldw	r3,-4(fp)
  819ac8:	e0bff917 	ldw	r2,-28(fp)
  819acc:	108018e4 	muli	r2,r2,99
  819ad0:	10802404 	addi	r2,r2,144
  819ad4:	1885883a 	add	r2,r3,r2
  819ad8:	10800083 	ldbu	r2,2(r2)
  819adc:	10c03fcc 	andi	r3,r2,255
  819ae0:	e0bffc17 	ldw	r2,-16(fp)
  819ae4:	1885383a 	mul	r2,r3,r2
  819ae8:	1005d23a 	srai	r2,r2,8
  819aec:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  819af0:	e0fffb17 	ldw	r3,-20(fp)
  819af4:	e0bffd17 	ldw	r2,-12(fp)
  819af8:	18800116 	blt	r3,r2,819b00 <lcd_repaint_screen+0x90>
      offset = 0;
  819afc:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  819b00:	e03ffa15 	stw	zero,-24(fp)
  819b04:	00004606 	br	819c20 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  819b08:	e0fffa17 	ldw	r3,-24(fp)
  819b0c:	e0bffb17 	ldw	r2,-20(fp)
  819b10:	1885883a 	add	r2,r3,r2
  819b14:	1009883a 	mov	r4,r2
  819b18:	e17ffd17 	ldw	r5,-12(fp)
  819b1c:	080a9240 	call	80a924 <__modsi3>
  819b20:	1009883a 	mov	r4,r2
  819b24:	e0ffff17 	ldw	r3,-4(fp)
  819b28:	e0bff917 	ldw	r2,-28(fp)
  819b2c:	108018e4 	muli	r2,r2,99
  819b30:	1885883a 	add	r2,r3,r2
  819b34:	1105883a 	add	r2,r2,r4
  819b38:	10801004 	addi	r2,r2,64
  819b3c:	10800003 	ldbu	r2,0(r2)
  819b40:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  819b44:	e0ffff17 	ldw	r3,-4(fp)
  819b48:	e0bff917 	ldw	r2,-28(fp)
  819b4c:	108018e4 	muli	r2,r2,99
  819b50:	1887883a 	add	r3,r3,r2
  819b54:	e0bffa17 	ldw	r2,-24(fp)
  819b58:	1885883a 	add	r2,r3,r2
  819b5c:	10800c04 	addi	r2,r2,48
  819b60:	10800003 	ldbu	r2,0(r2)
  819b64:	10c03fcc 	andi	r3,r2,255
  819b68:	18c0201c 	xori	r3,r3,128
  819b6c:	18ffe004 	addi	r3,r3,-128
  819b70:	e0bffe07 	ldb	r2,-8(fp)
  819b74:	18802726 	beq	r3,r2,819c14 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  819b78:	e0fff917 	ldw	r3,-28(fp)
  819b7c:	d0a01504 	addi	r2,gp,-32684
  819b80:	1885883a 	add	r2,r3,r2
  819b84:	10800003 	ldbu	r2,0(r2)
  819b88:	1007883a 	mov	r3,r2
  819b8c:	e0bffa17 	ldw	r2,-24(fp)
  819b90:	1885883a 	add	r2,r3,r2
  819b94:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  819b98:	e0fffe43 	ldbu	r3,-7(fp)
  819b9c:	e0bfff17 	ldw	r2,-4(fp)
  819ba0:	108008c3 	ldbu	r2,35(r2)
  819ba4:	10803fcc 	andi	r2,r2,255
  819ba8:	1080201c 	xori	r2,r2,128
  819bac:	10bfe004 	addi	r2,r2,-128
  819bb0:	18800a26 	beq	r3,r2,819bdc <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  819bb4:	e0fffe43 	ldbu	r3,-7(fp)
  819bb8:	00bfe004 	movi	r2,-128
  819bbc:	1884b03a 	or	r2,r3,r2
  819bc0:	10803fcc 	andi	r2,r2,255
  819bc4:	e13fff17 	ldw	r4,-4(fp)
  819bc8:	100b883a 	mov	r5,r2
  819bcc:	081981c0 	call	81981c <lcd_write_command>
          sp->address = address;
  819bd0:	e0fffe43 	ldbu	r3,-7(fp)
  819bd4:	e0bfff17 	ldw	r2,-4(fp)
  819bd8:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  819bdc:	e0bffe03 	ldbu	r2,-8(fp)
  819be0:	10803fcc 	andi	r2,r2,255
  819be4:	e13fff17 	ldw	r4,-4(fp)
  819be8:	100b883a 	mov	r5,r2
  819bec:	08198d00 	call	8198d0 <lcd_write_data>
        sp->line[y].visible[x] = c;
  819bf0:	e0ffff17 	ldw	r3,-4(fp)
  819bf4:	e0bff917 	ldw	r2,-28(fp)
  819bf8:	108018e4 	muli	r2,r2,99
  819bfc:	1887883a 	add	r3,r3,r2
  819c00:	e0bffa17 	ldw	r2,-24(fp)
  819c04:	1885883a 	add	r2,r3,r2
  819c08:	10800c04 	addi	r2,r2,48
  819c0c:	e0fffe03 	ldbu	r3,-8(fp)
  819c10:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  819c14:	e0bffa17 	ldw	r2,-24(fp)
  819c18:	10800044 	addi	r2,r2,1
  819c1c:	e0bffa15 	stw	r2,-24(fp)
  819c20:	e0bffa17 	ldw	r2,-24(fp)
  819c24:	10800410 	cmplti	r2,r2,16
  819c28:	103fb71e 	bne	r2,zero,819b08 <__alt_data_end+0xff819b08>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  819c2c:	e0bff917 	ldw	r2,-28(fp)
  819c30:	10800044 	addi	r2,r2,1
  819c34:	e0bff915 	stw	r2,-28(fp)
  819c38:	e0bff917 	ldw	r2,-28(fp)
  819c3c:	10800090 	cmplti	r2,r2,2
  819c40:	103f961e 	bne	r2,zero,819a9c <__alt_data_end+0xff819a9c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  819c44:	e037883a 	mov	sp,fp
  819c48:	dfc00117 	ldw	ra,4(sp)
  819c4c:	df000017 	ldw	fp,0(sp)
  819c50:	dec00204 	addi	sp,sp,8
  819c54:	f800283a 	ret

00819c58 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  819c58:	defffc04 	addi	sp,sp,-16
  819c5c:	dfc00315 	stw	ra,12(sp)
  819c60:	df000215 	stw	fp,8(sp)
  819c64:	df000204 	addi	fp,sp,8
  819c68:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  819c6c:	e03ffe15 	stw	zero,-8(fp)
  819c70:	00001d06 	br	819ce8 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  819c74:	e0bffe17 	ldw	r2,-8(fp)
  819c78:	00800f16 	blt	zero,r2,819cb8 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  819c7c:	e0bffe17 	ldw	r2,-8(fp)
  819c80:	108018e4 	muli	r2,r2,99
  819c84:	10801004 	addi	r2,r2,64
  819c88:	e0ffff17 	ldw	r3,-4(fp)
  819c8c:	1889883a 	add	r4,r3,r2
  819c90:	e0bffe17 	ldw	r2,-8(fp)
  819c94:	10800044 	addi	r2,r2,1
  819c98:	108018e4 	muli	r2,r2,99
  819c9c:	10801004 	addi	r2,r2,64
  819ca0:	e0ffff17 	ldw	r3,-4(fp)
  819ca4:	1885883a 	add	r2,r3,r2
  819ca8:	100b883a 	mov	r5,r2
  819cac:	01801404 	movi	r6,80
  819cb0:	081133c0 	call	81133c <memcpy>
  819cb4:	00000906 	br	819cdc <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  819cb8:	e0bffe17 	ldw	r2,-8(fp)
  819cbc:	108018e4 	muli	r2,r2,99
  819cc0:	10801004 	addi	r2,r2,64
  819cc4:	e0ffff17 	ldw	r3,-4(fp)
  819cc8:	1885883a 	add	r2,r3,r2
  819ccc:	1009883a 	mov	r4,r2
  819cd0:	01400804 	movi	r5,32
  819cd4:	01801404 	movi	r6,80
  819cd8:	080c8080 	call	80c808 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  819cdc:	e0bffe17 	ldw	r2,-8(fp)
  819ce0:	10800044 	addi	r2,r2,1
  819ce4:	e0bffe15 	stw	r2,-8(fp)
  819ce8:	e0bffe17 	ldw	r2,-8(fp)
  819cec:	10800090 	cmplti	r2,r2,2
  819cf0:	103fe01e 	bne	r2,zero,819c74 <__alt_data_end+0xff819c74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  819cf4:	e0bfff17 	ldw	r2,-4(fp)
  819cf8:	10800883 	ldbu	r2,34(r2)
  819cfc:	10bfffc4 	addi	r2,r2,-1
  819d00:	1007883a 	mov	r3,r2
  819d04:	e0bfff17 	ldw	r2,-4(fp)
  819d08:	10c00885 	stb	r3,34(r2)
}
  819d0c:	e037883a 	mov	sp,fp
  819d10:	dfc00117 	ldw	ra,4(sp)
  819d14:	df000017 	ldw	fp,0(sp)
  819d18:	dec00204 	addi	sp,sp,8
  819d1c:	f800283a 	ret

00819d20 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  819d20:	defff904 	addi	sp,sp,-28
  819d24:	dfc00615 	stw	ra,24(sp)
  819d28:	df000515 	stw	fp,20(sp)
  819d2c:	df000504 	addi	fp,sp,20
  819d30:	e13ffe15 	stw	r4,-8(fp)
  819d34:	2805883a 	mov	r2,r5
  819d38:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  819d3c:	e03ffb15 	stw	zero,-20(fp)
  819d40:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  819d44:	e0bffe17 	ldw	r2,-8(fp)
  819d48:	10800a03 	ldbu	r2,40(r2)
  819d4c:	10803fcc 	andi	r2,r2,255
  819d50:	1080201c 	xori	r2,r2,128
  819d54:	10bfe004 	addi	r2,r2,-128
  819d58:	108016d8 	cmpnei	r2,r2,91
  819d5c:	1000441e 	bne	r2,zero,819e70 <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
  819d60:	e0bffe17 	ldw	r2,-8(fp)
  819d64:	10800a44 	addi	r2,r2,41
  819d68:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  819d6c:	00000c06 	br	819da0 <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  819d70:	e0bffb17 	ldw	r2,-20(fp)
  819d74:	10c002a4 	muli	r3,r2,10
  819d78:	e0bffd17 	ldw	r2,-12(fp)
  819d7c:	11000044 	addi	r4,r2,1
  819d80:	e13ffd15 	stw	r4,-12(fp)
  819d84:	10800003 	ldbu	r2,0(r2)
  819d88:	10803fcc 	andi	r2,r2,255
  819d8c:	1080201c 	xori	r2,r2,128
  819d90:	10bfe004 	addi	r2,r2,-128
  819d94:	10bff404 	addi	r2,r2,-48
  819d98:	1885883a 	add	r2,r3,r2
  819d9c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  819da0:	008020b4 	movhi	r2,130
  819da4:	10bbdf04 	addi	r2,r2,-4228
  819da8:	10c00017 	ldw	r3,0(r2)
  819dac:	e0bffd17 	ldw	r2,-12(fp)
  819db0:	10800003 	ldbu	r2,0(r2)
  819db4:	10803fcc 	andi	r2,r2,255
  819db8:	1080201c 	xori	r2,r2,128
  819dbc:	10bfe004 	addi	r2,r2,-128
  819dc0:	10800044 	addi	r2,r2,1
  819dc4:	1885883a 	add	r2,r3,r2
  819dc8:	10800003 	ldbu	r2,0(r2)
  819dcc:	10803fcc 	andi	r2,r2,255
  819dd0:	1080010c 	andi	r2,r2,4
  819dd4:	103fe61e 	bne	r2,zero,819d70 <__alt_data_end+0xff819d70>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  819dd8:	e0bffd17 	ldw	r2,-12(fp)
  819ddc:	10800003 	ldbu	r2,0(r2)
  819de0:	10803fcc 	andi	r2,r2,255
  819de4:	1080201c 	xori	r2,r2,128
  819de8:	10bfe004 	addi	r2,r2,-128
  819dec:	10800ed8 	cmpnei	r2,r2,59
  819df0:	10001e1e 	bne	r2,zero,819e6c <lcd_handle_escape+0x14c>
    {
      ptr++;
  819df4:	e0bffd17 	ldw	r2,-12(fp)
  819df8:	10800044 	addi	r2,r2,1
  819dfc:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  819e00:	00000c06 	br	819e34 <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  819e04:	e0bffc17 	ldw	r2,-16(fp)
  819e08:	10c002a4 	muli	r3,r2,10
  819e0c:	e0bffd17 	ldw	r2,-12(fp)
  819e10:	11000044 	addi	r4,r2,1
  819e14:	e13ffd15 	stw	r4,-12(fp)
  819e18:	10800003 	ldbu	r2,0(r2)
  819e1c:	10803fcc 	andi	r2,r2,255
  819e20:	1080201c 	xori	r2,r2,128
  819e24:	10bfe004 	addi	r2,r2,-128
  819e28:	10bff404 	addi	r2,r2,-48
  819e2c:	1885883a 	add	r2,r3,r2
  819e30:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  819e34:	008020b4 	movhi	r2,130
  819e38:	10bbdf04 	addi	r2,r2,-4228
  819e3c:	10c00017 	ldw	r3,0(r2)
  819e40:	e0bffd17 	ldw	r2,-12(fp)
  819e44:	10800003 	ldbu	r2,0(r2)
  819e48:	10803fcc 	andi	r2,r2,255
  819e4c:	1080201c 	xori	r2,r2,128
  819e50:	10bfe004 	addi	r2,r2,-128
  819e54:	10800044 	addi	r2,r2,1
  819e58:	1885883a 	add	r2,r3,r2
  819e5c:	10800003 	ldbu	r2,0(r2)
  819e60:	10803fcc 	andi	r2,r2,255
  819e64:	1080010c 	andi	r2,r2,4
  819e68:	103fe61e 	bne	r2,zero,819e04 <__alt_data_end+0xff819e04>
  819e6c:	00000206 	br	819e78 <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  819e70:	00bfffc4 	movi	r2,-1
  819e74:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  819e78:	e0bfff07 	ldb	r2,-4(fp)
  819e7c:	10c012a0 	cmpeqi	r3,r2,74
  819e80:	1800281e 	bne	r3,zero,819f24 <lcd_handle_escape+0x204>
  819e84:	10c012c8 	cmpgei	r3,r2,75
  819e88:	1800031e 	bne	r3,zero,819e98 <lcd_handle_escape+0x178>
  819e8c:	10801220 	cmpeqi	r2,r2,72
  819e90:	1000051e 	bne	r2,zero,819ea8 <lcd_handle_escape+0x188>
  819e94:	00004506 	br	819fac <lcd_handle_escape+0x28c>
  819e98:	10c012e0 	cmpeqi	r3,r2,75
  819e9c:	1800281e 	bne	r3,zero,819f40 <lcd_handle_escape+0x220>
  819ea0:	108019a0 	cmpeqi	r2,r2,102
  819ea4:	10004126 	beq	r2,zero,819fac <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  819ea8:	e0bffc17 	ldw	r2,-16(fp)
  819eac:	0080050e 	bge	zero,r2,819ec4 <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
  819eb0:	e0bffc17 	ldw	r2,-16(fp)
  819eb4:	10bfffc4 	addi	r2,r2,-1
  819eb8:	1007883a 	mov	r3,r2
  819ebc:	e0bffe17 	ldw	r2,-8(fp)
  819ec0:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  819ec4:	e0bffb17 	ldw	r2,-20(fp)
  819ec8:	0080150e 	bge	zero,r2,819f20 <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
  819ecc:	e0bffb17 	ldw	r2,-20(fp)
  819ed0:	10bfffc4 	addi	r2,r2,-1
  819ed4:	1007883a 	mov	r3,r2
  819ed8:	e0bffe17 	ldw	r2,-8(fp)
  819edc:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  819ee0:	e0bffe17 	ldw	r2,-8(fp)
  819ee4:	10800883 	ldbu	r2,34(r2)
  819ee8:	10803fcc 	andi	r2,r2,255
  819eec:	10800170 	cmpltui	r2,r2,5
  819ef0:	1000031e 	bne	r2,zero,819f00 <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
  819ef4:	e0bffe17 	ldw	r2,-8(fp)
  819ef8:	00c00104 	movi	r3,4
  819efc:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  819f00:	00000206 	br	819f0c <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
  819f04:	e13ffe17 	ldw	r4,-8(fp)
  819f08:	0819c580 	call	819c58 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  819f0c:	e0bffe17 	ldw	r2,-8(fp)
  819f10:	10800883 	ldbu	r2,34(r2)
  819f14:	10803fcc 	andi	r2,r2,255
  819f18:	108000e8 	cmpgeui	r2,r2,3
  819f1c:	103ff91e 	bne	r2,zero,819f04 <__alt_data_end+0xff819f04>
        lcd_scroll_up(sp);
    }
    break;
  819f20:	00002206 	br	819fac <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  819f24:	e0bffb17 	ldw	r2,-20(fp)
  819f28:	10800098 	cmpnei	r2,r2,2
  819f2c:	1000031e 	bne	r2,zero,819f3c <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
  819f30:	e13ffe17 	ldw	r4,-8(fp)
  819f34:	08199a40 	call	8199a4 <lcd_clear_screen>
    break;
  819f38:	00001c06 	br	819fac <lcd_handle_escape+0x28c>
  819f3c:	00001b06 	br	819fac <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  819f40:	e0bffb17 	ldw	r2,-20(fp)
  819f44:	00801816 	blt	zero,r2,819fa8 <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  819f48:	e0bffe17 	ldw	r2,-8(fp)
  819f4c:	10800843 	ldbu	r2,33(r2)
  819f50:	10803fcc 	andi	r2,r2,255
  819f54:	10801428 	cmpgeui	r2,r2,80
  819f58:	1000131e 	bne	r2,zero,819fa8 <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  819f5c:	e0bffe17 	ldw	r2,-8(fp)
  819f60:	10800883 	ldbu	r2,34(r2)
  819f64:	10803fcc 	andi	r2,r2,255
  819f68:	108018e4 	muli	r2,r2,99
  819f6c:	10801004 	addi	r2,r2,64
  819f70:	e0fffe17 	ldw	r3,-8(fp)
  819f74:	1887883a 	add	r3,r3,r2
  819f78:	e0bffe17 	ldw	r2,-8(fp)
  819f7c:	10800843 	ldbu	r2,33(r2)
  819f80:	10803fcc 	andi	r2,r2,255
  819f84:	1889883a 	add	r4,r3,r2
  819f88:	e0bffe17 	ldw	r2,-8(fp)
  819f8c:	10800843 	ldbu	r2,33(r2)
  819f90:	10803fcc 	andi	r2,r2,255
  819f94:	00c01404 	movi	r3,80
  819f98:	1885c83a 	sub	r2,r3,r2
  819f9c:	01400804 	movi	r5,32
  819fa0:	100d883a 	mov	r6,r2
  819fa4:	080c8080 	call	80c808 <memset>
    }
    break;
  819fa8:	0001883a 	nop
  }
}
  819fac:	e037883a 	mov	sp,fp
  819fb0:	dfc00117 	ldw	ra,4(sp)
  819fb4:	df000017 	ldw	fp,0(sp)
  819fb8:	dec00204 	addi	sp,sp,8
  819fbc:	f800283a 	ret

00819fc0 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  819fc0:	defff304 	addi	sp,sp,-52
  819fc4:	dfc00c15 	stw	ra,48(sp)
  819fc8:	df000b15 	stw	fp,44(sp)
  819fcc:	df000b04 	addi	fp,sp,44
  819fd0:	e13ffc15 	stw	r4,-16(fp)
  819fd4:	e17ffd15 	stw	r5,-12(fp)
  819fd8:	e1bffe15 	stw	r6,-8(fp)
  819fdc:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  819fe0:	e0bffe17 	ldw	r2,-8(fp)
  819fe4:	e0fffd17 	ldw	r3,-12(fp)
  819fe8:	1885883a 	add	r2,r3,r2
  819fec:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  819ff0:	e0bffc17 	ldw	r2,-16(fp)
  819ff4:	00c00044 	movi	r3,1
  819ff8:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  819ffc:	00009e06 	br	81a278 <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
  81a000:	e0bffd17 	ldw	r2,-12(fp)
  81a004:	10800003 	ldbu	r2,0(r2)
  81a008:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  81a00c:	e0bffc17 	ldw	r2,-16(fp)
  81a010:	10800903 	ldbu	r2,36(r2)
  81a014:	10803fcc 	andi	r2,r2,255
  81a018:	1080201c 	xori	r2,r2,128
  81a01c:	10bfe004 	addi	r2,r2,-128
  81a020:	10003a16 	blt	r2,zero,81a10c <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
  81a024:	e0bffc17 	ldw	r2,-16(fp)
  81a028:	10800903 	ldbu	r2,36(r2)
  81a02c:	10803fcc 	andi	r2,r2,255
  81a030:	1080201c 	xori	r2,r2,128
  81a034:	10bfe004 	addi	r2,r2,-128
  81a038:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  81a03c:	e0bffa17 	ldw	r2,-24(fp)
  81a040:	1000031e 	bne	r2,zero,81a050 <altera_avalon_lcd_16207_write+0x90>
  81a044:	e0bff907 	ldb	r2,-28(fp)
  81a048:	108016d8 	cmpnei	r2,r2,91
  81a04c:	10000f1e 	bne	r2,zero,81a08c <altera_avalon_lcd_16207_write+0xcc>
  81a050:	e0bffa17 	ldw	r2,-24(fp)
  81a054:	10001a26 	beq	r2,zero,81a0c0 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  81a058:	008020b4 	movhi	r2,130
  81a05c:	10bbdf04 	addi	r2,r2,-4228
  81a060:	10c00017 	ldw	r3,0(r2)
  81a064:	e0bff907 	ldb	r2,-28(fp)
  81a068:	10800044 	addi	r2,r2,1
  81a06c:	1885883a 	add	r2,r3,r2
  81a070:	10800003 	ldbu	r2,0(r2)
  81a074:	10803fcc 	andi	r2,r2,255
  81a078:	1080010c 	andi	r2,r2,4
  81a07c:	1000101e 	bne	r2,zero,81a0c0 <altera_avalon_lcd_16207_write+0x100>
  81a080:	e0bff907 	ldb	r2,-28(fp)
  81a084:	10800ee0 	cmpeqi	r2,r2,59
  81a088:	10000d1e 	bne	r2,zero,81a0c0 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  81a08c:	e0fffc17 	ldw	r3,-16(fp)
  81a090:	e0bffa17 	ldw	r2,-24(fp)
  81a094:	1885883a 	add	r2,r3,r2
  81a098:	10800a04 	addi	r2,r2,40
  81a09c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  81a0a0:	e0bff907 	ldb	r2,-28(fp)
  81a0a4:	e13ffc17 	ldw	r4,-16(fp)
  81a0a8:	100b883a 	mov	r5,r2
  81a0ac:	0819d200 	call	819d20 <lcd_handle_escape>

        sp->esccount = -1;
  81a0b0:	e0bffc17 	ldw	r2,-16(fp)
  81a0b4:	00ffffc4 	movi	r3,-1
  81a0b8:	10c00905 	stb	r3,36(r2)
  81a0bc:	00001206 	br	81a108 <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  81a0c0:	e0bffc17 	ldw	r2,-16(fp)
  81a0c4:	10800903 	ldbu	r2,36(r2)
  81a0c8:	10803fcc 	andi	r2,r2,255
  81a0cc:	108001e8 	cmpgeui	r2,r2,7
  81a0d0:	10000d1e 	bne	r2,zero,81a108 <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
  81a0d4:	e0fffc17 	ldw	r3,-16(fp)
  81a0d8:	e0bffa17 	ldw	r2,-24(fp)
  81a0dc:	1885883a 	add	r2,r3,r2
  81a0e0:	10800a04 	addi	r2,r2,40
  81a0e4:	e0fff903 	ldbu	r3,-28(fp)
  81a0e8:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  81a0ec:	e0bffc17 	ldw	r2,-16(fp)
  81a0f0:	10800903 	ldbu	r2,36(r2)
  81a0f4:	10800044 	addi	r2,r2,1
  81a0f8:	1007883a 	mov	r3,r2
  81a0fc:	e0bffc17 	ldw	r2,-16(fp)
  81a100:	10c00905 	stb	r3,36(r2)
  81a104:	00005906 	br	81a26c <altera_avalon_lcd_16207_write+0x2ac>
  81a108:	00005806 	br	81a26c <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
  81a10c:	e0bff907 	ldb	r2,-28(fp)
  81a110:	108006d8 	cmpnei	r2,r2,27
  81a114:	1000031e 	bne	r2,zero,81a124 <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
  81a118:	e0bffc17 	ldw	r2,-16(fp)
  81a11c:	10000905 	stb	zero,36(r2)
  81a120:	00005206 	br	81a26c <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
  81a124:	e0bff907 	ldb	r2,-28(fp)
  81a128:	10800358 	cmpnei	r2,r2,13
  81a12c:	1000031e 	bne	r2,zero,81a13c <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
  81a130:	e0bffc17 	ldw	r2,-16(fp)
  81a134:	10000845 	stb	zero,33(r2)
  81a138:	00004c06 	br	81a26c <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
  81a13c:	e0bff907 	ldb	r2,-28(fp)
  81a140:	10800298 	cmpnei	r2,r2,10
  81a144:	1000101e 	bne	r2,zero,81a188 <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
  81a148:	e0bffc17 	ldw	r2,-16(fp)
  81a14c:	10000845 	stb	zero,33(r2)
      sp->y++;
  81a150:	e0bffc17 	ldw	r2,-16(fp)
  81a154:	10800883 	ldbu	r2,34(r2)
  81a158:	10800044 	addi	r2,r2,1
  81a15c:	1007883a 	mov	r3,r2
  81a160:	e0bffc17 	ldw	r2,-16(fp)
  81a164:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  81a168:	e0bffc17 	ldw	r2,-16(fp)
  81a16c:	10800883 	ldbu	r2,34(r2)
  81a170:	10803fcc 	andi	r2,r2,255
  81a174:	108000f0 	cmpltui	r2,r2,3
  81a178:	10003c1e 	bne	r2,zero,81a26c <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
  81a17c:	e13ffc17 	ldw	r4,-16(fp)
  81a180:	0819c580 	call	819c58 <lcd_scroll_up>
  81a184:	00003906 	br	81a26c <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
  81a188:	e0bff907 	ldb	r2,-28(fp)
  81a18c:	10800218 	cmpnei	r2,r2,8
  81a190:	10000b1e 	bne	r2,zero,81a1c0 <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
  81a194:	e0bffc17 	ldw	r2,-16(fp)
  81a198:	10800843 	ldbu	r2,33(r2)
  81a19c:	10803fcc 	andi	r2,r2,255
  81a1a0:	10003226 	beq	r2,zero,81a26c <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
  81a1a4:	e0bffc17 	ldw	r2,-16(fp)
  81a1a8:	10800843 	ldbu	r2,33(r2)
  81a1ac:	10bfffc4 	addi	r2,r2,-1
  81a1b0:	1007883a 	mov	r3,r2
  81a1b4:	e0bffc17 	ldw	r2,-16(fp)
  81a1b8:	10c00845 	stb	r3,33(r2)
  81a1bc:	00002b06 	br	81a26c <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
  81a1c0:	008020b4 	movhi	r2,130
  81a1c4:	10bbdf04 	addi	r2,r2,-4228
  81a1c8:	10c00017 	ldw	r3,0(r2)
  81a1cc:	e0bff907 	ldb	r2,-28(fp)
  81a1d0:	10800044 	addi	r2,r2,1
  81a1d4:	1885883a 	add	r2,r3,r2
  81a1d8:	10800003 	ldbu	r2,0(r2)
  81a1dc:	10803fcc 	andi	r2,r2,255
  81a1e0:	1080201c 	xori	r2,r2,128
  81a1e4:	10bfe004 	addi	r2,r2,-128
  81a1e8:	108025cc 	andi	r2,r2,151
  81a1ec:	10001f26 	beq	r2,zero,81a26c <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  81a1f0:	e0bffc17 	ldw	r2,-16(fp)
  81a1f4:	10800883 	ldbu	r2,34(r2)
  81a1f8:	10803fcc 	andi	r2,r2,255
  81a1fc:	108000b0 	cmpltui	r2,r2,2
  81a200:	1000021e 	bne	r2,zero,81a20c <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
  81a204:	e13ffc17 	ldw	r4,-16(fp)
  81a208:	0819c580 	call	819c58 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  81a20c:	e0bffc17 	ldw	r2,-16(fp)
  81a210:	10800843 	ldbu	r2,33(r2)
  81a214:	10803fcc 	andi	r2,r2,255
  81a218:	10801428 	cmpgeui	r2,r2,80
  81a21c:	10000d1e 	bne	r2,zero,81a254 <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
  81a220:	e0bffc17 	ldw	r2,-16(fp)
  81a224:	10800883 	ldbu	r2,34(r2)
  81a228:	10c03fcc 	andi	r3,r2,255
  81a22c:	e0bffc17 	ldw	r2,-16(fp)
  81a230:	10800843 	ldbu	r2,33(r2)
  81a234:	10803fcc 	andi	r2,r2,255
  81a238:	e13ffc17 	ldw	r4,-16(fp)
  81a23c:	18c018e4 	muli	r3,r3,99
  81a240:	20c7883a 	add	r3,r4,r3
  81a244:	1885883a 	add	r2,r3,r2
  81a248:	10801004 	addi	r2,r2,64
  81a24c:	e0fff903 	ldbu	r3,-28(fp)
  81a250:	10c00005 	stb	r3,0(r2)

      sp->x++;
  81a254:	e0bffc17 	ldw	r2,-16(fp)
  81a258:	10800843 	ldbu	r2,33(r2)
  81a25c:	10800044 	addi	r2,r2,1
  81a260:	1007883a 	mov	r3,r2
  81a264:	e0bffc17 	ldw	r2,-16(fp)
  81a268:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  81a26c:	e0bffd17 	ldw	r2,-12(fp)
  81a270:	10800044 	addi	r2,r2,1
  81a274:	e0bffd15 	stw	r2,-12(fp)
  81a278:	e0fffd17 	ldw	r3,-12(fp)
  81a27c:	e0bff817 	ldw	r2,-32(fp)
  81a280:	18bf5f36 	bltu	r3,r2,81a000 <__alt_data_end+0xff81a000>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  81a284:	00800404 	movi	r2,16
  81a288:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a28c:	e03ff515 	stw	zero,-44(fp)
  81a290:	00003606 	br	81a36c <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81a294:	00801404 	movi	r2,80
  81a298:	e0bff715 	stw	r2,-36(fp)
  81a29c:	00001206 	br	81a2e8 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
  81a2a0:	e0bff717 	ldw	r2,-36(fp)
  81a2a4:	10bfffc4 	addi	r2,r2,-1
  81a2a8:	e13ffc17 	ldw	r4,-16(fp)
  81a2ac:	e0fff517 	ldw	r3,-44(fp)
  81a2b0:	18c018e4 	muli	r3,r3,99
  81a2b4:	20c7883a 	add	r3,r4,r3
  81a2b8:	1885883a 	add	r2,r3,r2
  81a2bc:	10801004 	addi	r2,r2,64
  81a2c0:	10800003 	ldbu	r2,0(r2)
  81a2c4:	10803fcc 	andi	r2,r2,255
  81a2c8:	1080201c 	xori	r2,r2,128
  81a2cc:	10bfe004 	addi	r2,r2,-128
  81a2d0:	10800820 	cmpeqi	r2,r2,32
  81a2d4:	1000011e 	bne	r2,zero,81a2dc <altera_avalon_lcd_16207_write+0x31c>
        break;
  81a2d8:	00000506 	br	81a2f0 <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81a2dc:	e0bff717 	ldw	r2,-36(fp)
  81a2e0:	10bfffc4 	addi	r2,r2,-1
  81a2e4:	e0bff715 	stw	r2,-36(fp)
  81a2e8:	e0bff717 	ldw	r2,-36(fp)
  81a2ec:	00bfec16 	blt	zero,r2,81a2a0 <__alt_data_end+0xff81a2a0>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  81a2f0:	e0bff717 	ldw	r2,-36(fp)
  81a2f4:	10800448 	cmpgei	r2,r2,17
  81a2f8:	1000031e 	bne	r2,zero,81a308 <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  81a2fc:	00800404 	movi	r2,16
  81a300:	e0bff715 	stw	r2,-36(fp)
  81a304:	00000306 	br	81a314 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  81a308:	e0bff717 	ldw	r2,-36(fp)
  81a30c:	10800044 	addi	r2,r2,1
  81a310:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  81a314:	e0bff717 	ldw	r2,-36(fp)
  81a318:	1009883a 	mov	r4,r2
  81a31c:	e0fffc17 	ldw	r3,-16(fp)
  81a320:	e0bff517 	ldw	r2,-44(fp)
  81a324:	108018e4 	muli	r2,r2,99
  81a328:	10802404 	addi	r2,r2,144
  81a32c:	1885883a 	add	r2,r3,r2
  81a330:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
  81a334:	e0fff617 	ldw	r3,-40(fp)
  81a338:	e0bff717 	ldw	r2,-36(fp)
  81a33c:	1880020e 	bge	r3,r2,81a348 <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  81a340:	e0bff717 	ldw	r2,-36(fp)
  81a344:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  81a348:	e0fffc17 	ldw	r3,-16(fp)
  81a34c:	e0bff517 	ldw	r2,-44(fp)
  81a350:	108018e4 	muli	r2,r2,99
  81a354:	10802404 	addi	r2,r2,144
  81a358:	1885883a 	add	r2,r3,r2
  81a35c:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a360:	e0bff517 	ldw	r2,-44(fp)
  81a364:	10800044 	addi	r2,r2,1
  81a368:	e0bff515 	stw	r2,-44(fp)
  81a36c:	e0bff517 	ldw	r2,-44(fp)
  81a370:	10800090 	cmplti	r2,r2,2
  81a374:	103fc71e 	bne	r2,zero,81a294 <__alt_data_end+0xff81a294>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  81a378:	e0bff617 	ldw	r2,-40(fp)
  81a37c:	10800448 	cmpgei	r2,r2,17
  81a380:	1000031e 	bne	r2,zero,81a390 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  81a384:	e0bffc17 	ldw	r2,-16(fp)
  81a388:	10000985 	stb	zero,38(r2)
  81a38c:	00002e06 	br	81a448 <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  81a390:	e0bff617 	ldw	r2,-40(fp)
  81a394:	1085883a 	add	r2,r2,r2
  81a398:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  81a39c:	e0bff617 	ldw	r2,-40(fp)
  81a3a0:	1007883a 	mov	r3,r2
  81a3a4:	e0bffc17 	ldw	r2,-16(fp)
  81a3a8:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a3ac:	e03ff515 	stw	zero,-44(fp)
  81a3b0:	00002206 	br	81a43c <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  81a3b4:	e0fffc17 	ldw	r3,-16(fp)
  81a3b8:	e0bff517 	ldw	r2,-44(fp)
  81a3bc:	108018e4 	muli	r2,r2,99
  81a3c0:	10802404 	addi	r2,r2,144
  81a3c4:	1885883a 	add	r2,r3,r2
  81a3c8:	10800043 	ldbu	r2,1(r2)
  81a3cc:	10803fcc 	andi	r2,r2,255
  81a3d0:	1080201c 	xori	r2,r2,128
  81a3d4:	10bfe004 	addi	r2,r2,-128
  81a3d8:	10800450 	cmplti	r2,r2,17
  81a3dc:	1000141e 	bne	r2,zero,81a430 <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81a3e0:	e0fffc17 	ldw	r3,-16(fp)
  81a3e4:	e0bff517 	ldw	r2,-44(fp)
  81a3e8:	108018e4 	muli	r2,r2,99
  81a3ec:	10802404 	addi	r2,r2,144
  81a3f0:	1885883a 	add	r2,r3,r2
  81a3f4:	10800043 	ldbu	r2,1(r2)
  81a3f8:	10803fcc 	andi	r2,r2,255
  81a3fc:	1080201c 	xori	r2,r2,128
  81a400:	10bfe004 	addi	r2,r2,-128
  81a404:	1004923a 	slli	r2,r2,8
  81a408:	1009883a 	mov	r4,r2
  81a40c:	e17ff617 	ldw	r5,-40(fp)
  81a410:	080a8d00 	call	80a8d0 <__divsi3>
  81a414:	1009883a 	mov	r4,r2
  81a418:	e0fffc17 	ldw	r3,-16(fp)
  81a41c:	e0bff517 	ldw	r2,-44(fp)
  81a420:	108018e4 	muli	r2,r2,99
  81a424:	10802404 	addi	r2,r2,144
  81a428:	1885883a 	add	r2,r3,r2
  81a42c:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81a430:	e0bff517 	ldw	r2,-44(fp)
  81a434:	10800044 	addi	r2,r2,1
  81a438:	e0bff515 	stw	r2,-44(fp)
  81a43c:	e0bff517 	ldw	r2,-44(fp)
  81a440:	10800090 	cmplti	r2,r2,2
  81a444:	103fdb1e 	bne	r2,zero,81a3b4 <__alt_data_end+0xff81a3b4>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  81a448:	e0bffc17 	ldw	r2,-16(fp)
  81a44c:	10800943 	ldbu	r2,37(r2)
  81a450:	10803fcc 	andi	r2,r2,255
  81a454:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  81a458:	e13ffc17 	ldw	r4,-16(fp)
  81a45c:	0819a700 	call	819a70 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  81a460:	e0bffc17 	ldw	r2,-16(fp)
  81a464:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  81a468:	e0bffc17 	ldw	r2,-16(fp)
  81a46c:	10800943 	ldbu	r2,37(r2)
  81a470:	10c03fcc 	andi	r3,r2,255
  81a474:	e0bffb17 	ldw	r2,-20(fp)
  81a478:	1880011e 	bne	r3,r2,81a480 <altera_avalon_lcd_16207_write+0x4c0>
      break;
  81a47c:	00000406 	br	81a490 <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  81a480:	e0bffc17 	ldw	r2,-16(fp)
  81a484:	00c00044 	movi	r3,1
  81a488:	10c009c5 	stb	r3,39(r2)
  }
  81a48c:	003fee06 	br	81a448 <__alt_data_end+0xff81a448>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  81a490:	e0bffe17 	ldw	r2,-8(fp)
}
  81a494:	e037883a 	mov	sp,fp
  81a498:	dfc00117 	ldw	ra,4(sp)
  81a49c:	df000017 	ldw	fp,0(sp)
  81a4a0:	dec00204 	addi	sp,sp,8
  81a4a4:	f800283a 	ret

0081a4a8 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  81a4a8:	defffc04 	addi	sp,sp,-16
  81a4ac:	dfc00315 	stw	ra,12(sp)
  81a4b0:	df000215 	stw	fp,8(sp)
  81a4b4:	df000204 	addi	fp,sp,8
  81a4b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  81a4bc:	e0bfff17 	ldw	r2,-4(fp)
  81a4c0:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  81a4c4:	e0bffe17 	ldw	r2,-8(fp)
  81a4c8:	10800943 	ldbu	r2,37(r2)
  81a4cc:	10803fcc 	andi	r2,r2,255
  81a4d0:	10c00044 	addi	r3,r2,1
  81a4d4:	e0bffe17 	ldw	r2,-8(fp)
  81a4d8:	10800983 	ldbu	r2,38(r2)
  81a4dc:	10803fcc 	andi	r2,r2,255
  81a4e0:	18800316 	blt	r3,r2,81a4f0 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  81a4e4:	e0bffe17 	ldw	r2,-8(fp)
  81a4e8:	10000945 	stb	zero,37(r2)
  81a4ec:	00000606 	br	81a508 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81a4f0:	e0bffe17 	ldw	r2,-8(fp)
  81a4f4:	10800943 	ldbu	r2,37(r2)
  81a4f8:	10800044 	addi	r2,r2,1
  81a4fc:	1007883a 	mov	r3,r2
  81a500:	e0bffe17 	ldw	r2,-8(fp)
  81a504:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  81a508:	e0bffe17 	ldw	r2,-8(fp)
  81a50c:	10800983 	ldbu	r2,38(r2)
  81a510:	10803fcc 	andi	r2,r2,255
  81a514:	10000826 	beq	r2,zero,81a538 <alt_lcd_16207_timeout+0x90>
  81a518:	e0bffe17 	ldw	r2,-8(fp)
  81a51c:	108009c3 	ldbu	r2,39(r2)
  81a520:	10803fcc 	andi	r2,r2,255
  81a524:	1080201c 	xori	r2,r2,128
  81a528:	10bfe004 	addi	r2,r2,-128
  81a52c:	1000021e 	bne	r2,zero,81a538 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  81a530:	e13ffe17 	ldw	r4,-8(fp)
  81a534:	0819a700 	call	819a70 <lcd_repaint_screen>

  return sp->period;
  81a538:	e0bffe17 	ldw	r2,-8(fp)
  81a53c:	10800717 	ldw	r2,28(r2)
}
  81a540:	e037883a 	mov	sp,fp
  81a544:	dfc00117 	ldw	ra,4(sp)
  81a548:	df000017 	ldw	fp,0(sp)
  81a54c:	dec00204 	addi	sp,sp,8
  81a550:	f800283a 	ret

0081a554 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  81a554:	defffc04 	addi	sp,sp,-16
  81a558:	dfc00315 	stw	ra,12(sp)
  81a55c:	df000215 	stw	fp,8(sp)
  81a560:	df000204 	addi	fp,sp,8
  81a564:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  81a568:	e0bfff17 	ldw	r2,-4(fp)
  81a56c:	10800017 	ldw	r2,0(r2)
  81a570:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  81a574:	e0bfff17 	ldw	r2,-4(fp)
  81a578:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  81a57c:	010ea604 	movi	r4,15000
  81a580:	081be140 	call	81be14 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81a584:	e0bffe17 	ldw	r2,-8(fp)
  81a588:	00c00c04 	movi	r3,48
  81a58c:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81a590:	01040104 	movi	r4,4100
  81a594:	081be140 	call	81be14 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81a598:	e0bffe17 	ldw	r2,-8(fp)
  81a59c:	00c00c04 	movi	r3,48
  81a5a0:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  81a5a4:	0100fa04 	movi	r4,1000
  81a5a8:	081be140 	call	81be14 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81a5ac:	e0bffe17 	ldw	r2,-8(fp)
  81a5b0:	00c00c04 	movi	r3,48
  81a5b4:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  81a5b8:	e13fff17 	ldw	r4,-4(fp)
  81a5bc:	01400e04 	movi	r5,56
  81a5c0:	081981c0 	call	81981c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  81a5c4:	e13fff17 	ldw	r4,-4(fp)
  81a5c8:	01400204 	movi	r5,8
  81a5cc:	081981c0 	call	81981c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81a5d0:	e13fff17 	ldw	r4,-4(fp)
  81a5d4:	08199a40 	call	8199a4 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  81a5d8:	e13fff17 	ldw	r4,-4(fp)
  81a5dc:	01400184 	movi	r5,6
  81a5e0:	081981c0 	call	81981c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  81a5e4:	e13fff17 	ldw	r4,-4(fp)
  81a5e8:	01400304 	movi	r5,12
  81a5ec:	081981c0 	call	81981c <lcd_write_command>

  sp->esccount = -1;
  81a5f0:	e0bfff17 	ldw	r2,-4(fp)
  81a5f4:	00ffffc4 	movi	r3,-1
  81a5f8:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  81a5fc:	e0bfff17 	ldw	r2,-4(fp)
  81a600:	10800a04 	addi	r2,r2,40
  81a604:	1009883a 	mov	r4,r2
  81a608:	000b883a 	mov	r5,zero
  81a60c:	01800204 	movi	r6,8
  81a610:	080c8080 	call	80c808 <memset>

  sp->scrollpos = 0;
  81a614:	e0bfff17 	ldw	r2,-4(fp)
  81a618:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  81a61c:	e0bfff17 	ldw	r2,-4(fp)
  81a620:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81a624:	e0bfff17 	ldw	r2,-4(fp)
  81a628:	100009c5 	stb	zero,39(r2)
  81a62c:	008020b4 	movhi	r2,130
  81a630:	10834f04 	addi	r2,r2,3388
  81a634:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  81a638:	1009883a 	mov	r4,r2
  81a63c:	01400284 	movi	r5,10
  81a640:	080a9800 	call	80a980 <__udivsi3>
  81a644:	1007883a 	mov	r3,r2
  81a648:	e0bfff17 	ldw	r2,-4(fp)
  81a64c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  81a650:	e0bfff17 	ldw	r2,-4(fp)
  81a654:	10c00104 	addi	r3,r2,4
  81a658:	e0bfff17 	ldw	r2,-4(fp)
  81a65c:	10800717 	ldw	r2,28(r2)
  81a660:	1809883a 	mov	r4,r3
  81a664:	100b883a 	mov	r5,r2
  81a668:	018020b4 	movhi	r6,130
  81a66c:	31a92a04 	addi	r6,r6,-23384
  81a670:	e1ffff17 	ldw	r7,-4(fp)
  81a674:	08179ac0 	call	8179ac <alt_alarm_start>
}
  81a678:	e037883a 	mov	sp,fp
  81a67c:	dfc00117 	ldw	ra,4(sp)
  81a680:	df000017 	ldw	fp,0(sp)
  81a684:	dec00204 	addi	sp,sp,8
  81a688:	f800283a 	ret

0081a68c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81a68c:	defffa04 	addi	sp,sp,-24
  81a690:	dfc00515 	stw	ra,20(sp)
  81a694:	df000415 	stw	fp,16(sp)
  81a698:	df000404 	addi	fp,sp,16
  81a69c:	e13ffd15 	stw	r4,-12(fp)
  81a6a0:	e17ffe15 	stw	r5,-8(fp)
  81a6a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  81a6a8:	e0bffd17 	ldw	r2,-12(fp)
  81a6ac:	10800017 	ldw	r2,0(r2)
  81a6b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81a6b4:	e0bffc17 	ldw	r2,-16(fp)
  81a6b8:	10c00a04 	addi	r3,r2,40
  81a6bc:	e0bffd17 	ldw	r2,-12(fp)
  81a6c0:	10800217 	ldw	r2,8(r2)
  81a6c4:	1809883a 	mov	r4,r3
  81a6c8:	e17ffe17 	ldw	r5,-8(fp)
  81a6cc:	e1bfff17 	ldw	r6,-4(fp)
  81a6d0:	100f883a 	mov	r7,r2
  81a6d4:	0819fc00 	call	819fc0 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  81a6d8:	e037883a 	mov	sp,fp
  81a6dc:	dfc00117 	ldw	ra,4(sp)
  81a6e0:	df000017 	ldw	fp,0(sp)
  81a6e4:	dec00204 	addi	sp,sp,8
  81a6e8:	f800283a 	ret

0081a6ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81a6ec:	defff904 	addi	sp,sp,-28
  81a6f0:	dfc00615 	stw	ra,24(sp)
  81a6f4:	df000515 	stw	fp,20(sp)
  81a6f8:	df000504 	addi	fp,sp,20
  81a6fc:	e13ffe15 	stw	r4,-8(fp)
  81a700:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81a704:	0007883a 	mov	r3,zero
  81a708:	e0bffe17 	ldw	r2,-8(fp)
  81a70c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81a710:	e0bffe17 	ldw	r2,-8(fp)
  81a714:	10800104 	addi	r2,r2,4
  81a718:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81a71c:	0005303a 	rdctl	r2,status
  81a720:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81a724:	e0fffc17 	ldw	r3,-16(fp)
  81a728:	00bfff84 	movi	r2,-2
  81a72c:	1884703a 	and	r2,r3,r2
  81a730:	1001703a 	wrctl	status,r2
  
  return context;
  81a734:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81a738:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  81a73c:	0818a700 	call	818a70 <alt_tick>
  81a740:	e0bffb17 	ldw	r2,-20(fp)
  81a744:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81a748:	e0bffd17 	ldw	r2,-12(fp)
  81a74c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81a750:	e037883a 	mov	sp,fp
  81a754:	dfc00117 	ldw	ra,4(sp)
  81a758:	df000017 	ldw	fp,0(sp)
  81a75c:	dec00204 	addi	sp,sp,8
  81a760:	f800283a 	ret

0081a764 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81a764:	defff904 	addi	sp,sp,-28
  81a768:	dfc00615 	stw	ra,24(sp)
  81a76c:	df000515 	stw	fp,20(sp)
  81a770:	df000504 	addi	fp,sp,20
  81a774:	e13ffc15 	stw	r4,-16(fp)
  81a778:	e17ffd15 	stw	r5,-12(fp)
  81a77c:	e1bffe15 	stw	r6,-8(fp)
  81a780:	e1ffff15 	stw	r7,-4(fp)
  81a784:	e0bfff17 	ldw	r2,-4(fp)
  81a788:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81a78c:	008020b4 	movhi	r2,130
  81a790:	10834f04 	addi	r2,r2,3388
  81a794:	10800017 	ldw	r2,0(r2)
  81a798:	1000041e 	bne	r2,zero,81a7ac <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  81a79c:	008020b4 	movhi	r2,130
  81a7a0:	10834f04 	addi	r2,r2,3388
  81a7a4:	e0fffb17 	ldw	r3,-20(fp)
  81a7a8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81a7ac:	e0bffc17 	ldw	r2,-16(fp)
  81a7b0:	10800104 	addi	r2,r2,4
  81a7b4:	00c001c4 	movi	r3,7
  81a7b8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  81a7bc:	e13ffe17 	ldw	r4,-8(fp)
  81a7c0:	e17ffc17 	ldw	r5,-16(fp)
  81a7c4:	018020b4 	movhi	r6,130
  81a7c8:	31a9bb04 	addi	r6,r6,-22804
  81a7cc:	0817d380 	call	817d38 <alt_irq_register>
#endif  
}
  81a7d0:	e037883a 	mov	sp,fp
  81a7d4:	dfc00117 	ldw	ra,4(sp)
  81a7d8:	df000017 	ldw	fp,0(sp)
  81a7dc:	dec00204 	addi	sp,sp,8
  81a7e0:	f800283a 	ret

0081a7e4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81a7e4:	defffa04 	addi	sp,sp,-24
  81a7e8:	dfc00515 	stw	ra,20(sp)
  81a7ec:	df000415 	stw	fp,16(sp)
  81a7f0:	df000404 	addi	fp,sp,16
  81a7f4:	e13ffd15 	stw	r4,-12(fp)
  81a7f8:	e17ffe15 	stw	r5,-8(fp)
  81a7fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81a800:	e0bffd17 	ldw	r2,-12(fp)
  81a804:	10800017 	ldw	r2,0(r2)
  81a808:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  81a80c:	e0bffc17 	ldw	r2,-16(fp)
  81a810:	10c00a04 	addi	r3,r2,40
  81a814:	e0bffd17 	ldw	r2,-12(fp)
  81a818:	10800217 	ldw	r2,8(r2)
  81a81c:	1809883a 	mov	r4,r3
  81a820:	e17ffe17 	ldw	r5,-8(fp)
  81a824:	e1bfff17 	ldw	r6,-4(fp)
  81a828:	100f883a 	mov	r7,r2
  81a82c:	081acf80 	call	81acf8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  81a830:	e037883a 	mov	sp,fp
  81a834:	dfc00117 	ldw	ra,4(sp)
  81a838:	df000017 	ldw	fp,0(sp)
  81a83c:	dec00204 	addi	sp,sp,8
  81a840:	f800283a 	ret

0081a844 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81a844:	defffa04 	addi	sp,sp,-24
  81a848:	dfc00515 	stw	ra,20(sp)
  81a84c:	df000415 	stw	fp,16(sp)
  81a850:	df000404 	addi	fp,sp,16
  81a854:	e13ffd15 	stw	r4,-12(fp)
  81a858:	e17ffe15 	stw	r5,-8(fp)
  81a85c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81a860:	e0bffd17 	ldw	r2,-12(fp)
  81a864:	10800017 	ldw	r2,0(r2)
  81a868:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  81a86c:	e0bffc17 	ldw	r2,-16(fp)
  81a870:	10c00a04 	addi	r3,r2,40
  81a874:	e0bffd17 	ldw	r2,-12(fp)
  81a878:	10800217 	ldw	r2,8(r2)
  81a87c:	1809883a 	mov	r4,r3
  81a880:	e17ffe17 	ldw	r5,-8(fp)
  81a884:	e1bfff17 	ldw	r6,-4(fp)
  81a888:	100f883a 	mov	r7,r2
  81a88c:	081af240 	call	81af24 <altera_avalon_uart_write>
      fd->fd_flags);
}
  81a890:	e037883a 	mov	sp,fp
  81a894:	dfc00117 	ldw	ra,4(sp)
  81a898:	df000017 	ldw	fp,0(sp)
  81a89c:	dec00204 	addi	sp,sp,8
  81a8a0:	f800283a 	ret

0081a8a4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  81a8a4:	defffc04 	addi	sp,sp,-16
  81a8a8:	dfc00315 	stw	ra,12(sp)
  81a8ac:	df000215 	stw	fp,8(sp)
  81a8b0:	df000204 	addi	fp,sp,8
  81a8b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81a8b8:	e0bfff17 	ldw	r2,-4(fp)
  81a8bc:	10800017 	ldw	r2,0(r2)
  81a8c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  81a8c4:	e0bffe17 	ldw	r2,-8(fp)
  81a8c8:	10c00a04 	addi	r3,r2,40
  81a8cc:	e0bfff17 	ldw	r2,-4(fp)
  81a8d0:	10800217 	ldw	r2,8(r2)
  81a8d4:	1809883a 	mov	r4,r3
  81a8d8:	100b883a 	mov	r5,r2
  81a8dc:	081ac540 	call	81ac54 <altera_avalon_uart_close>
}
  81a8e0:	e037883a 	mov	sp,fp
  81a8e4:	dfc00117 	ldw	ra,4(sp)
  81a8e8:	df000017 	ldw	fp,0(sp)
  81a8ec:	dec00204 	addi	sp,sp,8
  81a8f0:	f800283a 	ret

0081a8f4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  81a8f4:	defff904 	addi	sp,sp,-28
  81a8f8:	dfc00615 	stw	ra,24(sp)
  81a8fc:	df000515 	stw	fp,20(sp)
  81a900:	df000504 	addi	fp,sp,20
  81a904:	e13ffd15 	stw	r4,-12(fp)
  81a908:	e17ffe15 	stw	r5,-8(fp)
  81a90c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  81a910:	e0bffd17 	ldw	r2,-12(fp)
  81a914:	10800017 	ldw	r2,0(r2)
  81a918:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  81a91c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81a920:	1000041e 	bne	r2,zero,81a934 <altera_avalon_uart_init+0x40>
  81a924:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81a928:	1000021e 	bne	r2,zero,81a934 <altera_avalon_uart_init+0x40>
  81a92c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81a930:	10000226 	beq	r2,zero,81a93c <altera_avalon_uart_init+0x48>
  81a934:	00800044 	movi	r2,1
  81a938:	00000106 	br	81a940 <altera_avalon_uart_init+0x4c>
  81a93c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81a940:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  81a944:	e0bffc17 	ldw	r2,-16(fp)
  81a948:	10000d1e 	bne	r2,zero,81a980 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  81a94c:	e0bffd17 	ldw	r2,-12(fp)
  81a950:	00c32004 	movi	r3,3200
  81a954:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81a958:	e0bffb17 	ldw	r2,-20(fp)
  81a95c:	10800304 	addi	r2,r2,12
  81a960:	e0fffd17 	ldw	r3,-12(fp)
  81a964:	18c00117 	ldw	r3,4(r3)
  81a968:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  81a96c:	e13fff17 	ldw	r4,-4(fp)
  81a970:	e17ffd17 	ldw	r5,-12(fp)
  81a974:	018020b4 	movhi	r6,130
  81a978:	31aa6504 	addi	r6,r6,-22124
  81a97c:	0817d380 	call	817d38 <alt_irq_register>
#endif  
  }
}
  81a980:	e037883a 	mov	sp,fp
  81a984:	dfc00117 	ldw	ra,4(sp)
  81a988:	df000017 	ldw	fp,0(sp)
  81a98c:	dec00204 	addi	sp,sp,8
  81a990:	f800283a 	ret

0081a994 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  81a994:	defff904 	addi	sp,sp,-28
  81a998:	dfc00615 	stw	ra,24(sp)
  81a99c:	df000515 	stw	fp,20(sp)
  81a9a0:	df000504 	addi	fp,sp,20
  81a9a4:	e13ffe15 	stw	r4,-8(fp)
  81a9a8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  81a9ac:	e0bffe17 	ldw	r2,-8(fp)
  81a9b0:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  81a9b4:	e0bffb17 	ldw	r2,-20(fp)
  81a9b8:	10800017 	ldw	r2,0(r2)
  81a9bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  81a9c0:	e0bffc17 	ldw	r2,-16(fp)
  81a9c4:	10800204 	addi	r2,r2,8
  81a9c8:	10800037 	ldwio	r2,0(r2)
  81a9cc:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  81a9d0:	e0bffc17 	ldw	r2,-16(fp)
  81a9d4:	10800204 	addi	r2,r2,8
  81a9d8:	0007883a 	mov	r3,zero
  81a9dc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  81a9e0:	e0bffc17 	ldw	r2,-16(fp)
  81a9e4:	10800204 	addi	r2,r2,8
  81a9e8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  81a9ec:	e0bffd17 	ldw	r2,-12(fp)
  81a9f0:	1080200c 	andi	r2,r2,128
  81a9f4:	10000326 	beq	r2,zero,81aa04 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  81a9f8:	e13ffb17 	ldw	r4,-20(fp)
  81a9fc:	e17ffd17 	ldw	r5,-12(fp)
  81aa00:	081aa300 	call	81aa30 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  81aa04:	e0bffd17 	ldw	r2,-12(fp)
  81aa08:	1081100c 	andi	r2,r2,1088
  81aa0c:	10000326 	beq	r2,zero,81aa1c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  81aa10:	e13ffb17 	ldw	r4,-20(fp)
  81aa14:	e17ffd17 	ldw	r5,-12(fp)
  81aa18:	081ab100 	call	81ab10 <altera_avalon_uart_txirq>
  }
  

}
  81aa1c:	e037883a 	mov	sp,fp
  81aa20:	dfc00117 	ldw	ra,4(sp)
  81aa24:	df000017 	ldw	fp,0(sp)
  81aa28:	dec00204 	addi	sp,sp,8
  81aa2c:	f800283a 	ret

0081aa30 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81aa30:	defffc04 	addi	sp,sp,-16
  81aa34:	df000315 	stw	fp,12(sp)
  81aa38:	df000304 	addi	fp,sp,12
  81aa3c:	e13ffe15 	stw	r4,-8(fp)
  81aa40:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  81aa44:	e0bfff17 	ldw	r2,-4(fp)
  81aa48:	108000cc 	andi	r2,r2,3
  81aa4c:	10000126 	beq	r2,zero,81aa54 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  81aa50:	00002b06 	br	81ab00 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  81aa54:	e0bffe17 	ldw	r2,-8(fp)
  81aa58:	10800317 	ldw	r2,12(r2)
  81aa5c:	e0bffe17 	ldw	r2,-8(fp)
  81aa60:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81aa64:	e0bffe17 	ldw	r2,-8(fp)
  81aa68:	10800317 	ldw	r2,12(r2)
  81aa6c:	10800044 	addi	r2,r2,1
  81aa70:	10800fcc 	andi	r2,r2,63
  81aa74:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  81aa78:	e0bffe17 	ldw	r2,-8(fp)
  81aa7c:	10800317 	ldw	r2,12(r2)
  81aa80:	e0fffe17 	ldw	r3,-8(fp)
  81aa84:	18c00017 	ldw	r3,0(r3)
  81aa88:	18c00037 	ldwio	r3,0(r3)
  81aa8c:	1809883a 	mov	r4,r3
  81aa90:	e0fffe17 	ldw	r3,-8(fp)
  81aa94:	1885883a 	add	r2,r3,r2
  81aa98:	10800704 	addi	r2,r2,28
  81aa9c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  81aaa0:	e0bffe17 	ldw	r2,-8(fp)
  81aaa4:	e0fffd17 	ldw	r3,-12(fp)
  81aaa8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81aaac:	e0bffe17 	ldw	r2,-8(fp)
  81aab0:	10800317 	ldw	r2,12(r2)
  81aab4:	10800044 	addi	r2,r2,1
  81aab8:	10800fcc 	andi	r2,r2,63
  81aabc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  81aac0:	e0bffe17 	ldw	r2,-8(fp)
  81aac4:	10c00217 	ldw	r3,8(r2)
  81aac8:	e0bffd17 	ldw	r2,-12(fp)
  81aacc:	18800c1e 	bne	r3,r2,81ab00 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81aad0:	e0bffe17 	ldw	r2,-8(fp)
  81aad4:	10c00117 	ldw	r3,4(r2)
  81aad8:	00bfdfc4 	movi	r2,-129
  81aadc:	1886703a 	and	r3,r3,r2
  81aae0:	e0bffe17 	ldw	r2,-8(fp)
  81aae4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  81aae8:	e0bffe17 	ldw	r2,-8(fp)
  81aaec:	10800017 	ldw	r2,0(r2)
  81aaf0:	10800304 	addi	r2,r2,12
  81aaf4:	e0fffe17 	ldw	r3,-8(fp)
  81aaf8:	18c00117 	ldw	r3,4(r3)
  81aafc:	10c00035 	stwio	r3,0(r2)
  }   
}
  81ab00:	e037883a 	mov	sp,fp
  81ab04:	df000017 	ldw	fp,0(sp)
  81ab08:	dec00104 	addi	sp,sp,4
  81ab0c:	f800283a 	ret

0081ab10 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81ab10:	defffb04 	addi	sp,sp,-20
  81ab14:	df000415 	stw	fp,16(sp)
  81ab18:	df000404 	addi	fp,sp,16
  81ab1c:	e13ffc15 	stw	r4,-16(fp)
  81ab20:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  81ab24:	e0bffc17 	ldw	r2,-16(fp)
  81ab28:	10c00417 	ldw	r3,16(r2)
  81ab2c:	e0bffc17 	ldw	r2,-16(fp)
  81ab30:	10800517 	ldw	r2,20(r2)
  81ab34:	18803226 	beq	r3,r2,81ac00 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81ab38:	e0bffc17 	ldw	r2,-16(fp)
  81ab3c:	10800617 	ldw	r2,24(r2)
  81ab40:	1080008c 	andi	r2,r2,2
  81ab44:	10000326 	beq	r2,zero,81ab54 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81ab48:	e0bffd17 	ldw	r2,-12(fp)
  81ab4c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81ab50:	10001d26 	beq	r2,zero,81abc8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  81ab54:	e0bffc17 	ldw	r2,-16(fp)
  81ab58:	10800417 	ldw	r2,16(r2)
  81ab5c:	e0bffc17 	ldw	r2,-16(fp)
  81ab60:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  81ab64:	e0bffc17 	ldw	r2,-16(fp)
  81ab68:	10800017 	ldw	r2,0(r2)
  81ab6c:	10800104 	addi	r2,r2,4
  81ab70:	e0fffc17 	ldw	r3,-16(fp)
  81ab74:	18c00417 	ldw	r3,16(r3)
  81ab78:	e13ffc17 	ldw	r4,-16(fp)
  81ab7c:	20c7883a 	add	r3,r4,r3
  81ab80:	18c01704 	addi	r3,r3,92
  81ab84:	18c00003 	ldbu	r3,0(r3)
  81ab88:	18c03fcc 	andi	r3,r3,255
  81ab8c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  81ab90:	e0bffc17 	ldw	r2,-16(fp)
  81ab94:	10800417 	ldw	r2,16(r2)
  81ab98:	10800044 	addi	r2,r2,1
  81ab9c:	e0fffc17 	ldw	r3,-16(fp)
  81aba0:	18800415 	stw	r2,16(r3)
  81aba4:	10c00fcc 	andi	r3,r2,63
  81aba8:	e0bffc17 	ldw	r2,-16(fp)
  81abac:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81abb0:	e0bffc17 	ldw	r2,-16(fp)
  81abb4:	10800117 	ldw	r2,4(r2)
  81abb8:	10c01014 	ori	r3,r2,64
  81abbc:	e0bffc17 	ldw	r2,-16(fp)
  81abc0:	10c00115 	stw	r3,4(r2)
  81abc4:	00000e06 	br	81ac00 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  81abc8:	e0bffc17 	ldw	r2,-16(fp)
  81abcc:	10800017 	ldw	r2,0(r2)
  81abd0:	10800204 	addi	r2,r2,8
  81abd4:	10800037 	ldwio	r2,0(r2)
  81abd8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81abdc:	e0bffd17 	ldw	r2,-12(fp)
  81abe0:	1082000c 	andi	r2,r2,2048
  81abe4:	1000061e 	bne	r2,zero,81ac00 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81abe8:	e0bffc17 	ldw	r2,-16(fp)
  81abec:	10c00117 	ldw	r3,4(r2)
  81abf0:	00bfefc4 	movi	r2,-65
  81abf4:	1886703a 	and	r3,r3,r2
  81abf8:	e0bffc17 	ldw	r2,-16(fp)
  81abfc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  81ac00:	e0bffc17 	ldw	r2,-16(fp)
  81ac04:	10c00417 	ldw	r3,16(r2)
  81ac08:	e0bffc17 	ldw	r2,-16(fp)
  81ac0c:	10800517 	ldw	r2,20(r2)
  81ac10:	1880061e 	bne	r3,r2,81ac2c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81ac14:	e0bffc17 	ldw	r2,-16(fp)
  81ac18:	10c00117 	ldw	r3,4(r2)
  81ac1c:	00beefc4 	movi	r2,-1089
  81ac20:	1886703a 	and	r3,r3,r2
  81ac24:	e0bffc17 	ldw	r2,-16(fp)
  81ac28:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81ac2c:	e0bffc17 	ldw	r2,-16(fp)
  81ac30:	10800017 	ldw	r2,0(r2)
  81ac34:	10800304 	addi	r2,r2,12
  81ac38:	e0fffc17 	ldw	r3,-16(fp)
  81ac3c:	18c00117 	ldw	r3,4(r3)
  81ac40:	10c00035 	stwio	r3,0(r2)
}
  81ac44:	e037883a 	mov	sp,fp
  81ac48:	df000017 	ldw	fp,0(sp)
  81ac4c:	dec00104 	addi	sp,sp,4
  81ac50:	f800283a 	ret

0081ac54 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  81ac54:	defffd04 	addi	sp,sp,-12
  81ac58:	df000215 	stw	fp,8(sp)
  81ac5c:	df000204 	addi	fp,sp,8
  81ac60:	e13ffe15 	stw	r4,-8(fp)
  81ac64:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81ac68:	00000506 	br	81ac80 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  81ac6c:	e0bfff17 	ldw	r2,-4(fp)
  81ac70:	1090000c 	andi	r2,r2,16384
  81ac74:	10000226 	beq	r2,zero,81ac80 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  81ac78:	00bffd44 	movi	r2,-11
  81ac7c:	00000606 	br	81ac98 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81ac80:	e0bffe17 	ldw	r2,-8(fp)
  81ac84:	10c00417 	ldw	r3,16(r2)
  81ac88:	e0bffe17 	ldw	r2,-8(fp)
  81ac8c:	10800517 	ldw	r2,20(r2)
  81ac90:	18bff61e 	bne	r3,r2,81ac6c <__alt_data_end+0xff81ac6c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81ac94:	0005883a 	mov	r2,zero
}
  81ac98:	e037883a 	mov	sp,fp
  81ac9c:	df000017 	ldw	fp,0(sp)
  81aca0:	dec00104 	addi	sp,sp,4
  81aca4:	f800283a 	ret

0081aca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81aca8:	defffe04 	addi	sp,sp,-8
  81acac:	dfc00115 	stw	ra,4(sp)
  81acb0:	df000015 	stw	fp,0(sp)
  81acb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81acb8:	008020b4 	movhi	r2,130
  81acbc:	10bbd904 	addi	r2,r2,-4252
  81acc0:	10800017 	ldw	r2,0(r2)
  81acc4:	10000526 	beq	r2,zero,81acdc <alt_get_errno+0x34>
  81acc8:	008020b4 	movhi	r2,130
  81accc:	10bbd904 	addi	r2,r2,-4252
  81acd0:	10800017 	ldw	r2,0(r2)
  81acd4:	103ee83a 	callr	r2
  81acd8:	00000206 	br	81ace4 <alt_get_errno+0x3c>
  81acdc:	008020b4 	movhi	r2,130
  81ace0:	10834404 	addi	r2,r2,3344
}
  81ace4:	e037883a 	mov	sp,fp
  81ace8:	dfc00117 	ldw	ra,4(sp)
  81acec:	df000017 	ldw	fp,0(sp)
  81acf0:	dec00204 	addi	sp,sp,8
  81acf4:	f800283a 	ret

0081acf8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  81acf8:	defff204 	addi	sp,sp,-56
  81acfc:	dfc00d15 	stw	ra,52(sp)
  81ad00:	df000c15 	stw	fp,48(sp)
  81ad04:	df000c04 	addi	fp,sp,48
  81ad08:	e13ffc15 	stw	r4,-16(fp)
  81ad0c:	e17ffd15 	stw	r5,-12(fp)
  81ad10:	e1bffe15 	stw	r6,-8(fp)
  81ad14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  81ad18:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  81ad1c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  81ad20:	e0bfff17 	ldw	r2,-4(fp)
  81ad24:	1090000c 	andi	r2,r2,16384
  81ad28:	1005003a 	cmpeq	r2,r2,zero
  81ad2c:	10803fcc 	andi	r2,r2,255
  81ad30:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  81ad34:	00001306 	br	81ad84 <altera_avalon_uart_read+0x8c>
    {
      count++;
  81ad38:	e0bff517 	ldw	r2,-44(fp)
  81ad3c:	10800044 	addi	r2,r2,1
  81ad40:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  81ad44:	e0bffd17 	ldw	r2,-12(fp)
  81ad48:	10c00044 	addi	r3,r2,1
  81ad4c:	e0fffd15 	stw	r3,-12(fp)
  81ad50:	e0fffc17 	ldw	r3,-16(fp)
  81ad54:	18c00217 	ldw	r3,8(r3)
  81ad58:	e13ffc17 	ldw	r4,-16(fp)
  81ad5c:	20c7883a 	add	r3,r4,r3
  81ad60:	18c00704 	addi	r3,r3,28
  81ad64:	18c00003 	ldbu	r3,0(r3)
  81ad68:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  81ad6c:	e0bffc17 	ldw	r2,-16(fp)
  81ad70:	10800217 	ldw	r2,8(r2)
  81ad74:	10800044 	addi	r2,r2,1
  81ad78:	10c00fcc 	andi	r3,r2,63
  81ad7c:	e0bffc17 	ldw	r2,-16(fp)
  81ad80:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  81ad84:	e0fff517 	ldw	r3,-44(fp)
  81ad88:	e0bffe17 	ldw	r2,-8(fp)
  81ad8c:	1880050e 	bge	r3,r2,81ada4 <altera_avalon_uart_read+0xac>
  81ad90:	e0bffc17 	ldw	r2,-16(fp)
  81ad94:	10c00217 	ldw	r3,8(r2)
  81ad98:	e0bffc17 	ldw	r2,-16(fp)
  81ad9c:	10800317 	ldw	r2,12(r2)
  81ada0:	18bfe51e 	bne	r3,r2,81ad38 <__alt_data_end+0xff81ad38>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  81ada4:	e0bff517 	ldw	r2,-44(fp)
  81ada8:	1000251e 	bne	r2,zero,81ae40 <altera_avalon_uart_read+0x148>
  81adac:	e0bffc17 	ldw	r2,-16(fp)
  81adb0:	10c00217 	ldw	r3,8(r2)
  81adb4:	e0bffc17 	ldw	r2,-16(fp)
  81adb8:	10800317 	ldw	r2,12(r2)
  81adbc:	1880201e 	bne	r3,r2,81ae40 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  81adc0:	e0bff617 	ldw	r2,-40(fp)
  81adc4:	1000071e 	bne	r2,zero,81ade4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  81adc8:	081aca80 	call	81aca8 <alt_get_errno>
  81adcc:	1007883a 	mov	r3,r2
  81add0:	008002c4 	movi	r2,11
  81add4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  81add8:	00800044 	movi	r2,1
  81addc:	e0bff405 	stb	r2,-48(fp)
        break;
  81ade0:	00001b06 	br	81ae50 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ade4:	0005303a 	rdctl	r2,status
  81ade8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81adec:	e0fff817 	ldw	r3,-32(fp)
  81adf0:	00bfff84 	movi	r2,-2
  81adf4:	1884703a 	and	r2,r3,r2
  81adf8:	1001703a 	wrctl	status,r2
  
  return context;
  81adfc:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  81ae00:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81ae04:	e0bffc17 	ldw	r2,-16(fp)
  81ae08:	10800117 	ldw	r2,4(r2)
  81ae0c:	10c02014 	ori	r3,r2,128
  81ae10:	e0bffc17 	ldw	r2,-16(fp)
  81ae14:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81ae18:	e0bffc17 	ldw	r2,-16(fp)
  81ae1c:	10800017 	ldw	r2,0(r2)
  81ae20:	10800304 	addi	r2,r2,12
  81ae24:	e0fffc17 	ldw	r3,-16(fp)
  81ae28:	18c00117 	ldw	r3,4(r3)
  81ae2c:	10c00035 	stwio	r3,0(r2)
  81ae30:	e0bff717 	ldw	r2,-36(fp)
  81ae34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81ae38:	e0bff917 	ldw	r2,-28(fp)
  81ae3c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  81ae40:	e0bff517 	ldw	r2,-44(fp)
  81ae44:	1000021e 	bne	r2,zero,81ae50 <altera_avalon_uart_read+0x158>
  81ae48:	e0bffe17 	ldw	r2,-8(fp)
  81ae4c:	103fb91e 	bne	r2,zero,81ad34 <__alt_data_end+0xff81ad34>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81ae50:	0005303a 	rdctl	r2,status
  81ae54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81ae58:	e0fffa17 	ldw	r3,-24(fp)
  81ae5c:	00bfff84 	movi	r2,-2
  81ae60:	1884703a 	and	r2,r3,r2
  81ae64:	1001703a 	wrctl	status,r2
  
  return context;
  81ae68:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  81ae6c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81ae70:	e0bffc17 	ldw	r2,-16(fp)
  81ae74:	10800117 	ldw	r2,4(r2)
  81ae78:	10c02014 	ori	r3,r2,128
  81ae7c:	e0bffc17 	ldw	r2,-16(fp)
  81ae80:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81ae84:	e0bffc17 	ldw	r2,-16(fp)
  81ae88:	10800017 	ldw	r2,0(r2)
  81ae8c:	10800304 	addi	r2,r2,12
  81ae90:	e0fffc17 	ldw	r3,-16(fp)
  81ae94:	18c00117 	ldw	r3,4(r3)
  81ae98:	10c00035 	stwio	r3,0(r2)
  81ae9c:	e0bff717 	ldw	r2,-36(fp)
  81aea0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aea4:	e0bffb17 	ldw	r2,-20(fp)
  81aea8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  81aeac:	e0bff403 	ldbu	r2,-48(fp)
  81aeb0:	10000226 	beq	r2,zero,81aebc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  81aeb4:	00bffd44 	movi	r2,-11
  81aeb8:	00000106 	br	81aec0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  81aebc:	e0bff517 	ldw	r2,-44(fp)
  }
}
  81aec0:	e037883a 	mov	sp,fp
  81aec4:	dfc00117 	ldw	ra,4(sp)
  81aec8:	df000017 	ldw	fp,0(sp)
  81aecc:	dec00204 	addi	sp,sp,8
  81aed0:	f800283a 	ret

0081aed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81aed4:	defffe04 	addi	sp,sp,-8
  81aed8:	dfc00115 	stw	ra,4(sp)
  81aedc:	df000015 	stw	fp,0(sp)
  81aee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81aee4:	008020b4 	movhi	r2,130
  81aee8:	10bbd904 	addi	r2,r2,-4252
  81aeec:	10800017 	ldw	r2,0(r2)
  81aef0:	10000526 	beq	r2,zero,81af08 <alt_get_errno+0x34>
  81aef4:	008020b4 	movhi	r2,130
  81aef8:	10bbd904 	addi	r2,r2,-4252
  81aefc:	10800017 	ldw	r2,0(r2)
  81af00:	103ee83a 	callr	r2
  81af04:	00000206 	br	81af10 <alt_get_errno+0x3c>
  81af08:	008020b4 	movhi	r2,130
  81af0c:	10834404 	addi	r2,r2,3344
}
  81af10:	e037883a 	mov	sp,fp
  81af14:	dfc00117 	ldw	ra,4(sp)
  81af18:	df000017 	ldw	fp,0(sp)
  81af1c:	dec00204 	addi	sp,sp,8
  81af20:	f800283a 	ret

0081af24 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  81af24:	defff204 	addi	sp,sp,-56
  81af28:	dfc00d15 	stw	ra,52(sp)
  81af2c:	df000c15 	stw	fp,48(sp)
  81af30:	df000c04 	addi	fp,sp,48
  81af34:	e13ffc15 	stw	r4,-16(fp)
  81af38:	e17ffd15 	stw	r5,-12(fp)
  81af3c:	e1bffe15 	stw	r6,-8(fp)
  81af40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  81af44:	e0bffe17 	ldw	r2,-8(fp)
  81af48:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  81af4c:	e0bfff17 	ldw	r2,-4(fp)
  81af50:	1090000c 	andi	r2,r2,16384
  81af54:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  81af58:	00003c06 	br	81b04c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81af5c:	e0bffc17 	ldw	r2,-16(fp)
  81af60:	10800517 	ldw	r2,20(r2)
  81af64:	10800044 	addi	r2,r2,1
  81af68:	10800fcc 	andi	r2,r2,63
  81af6c:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  81af70:	e0bffc17 	ldw	r2,-16(fp)
  81af74:	10c00417 	ldw	r3,16(r2)
  81af78:	e0bff617 	ldw	r2,-40(fp)
  81af7c:	1880221e 	bne	r3,r2,81b008 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  81af80:	e0bff517 	ldw	r2,-44(fp)
  81af84:	10000526 	beq	r2,zero,81af9c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  81af88:	081aed40 	call	81aed4 <alt_get_errno>
  81af8c:	1007883a 	mov	r3,r2
  81af90:	008002c4 	movi	r2,11
  81af94:	18800015 	stw	r2,0(r3)
        break;
  81af98:	00002e06 	br	81b054 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81af9c:	0005303a 	rdctl	r2,status
  81afa0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81afa4:	e0fff817 	ldw	r3,-32(fp)
  81afa8:	00bfff84 	movi	r2,-2
  81afac:	1884703a 	and	r2,r3,r2
  81afb0:	1001703a 	wrctl	status,r2
  
  return context;
  81afb4:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  81afb8:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81afbc:	e0bffc17 	ldw	r2,-16(fp)
  81afc0:	10800117 	ldw	r2,4(r2)
  81afc4:	10c11014 	ori	r3,r2,1088
  81afc8:	e0bffc17 	ldw	r2,-16(fp)
  81afcc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81afd0:	e0bffc17 	ldw	r2,-16(fp)
  81afd4:	10800017 	ldw	r2,0(r2)
  81afd8:	10800304 	addi	r2,r2,12
  81afdc:	e0fffc17 	ldw	r3,-16(fp)
  81afe0:	18c00117 	ldw	r3,4(r3)
  81afe4:	10c00035 	stwio	r3,0(r2)
  81afe8:	e0bff717 	ldw	r2,-36(fp)
  81afec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81aff0:	e0bff917 	ldw	r2,-28(fp)
  81aff4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  81aff8:	e0bffc17 	ldw	r2,-16(fp)
  81affc:	10c00417 	ldw	r3,16(r2)
  81b000:	e0bff617 	ldw	r2,-40(fp)
  81b004:	18bffc26 	beq	r3,r2,81aff8 <__alt_data_end+0xff81aff8>
      }
    }

    count--;
  81b008:	e0bff417 	ldw	r2,-48(fp)
  81b00c:	10bfffc4 	addi	r2,r2,-1
  81b010:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  81b014:	e0bffc17 	ldw	r2,-16(fp)
  81b018:	10c00517 	ldw	r3,20(r2)
  81b01c:	e0bffd17 	ldw	r2,-12(fp)
  81b020:	11000044 	addi	r4,r2,1
  81b024:	e13ffd15 	stw	r4,-12(fp)
  81b028:	10800003 	ldbu	r2,0(r2)
  81b02c:	1009883a 	mov	r4,r2
  81b030:	e0bffc17 	ldw	r2,-16(fp)
  81b034:	10c5883a 	add	r2,r2,r3
  81b038:	10801704 	addi	r2,r2,92
  81b03c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  81b040:	e0bffc17 	ldw	r2,-16(fp)
  81b044:	e0fff617 	ldw	r3,-40(fp)
  81b048:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  81b04c:	e0bff417 	ldw	r2,-48(fp)
  81b050:	103fc21e 	bne	r2,zero,81af5c <__alt_data_end+0xff81af5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81b054:	0005303a 	rdctl	r2,status
  81b058:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81b05c:	e0fffa17 	ldw	r3,-24(fp)
  81b060:	00bfff84 	movi	r2,-2
  81b064:	1884703a 	and	r2,r3,r2
  81b068:	1001703a 	wrctl	status,r2
  
  return context;
  81b06c:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  81b070:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81b074:	e0bffc17 	ldw	r2,-16(fp)
  81b078:	10800117 	ldw	r2,4(r2)
  81b07c:	10c11014 	ori	r3,r2,1088
  81b080:	e0bffc17 	ldw	r2,-16(fp)
  81b084:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81b088:	e0bffc17 	ldw	r2,-16(fp)
  81b08c:	10800017 	ldw	r2,0(r2)
  81b090:	10800304 	addi	r2,r2,12
  81b094:	e0fffc17 	ldw	r3,-16(fp)
  81b098:	18c00117 	ldw	r3,4(r3)
  81b09c:	10c00035 	stwio	r3,0(r2)
  81b0a0:	e0bff717 	ldw	r2,-36(fp)
  81b0a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81b0a8:	e0bffb17 	ldw	r2,-20(fp)
  81b0ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  81b0b0:	e0fffe17 	ldw	r3,-8(fp)
  81b0b4:	e0bff417 	ldw	r2,-48(fp)
  81b0b8:	1885c83a 	sub	r2,r3,r2
}
  81b0bc:	e037883a 	mov	sp,fp
  81b0c0:	dfc00117 	ldw	ra,4(sp)
  81b0c4:	df000017 	ldw	fp,0(sp)
  81b0c8:	dec00204 	addi	sp,sp,8
  81b0cc:	f800283a 	ret

0081b0d0 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  81b0d0:	defffc04 	addi	sp,sp,-16
  81b0d4:	dfc00315 	stw	ra,12(sp)
  81b0d8:	df000215 	stw	fp,8(sp)
  81b0dc:	df000204 	addi	fp,sp,8
  81b0e0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  81b0e4:	e13fff17 	ldw	r4,-4(fp)
  81b0e8:	014020b4 	movhi	r5,130
  81b0ec:	297bd604 	addi	r5,r5,-4264
  81b0f0:	081ba540 	call	81ba54 <alt_find_dev>
  81b0f4:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  81b0f8:	e0bffe17 	ldw	r2,-8(fp)
}
  81b0fc:	e037883a 	mov	sp,fp
  81b100:	dfc00117 	ldw	ra,4(sp)
  81b104:	df000017 	ldw	fp,0(sp)
  81b108:	dec00204 	addi	sp,sp,8
  81b10c:	f800283a 	ret

0081b110 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  81b110:	defffd04 	addi	sp,sp,-12
  81b114:	df000215 	stw	fp,8(sp)
  81b118:	df000204 	addi	fp,sp,8
  81b11c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81b120:	e0bfff17 	ldw	r2,-4(fp)
  81b124:	10800a17 	ldw	r2,40(r2)
  81b128:	10800037 	ldwio	r2,0(r2)
  81b12c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  81b130:	e0bffe17 	ldw	r2,-8(fp)
  81b134:	10800054 	ori	r2,r2,1
  81b138:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81b13c:	e0bfff17 	ldw	r2,-4(fp)
  81b140:	10800a17 	ldw	r2,40(r2)
  81b144:	1007883a 	mov	r3,r2
  81b148:	e0bffe17 	ldw	r2,-8(fp)
  81b14c:	18800035 	stwio	r2,0(r3)
}
  81b150:	e037883a 	mov	sp,fp
  81b154:	df000017 	ldw	fp,0(sp)
  81b158:	dec00104 	addi	sp,sp,4
  81b15c:	f800283a 	ret

0081b160 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  81b160:	defffd04 	addi	sp,sp,-12
  81b164:	df000215 	stw	fp,8(sp)
  81b168:	df000204 	addi	fp,sp,8
  81b16c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81b170:	e0bfff17 	ldw	r2,-4(fp)
  81b174:	10800a17 	ldw	r2,40(r2)
  81b178:	10800037 	ldwio	r2,0(r2)
  81b17c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  81b180:	e0fffe17 	ldw	r3,-8(fp)
  81b184:	00bfff84 	movi	r2,-2
  81b188:	1884703a 	and	r2,r3,r2
  81b18c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81b190:	e0bfff17 	ldw	r2,-4(fp)
  81b194:	10800a17 	ldw	r2,40(r2)
  81b198:	1007883a 	mov	r3,r2
  81b19c:	e0bffe17 	ldw	r2,-8(fp)
  81b1a0:	18800035 	stwio	r2,0(r3)
}
  81b1a4:	e037883a 	mov	sp,fp
  81b1a8:	df000017 	ldw	fp,0(sp)
  81b1ac:	dec00104 	addi	sp,sp,4
  81b1b0:	f800283a 	ret

0081b1b4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  81b1b4:	defffd04 	addi	sp,sp,-12
  81b1b8:	df000215 	stw	fp,8(sp)
  81b1bc:	df000204 	addi	fp,sp,8
  81b1c0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81b1c4:	e0bfff17 	ldw	r2,-4(fp)
  81b1c8:	10800a17 	ldw	r2,40(r2)
  81b1cc:	10800037 	ldwio	r2,0(r2)
  81b1d0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  81b1d4:	e0bffe17 	ldw	r2,-8(fp)
  81b1d8:	10800094 	ori	r2,r2,2
  81b1dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81b1e0:	e0bfff17 	ldw	r2,-4(fp)
  81b1e4:	10800a17 	ldw	r2,40(r2)
  81b1e8:	1007883a 	mov	r3,r2
  81b1ec:	e0bffe17 	ldw	r2,-8(fp)
  81b1f0:	18800035 	stwio	r2,0(r3)
}
  81b1f4:	e037883a 	mov	sp,fp
  81b1f8:	df000017 	ldw	fp,0(sp)
  81b1fc:	dec00104 	addi	sp,sp,4
  81b200:	f800283a 	ret

0081b204 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  81b204:	defffd04 	addi	sp,sp,-12
  81b208:	df000215 	stw	fp,8(sp)
  81b20c:	df000204 	addi	fp,sp,8
  81b210:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81b214:	e0bfff17 	ldw	r2,-4(fp)
  81b218:	10800a17 	ldw	r2,40(r2)
  81b21c:	10800037 	ldwio	r2,0(r2)
  81b220:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  81b224:	e0fffe17 	ldw	r3,-8(fp)
  81b228:	00bfff44 	movi	r2,-3
  81b22c:	1884703a 	and	r2,r3,r2
  81b230:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81b234:	e0bfff17 	ldw	r2,-4(fp)
  81b238:	10800a17 	ldw	r2,40(r2)
  81b23c:	1007883a 	mov	r3,r2
  81b240:	e0bffe17 	ldw	r2,-8(fp)
  81b244:	18800035 	stwio	r2,0(r3)
}
  81b248:	e037883a 	mov	sp,fp
  81b24c:	df000017 	ldw	fp,0(sp)
  81b250:	dec00104 	addi	sp,sp,4
  81b254:	f800283a 	ret

0081b258 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  81b258:	defffd04 	addi	sp,sp,-12
  81b25c:	df000215 	stw	fp,8(sp)
  81b260:	df000204 	addi	fp,sp,8
  81b264:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81b268:	e0bfff17 	ldw	r2,-4(fp)
  81b26c:	10800a17 	ldw	r2,40(r2)
  81b270:	10800037 	ldwio	r2,0(r2)
  81b274:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  81b278:	e0bffe17 	ldw	r2,-8(fp)
  81b27c:	1080400c 	andi	r2,r2,256
  81b280:	1004c03a 	cmpne	r2,r2,zero
  81b284:	10803fcc 	andi	r2,r2,255
}
  81b288:	e037883a 	mov	sp,fp
  81b28c:	df000017 	ldw	fp,0(sp)
  81b290:	dec00104 	addi	sp,sp,4
  81b294:	f800283a 	ret

0081b298 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  81b298:	defffd04 	addi	sp,sp,-12
  81b29c:	df000215 	stw	fp,8(sp)
  81b2a0:	df000204 	addi	fp,sp,8
  81b2a4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81b2a8:	e0bfff17 	ldw	r2,-4(fp)
  81b2ac:	10800a17 	ldw	r2,40(r2)
  81b2b0:	10800037 	ldwio	r2,0(r2)
  81b2b4:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  81b2b8:	e0bffe17 	ldw	r2,-8(fp)
  81b2bc:	1080800c 	andi	r2,r2,512
  81b2c0:	1004c03a 	cmpne	r2,r2,zero
  81b2c4:	10803fcc 	andi	r2,r2,255
}
  81b2c8:	e037883a 	mov	sp,fp
  81b2cc:	df000017 	ldw	fp,0(sp)
  81b2d0:	dec00104 	addi	sp,sp,4
  81b2d4:	f800283a 	ret

0081b2d8 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  81b2d8:	defffd04 	addi	sp,sp,-12
  81b2dc:	df000215 	stw	fp,8(sp)
  81b2e0:	df000204 	addi	fp,sp,8
  81b2e4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81b2e8:	e0bfff17 	ldw	r2,-4(fp)
  81b2ec:	10800a17 	ldw	r2,40(r2)
  81b2f0:	10800037 	ldwio	r2,0(r2)
  81b2f4:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  81b2f8:	e0bffe17 	ldw	r2,-8(fp)
  81b2fc:	10800114 	ori	r2,r2,4
  81b300:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  81b304:	e0bffe17 	ldw	r2,-8(fp)
  81b308:	10800214 	ori	r2,r2,8
  81b30c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81b310:	e0bfff17 	ldw	r2,-4(fp)
  81b314:	10800a17 	ldw	r2,40(r2)
  81b318:	1007883a 	mov	r3,r2
  81b31c:	e0bffe17 	ldw	r2,-8(fp)
  81b320:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  81b324:	e0fffe17 	ldw	r3,-8(fp)
  81b328:	00bffec4 	movi	r2,-5
  81b32c:	1884703a 	and	r2,r3,r2
  81b330:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  81b334:	e0fffe17 	ldw	r3,-8(fp)
  81b338:	00bffdc4 	movi	r2,-9
  81b33c:	1884703a 	and	r2,r3,r2
  81b340:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81b344:	e0bfff17 	ldw	r2,-4(fp)
  81b348:	10800a17 	ldw	r2,40(r2)
  81b34c:	1007883a 	mov	r3,r2
  81b350:	e0bffe17 	ldw	r2,-8(fp)
  81b354:	18800035 	stwio	r2,0(r3)
}
  81b358:	e037883a 	mov	sp,fp
  81b35c:	df000017 	ldw	fp,0(sp)
  81b360:	dec00104 	addi	sp,sp,4
  81b364:	f800283a 	ret

0081b368 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  81b368:	defffc04 	addi	sp,sp,-16
  81b36c:	df000315 	stw	fp,12(sp)
  81b370:	df000304 	addi	fp,sp,12
  81b374:	e13ffe15 	stw	r4,-8(fp)
  81b378:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81b37c:	e0bffe17 	ldw	r2,-8(fp)
  81b380:	10800a17 	ldw	r2,40(r2)
  81b384:	10800104 	addi	r2,r2,4
  81b388:	10800037 	ldwio	r2,0(r2)
  81b38c:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
  81b390:	e0bfff17 	ldw	r2,-4(fp)
  81b394:	1000041e 	bne	r2,zero,81b3a8 <alt_up_audio_read_fifo_avail+0x40>
  81b398:	e0bffd17 	ldw	r2,-12(fp)
  81b39c:	10bfc00c 	andi	r2,r2,65280
  81b3a0:	1004d23a 	srli	r2,r2,8
  81b3a4:	00000206 	br	81b3b0 <alt_up_audio_read_fifo_avail+0x48>
  81b3a8:	e0bffd17 	ldw	r2,-12(fp)
  81b3ac:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81b3b0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  81b3b4:	e0bffd17 	ldw	r2,-12(fp)
}
  81b3b8:	e037883a 	mov	sp,fp
  81b3bc:	df000017 	ldw	fp,0(sp)
  81b3c0:	dec00104 	addi	sp,sp,4
  81b3c4:	f800283a 	ret

0081b3c8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81b3c8:	defffa04 	addi	sp,sp,-24
  81b3cc:	dfc00515 	stw	ra,20(sp)
  81b3d0:	df000415 	stw	fp,16(sp)
  81b3d4:	df000404 	addi	fp,sp,16
  81b3d8:	e13ffd15 	stw	r4,-12(fp)
  81b3dc:	e17ffe15 	stw	r5,-8(fp)
  81b3e0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  81b3e4:	e13ffd17 	ldw	r4,-12(fp)
  81b3e8:	01400044 	movi	r5,1
  81b3ec:	081b3680 	call	81b368 <alt_up_audio_read_fifo_avail>
  81b3f0:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  81b3f4:	e0bffc17 	ldw	r2,-16(fp)
  81b3f8:	10801868 	cmpgeui	r2,r2,97
  81b3fc:	1000021e 	bne	r2,zero,81b408 <alt_up_audio_record_r+0x40>
		return 0;
  81b400:	0005883a 	mov	r2,zero
  81b404:	00000506 	br	81b41c <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  81b408:	e13ffd17 	ldw	r4,-12(fp)
  81b40c:	e17ffe17 	ldw	r5,-8(fp)
  81b410:	e1bfff17 	ldw	r6,-4(fp)
  81b414:	01c00044 	movi	r7,1
  81b418:	081b5c80 	call	81b5c8 <alt_up_audio_read_fifo>
}
  81b41c:	e037883a 	mov	sp,fp
  81b420:	dfc00117 	ldw	ra,4(sp)
  81b424:	df000017 	ldw	fp,0(sp)
  81b428:	dec00204 	addi	sp,sp,8
  81b42c:	f800283a 	ret

0081b430 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81b430:	defffa04 	addi	sp,sp,-24
  81b434:	dfc00515 	stw	ra,20(sp)
  81b438:	df000415 	stw	fp,16(sp)
  81b43c:	df000404 	addi	fp,sp,16
  81b440:	e13ffd15 	stw	r4,-12(fp)
  81b444:	e17ffe15 	stw	r5,-8(fp)
  81b448:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  81b44c:	e13ffd17 	ldw	r4,-12(fp)
  81b450:	000b883a 	mov	r5,zero
  81b454:	081b3680 	call	81b368 <alt_up_audio_read_fifo_avail>
  81b458:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  81b45c:	e0bffc17 	ldw	r2,-16(fp)
  81b460:	10801868 	cmpgeui	r2,r2,97
  81b464:	1000021e 	bne	r2,zero,81b470 <alt_up_audio_record_l+0x40>
		return 0;
  81b468:	0005883a 	mov	r2,zero
  81b46c:	00000506 	br	81b484 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  81b470:	e13ffd17 	ldw	r4,-12(fp)
  81b474:	e17ffe17 	ldw	r5,-8(fp)
  81b478:	e1bfff17 	ldw	r6,-4(fp)
  81b47c:	000f883a 	mov	r7,zero
  81b480:	081b5c80 	call	81b5c8 <alt_up_audio_read_fifo>
}
  81b484:	e037883a 	mov	sp,fp
  81b488:	dfc00117 	ldw	ra,4(sp)
  81b48c:	df000017 	ldw	fp,0(sp)
  81b490:	dec00204 	addi	sp,sp,8
  81b494:	f800283a 	ret

0081b498 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  81b498:	defffc04 	addi	sp,sp,-16
  81b49c:	df000315 	stw	fp,12(sp)
  81b4a0:	df000304 	addi	fp,sp,12
  81b4a4:	e13ffe15 	stw	r4,-8(fp)
  81b4a8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81b4ac:	e0bffe17 	ldw	r2,-8(fp)
  81b4b0:	10800a17 	ldw	r2,40(r2)
  81b4b4:	10800104 	addi	r2,r2,4
  81b4b8:	10800037 	ldwio	r2,0(r2)
  81b4bc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  81b4c0:	e0bfff17 	ldw	r2,-4(fp)
  81b4c4:	1000031e 	bne	r2,zero,81b4d4 <alt_up_audio_write_fifo_space+0x3c>
  81b4c8:	e0bffd17 	ldw	r2,-12(fp)
  81b4cc:	1004d63a 	srli	r2,r2,24
  81b4d0:	00000306 	br	81b4e0 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  81b4d4:	e0bffd17 	ldw	r2,-12(fp)
  81b4d8:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  81b4dc:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81b4e0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  81b4e4:	e0bffd17 	ldw	r2,-12(fp)
}
  81b4e8:	e037883a 	mov	sp,fp
  81b4ec:	df000017 	ldw	fp,0(sp)
  81b4f0:	dec00104 	addi	sp,sp,4
  81b4f4:	f800283a 	ret

0081b4f8 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81b4f8:	defffa04 	addi	sp,sp,-24
  81b4fc:	dfc00515 	stw	ra,20(sp)
  81b500:	df000415 	stw	fp,16(sp)
  81b504:	df000404 	addi	fp,sp,16
  81b508:	e13ffd15 	stw	r4,-12(fp)
  81b50c:	e17ffe15 	stw	r5,-8(fp)
  81b510:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  81b514:	e13ffd17 	ldw	r4,-12(fp)
  81b518:	01400044 	movi	r5,1
  81b51c:	081b4980 	call	81b498 <alt_up_audio_write_fifo_space>
  81b520:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  81b524:	e0bffc17 	ldw	r2,-16(fp)
  81b528:	10801868 	cmpgeui	r2,r2,97
  81b52c:	1000021e 	bne	r2,zero,81b538 <alt_up_audio_play_r+0x40>
		return 0;
  81b530:	0005883a 	mov	r2,zero
  81b534:	00000506 	br	81b54c <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  81b538:	e13ffd17 	ldw	r4,-12(fp)
  81b53c:	e17ffe17 	ldw	r5,-8(fp)
  81b540:	e1bfff17 	ldw	r6,-4(fp)
  81b544:	01c00044 	movi	r7,1
  81b548:	081b6a80 	call	81b6a8 <alt_up_audio_write_fifo>
}
  81b54c:	e037883a 	mov	sp,fp
  81b550:	dfc00117 	ldw	ra,4(sp)
  81b554:	df000017 	ldw	fp,0(sp)
  81b558:	dec00204 	addi	sp,sp,8
  81b55c:	f800283a 	ret

0081b560 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81b560:	defffa04 	addi	sp,sp,-24
  81b564:	dfc00515 	stw	ra,20(sp)
  81b568:	df000415 	stw	fp,16(sp)
  81b56c:	df000404 	addi	fp,sp,16
  81b570:	e13ffd15 	stw	r4,-12(fp)
  81b574:	e17ffe15 	stw	r5,-8(fp)
  81b578:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  81b57c:	e13ffd17 	ldw	r4,-12(fp)
  81b580:	000b883a 	mov	r5,zero
  81b584:	081b4980 	call	81b498 <alt_up_audio_write_fifo_space>
  81b588:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  81b58c:	e0bffc17 	ldw	r2,-16(fp)
  81b590:	10801868 	cmpgeui	r2,r2,97
  81b594:	1000021e 	bne	r2,zero,81b5a0 <alt_up_audio_play_l+0x40>
		return 0;
  81b598:	0005883a 	mov	r2,zero
  81b59c:	00000506 	br	81b5b4 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  81b5a0:	e13ffd17 	ldw	r4,-12(fp)
  81b5a4:	e17ffe17 	ldw	r5,-8(fp)
  81b5a8:	e1bfff17 	ldw	r6,-4(fp)
  81b5ac:	000f883a 	mov	r7,zero
  81b5b0:	081b6a80 	call	81b6a8 <alt_up_audio_write_fifo>
}
  81b5b4:	e037883a 	mov	sp,fp
  81b5b8:	dfc00117 	ldw	ra,4(sp)
  81b5bc:	df000017 	ldw	fp,0(sp)
  81b5c0:	dec00204 	addi	sp,sp,8
  81b5c4:	f800283a 	ret

0081b5c8 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  81b5c8:	defff904 	addi	sp,sp,-28
  81b5cc:	df000615 	stw	fp,24(sp)
  81b5d0:	df000604 	addi	fp,sp,24
  81b5d4:	e13ffc15 	stw	r4,-16(fp)
  81b5d8:	e17ffd15 	stw	r5,-12(fp)
  81b5dc:	e1bffe15 	stw	r6,-8(fp)
  81b5e0:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  81b5e4:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  81b5e8:	00002706 	br	81b688 <alt_up_audio_read_fifo+0xc0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81b5ec:	e0bffc17 	ldw	r2,-16(fp)
  81b5f0:	10800a17 	ldw	r2,40(r2)
  81b5f4:	10800104 	addi	r2,r2,4
  81b5f8:	10800037 	ldwio	r2,0(r2)
  81b5fc:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
  81b600:	e0bfff17 	ldw	r2,-4(fp)
  81b604:	1000041e 	bne	r2,zero,81b618 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
  81b608:	e0bffb17 	ldw	r2,-20(fp)
  81b60c:	10bfc00c 	andi	r2,r2,65280
			:
  81b610:	1004d23a 	srli	r2,r2,8
  81b614:	00000206 	br	81b620 <alt_up_audio_read_fifo+0x58>
  81b618:	e0bffb17 	ldw	r2,-20(fp)
  81b61c:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81b620:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  81b624:	e0bffb17 	ldw	r2,-20(fp)
  81b628:	10001626 	beq	r2,zero,81b684 <alt_up_audio_read_fifo+0xbc>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  81b62c:	e0bffa17 	ldw	r2,-24(fp)
  81b630:	1085883a 	add	r2,r2,r2
  81b634:	1085883a 	add	r2,r2,r2
  81b638:	1007883a 	mov	r3,r2
  81b63c:	e0bffd17 	ldw	r2,-12(fp)
  81b640:	10c5883a 	add	r2,r2,r3
  81b644:	e0ffff17 	ldw	r3,-4(fp)
  81b648:	1800051e 	bne	r3,zero,81b660 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  81b64c:	e0fffc17 	ldw	r3,-16(fp)
  81b650:	18c00a17 	ldw	r3,40(r3)
  81b654:	18c00204 	addi	r3,r3,8
  81b658:	18c00037 	ldwio	r3,0(r3)
  81b65c:	00000406 	br	81b670 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
  81b660:	e0fffc17 	ldw	r3,-16(fp)
  81b664:	18c00a17 	ldw	r3,40(r3)
  81b668:	18c00304 	addi	r3,r3,12
  81b66c:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  81b670:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  81b674:	e0bffa17 	ldw	r2,-24(fp)
  81b678:	10800044 	addi	r2,r2,1
  81b67c:	e0bffa15 	stw	r2,-24(fp)
  81b680:	00000106 	br	81b688 <alt_up_audio_read_fifo+0xc0>
		}
		else
		{
			// no more data to read
			break;
  81b684:	00000306 	br	81b694 <alt_up_audio_read_fifo+0xcc>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  81b688:	e0fffa17 	ldw	r3,-24(fp)
  81b68c:	e0bffe17 	ldw	r2,-8(fp)
  81b690:	18bfd616 	blt	r3,r2,81b5ec <__alt_data_end+0xff81b5ec>
		{
			// no more data to read
			break;
		}
	}
	return count;
  81b694:	e0bffa17 	ldw	r2,-24(fp)
}
  81b698:	e037883a 	mov	sp,fp
  81b69c:	df000017 	ldw	fp,0(sp)
  81b6a0:	dec00104 	addi	sp,sp,4
  81b6a4:	f800283a 	ret

0081b6a8 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  81b6a8:	defff904 	addi	sp,sp,-28
  81b6ac:	df000615 	stw	fp,24(sp)
  81b6b0:	df000604 	addi	fp,sp,24
  81b6b4:	e13ffc15 	stw	r4,-16(fp)
  81b6b8:	e17ffd15 	stw	r5,-12(fp)
  81b6bc:	e1bffe15 	stw	r6,-8(fp)
  81b6c0:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  81b6c4:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  81b6c8:	00003106 	br	81b790 <alt_up_audio_write_fifo+0xe8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81b6cc:	e0bffc17 	ldw	r2,-16(fp)
  81b6d0:	10800a17 	ldw	r2,40(r2)
  81b6d4:	10800104 	addi	r2,r2,4
  81b6d8:	10800037 	ldwio	r2,0(r2)
  81b6dc:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  81b6e0:	e0bfff17 	ldw	r2,-4(fp)
  81b6e4:	1000031e 	bne	r2,zero,81b6f4 <alt_up_audio_write_fifo+0x4c>
  81b6e8:	e0bffb17 	ldw	r2,-20(fp)
  81b6ec:	1004d63a 	srli	r2,r2,24
  81b6f0:	00000306 	br	81b700 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  81b6f4:	e0bffb17 	ldw	r2,-20(fp)
  81b6f8:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  81b6fc:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81b700:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  81b704:	e0bffb17 	ldw	r2,-20(fp)
  81b708:	10002026 	beq	r2,zero,81b78c <alt_up_audio_write_fifo+0xe4>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  81b70c:	e0bfff17 	ldw	r2,-4(fp)
  81b710:	10000f1e 	bne	r2,zero,81b750 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  81b714:	e0bffc17 	ldw	r2,-16(fp)
  81b718:	10800a17 	ldw	r2,40(r2)
  81b71c:	10800204 	addi	r2,r2,8
  81b720:	1009883a 	mov	r4,r2
  81b724:	e0bffa17 	ldw	r2,-24(fp)
  81b728:	10c00044 	addi	r3,r2,1
  81b72c:	e0fffa15 	stw	r3,-24(fp)
  81b730:	1085883a 	add	r2,r2,r2
  81b734:	1085883a 	add	r2,r2,r2
  81b738:	1007883a 	mov	r3,r2
  81b73c:	e0bffd17 	ldw	r2,-12(fp)
  81b740:	10c5883a 	add	r2,r2,r3
  81b744:	10800017 	ldw	r2,0(r2)
  81b748:	20800035 	stwio	r2,0(r4)
  81b74c:	00001006 	br	81b790 <alt_up_audio_write_fifo+0xe8>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  81b750:	e0bffc17 	ldw	r2,-16(fp)
  81b754:	10800a17 	ldw	r2,40(r2)
  81b758:	10800304 	addi	r2,r2,12
  81b75c:	1009883a 	mov	r4,r2
  81b760:	e0bffa17 	ldw	r2,-24(fp)
  81b764:	10c00044 	addi	r3,r2,1
  81b768:	e0fffa15 	stw	r3,-24(fp)
  81b76c:	1085883a 	add	r2,r2,r2
  81b770:	1085883a 	add	r2,r2,r2
  81b774:	1007883a 	mov	r3,r2
  81b778:	e0bffd17 	ldw	r2,-12(fp)
  81b77c:	10c5883a 	add	r2,r2,r3
  81b780:	10800017 	ldw	r2,0(r2)
  81b784:	20800035 	stwio	r2,0(r4)
  81b788:	00000106 	br	81b790 <alt_up_audio_write_fifo+0xe8>
		}
		else
		{
			// no more space to write
			break;
  81b78c:	00000306 	br	81b79c <alt_up_audio_write_fifo+0xf4>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  81b790:	e0fffa17 	ldw	r3,-24(fp)
  81b794:	e0bffe17 	ldw	r2,-8(fp)
  81b798:	18bfcc16 	blt	r3,r2,81b6cc <__alt_data_end+0xff81b6cc>
		{
			// no more space to write
			break;
		}
	}
	return count;
  81b79c:	e0bffa17 	ldw	r2,-24(fp)
}
  81b7a0:	e037883a 	mov	sp,fp
  81b7a4:	df000017 	ldw	fp,0(sp)
  81b7a8:	dec00104 	addi	sp,sp,4
  81b7ac:	f800283a 	ret

0081b7b0 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  81b7b0:	defffd04 	addi	sp,sp,-12
  81b7b4:	df000215 	stw	fp,8(sp)
  81b7b8:	df000204 	addi	fp,sp,8
  81b7bc:	e13ffe15 	stw	r4,-8(fp)
  81b7c0:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  81b7c4:	e0bfff17 	ldw	r2,-4(fp)
  81b7c8:	1000051e 	bne	r2,zero,81b7e0 <alt_up_audio_read_fifo_head+0x30>
  81b7cc:	e0bffe17 	ldw	r2,-8(fp)
  81b7d0:	10800a17 	ldw	r2,40(r2)
  81b7d4:	10800204 	addi	r2,r2,8
  81b7d8:	10800037 	ldwio	r2,0(r2)
  81b7dc:	00000406 	br	81b7f0 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
  81b7e0:	e0bffe17 	ldw	r2,-8(fp)
  81b7e4:	10800a17 	ldw	r2,40(r2)
  81b7e8:	10800304 	addi	r2,r2,12
  81b7ec:	10800037 	ldwio	r2,0(r2)
}
  81b7f0:	e037883a 	mov	sp,fp
  81b7f4:	df000017 	ldw	fp,0(sp)
  81b7f8:	dec00104 	addi	sp,sp,4
  81b7fc:	f800283a 	ret

0081b800 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  81b800:	defffc04 	addi	sp,sp,-16
  81b804:	df000315 	stw	fp,12(sp)
  81b808:	df000304 	addi	fp,sp,12
  81b80c:	e13ffd15 	stw	r4,-12(fp)
  81b810:	e17ffe15 	stw	r5,-8(fp)
  81b814:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  81b818:	e0bfff17 	ldw	r2,-4(fp)
  81b81c:	1000071e 	bne	r2,zero,81b83c <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  81b820:	e0bffd17 	ldw	r2,-12(fp)
  81b824:	10800a17 	ldw	r2,40(r2)
  81b828:	10800204 	addi	r2,r2,8
  81b82c:	1007883a 	mov	r3,r2
  81b830:	e0bffe17 	ldw	r2,-8(fp)
  81b834:	18800035 	stwio	r2,0(r3)
  81b838:	00000606 	br	81b854 <alt_up_audio_write_fifo_head+0x54>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  81b83c:	e0bffd17 	ldw	r2,-12(fp)
  81b840:	10800a17 	ldw	r2,40(r2)
  81b844:	10800304 	addi	r2,r2,12
  81b848:	1007883a 	mov	r3,r2
  81b84c:	e0bffe17 	ldw	r2,-8(fp)
  81b850:	18800035 	stwio	r2,0(r3)
}
  81b854:	e037883a 	mov	sp,fp
  81b858:	df000017 	ldw	fp,0(sp)
  81b85c:	dec00104 	addi	sp,sp,4
  81b860:	f800283a 	ret

0081b864 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81b864:	defffe04 	addi	sp,sp,-8
  81b868:	df000115 	stw	fp,4(sp)
  81b86c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b870:	e03fff15 	stw	zero,-4(fp)
  81b874:	00000506 	br	81b88c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81b878:	e0bfff17 	ldw	r2,-4(fp)
  81b87c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81b880:	e0bfff17 	ldw	r2,-4(fp)
  81b884:	10800804 	addi	r2,r2,32
  81b888:	e0bfff15 	stw	r2,-4(fp)
  81b88c:	e0bfff17 	ldw	r2,-4(fp)
  81b890:	10820030 	cmpltui	r2,r2,2048
  81b894:	103ff81e 	bne	r2,zero,81b878 <__alt_data_end+0xff81b878>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81b898:	e037883a 	mov	sp,fp
  81b89c:	df000017 	ldw	fp,0(sp)
  81b8a0:	dec00104 	addi	sp,sp,4
  81b8a4:	f800283a 	ret

0081b8a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81b8a8:	defffe04 	addi	sp,sp,-8
  81b8ac:	dfc00115 	stw	ra,4(sp)
  81b8b0:	df000015 	stw	fp,0(sp)
  81b8b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81b8b8:	008020b4 	movhi	r2,130
  81b8bc:	10bbd904 	addi	r2,r2,-4252
  81b8c0:	10800017 	ldw	r2,0(r2)
  81b8c4:	10000526 	beq	r2,zero,81b8dc <alt_get_errno+0x34>
  81b8c8:	008020b4 	movhi	r2,130
  81b8cc:	10bbd904 	addi	r2,r2,-4252
  81b8d0:	10800017 	ldw	r2,0(r2)
  81b8d4:	103ee83a 	callr	r2
  81b8d8:	00000206 	br	81b8e4 <alt_get_errno+0x3c>
  81b8dc:	008020b4 	movhi	r2,130
  81b8e0:	10834404 	addi	r2,r2,3344
}
  81b8e4:	e037883a 	mov	sp,fp
  81b8e8:	dfc00117 	ldw	ra,4(sp)
  81b8ec:	df000017 	ldw	fp,0(sp)
  81b8f0:	dec00204 	addi	sp,sp,8
  81b8f4:	f800283a 	ret

0081b8f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81b8f8:	defffa04 	addi	sp,sp,-24
  81b8fc:	dfc00515 	stw	ra,20(sp)
  81b900:	df000415 	stw	fp,16(sp)
  81b904:	df000404 	addi	fp,sp,16
  81b908:	e13ffe15 	stw	r4,-8(fp)
  81b90c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81b910:	e0bffe17 	ldw	r2,-8(fp)
  81b914:	10000326 	beq	r2,zero,81b924 <alt_dev_llist_insert+0x2c>
  81b918:	e0bffe17 	ldw	r2,-8(fp)
  81b91c:	10800217 	ldw	r2,8(r2)
  81b920:	1000061e 	bne	r2,zero,81b93c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  81b924:	081b8a80 	call	81b8a8 <alt_get_errno>
  81b928:	1007883a 	mov	r3,r2
  81b92c:	00800584 	movi	r2,22
  81b930:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81b934:	00bffa84 	movi	r2,-22
  81b938:	00001306 	br	81b988 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  81b93c:	e0bffe17 	ldw	r2,-8(fp)
  81b940:	e0ffff17 	ldw	r3,-4(fp)
  81b944:	e0fffc15 	stw	r3,-16(fp)
  81b948:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81b94c:	e0bffd17 	ldw	r2,-12(fp)
  81b950:	e0fffc17 	ldw	r3,-16(fp)
  81b954:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81b958:	e0bffc17 	ldw	r2,-16(fp)
  81b95c:	10c00017 	ldw	r3,0(r2)
  81b960:	e0bffd17 	ldw	r2,-12(fp)
  81b964:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81b968:	e0bffc17 	ldw	r2,-16(fp)
  81b96c:	10800017 	ldw	r2,0(r2)
  81b970:	e0fffd17 	ldw	r3,-12(fp)
  81b974:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81b978:	e0bffc17 	ldw	r2,-16(fp)
  81b97c:	e0fffd17 	ldw	r3,-12(fp)
  81b980:	10c00015 	stw	r3,0(r2)

  return 0;  
  81b984:	0005883a 	mov	r2,zero
}
  81b988:	e037883a 	mov	sp,fp
  81b98c:	dfc00117 	ldw	ra,4(sp)
  81b990:	df000017 	ldw	fp,0(sp)
  81b994:	dec00204 	addi	sp,sp,8
  81b998:	f800283a 	ret

0081b99c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81b99c:	defffd04 	addi	sp,sp,-12
  81b9a0:	dfc00215 	stw	ra,8(sp)
  81b9a4:	df000115 	stw	fp,4(sp)
  81b9a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b9ac:	008020b4 	movhi	r2,130
  81b9b0:	10b12104 	addi	r2,r2,-15228
  81b9b4:	e0bfff15 	stw	r2,-4(fp)
  81b9b8:	00000606 	br	81b9d4 <_do_ctors+0x38>
        (*ctor) (); 
  81b9bc:	e0bfff17 	ldw	r2,-4(fp)
  81b9c0:	10800017 	ldw	r2,0(r2)
  81b9c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81b9c8:	e0bfff17 	ldw	r2,-4(fp)
  81b9cc:	10bfff04 	addi	r2,r2,-4
  81b9d0:	e0bfff15 	stw	r2,-4(fp)
  81b9d4:	e0ffff17 	ldw	r3,-4(fp)
  81b9d8:	008020b4 	movhi	r2,130
  81b9dc:	10b12204 	addi	r2,r2,-15224
  81b9e0:	18bff62e 	bgeu	r3,r2,81b9bc <__alt_data_end+0xff81b9bc>
        (*ctor) (); 
}
  81b9e4:	e037883a 	mov	sp,fp
  81b9e8:	dfc00117 	ldw	ra,4(sp)
  81b9ec:	df000017 	ldw	fp,0(sp)
  81b9f0:	dec00204 	addi	sp,sp,8
  81b9f4:	f800283a 	ret

0081b9f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81b9f8:	defffd04 	addi	sp,sp,-12
  81b9fc:	dfc00215 	stw	ra,8(sp)
  81ba00:	df000115 	stw	fp,4(sp)
  81ba04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81ba08:	008020b4 	movhi	r2,130
  81ba0c:	10b12104 	addi	r2,r2,-15228
  81ba10:	e0bfff15 	stw	r2,-4(fp)
  81ba14:	00000606 	br	81ba30 <_do_dtors+0x38>
        (*dtor) (); 
  81ba18:	e0bfff17 	ldw	r2,-4(fp)
  81ba1c:	10800017 	ldw	r2,0(r2)
  81ba20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81ba24:	e0bfff17 	ldw	r2,-4(fp)
  81ba28:	10bfff04 	addi	r2,r2,-4
  81ba2c:	e0bfff15 	stw	r2,-4(fp)
  81ba30:	e0ffff17 	ldw	r3,-4(fp)
  81ba34:	008020b4 	movhi	r2,130
  81ba38:	10b12204 	addi	r2,r2,-15224
  81ba3c:	18bff62e 	bgeu	r3,r2,81ba18 <__alt_data_end+0xff81ba18>
        (*dtor) (); 
}
  81ba40:	e037883a 	mov	sp,fp
  81ba44:	dfc00117 	ldw	ra,4(sp)
  81ba48:	df000017 	ldw	fp,0(sp)
  81ba4c:	dec00204 	addi	sp,sp,8
  81ba50:	f800283a 	ret

0081ba54 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81ba54:	defffa04 	addi	sp,sp,-24
  81ba58:	dfc00515 	stw	ra,20(sp)
  81ba5c:	df000415 	stw	fp,16(sp)
  81ba60:	df000404 	addi	fp,sp,16
  81ba64:	e13ffe15 	stw	r4,-8(fp)
  81ba68:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81ba6c:	e0bfff17 	ldw	r2,-4(fp)
  81ba70:	10800017 	ldw	r2,0(r2)
  81ba74:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81ba78:	e13ffe17 	ldw	r4,-8(fp)
  81ba7c:	080cf640 	call	80cf64 <strlen>
  81ba80:	10800044 	addi	r2,r2,1
  81ba84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81ba88:	00000d06 	br	81bac0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81ba8c:	e0bffc17 	ldw	r2,-16(fp)
  81ba90:	10c00217 	ldw	r3,8(r2)
  81ba94:	e0bffd17 	ldw	r2,-12(fp)
  81ba98:	1809883a 	mov	r4,r3
  81ba9c:	e17ffe17 	ldw	r5,-8(fp)
  81baa0:	100d883a 	mov	r6,r2
  81baa4:	081c1300 	call	81c130 <memcmp>
  81baa8:	1000021e 	bne	r2,zero,81bab4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81baac:	e0bffc17 	ldw	r2,-16(fp)
  81bab0:	00000706 	br	81bad0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81bab4:	e0bffc17 	ldw	r2,-16(fp)
  81bab8:	10800017 	ldw	r2,0(r2)
  81babc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81bac0:	e0fffc17 	ldw	r3,-16(fp)
  81bac4:	e0bfff17 	ldw	r2,-4(fp)
  81bac8:	18bff01e 	bne	r3,r2,81ba8c <__alt_data_end+0xff81ba8c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81bacc:	0005883a 	mov	r2,zero
}
  81bad0:	e037883a 	mov	sp,fp
  81bad4:	dfc00117 	ldw	ra,4(sp)
  81bad8:	df000017 	ldw	fp,0(sp)
  81badc:	dec00204 	addi	sp,sp,8
  81bae0:	f800283a 	ret

0081bae4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81bae4:	defffb04 	addi	sp,sp,-20
  81bae8:	dfc00415 	stw	ra,16(sp)
  81baec:	df000315 	stw	fp,12(sp)
  81baf0:	df000304 	addi	fp,sp,12
  81baf4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81baf8:	008020b4 	movhi	r2,130
  81bafc:	10bbd404 	addi	r2,r2,-4272
  81bb00:	10800017 	ldw	r2,0(r2)
  81bb04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81bb08:	00003106 	br	81bbd0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  81bb0c:	e0bffd17 	ldw	r2,-12(fp)
  81bb10:	10800217 	ldw	r2,8(r2)
  81bb14:	1009883a 	mov	r4,r2
  81bb18:	080cf640 	call	80cf64 <strlen>
  81bb1c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  81bb20:	e0bffd17 	ldw	r2,-12(fp)
  81bb24:	10c00217 	ldw	r3,8(r2)
  81bb28:	e0bffe17 	ldw	r2,-8(fp)
  81bb2c:	10bfffc4 	addi	r2,r2,-1
  81bb30:	1885883a 	add	r2,r3,r2
  81bb34:	10800003 	ldbu	r2,0(r2)
  81bb38:	10803fcc 	andi	r2,r2,255
  81bb3c:	1080201c 	xori	r2,r2,128
  81bb40:	10bfe004 	addi	r2,r2,-128
  81bb44:	10800bd8 	cmpnei	r2,r2,47
  81bb48:	1000031e 	bne	r2,zero,81bb58 <alt_find_file+0x74>
    {
      len -= 1;
  81bb4c:	e0bffe17 	ldw	r2,-8(fp)
  81bb50:	10bfffc4 	addi	r2,r2,-1
  81bb54:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81bb58:	e0bffe17 	ldw	r2,-8(fp)
  81bb5c:	e0ffff17 	ldw	r3,-4(fp)
  81bb60:	1885883a 	add	r2,r3,r2
  81bb64:	10800003 	ldbu	r2,0(r2)
  81bb68:	10803fcc 	andi	r2,r2,255
  81bb6c:	1080201c 	xori	r2,r2,128
  81bb70:	10bfe004 	addi	r2,r2,-128
  81bb74:	10800be0 	cmpeqi	r2,r2,47
  81bb78:	1000081e 	bne	r2,zero,81bb9c <alt_find_file+0xb8>
  81bb7c:	e0bffe17 	ldw	r2,-8(fp)
  81bb80:	e0ffff17 	ldw	r3,-4(fp)
  81bb84:	1885883a 	add	r2,r3,r2
  81bb88:	10800003 	ldbu	r2,0(r2)
  81bb8c:	10803fcc 	andi	r2,r2,255
  81bb90:	1080201c 	xori	r2,r2,128
  81bb94:	10bfe004 	addi	r2,r2,-128
  81bb98:	10000a1e 	bne	r2,zero,81bbc4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  81bb9c:	e0bffd17 	ldw	r2,-12(fp)
  81bba0:	10c00217 	ldw	r3,8(r2)
  81bba4:	e0bffe17 	ldw	r2,-8(fp)
  81bba8:	1809883a 	mov	r4,r3
  81bbac:	e17fff17 	ldw	r5,-4(fp)
  81bbb0:	100d883a 	mov	r6,r2
  81bbb4:	081c1300 	call	81c130 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81bbb8:	1000021e 	bne	r2,zero,81bbc4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81bbbc:	e0bffd17 	ldw	r2,-12(fp)
  81bbc0:	00000806 	br	81bbe4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  81bbc4:	e0bffd17 	ldw	r2,-12(fp)
  81bbc8:	10800017 	ldw	r2,0(r2)
  81bbcc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81bbd0:	e0fffd17 	ldw	r3,-12(fp)
  81bbd4:	008020b4 	movhi	r2,130
  81bbd8:	10bbd404 	addi	r2,r2,-4272
  81bbdc:	18bfcb1e 	bne	r3,r2,81bb0c <__alt_data_end+0xff81bb0c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81bbe0:	0005883a 	mov	r2,zero
}
  81bbe4:	e037883a 	mov	sp,fp
  81bbe8:	dfc00117 	ldw	ra,4(sp)
  81bbec:	df000017 	ldw	fp,0(sp)
  81bbf0:	dec00204 	addi	sp,sp,8
  81bbf4:	f800283a 	ret

0081bbf8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81bbf8:	defffc04 	addi	sp,sp,-16
  81bbfc:	df000315 	stw	fp,12(sp)
  81bc00:	df000304 	addi	fp,sp,12
  81bc04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81bc08:	00bffa04 	movi	r2,-24
  81bc0c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81bc10:	e03ffd15 	stw	zero,-12(fp)
  81bc14:	00001d06 	br	81bc8c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  81bc18:	008020b4 	movhi	r2,130
  81bc1c:	10b6c004 	addi	r2,r2,-9472
  81bc20:	e0fffd17 	ldw	r3,-12(fp)
  81bc24:	18c00324 	muli	r3,r3,12
  81bc28:	10c5883a 	add	r2,r2,r3
  81bc2c:	10800017 	ldw	r2,0(r2)
  81bc30:	1000131e 	bne	r2,zero,81bc80 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  81bc34:	008020b4 	movhi	r2,130
  81bc38:	10b6c004 	addi	r2,r2,-9472
  81bc3c:	e0fffd17 	ldw	r3,-12(fp)
  81bc40:	18c00324 	muli	r3,r3,12
  81bc44:	10c5883a 	add	r2,r2,r3
  81bc48:	e0ffff17 	ldw	r3,-4(fp)
  81bc4c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  81bc50:	008020b4 	movhi	r2,130
  81bc54:	10bbd804 	addi	r2,r2,-4256
  81bc58:	10c00017 	ldw	r3,0(r2)
  81bc5c:	e0bffd17 	ldw	r2,-12(fp)
  81bc60:	1880040e 	bge	r3,r2,81bc74 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  81bc64:	008020b4 	movhi	r2,130
  81bc68:	10bbd804 	addi	r2,r2,-4256
  81bc6c:	e0fffd17 	ldw	r3,-12(fp)
  81bc70:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  81bc74:	e0bffd17 	ldw	r2,-12(fp)
  81bc78:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  81bc7c:	00000606 	br	81bc98 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81bc80:	e0bffd17 	ldw	r2,-12(fp)
  81bc84:	10800044 	addi	r2,r2,1
  81bc88:	e0bffd15 	stw	r2,-12(fp)
  81bc8c:	e0bffd17 	ldw	r2,-12(fp)
  81bc90:	10800810 	cmplti	r2,r2,32
  81bc94:	103fe01e 	bne	r2,zero,81bc18 <__alt_data_end+0xff81bc18>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  81bc98:	e0bffe17 	ldw	r2,-8(fp)
}
  81bc9c:	e037883a 	mov	sp,fp
  81bca0:	df000017 	ldw	fp,0(sp)
  81bca4:	dec00104 	addi	sp,sp,4
  81bca8:	f800283a 	ret

0081bcac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81bcac:	defffe04 	addi	sp,sp,-8
  81bcb0:	dfc00115 	stw	ra,4(sp)
  81bcb4:	df000015 	stw	fp,0(sp)
  81bcb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81bcbc:	0009883a 	mov	r4,zero
  81bcc0:	01440004 	movi	r5,4096
  81bcc4:	081bfbc0 	call	81bfbc <alt_icache_flush>
#endif
}
  81bcc8:	e037883a 	mov	sp,fp
  81bccc:	dfc00117 	ldw	ra,4(sp)
  81bcd0:	df000017 	ldw	fp,0(sp)
  81bcd4:	dec00204 	addi	sp,sp,8
  81bcd8:	f800283a 	ret

0081bcdc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81bcdc:	defff904 	addi	sp,sp,-28
  81bce0:	dfc00615 	stw	ra,24(sp)
  81bce4:	df000515 	stw	fp,20(sp)
  81bce8:	df000504 	addi	fp,sp,20
  81bcec:	e13ffc15 	stw	r4,-16(fp)
  81bcf0:	e17ffd15 	stw	r5,-12(fp)
  81bcf4:	e1bffe15 	stw	r6,-8(fp)
  81bcf8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81bcfc:	e13ffd17 	ldw	r4,-12(fp)
  81bd00:	e17ffe17 	ldw	r5,-8(fp)
  81bd04:	e1bfff17 	ldw	r6,-4(fp)
  81bd08:	08183b80 	call	8183b8 <open>
  81bd0c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81bd10:	e0bffb17 	ldw	r2,-20(fp)
  81bd14:	10001c16 	blt	r2,zero,81bd88 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  81bd18:	008020b4 	movhi	r2,130
  81bd1c:	10b6c004 	addi	r2,r2,-9472
  81bd20:	e0fffb17 	ldw	r3,-20(fp)
  81bd24:	18c00324 	muli	r3,r3,12
  81bd28:	10c5883a 	add	r2,r2,r3
  81bd2c:	10c00017 	ldw	r3,0(r2)
  81bd30:	e0bffc17 	ldw	r2,-16(fp)
  81bd34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81bd38:	008020b4 	movhi	r2,130
  81bd3c:	10b6c004 	addi	r2,r2,-9472
  81bd40:	e0fffb17 	ldw	r3,-20(fp)
  81bd44:	18c00324 	muli	r3,r3,12
  81bd48:	18c00104 	addi	r3,r3,4
  81bd4c:	10c5883a 	add	r2,r2,r3
  81bd50:	10c00017 	ldw	r3,0(r2)
  81bd54:	e0bffc17 	ldw	r2,-16(fp)
  81bd58:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81bd5c:	008020b4 	movhi	r2,130
  81bd60:	10b6c004 	addi	r2,r2,-9472
  81bd64:	e0fffb17 	ldw	r3,-20(fp)
  81bd68:	18c00324 	muli	r3,r3,12
  81bd6c:	18c00204 	addi	r3,r3,8
  81bd70:	10c5883a 	add	r2,r2,r3
  81bd74:	10c00017 	ldw	r3,0(r2)
  81bd78:	e0bffc17 	ldw	r2,-16(fp)
  81bd7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81bd80:	e13ffb17 	ldw	r4,-20(fp)
  81bd84:	08188c80 	call	8188c8 <alt_release_fd>
  }
} 
  81bd88:	e037883a 	mov	sp,fp
  81bd8c:	dfc00117 	ldw	ra,4(sp)
  81bd90:	df000017 	ldw	fp,0(sp)
  81bd94:	dec00204 	addi	sp,sp,8
  81bd98:	f800283a 	ret

0081bd9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81bd9c:	defffb04 	addi	sp,sp,-20
  81bda0:	dfc00415 	stw	ra,16(sp)
  81bda4:	df000315 	stw	fp,12(sp)
  81bda8:	df000304 	addi	fp,sp,12
  81bdac:	e13ffd15 	stw	r4,-12(fp)
  81bdb0:	e17ffe15 	stw	r5,-8(fp)
  81bdb4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81bdb8:	010020b4 	movhi	r4,130
  81bdbc:	2136c304 	addi	r4,r4,-9460
  81bdc0:	e17ffd17 	ldw	r5,-12(fp)
  81bdc4:	01800044 	movi	r6,1
  81bdc8:	01c07fc4 	movi	r7,511
  81bdcc:	081bcdc0 	call	81bcdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81bdd0:	010020b4 	movhi	r4,130
  81bdd4:	2136c004 	addi	r4,r4,-9472
  81bdd8:	e17ffe17 	ldw	r5,-8(fp)
  81bddc:	000d883a 	mov	r6,zero
  81bde0:	01c07fc4 	movi	r7,511
  81bde4:	081bcdc0 	call	81bcdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81bde8:	010020b4 	movhi	r4,130
  81bdec:	2136c604 	addi	r4,r4,-9448
  81bdf0:	e17fff17 	ldw	r5,-4(fp)
  81bdf4:	01800044 	movi	r6,1
  81bdf8:	01c07fc4 	movi	r7,511
  81bdfc:	081bcdc0 	call	81bcdc <alt_open_fd>
}  
  81be00:	e037883a 	mov	sp,fp
  81be04:	dfc00117 	ldw	ra,4(sp)
  81be08:	df000017 	ldw	fp,0(sp)
  81be0c:	dec00204 	addi	sp,sp,8
  81be10:	f800283a 	ret

0081be14 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  81be14:	defffd04 	addi	sp,sp,-12
  81be18:	dfc00215 	stw	ra,8(sp)
  81be1c:	df000115 	stw	fp,4(sp)
  81be20:	df000104 	addi	fp,sp,4
  81be24:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81be28:	e13fff17 	ldw	r4,-4(fp)
  81be2c:	081be640 	call	81be64 <alt_busy_sleep>
}
  81be30:	e037883a 	mov	sp,fp
  81be34:	dfc00117 	ldw	ra,4(sp)
  81be38:	df000017 	ldw	fp,0(sp)
  81be3c:	dec00204 	addi	sp,sp,8
  81be40:	f800283a 	ret

0081be44 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  81be44:	deffff04 	addi	sp,sp,-4
  81be48:	df000015 	stw	fp,0(sp)
  81be4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81be50:	000170fa 	wrctl	ienable,zero
}
  81be54:	e037883a 	mov	sp,fp
  81be58:	df000017 	ldw	fp,0(sp)
  81be5c:	dec00104 	addi	sp,sp,4
  81be60:	f800283a 	ret

0081be64 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81be64:	defffa04 	addi	sp,sp,-24
  81be68:	dfc00515 	stw	ra,20(sp)
  81be6c:	df000415 	stw	fp,16(sp)
  81be70:	df000404 	addi	fp,sp,16
  81be74:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81be78:	008000c4 	movi	r2,3
  81be7c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  81be80:	e0fffd17 	ldw	r3,-12(fp)
  81be84:	008003f4 	movhi	r2,15
  81be88:	10909004 	addi	r2,r2,16960
  81be8c:	1885383a 	mul	r2,r3,r2
  81be90:	0100bef4 	movhi	r4,763
  81be94:	213c2004 	addi	r4,r4,-3968
  81be98:	100b883a 	mov	r5,r2
  81be9c:	080a9800 	call	80a980 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  81bea0:	01200034 	movhi	r4,32768
  81bea4:	213fffc4 	addi	r4,r4,-1
  81bea8:	100b883a 	mov	r5,r2
  81beac:	080a9800 	call	80a980 <__udivsi3>
  81beb0:	e13fff17 	ldw	r4,-4(fp)
  81beb4:	100b883a 	mov	r5,r2
  81beb8:	080a9800 	call	80a980 <__udivsi3>
  81bebc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81bec0:	e0bffe17 	ldw	r2,-8(fp)
  81bec4:	10002a26 	beq	r2,zero,81bf70 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  81bec8:	e03ffc15 	stw	zero,-16(fp)
  81becc:	00001706 	br	81bf2c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81bed0:	00a00034 	movhi	r2,32768
  81bed4:	10bfffc4 	addi	r2,r2,-1
  81bed8:	10bfffc4 	addi	r2,r2,-1
  81bedc:	103ffe1e 	bne	r2,zero,81bed8 <__alt_data_end+0xff81bed8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  81bee0:	e0fffd17 	ldw	r3,-12(fp)
  81bee4:	008003f4 	movhi	r2,15
  81bee8:	10909004 	addi	r2,r2,16960
  81beec:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81bef0:	0100bef4 	movhi	r4,763
  81bef4:	213c2004 	addi	r4,r4,-3968
  81bef8:	100b883a 	mov	r5,r2
  81befc:	080a9800 	call	80a980 <__udivsi3>
  81bf00:	01200034 	movhi	r4,32768
  81bf04:	213fffc4 	addi	r4,r4,-1
  81bf08:	100b883a 	mov	r5,r2
  81bf0c:	080a9800 	call	80a980 <__udivsi3>
  81bf10:	1007883a 	mov	r3,r2
  81bf14:	e0bfff17 	ldw	r2,-4(fp)
  81bf18:	10c5c83a 	sub	r2,r2,r3
  81bf1c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81bf20:	e0bffc17 	ldw	r2,-16(fp)
  81bf24:	10800044 	addi	r2,r2,1
  81bf28:	e0bffc15 	stw	r2,-16(fp)
  81bf2c:	e0fffc17 	ldw	r3,-16(fp)
  81bf30:	e0bffe17 	ldw	r2,-8(fp)
  81bf34:	18bfe616 	blt	r3,r2,81bed0 <__alt_data_end+0xff81bed0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81bf38:	e0fffd17 	ldw	r3,-12(fp)
  81bf3c:	008003f4 	movhi	r2,15
  81bf40:	10909004 	addi	r2,r2,16960
  81bf44:	1885383a 	mul	r2,r3,r2
  81bf48:	0100bef4 	movhi	r4,763
  81bf4c:	213c2004 	addi	r4,r4,-3968
  81bf50:	100b883a 	mov	r5,r2
  81bf54:	080a9800 	call	80a980 <__udivsi3>
  81bf58:	1007883a 	mov	r3,r2
  81bf5c:	e0bfff17 	ldw	r2,-4(fp)
  81bf60:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81bf64:	10bfffc4 	addi	r2,r2,-1
  81bf68:	103ffe1e 	bne	r2,zero,81bf64 <__alt_data_end+0xff81bf64>
  81bf6c:	00000d06 	br	81bfa4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81bf70:	e0fffd17 	ldw	r3,-12(fp)
  81bf74:	008003f4 	movhi	r2,15
  81bf78:	10909004 	addi	r2,r2,16960
  81bf7c:	1885383a 	mul	r2,r3,r2
  81bf80:	0100bef4 	movhi	r4,763
  81bf84:	213c2004 	addi	r4,r4,-3968
  81bf88:	100b883a 	mov	r5,r2
  81bf8c:	080a9800 	call	80a980 <__udivsi3>
  81bf90:	1007883a 	mov	r3,r2
  81bf94:	e0bfff17 	ldw	r2,-4(fp)
  81bf98:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81bf9c:	10bfffc4 	addi	r2,r2,-1
  81bfa0:	00bffe16 	blt	zero,r2,81bf9c <__alt_data_end+0xff81bf9c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81bfa4:	0005883a 	mov	r2,zero
}
  81bfa8:	e037883a 	mov	sp,fp
  81bfac:	dfc00117 	ldw	ra,4(sp)
  81bfb0:	df000017 	ldw	fp,0(sp)
  81bfb4:	dec00204 	addi	sp,sp,8
  81bfb8:	f800283a 	ret

0081bfbc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81bfbc:	defffb04 	addi	sp,sp,-20
  81bfc0:	df000415 	stw	fp,16(sp)
  81bfc4:	df000404 	addi	fp,sp,16
  81bfc8:	e13ffe15 	stw	r4,-8(fp)
  81bfcc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81bfd0:	e0bfff17 	ldw	r2,-4(fp)
  81bfd4:	10840070 	cmpltui	r2,r2,4097
  81bfd8:	1000021e 	bne	r2,zero,81bfe4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81bfdc:	00840004 	movi	r2,4096
  81bfe0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81bfe4:	e0fffe17 	ldw	r3,-8(fp)
  81bfe8:	e0bfff17 	ldw	r2,-4(fp)
  81bfec:	1885883a 	add	r2,r3,r2
  81bff0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81bff4:	e0bffe17 	ldw	r2,-8(fp)
  81bff8:	e0bffc15 	stw	r2,-16(fp)
  81bffc:	00000506 	br	81c014 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81c000:	e0bffc17 	ldw	r2,-16(fp)
  81c004:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81c008:	e0bffc17 	ldw	r2,-16(fp)
  81c00c:	10800804 	addi	r2,r2,32
  81c010:	e0bffc15 	stw	r2,-16(fp)
  81c014:	e0fffc17 	ldw	r3,-16(fp)
  81c018:	e0bffd17 	ldw	r2,-12(fp)
  81c01c:	18bff836 	bltu	r3,r2,81c000 <__alt_data_end+0xff81c000>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81c020:	e0bffe17 	ldw	r2,-8(fp)
  81c024:	108007cc 	andi	r2,r2,31
  81c028:	10000226 	beq	r2,zero,81c034 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81c02c:	e0bffc17 	ldw	r2,-16(fp)
  81c030:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81c034:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81c038:	e037883a 	mov	sp,fp
  81c03c:	df000017 	ldw	fp,0(sp)
  81c040:	dec00104 	addi	sp,sp,4
  81c044:	f800283a 	ret

0081c048 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  81c048:	defffe04 	addi	sp,sp,-8
  81c04c:	df000115 	stw	fp,4(sp)
  81c050:	df000104 	addi	fp,sp,4
  81c054:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  81c058:	e0bfff17 	ldw	r2,-4(fp)
  81c05c:	10bffe84 	addi	r2,r2,-6
  81c060:	10c00428 	cmpgeui	r3,r2,16
  81c064:	18001a1e 	bne	r3,zero,81c0d0 <alt_exception_cause_generated_bad_addr+0x88>
  81c068:	100690ba 	slli	r3,r2,2
  81c06c:	008020b4 	movhi	r2,130
  81c070:	10b02004 	addi	r2,r2,-16256
  81c074:	1885883a 	add	r2,r3,r2
  81c078:	10800017 	ldw	r2,0(r2)
  81c07c:	1000683a 	jmp	r2
  81c080:	0081c0c0 	call	81c0c <__reset-0x77e3f4>
  81c084:	0081c0c0 	call	81c0c <__reset-0x77e3f4>
  81c088:	0081c0d0 	cmplti	r2,zero,1795
  81c08c:	0081c0d0 	cmplti	r2,zero,1795
  81c090:	0081c0d0 	cmplti	r2,zero,1795
  81c094:	0081c0c0 	call	81c0c <__reset-0x77e3f4>
  81c098:	0081c0c8 	cmpgei	r2,zero,1795
  81c09c:	0081c0d0 	cmplti	r2,zero,1795
  81c0a0:	0081c0c0 	call	81c0c <__reset-0x77e3f4>
  81c0a4:	0081c0c0 	call	81c0c <__reset-0x77e3f4>
  81c0a8:	0081c0d0 	cmplti	r2,zero,1795
  81c0ac:	0081c0c0 	call	81c0c <__reset-0x77e3f4>
  81c0b0:	0081c0c8 	cmpgei	r2,zero,1795
  81c0b4:	0081c0d0 	cmplti	r2,zero,1795
  81c0b8:	0081c0d0 	cmplti	r2,zero,1795
  81c0bc:	0081c0c0 	call	81c0c <__reset-0x77e3f4>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81c0c0:	00800044 	movi	r2,1
  81c0c4:	00000306 	br	81c0d4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  81c0c8:	0005883a 	mov	r2,zero
  81c0cc:	00000106 	br	81c0d4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  81c0d0:	0005883a 	mov	r2,zero
  }
}
  81c0d4:	e037883a 	mov	sp,fp
  81c0d8:	df000017 	ldw	fp,0(sp)
  81c0dc:	dec00104 	addi	sp,sp,4
  81c0e0:	f800283a 	ret

0081c0e4 <atexit>:
  81c0e4:	200b883a 	mov	r5,r4
  81c0e8:	000d883a 	mov	r6,zero
  81c0ec:	0009883a 	mov	r4,zero
  81c0f0:	000f883a 	mov	r7,zero
  81c0f4:	081c1ac1 	jmpi	81c1ac <__register_exitproc>

0081c0f8 <exit>:
  81c0f8:	defffe04 	addi	sp,sp,-8
  81c0fc:	000b883a 	mov	r5,zero
  81c100:	dc000015 	stw	r16,0(sp)
  81c104:	dfc00115 	stw	ra,4(sp)
  81c108:	2021883a 	mov	r16,r4
  81c10c:	081c2c00 	call	81c2c0 <__call_exitprocs>
  81c110:	008020b4 	movhi	r2,130
  81c114:	10bbce04 	addi	r2,r2,-4296
  81c118:	11000017 	ldw	r4,0(r2)
  81c11c:	20800f17 	ldw	r2,60(r4)
  81c120:	10000126 	beq	r2,zero,81c128 <exit+0x30>
  81c124:	103ee83a 	callr	r2
  81c128:	8009883a 	mov	r4,r16
  81c12c:	081c4540 	call	81c454 <_exit>

0081c130 <memcmp>:
  81c130:	01c000c4 	movi	r7,3
  81c134:	3980192e 	bgeu	r7,r6,81c19c <memcmp+0x6c>
  81c138:	2144b03a 	or	r2,r4,r5
  81c13c:	11c4703a 	and	r2,r2,r7
  81c140:	10000f26 	beq	r2,zero,81c180 <memcmp+0x50>
  81c144:	20800003 	ldbu	r2,0(r4)
  81c148:	28c00003 	ldbu	r3,0(r5)
  81c14c:	10c0151e 	bne	r2,r3,81c1a4 <memcmp+0x74>
  81c150:	31bfff84 	addi	r6,r6,-2
  81c154:	01ffffc4 	movi	r7,-1
  81c158:	00000406 	br	81c16c <memcmp+0x3c>
  81c15c:	20800003 	ldbu	r2,0(r4)
  81c160:	28c00003 	ldbu	r3,0(r5)
  81c164:	31bfffc4 	addi	r6,r6,-1
  81c168:	10c00e1e 	bne	r2,r3,81c1a4 <memcmp+0x74>
  81c16c:	21000044 	addi	r4,r4,1
  81c170:	29400044 	addi	r5,r5,1
  81c174:	31fff91e 	bne	r6,r7,81c15c <__alt_data_end+0xff81c15c>
  81c178:	0005883a 	mov	r2,zero
  81c17c:	f800283a 	ret
  81c180:	20c00017 	ldw	r3,0(r4)
  81c184:	28800017 	ldw	r2,0(r5)
  81c188:	1880041e 	bne	r3,r2,81c19c <memcmp+0x6c>
  81c18c:	31bfff04 	addi	r6,r6,-4
  81c190:	21000104 	addi	r4,r4,4
  81c194:	29400104 	addi	r5,r5,4
  81c198:	39bff936 	bltu	r7,r6,81c180 <__alt_data_end+0xff81c180>
  81c19c:	303fe91e 	bne	r6,zero,81c144 <__alt_data_end+0xff81c144>
  81c1a0:	003ff506 	br	81c178 <__alt_data_end+0xff81c178>
  81c1a4:	10c5c83a 	sub	r2,r2,r3
  81c1a8:	f800283a 	ret

0081c1ac <__register_exitproc>:
  81c1ac:	008020b4 	movhi	r2,130
  81c1b0:	defffa04 	addi	sp,sp,-24
  81c1b4:	10bbce04 	addi	r2,r2,-4296
  81c1b8:	dc000315 	stw	r16,12(sp)
  81c1bc:	14000017 	ldw	r16,0(r2)
  81c1c0:	dc400415 	stw	r17,16(sp)
  81c1c4:	dfc00515 	stw	ra,20(sp)
  81c1c8:	80805217 	ldw	r2,328(r16)
  81c1cc:	2023883a 	mov	r17,r4
  81c1d0:	10003626 	beq	r2,zero,81c2ac <__register_exitproc+0x100>
  81c1d4:	10c00117 	ldw	r3,4(r2)
  81c1d8:	010007c4 	movi	r4,31
  81c1dc:	20c00e16 	blt	r4,r3,81c218 <__register_exitproc+0x6c>
  81c1e0:	1a400044 	addi	r9,r3,1
  81c1e4:	8800211e 	bne	r17,zero,81c26c <__register_exitproc+0xc0>
  81c1e8:	18c00084 	addi	r3,r3,2
  81c1ec:	18c7883a 	add	r3,r3,r3
  81c1f0:	18c7883a 	add	r3,r3,r3
  81c1f4:	12400115 	stw	r9,4(r2)
  81c1f8:	10c7883a 	add	r3,r2,r3
  81c1fc:	19400015 	stw	r5,0(r3)
  81c200:	0005883a 	mov	r2,zero
  81c204:	dfc00517 	ldw	ra,20(sp)
  81c208:	dc400417 	ldw	r17,16(sp)
  81c20c:	dc000317 	ldw	r16,12(sp)
  81c210:	dec00604 	addi	sp,sp,24
  81c214:	f800283a 	ret
  81c218:	00800034 	movhi	r2,0
  81c21c:	10800004 	addi	r2,r2,0
  81c220:	10002526 	beq	r2,zero,81c2b8 <__register_exitproc+0x10c>
  81c224:	01006404 	movi	r4,400
  81c228:	d9400015 	stw	r5,0(sp)
  81c22c:	d9800115 	stw	r6,4(sp)
  81c230:	d9c00215 	stw	r7,8(sp)
  81c234:	00000000 	call	0 <__reset-0x800000>
  81c238:	d9400017 	ldw	r5,0(sp)
  81c23c:	d9800117 	ldw	r6,4(sp)
  81c240:	d9c00217 	ldw	r7,8(sp)
  81c244:	10001c26 	beq	r2,zero,81c2b8 <__register_exitproc+0x10c>
  81c248:	80c05217 	ldw	r3,328(r16)
  81c24c:	10000115 	stw	zero,4(r2)
  81c250:	02400044 	movi	r9,1
  81c254:	10c00015 	stw	r3,0(r2)
  81c258:	80805215 	stw	r2,328(r16)
  81c25c:	10006215 	stw	zero,392(r2)
  81c260:	10006315 	stw	zero,396(r2)
  81c264:	0007883a 	mov	r3,zero
  81c268:	883fdf26 	beq	r17,zero,81c1e8 <__alt_data_end+0xff81c1e8>
  81c26c:	18d1883a 	add	r8,r3,r3
  81c270:	4211883a 	add	r8,r8,r8
  81c274:	1211883a 	add	r8,r2,r8
  81c278:	41802215 	stw	r6,136(r8)
  81c27c:	01000044 	movi	r4,1
  81c280:	11806217 	ldw	r6,392(r2)
  81c284:	20c8983a 	sll	r4,r4,r3
  81c288:	310cb03a 	or	r6,r6,r4
  81c28c:	11806215 	stw	r6,392(r2)
  81c290:	41c04215 	stw	r7,264(r8)
  81c294:	01800084 	movi	r6,2
  81c298:	89bfd31e 	bne	r17,r6,81c1e8 <__alt_data_end+0xff81c1e8>
  81c29c:	11806317 	ldw	r6,396(r2)
  81c2a0:	3108b03a 	or	r4,r6,r4
  81c2a4:	11006315 	stw	r4,396(r2)
  81c2a8:	003fcf06 	br	81c1e8 <__alt_data_end+0xff81c1e8>
  81c2ac:	80805304 	addi	r2,r16,332
  81c2b0:	80805215 	stw	r2,328(r16)
  81c2b4:	003fc706 	br	81c1d4 <__alt_data_end+0xff81c1d4>
  81c2b8:	00bfffc4 	movi	r2,-1
  81c2bc:	003fd106 	br	81c204 <__alt_data_end+0xff81c204>

0081c2c0 <__call_exitprocs>:
  81c2c0:	008020b4 	movhi	r2,130
  81c2c4:	10bbce04 	addi	r2,r2,-4296
  81c2c8:	10800017 	ldw	r2,0(r2)
  81c2cc:	defff404 	addi	sp,sp,-48
  81c2d0:	dd800815 	stw	r22,32(sp)
  81c2d4:	d8800015 	stw	r2,0(sp)
  81c2d8:	10805204 	addi	r2,r2,328
  81c2dc:	dd000615 	stw	r20,24(sp)
  81c2e0:	dc800415 	stw	r18,16(sp)
  81c2e4:	dfc00b15 	stw	ra,44(sp)
  81c2e8:	df000a15 	stw	fp,40(sp)
  81c2ec:	ddc00915 	stw	r23,36(sp)
  81c2f0:	dd400715 	stw	r21,28(sp)
  81c2f4:	dcc00515 	stw	r19,20(sp)
  81c2f8:	dc400315 	stw	r17,12(sp)
  81c2fc:	dc000215 	stw	r16,8(sp)
  81c300:	2025883a 	mov	r18,r4
  81c304:	2829883a 	mov	r20,r5
  81c308:	d8800115 	stw	r2,4(sp)
  81c30c:	05bfffc4 	movi	r22,-1
  81c310:	d8800017 	ldw	r2,0(sp)
  81c314:	14c05217 	ldw	r19,328(r2)
  81c318:	98001d26 	beq	r19,zero,81c390 <__call_exitprocs+0xd0>
  81c31c:	dd400117 	ldw	r21,4(sp)
  81c320:	98800117 	ldw	r2,4(r19)
  81c324:	173fffc4 	addi	fp,r2,-1
  81c328:	e0000d16 	blt	fp,zero,81c360 <__call_exitprocs+0xa0>
  81c32c:	14000044 	addi	r16,r2,1
  81c330:	8421883a 	add	r16,r16,r16
  81c334:	8421883a 	add	r16,r16,r16
  81c338:	84402004 	addi	r17,r16,128
  81c33c:	9c63883a 	add	r17,r19,r17
  81c340:	9c21883a 	add	r16,r19,r16
  81c344:	a0001e26 	beq	r20,zero,81c3c0 <__call_exitprocs+0x100>
  81c348:	80804017 	ldw	r2,256(r16)
  81c34c:	15001c26 	beq	r2,r20,81c3c0 <__call_exitprocs+0x100>
  81c350:	e73fffc4 	addi	fp,fp,-1
  81c354:	843fff04 	addi	r16,r16,-4
  81c358:	8c7fff04 	addi	r17,r17,-4
  81c35c:	e5bff91e 	bne	fp,r22,81c344 <__alt_data_end+0xff81c344>
  81c360:	00800034 	movhi	r2,0
  81c364:	10800004 	addi	r2,r2,0
  81c368:	10000926 	beq	r2,zero,81c390 <__call_exitprocs+0xd0>
  81c36c:	98800117 	ldw	r2,4(r19)
  81c370:	1000311e 	bne	r2,zero,81c438 <__call_exitprocs+0x178>
  81c374:	98800017 	ldw	r2,0(r19)
  81c378:	10003426 	beq	r2,zero,81c44c <__call_exitprocs+0x18c>
  81c37c:	9809883a 	mov	r4,r19
  81c380:	a8800015 	stw	r2,0(r21)
  81c384:	00000000 	call	0 <__reset-0x800000>
  81c388:	acc00017 	ldw	r19,0(r21)
  81c38c:	983fe41e 	bne	r19,zero,81c320 <__alt_data_end+0xff81c320>
  81c390:	dfc00b17 	ldw	ra,44(sp)
  81c394:	df000a17 	ldw	fp,40(sp)
  81c398:	ddc00917 	ldw	r23,36(sp)
  81c39c:	dd800817 	ldw	r22,32(sp)
  81c3a0:	dd400717 	ldw	r21,28(sp)
  81c3a4:	dd000617 	ldw	r20,24(sp)
  81c3a8:	dcc00517 	ldw	r19,20(sp)
  81c3ac:	dc800417 	ldw	r18,16(sp)
  81c3b0:	dc400317 	ldw	r17,12(sp)
  81c3b4:	dc000217 	ldw	r16,8(sp)
  81c3b8:	dec00c04 	addi	sp,sp,48
  81c3bc:	f800283a 	ret
  81c3c0:	98800117 	ldw	r2,4(r19)
  81c3c4:	80c00017 	ldw	r3,0(r16)
  81c3c8:	10bfffc4 	addi	r2,r2,-1
  81c3cc:	17001526 	beq	r2,fp,81c424 <__call_exitprocs+0x164>
  81c3d0:	80000015 	stw	zero,0(r16)
  81c3d4:	183fde26 	beq	r3,zero,81c350 <__alt_data_end+0xff81c350>
  81c3d8:	00800044 	movi	r2,1
  81c3dc:	1708983a 	sll	r4,r2,fp
  81c3e0:	98806217 	ldw	r2,392(r19)
  81c3e4:	9dc00117 	ldw	r23,4(r19)
  81c3e8:	2084703a 	and	r2,r4,r2
  81c3ec:	1000061e 	bne	r2,zero,81c408 <__call_exitprocs+0x148>
  81c3f0:	183ee83a 	callr	r3
  81c3f4:	98800117 	ldw	r2,4(r19)
  81c3f8:	15ffc51e 	bne	r2,r23,81c310 <__alt_data_end+0xff81c310>
  81c3fc:	a8800017 	ldw	r2,0(r21)
  81c400:	14ffd326 	beq	r2,r19,81c350 <__alt_data_end+0xff81c350>
  81c404:	003fc206 	br	81c310 <__alt_data_end+0xff81c310>
  81c408:	98806317 	ldw	r2,396(r19)
  81c40c:	2084703a 	and	r2,r4,r2
  81c410:	1000061e 	bne	r2,zero,81c42c <__call_exitprocs+0x16c>
  81c414:	89400017 	ldw	r5,0(r17)
  81c418:	9009883a 	mov	r4,r18
  81c41c:	183ee83a 	callr	r3
  81c420:	003ff406 	br	81c3f4 <__alt_data_end+0xff81c3f4>
  81c424:	9f000115 	stw	fp,4(r19)
  81c428:	003fea06 	br	81c3d4 <__alt_data_end+0xff81c3d4>
  81c42c:	89000017 	ldw	r4,0(r17)
  81c430:	183ee83a 	callr	r3
  81c434:	003fef06 	br	81c3f4 <__alt_data_end+0xff81c3f4>
  81c438:	98800017 	ldw	r2,0(r19)
  81c43c:	982b883a 	mov	r21,r19
  81c440:	1027883a 	mov	r19,r2
  81c444:	983fb61e 	bne	r19,zero,81c320 <__alt_data_end+0xff81c320>
  81c448:	003fd106 	br	81c390 <__alt_data_end+0xff81c390>
  81c44c:	0005883a 	mov	r2,zero
  81c450:	003ffa06 	br	81c43c <__alt_data_end+0xff81c43c>

0081c454 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81c454:	defffd04 	addi	sp,sp,-12
  81c458:	df000215 	stw	fp,8(sp)
  81c45c:	df000204 	addi	fp,sp,8
  81c460:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81c464:	0001883a 	nop
  81c468:	e0bfff17 	ldw	r2,-4(fp)
  81c46c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  81c470:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81c474:	10000226 	beq	r2,zero,81c480 <_exit+0x2c>
    ALT_SIM_FAIL();
  81c478:	002af070 	cmpltui	zero,zero,43969
  81c47c:	00000106 	br	81c484 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  81c480:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81c484:	003fff06 	br	81c484 <__alt_data_end+0xff81c484>
